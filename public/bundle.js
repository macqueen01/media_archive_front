var app = (function () {
    'use strict';

    function noop() { }
    const identity = x => x;
    function assign(tar, src) {
        // @ts-ignore
        for (const k in src)
            tar[k] = src[k];
        return tar;
    }
    function is_promise(value) {
        return value && typeof value === 'object' && typeof value.then === 'function';
    }
    function add_location(element, file, line, column, char) {
        element.__svelte_meta = {
            loc: { file, line, column, char }
        };
    }
    function run(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run);
    }
    function is_function(thing) {
        return typeof thing === 'function';
    }
    function safe_not_equal(a, b) {
        return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
    }
    let src_url_equal_anchor;
    function src_url_equal(element_src, url) {
        if (!src_url_equal_anchor) {
            src_url_equal_anchor = document.createElement('a');
        }
        src_url_equal_anchor.href = url;
        return element_src === src_url_equal_anchor.href;
    }
    function is_empty(obj) {
        return Object.keys(obj).length === 0;
    }
    function create_slot(definition, ctx, $$scope, fn) {
        if (definition) {
            const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
            return definition[0](slot_ctx);
        }
    }
    function get_slot_context(definition, ctx, $$scope, fn) {
        return definition[1] && fn
            ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))
            : $$scope.ctx;
    }
    function get_slot_changes(definition, $$scope, dirty, fn) {
        if (definition[2] && fn) {
            const lets = definition[2](fn(dirty));
            if ($$scope.dirty === undefined) {
                return lets;
            }
            if (typeof lets === 'object') {
                const merged = [];
                const len = Math.max($$scope.dirty.length, lets.length);
                for (let i = 0; i < len; i += 1) {
                    merged[i] = $$scope.dirty[i] | lets[i];
                }
                return merged;
            }
            return $$scope.dirty | lets;
        }
        return $$scope.dirty;
    }
    function update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {
        if (slot_changes) {
            const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
            slot.p(slot_context, slot_changes);
        }
    }
    function get_all_dirty_from_scope($$scope) {
        if ($$scope.ctx.length > 32) {
            const dirty = [];
            const length = $$scope.ctx.length / 32;
            for (let i = 0; i < length; i++) {
                dirty[i] = -1;
            }
            return dirty;
        }
        return -1;
    }
    function null_to_empty(value) {
        return value == null ? '' : value;
    }

    const is_client = typeof window !== 'undefined';
    let now = is_client
        ? () => window.performance.now()
        : () => Date.now();
    let raf = is_client ? cb => requestAnimationFrame(cb) : noop;

    const tasks = new Set();
    function run_tasks(now) {
        tasks.forEach(task => {
            if (!task.c(now)) {
                tasks.delete(task);
                task.f();
            }
        });
        if (tasks.size !== 0)
            raf(run_tasks);
    }
    /**
     * Creates a new task that runs on each raf frame
     * until it returns a falsy value or is aborted
     */
    function loop(callback) {
        let task;
        if (tasks.size === 0)
            raf(run_tasks);
        return {
            promise: new Promise(fulfill => {
                tasks.add(task = { c: callback, f: fulfill });
            }),
            abort() {
                tasks.delete(task);
            }
        };
    }
    function append(target, node) {
        target.appendChild(node);
    }
    function get_root_for_style(node) {
        if (!node)
            return document;
        const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;
        if (root && root.host) {
            return root;
        }
        return node.ownerDocument;
    }
    function append_empty_stylesheet(node) {
        const style_element = element('style');
        append_stylesheet(get_root_for_style(node), style_element);
        return style_element.sheet;
    }
    function append_stylesheet(node, style) {
        append(node.head || node, style);
        return style.sheet;
    }
    function insert(target, node, anchor) {
        target.insertBefore(node, anchor || null);
    }
    function detach(node) {
        node.parentNode.removeChild(node);
    }
    function destroy_each(iterations, detaching) {
        for (let i = 0; i < iterations.length; i += 1) {
            if (iterations[i])
                iterations[i].d(detaching);
        }
    }
    function element(name) {
        return document.createElement(name);
    }
    function svg_element(name) {
        return document.createElementNS('http://www.w3.org/2000/svg', name);
    }
    function text(data) {
        return document.createTextNode(data);
    }
    function space() {
        return text(' ');
    }
    function empty() {
        return text('');
    }
    function listen(node, event, handler, options) {
        node.addEventListener(event, handler, options);
        return () => node.removeEventListener(event, handler, options);
    }
    function prevent_default(fn) {
        return function (event) {
            event.preventDefault();
            // @ts-ignore
            return fn.call(this, event);
        };
    }
    function attr(node, attribute, value) {
        if (value == null)
            node.removeAttribute(attribute);
        else if (node.getAttribute(attribute) !== value)
            node.setAttribute(attribute, value);
    }
    function children(element) {
        return Array.from(element.childNodes);
    }
    function set_input_value(input, value) {
        input.value = value == null ? '' : value;
    }
    function set_style(node, key, value, important) {
        if (value === null) {
            node.style.removeProperty(key);
        }
        else {
            node.style.setProperty(key, value, important ? 'important' : '');
        }
    }
    function select_option(select, value) {
        for (let i = 0; i < select.options.length; i += 1) {
            const option = select.options[i];
            if (option.__value === value) {
                option.selected = true;
                return;
            }
        }
        select.selectedIndex = -1; // no option should be selected
    }
    function select_value(select) {
        const selected_option = select.querySelector(':checked') || select.options[0];
        return selected_option && selected_option.__value;
    }
    function toggle_class(element, name, toggle) {
        element.classList[toggle ? 'add' : 'remove'](name);
    }
    function custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {
        const e = document.createEvent('CustomEvent');
        e.initCustomEvent(type, bubbles, cancelable, detail);
        return e;
    }

    // we need to store the information for multiple documents because a Svelte application could also contain iframes
    // https://github.com/sveltejs/svelte/issues/3624
    const managed_styles = new Map();
    let active = 0;
    // https://github.com/darkskyapp/string-hash/blob/master/index.js
    function hash(str) {
        let hash = 5381;
        let i = str.length;
        while (i--)
            hash = ((hash << 5) - hash) ^ str.charCodeAt(i);
        return hash >>> 0;
    }
    function create_style_information(doc, node) {
        const info = { stylesheet: append_empty_stylesheet(node), rules: {} };
        managed_styles.set(doc, info);
        return info;
    }
    function create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {
        const step = 16.666 / duration;
        let keyframes = '{\n';
        for (let p = 0; p <= 1; p += step) {
            const t = a + (b - a) * ease(p);
            keyframes += p * 100 + `%{${fn(t, 1 - t)}}\n`;
        }
        const rule = keyframes + `100% {${fn(b, 1 - b)}}\n}`;
        const name = `__svelte_${hash(rule)}_${uid}`;
        const doc = get_root_for_style(node);
        const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);
        if (!rules[name]) {
            rules[name] = true;
            stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);
        }
        const animation = node.style.animation || '';
        node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;
        active += 1;
        return name;
    }
    function delete_rule(node, name) {
        const previous = (node.style.animation || '').split(', ');
        const next = previous.filter(name
            ? anim => anim.indexOf(name) < 0 // remove specific animation
            : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations
        );
        const deleted = previous.length - next.length;
        if (deleted) {
            node.style.animation = next.join(', ');
            active -= deleted;
            if (!active)
                clear_rules();
        }
    }
    function clear_rules() {
        raf(() => {
            if (active)
                return;
            managed_styles.forEach(info => {
                const { ownerNode } = info.stylesheet;
                // there is no ownerNode if it runs on jsdom.
                if (ownerNode)
                    detach(ownerNode);
            });
            managed_styles.clear();
        });
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }
    function get_current_component() {
        if (!current_component)
            throw new Error('Function called outside component initialization');
        return current_component;
    }
    function onMount(fn) {
        get_current_component().$$.on_mount.push(fn);
    }
    function onDestroy(fn) {
        get_current_component().$$.on_destroy.push(fn);
    }
    function createEventDispatcher() {
        const component = get_current_component();
        return (type, detail, { cancelable = false } = {}) => {
            const callbacks = component.$$.callbacks[type];
            if (callbacks) {
                // TODO are there situations where events could be dispatched
                // in a server (non-DOM) environment?
                const event = custom_event(type, detail, { cancelable });
                callbacks.slice().forEach(fn => {
                    fn.call(component, event);
                });
                return !event.defaultPrevented;
            }
            return true;
        };
    }
    function setContext(key, context) {
        get_current_component().$$.context.set(key, context);
        return context;
    }
    function getContext(key) {
        return get_current_component().$$.context.get(key);
    }
    function hasContext(key) {
        return get_current_component().$$.context.has(key);
    }

    const dirty_components = [];
    const binding_callbacks = [];
    const render_callbacks = [];
    const flush_callbacks = [];
    const resolved_promise = Promise.resolve();
    let update_scheduled = false;
    function schedule_update() {
        if (!update_scheduled) {
            update_scheduled = true;
            resolved_promise.then(flush);
        }
    }
    function tick() {
        schedule_update();
        return resolved_promise;
    }
    function add_render_callback(fn) {
        render_callbacks.push(fn);
    }
    // flush() calls callbacks in this order:
    // 1. All beforeUpdate callbacks, in order: parents before children
    // 2. All bind:this callbacks, in reverse order: children before parents.
    // 3. All afterUpdate callbacks, in order: parents before children. EXCEPT
    //    for afterUpdates called during the initial onMount, which are called in
    //    reverse order: children before parents.
    // Since callbacks might update component values, which could trigger another
    // call to flush(), the following steps guard against this:
    // 1. During beforeUpdate, any updated components will be added to the
    //    dirty_components array and will cause a reentrant call to flush(). Because
    //    the flush index is kept outside the function, the reentrant call will pick
    //    up where the earlier call left off and go through all dirty components. The
    //    current_component value is saved and restored so that the reentrant call will
    //    not interfere with the "parent" flush() call.
    // 2. bind:this callbacks cannot trigger new flush() calls.
    // 3. During afterUpdate, any updated components will NOT have their afterUpdate
    //    callback called a second time; the seen_callbacks set, outside the flush()
    //    function, guarantees this behavior.
    const seen_callbacks = new Set();
    let flushidx = 0; // Do *not* move this inside the flush() function
    function flush() {
        const saved_component = current_component;
        do {
            // first, call beforeUpdate functions
            // and update components
            while (flushidx < dirty_components.length) {
                const component = dirty_components[flushidx];
                flushidx++;
                set_current_component(component);
                update(component.$$);
            }
            set_current_component(null);
            dirty_components.length = 0;
            flushidx = 0;
            while (binding_callbacks.length)
                binding_callbacks.pop()();
            // then, once components are updated, call
            // afterUpdate functions. This may cause
            // subsequent updates...
            for (let i = 0; i < render_callbacks.length; i += 1) {
                const callback = render_callbacks[i];
                if (!seen_callbacks.has(callback)) {
                    // ...so guard against infinite loops
                    seen_callbacks.add(callback);
                    callback();
                }
            }
            render_callbacks.length = 0;
        } while (dirty_components.length);
        while (flush_callbacks.length) {
            flush_callbacks.pop()();
        }
        update_scheduled = false;
        seen_callbacks.clear();
        set_current_component(saved_component);
    }
    function update($$) {
        if ($$.fragment !== null) {
            $$.update();
            run_all($$.before_update);
            const dirty = $$.dirty;
            $$.dirty = [-1];
            $$.fragment && $$.fragment.p($$.ctx, dirty);
            $$.after_update.forEach(add_render_callback);
        }
    }

    let promise;
    function wait() {
        if (!promise) {
            promise = Promise.resolve();
            promise.then(() => {
                promise = null;
            });
        }
        return promise;
    }
    function dispatch(node, direction, kind) {
        node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));
    }
    const outroing = new Set();
    let outros;
    function group_outros() {
        outros = {
            r: 0,
            c: [],
            p: outros // parent group
        };
    }
    function check_outros() {
        if (!outros.r) {
            run_all(outros.c);
        }
        outros = outros.p;
    }
    function transition_in(block, local) {
        if (block && block.i) {
            outroing.delete(block);
            block.i(local);
        }
    }
    function transition_out(block, local, detach, callback) {
        if (block && block.o) {
            if (outroing.has(block))
                return;
            outroing.add(block);
            outros.c.push(() => {
                outroing.delete(block);
                if (callback) {
                    if (detach)
                        block.d(1);
                    callback();
                }
            });
            block.o(local);
        }
        else if (callback) {
            callback();
        }
    }
    const null_transition = { duration: 0 };
    function create_in_transition(node, fn, params) {
        let config = fn(node, params);
        let running = false;
        let animation_name;
        let task;
        let uid = 0;
        function cleanup() {
            if (animation_name)
                delete_rule(node, animation_name);
        }
        function go() {
            const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;
            if (css)
                animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);
            tick(0, 1);
            const start_time = now() + delay;
            const end_time = start_time + duration;
            if (task)
                task.abort();
            running = true;
            add_render_callback(() => dispatch(node, true, 'start'));
            task = loop(now => {
                if (running) {
                    if (now >= end_time) {
                        tick(1, 0);
                        dispatch(node, true, 'end');
                        cleanup();
                        return running = false;
                    }
                    if (now >= start_time) {
                        const t = easing((now - start_time) / duration);
                        tick(t, 1 - t);
                    }
                }
                return running;
            });
        }
        let started = false;
        return {
            start() {
                if (started)
                    return;
                started = true;
                delete_rule(node);
                if (is_function(config)) {
                    config = config();
                    wait().then(go);
                }
                else {
                    go();
                }
            },
            invalidate() {
                started = false;
            },
            end() {
                if (running) {
                    cleanup();
                    running = false;
                }
            }
        };
    }
    function create_out_transition(node, fn, params) {
        let config = fn(node, params);
        let running = true;
        let animation_name;
        const group = outros;
        group.r += 1;
        function go() {
            const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;
            if (css)
                animation_name = create_rule(node, 1, 0, duration, delay, easing, css);
            const start_time = now() + delay;
            const end_time = start_time + duration;
            add_render_callback(() => dispatch(node, false, 'start'));
            loop(now => {
                if (running) {
                    if (now >= end_time) {
                        tick(0, 1);
                        dispatch(node, false, 'end');
                        if (!--group.r) {
                            // this will result in `end()` being called,
                            // so we don't need to clean up here
                            run_all(group.c);
                        }
                        return false;
                    }
                    if (now >= start_time) {
                        const t = easing((now - start_time) / duration);
                        tick(1 - t, t);
                    }
                }
                return running;
            });
        }
        if (is_function(config)) {
            wait().then(() => {
                // @ts-ignore
                config = config();
                go();
            });
        }
        else {
            go();
        }
        return {
            end(reset) {
                if (reset && config.tick) {
                    config.tick(1, 0);
                }
                if (running) {
                    if (animation_name)
                        delete_rule(node, animation_name);
                    running = false;
                }
            }
        };
    }
    function create_bidirectional_transition(node, fn, params, intro) {
        let config = fn(node, params);
        let t = intro ? 0 : 1;
        let running_program = null;
        let pending_program = null;
        let animation_name = null;
        function clear_animation() {
            if (animation_name)
                delete_rule(node, animation_name);
        }
        function init(program, duration) {
            const d = (program.b - t);
            duration *= Math.abs(d);
            return {
                a: t,
                b: program.b,
                d,
                duration,
                start: program.start,
                end: program.start + duration,
                group: program.group
            };
        }
        function go(b) {
            const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;
            const program = {
                start: now() + delay,
                b
            };
            if (!b) {
                // @ts-ignore todo: improve typings
                program.group = outros;
                outros.r += 1;
            }
            if (running_program || pending_program) {
                pending_program = program;
            }
            else {
                // if this is an intro, and there's a delay, we need to do
                // an initial tick and/or apply CSS animation immediately
                if (css) {
                    clear_animation();
                    animation_name = create_rule(node, t, b, duration, delay, easing, css);
                }
                if (b)
                    tick(0, 1);
                running_program = init(program, duration);
                add_render_callback(() => dispatch(node, b, 'start'));
                loop(now => {
                    if (pending_program && now > pending_program.start) {
                        running_program = init(pending_program, duration);
                        pending_program = null;
                        dispatch(node, running_program.b, 'start');
                        if (css) {
                            clear_animation();
                            animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);
                        }
                    }
                    if (running_program) {
                        if (now >= running_program.end) {
                            tick(t = running_program.b, 1 - t);
                            dispatch(node, running_program.b, 'end');
                            if (!pending_program) {
                                // we're done
                                if (running_program.b) {
                                    // intro — we can tidy up immediately
                                    clear_animation();
                                }
                                else {
                                    // outro — needs to be coordinated
                                    if (!--running_program.group.r)
                                        run_all(running_program.group.c);
                                }
                            }
                            running_program = null;
                        }
                        else if (now >= running_program.start) {
                            const p = now - running_program.start;
                            t = running_program.a + running_program.d * easing(p / running_program.duration);
                            tick(t, 1 - t);
                        }
                    }
                    return !!(running_program || pending_program);
                });
            }
        }
        return {
            run(b) {
                if (is_function(config)) {
                    wait().then(() => {
                        // @ts-ignore
                        config = config();
                        go(b);
                    });
                }
                else {
                    go(b);
                }
            },
            end() {
                clear_animation();
                running_program = pending_program = null;
            }
        };
    }

    function handle_promise(promise, info) {
        const token = info.token = {};
        function update(type, index, key, value) {
            if (info.token !== token)
                return;
            info.resolved = value;
            let child_ctx = info.ctx;
            if (key !== undefined) {
                child_ctx = child_ctx.slice();
                child_ctx[key] = value;
            }
            const block = type && (info.current = type)(child_ctx);
            let needs_flush = false;
            if (info.block) {
                if (info.blocks) {
                    info.blocks.forEach((block, i) => {
                        if (i !== index && block) {
                            group_outros();
                            transition_out(block, 1, 1, () => {
                                if (info.blocks[i] === block) {
                                    info.blocks[i] = null;
                                }
                            });
                            check_outros();
                        }
                    });
                }
                else {
                    info.block.d(1);
                }
                block.c();
                transition_in(block, 1);
                block.m(info.mount(), info.anchor);
                needs_flush = true;
            }
            info.block = block;
            if (info.blocks)
                info.blocks[index] = block;
            if (needs_flush) {
                flush();
            }
        }
        if (is_promise(promise)) {
            const current_component = get_current_component();
            promise.then(value => {
                set_current_component(current_component);
                update(info.then, 1, info.value, value);
                set_current_component(null);
            }, error => {
                set_current_component(current_component);
                update(info.catch, 2, info.error, error);
                set_current_component(null);
                if (!info.hasCatch) {
                    throw error;
                }
            });
            // if we previously had a then/catch block, destroy it
            if (info.current !== info.pending) {
                update(info.pending, 0);
                return true;
            }
        }
        else {
            if (info.current !== info.then) {
                update(info.then, 1, info.value, promise);
                return true;
            }
            info.resolved = promise;
        }
    }
    function update_await_block_branch(info, ctx, dirty) {
        const child_ctx = ctx.slice();
        const { resolved } = info;
        if (info.current === info.then) {
            child_ctx[info.value] = resolved;
        }
        if (info.current === info.catch) {
            child_ctx[info.error] = resolved;
        }
        info.block.p(child_ctx, dirty);
    }

    const globals = (typeof window !== 'undefined'
        ? window
        : typeof globalThis !== 'undefined'
            ? globalThis
            : global);
    function create_component(block) {
        block && block.c();
    }
    function mount_component(component, target, anchor, customElement) {
        const { fragment, on_mount, on_destroy, after_update } = component.$$;
        fragment && fragment.m(target, anchor);
        if (!customElement) {
            // onMount happens before the initial afterUpdate
            add_render_callback(() => {
                const new_on_destroy = on_mount.map(run).filter(is_function);
                if (on_destroy) {
                    on_destroy.push(...new_on_destroy);
                }
                else {
                    // Edge case - component was destroyed immediately,
                    // most likely as a result of a binding initialising
                    run_all(new_on_destroy);
                }
                component.$$.on_mount = [];
            });
        }
        after_update.forEach(add_render_callback);
    }
    function destroy_component(component, detaching) {
        const $$ = component.$$;
        if ($$.fragment !== null) {
            run_all($$.on_destroy);
            $$.fragment && $$.fragment.d(detaching);
            // TODO null out other refs, including component.$$ (but need to
            // preserve final state?)
            $$.on_destroy = $$.fragment = null;
            $$.ctx = [];
        }
    }
    function make_dirty(component, i) {
        if (component.$$.dirty[0] === -1) {
            dirty_components.push(component);
            schedule_update();
            component.$$.dirty.fill(0);
        }
        component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
    }
    function init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {
        const parent_component = current_component;
        set_current_component(component);
        const $$ = component.$$ = {
            fragment: null,
            ctx: null,
            // state
            props,
            update: noop,
            not_equal,
            bound: blank_object(),
            // lifecycle
            on_mount: [],
            on_destroy: [],
            on_disconnect: [],
            before_update: [],
            after_update: [],
            context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
            // everything else
            callbacks: blank_object(),
            dirty,
            skip_bound: false,
            root: options.target || parent_component.$$.root
        };
        append_styles && append_styles($$.root);
        let ready = false;
        $$.ctx = instance
            ? instance(component, options.props || {}, (i, ret, ...rest) => {
                const value = rest.length ? rest[0] : ret;
                if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                    if (!$$.skip_bound && $$.bound[i])
                        $$.bound[i](value);
                    if (ready)
                        make_dirty(component, i);
                }
                return ret;
            })
            : [];
        $$.update();
        ready = true;
        run_all($$.before_update);
        // `false` as a special case of no DOM component
        $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
        if (options.target) {
            if (options.hydrate) {
                const nodes = children(options.target);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.l(nodes);
                nodes.forEach(detach);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.c();
            }
            if (options.intro)
                transition_in(component.$$.fragment);
            mount_component(component, options.target, options.anchor, options.customElement);
            flush();
        }
        set_current_component(parent_component);
    }
    /**
     * Base class for Svelte components. Used when dev=false.
     */
    class SvelteComponent {
        $destroy() {
            destroy_component(this, 1);
            this.$destroy = noop;
        }
        $on(type, callback) {
            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
            callbacks.push(callback);
            return () => {
                const index = callbacks.indexOf(callback);
                if (index !== -1)
                    callbacks.splice(index, 1);
            };
        }
        $set($$props) {
            if (this.$$set && !is_empty($$props)) {
                this.$$.skip_bound = true;
                this.$$set($$props);
                this.$$.skip_bound = false;
            }
        }
    }

    function dispatch_dev(type, detail) {
        document.dispatchEvent(custom_event(type, Object.assign({ version: '3.50.1' }, detail), { bubbles: true }));
    }
    function append_dev(target, node) {
        dispatch_dev('SvelteDOMInsert', { target, node });
        append(target, node);
    }
    function insert_dev(target, node, anchor) {
        dispatch_dev('SvelteDOMInsert', { target, node, anchor });
        insert(target, node, anchor);
    }
    function detach_dev(node) {
        dispatch_dev('SvelteDOMRemove', { node });
        detach(node);
    }
    function listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {
        const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];
        if (has_prevent_default)
            modifiers.push('preventDefault');
        if (has_stop_propagation)
            modifiers.push('stopPropagation');
        dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });
        const dispose = listen(node, event, handler, options);
        return () => {
            dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });
            dispose();
        };
    }
    function attr_dev(node, attribute, value) {
        attr(node, attribute, value);
        if (value == null)
            dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });
        else
            dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });
    }
    function prop_dev(node, property, value) {
        node[property] = value;
        dispatch_dev('SvelteDOMSetProperty', { node, property, value });
    }
    function set_data_dev(text, data) {
        data = '' + data;
        if (text.wholeText === data)
            return;
        dispatch_dev('SvelteDOMSetData', { node: text, data });
        text.data = data;
    }
    function validate_each_argument(arg) {
        if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {
            let msg = '{#each} only iterates over array-like objects.';
            if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {
                msg += ' You can use a spread to convert this iterable into an array.';
            }
            throw new Error(msg);
        }
    }
    function validate_slots(name, slot, keys) {
        for (const slot_key of Object.keys(slot)) {
            if (!~keys.indexOf(slot_key)) {
                console.warn(`<${name}> received an unexpected slot "${slot_key}".`);
            }
        }
    }
    /**
     * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.
     */
    class SvelteComponentDev extends SvelteComponent {
        constructor(options) {
            if (!options || (!options.target && !options.$$inline)) {
                throw new Error("'target' is a required option");
            }
            super();
        }
        $destroy() {
            super.$destroy();
            this.$destroy = () => {
                console.warn('Component was already destroyed'); // eslint-disable-line no-console
            };
        }
        $capture_state() { }
        $inject_state() { }
    }

    const subscriber_queue = [];
    /**
     * Create a `Writable` store that allows both updating and reading by subscription.
     * @param {*=}value initial value
     * @param {StartStopNotifier=}start start and stop notifications for subscriptions
     */
    function writable(value, start = noop) {
        let stop;
        const subscribers = new Set();
        function set(new_value) {
            if (safe_not_equal(value, new_value)) {
                value = new_value;
                if (stop) { // store is ready
                    const run_queue = !subscriber_queue.length;
                    for (const subscriber of subscribers) {
                        subscriber[1]();
                        subscriber_queue.push(subscriber, value);
                    }
                    if (run_queue) {
                        for (let i = 0; i < subscriber_queue.length; i += 2) {
                            subscriber_queue[i][0](subscriber_queue[i + 1]);
                        }
                        subscriber_queue.length = 0;
                    }
                }
            }
        }
        function update(fn) {
            set(fn(value));
        }
        function subscribe(run, invalidate = noop) {
            const subscriber = [run, invalidate];
            subscribers.add(subscriber);
            if (subscribers.size === 1) {
                stop = start(set) || noop;
            }
            run(value);
            return () => {
                subscribers.delete(subscriber);
                if (subscribers.size === 0) {
                    stop();
                    stop = null;
                }
            };
        }
        return { set, update, subscribe };
    }

    function p(e,a=!1){return e=e.slice(e.startsWith("/#")?2:0,e.endsWith("/*")?-2:void 0),e.startsWith("/")||(e="/"+e),e==="/"&&(e=""),a&&!e.endsWith("/")&&(e+="/"),e}function d(e,a){e=p(e,!0),a=p(a,!0);let r=[],n={},t=!0,s=e.split("/").map(o=>o.startsWith(":")?(r.push(o.slice(1)),"([^\\/]+)"):o).join("\\/"),c=a.match(new RegExp(`^${s}$`));return c||(t=!1,c=a.match(new RegExp(`^${s}`))),c?(r.forEach((o,h)=>n[o]=c[h+1]),{exact:t,params:n,part:c[0].slice(0,-1)}):null}function x(e,a,r){if(r==="")return e;if(r[0]==="/")return r;let n=c=>c.split("/").filter(o=>o!==""),t=n(e),s=a?n(a):[];return "/"+s.map((c,o)=>t[o]).join("/")+"/"+r}function m(e,a,r,n){let t=[a,"data-"+a].reduce((s,c)=>{let o=e.getAttribute(c);return r&&e.removeAttribute(c),o===null?s:o},!1);return !n&&t===""?!0:t||n||!1}function S(e){let a=e.split("&").map(r=>r.split("=")).reduce((r,n)=>{let t=n[0];if(!t)return r;let s=n.length>1?n[n.length-1]:!0;return typeof s=="string"&&s.includes(",")&&(s=s.split(",")),r[t]===void 0?r[t]=[s]:r[t].push(s),r},{});return Object.entries(a).reduce((r,n)=>(r[n[0]]=n[1].length>1?n[1]:n[1][0],r),{})}function M(e){return Object.entries(e).map(([a,r])=>r?r===!0?a:`${a}=${Array.isArray(r)?r.join(","):r}`:null).filter(a=>a).join("&")}function w(e,a){return e?a+e:""}function k(e){throw new Error("[Tinro] "+e)}var i={HISTORY:1,HASH:2,MEMORY:3,OFF:4,run(e,a,r,n){return e===this.HISTORY?a&&a():e===this.HASH?r&&r():n&&n()},getDefault(){return !window||window.location.pathname==="srcdoc"?this.MEMORY:this.HISTORY}};var y,$,H,b="",l=E();function E(){let e=i.getDefault(),a,r=c=>window.onhashchange=window.onpopstate=y=null,n=c=>a&&a(R(e)),t=c=>{c&&(e=c),r(),e!==i.OFF&&i.run(e,o=>window.onpopstate=n,o=>window.onhashchange=n)&&n();},s=c=>{let o=Object.assign(R(e),c);return o.path+w(M(o.query),"?")+w(o.hash,"#")};return {mode:t,get:c=>R(e),go(c,o){_(e,c,o),n();},start(c){a=c,t();},stop(){a=null,t(i.OFF);},set(c){this.go(s(c),!c.path);},methods(){return j(this)},base:c=>b=c}}function _(e,a,r){!r&&($=H);let n=t=>history[`${r?"replace":"push"}State`]({},"",t);i.run(e,t=>n(b+a),t=>n(`#${a}`),t=>y=a);}function R(e){let a=window.location,r=i.run(e,t=>(b?a.pathname.replace(b,""):a.pathname)+a.search+a.hash,t=>String(a.hash.slice(1)||"/"),t=>y||"/"),n=r.match(/^([^?#]+)(?:\?([^#]+))?(?:\#(.+))?$/);return H=r,{url:r,from:$,path:n[1]||"",query:S(n[2]||""),hash:n[3]||""}}function j(e){let a=()=>e.get().query,r=c=>e.set({query:c}),n=c=>r(c(a())),t=()=>e.get().hash,s=c=>e.set({hash:c});return {hash:{get:t,set:s,clear:()=>s("")},query:{replace:r,clear:()=>r(""),get(c){return c?a()[c]:a()},set(c,o){n(h=>(h[c]=o,h));},delete(c){n(o=>(o[c]&&delete o[c],o));}}}}var f=T();function T(){let{subscribe:e}=writable(l.get(),a=>{l.start(a);let r=P(l.go);return ()=>{l.stop(),r();}});return {subscribe:e,goto:l.go,params:Q,meta:O,useHashNavigation:a=>l.mode(a?i.HASH:i.HISTORY),mode:{hash:()=>l.mode(i.HASH),history:()=>l.mode(i.HISTORY),memory:()=>l.mode(i.MEMORY)},base:l.base,location:l.methods()}}function P(e){let a=r=>{let n=r.target.closest("a[href]"),t=n&&m(n,"target",!1,"_self"),s=n&&m(n,"tinro-ignore"),c=r.ctrlKey||r.metaKey||r.altKey||r.shiftKey;if(t=="_self"&&!s&&!c&&n){let o=n.getAttribute("href").replace(/^\/#/,"");/^\/\/|^#|^[a-zA-Z]+:/.test(o)||(r.preventDefault(),e(o.startsWith("/")?o:n.href.replace(window.location.origin,"")));}};return addEventListener("click",a),()=>removeEventListener("click",a)}function Q(){return getContext("tinro").meta.params}var g="tinro",K=v({pattern:"",matched:!0});function q(e){let a=getContext(g)||K;(a.exact||a.fallback)&&k(`${e.fallback?"<Route fallback>":`<Route path="${e.path}">`}  can't be inside ${a.fallback?"<Route fallback>":`<Route path="${a.path||"/"}"> with exact path`}`);let r=e.fallback?"fallbacks":"childs",n=writable({}),t=v({fallback:e.fallback,parent:a,update(s){t.exact=!s.path.endsWith("/*"),t.pattern=p(`${t.parent.pattern||""}${s.path}`),t.redirect=s.redirect,t.firstmatch=s.firstmatch,t.breadcrumb=s.breadcrumb,t.match();},register:()=>(t.parent[r].add(t),async()=>{t.parent[r].delete(t),t.parent.activeChilds.delete(t),t.router.un&&t.router.un(),t.parent.match();}),show:()=>{e.onShow(),!t.fallback&&t.parent.activeChilds.add(t);},hide:()=>{e.onHide(),t.parent.activeChilds.delete(t);},match:async()=>{t.matched=!1;let{path:s,url:c,from:o,query:h}=t.router.location,u=d(t.pattern,s);if(!t.fallback&&u&&t.redirect&&(!t.exact||t.exact&&u.exact)){let A=x(s,t.parent.pattern,t.redirect);return f.goto(A,!0)}t.meta=u&&{from:o,url:c,query:h,match:u.part,pattern:t.pattern,breadcrumbs:t.parent.meta&&t.parent.meta.breadcrumbs.slice()||[],params:u.params,subscribe:n.subscribe},t.breadcrumb&&t.meta&&t.meta.breadcrumbs.push({name:t.breadcrumb,path:u.part}),n.set(t.meta),u&&!t.fallback&&(!t.exact||t.exact&&u.exact)&&(!t.parent.firstmatch||!t.parent.matched)?(e.onMeta(t.meta),t.parent.matched=!0,t.show()):t.hide(),u&&t.showFallbacks();}});return setContext(g,t),onMount(()=>t.register()),t}function O(){return hasContext(g)?getContext(g).meta:k("meta() function must be run inside any `<Route>` child component only")}function v(e){let a={router:{},exact:!1,pattern:null,meta:null,parent:null,fallback:!1,redirect:!1,firstmatch:!1,breadcrumb:null,matched:!1,childs:new Set,activeChilds:new Set,fallbacks:new Set,async showFallbacks(){if(!this.fallback&&(await tick(),this.childs.size>0&&this.activeChilds.size==0||this.childs.size==0&&this.fallbacks.size>0)){let r=this;for(;r.fallbacks.size==0;)if(r=r.parent,!r)return;r&&r.fallbacks.forEach(n=>{if(n.redirect){let t=x("/",n.parent.pattern,n.redirect);f.goto(t,!0);}else n.show();});}},start(){this.router.un||(this.router.un=f.subscribe(r=>{this.router.location=r,this.pattern!==null&&this.match();}));},match(){this.showFallbacks();}};return Object.assign(a,e),a.start(),a}

    /* node_modules/tinro/cmp/Route.svelte generated by Svelte v3.50.1 */

    const get_default_slot_changes = dirty => ({
    	params: dirty & /*params*/ 2,
    	meta: dirty & /*meta*/ 4
    });

    const get_default_slot_context = ctx => ({
    	params: /*params*/ ctx[1],
    	meta: /*meta*/ ctx[2]
    });

    // (33:0) {#if showContent}
    function create_if_block(ctx) {
    	let current;
    	const default_slot_template = /*#slots*/ ctx[9].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[8], get_default_slot_context);

    	const block = {
    		c: function create() {
    			if (default_slot) default_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope, params, meta*/ 262)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[8],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[8])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[8], dirty, get_default_slot_changes),
    						get_default_slot_context
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block.name,
    		type: "if",
    		source: "(33:0) {#if showContent}",
    		ctx
    	});

    	return block;
    }

    function create_fragment(ctx) {
    	let if_block_anchor;
    	let current;
    	let if_block = /*showContent*/ ctx[0] && create_if_block(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*showContent*/ ctx[0]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*showContent*/ 1) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Route', slots, ['default']);
    	let { path = '/*' } = $$props;
    	let { fallback = false } = $$props;
    	let { redirect = false } = $$props;
    	let { firstmatch = false } = $$props;
    	let { breadcrumb = null } = $$props;
    	let showContent = false;
    	let params = {}; /* DEPRECATED */
    	let meta = {};

    	const route = q({
    		fallback,
    		onShow() {
    			$$invalidate(0, showContent = true);
    		},
    		onHide() {
    			$$invalidate(0, showContent = false);
    		},
    		onMeta(newmeta) {
    			$$invalidate(2, meta = newmeta);
    			$$invalidate(1, params = meta.params); /* DEPRECATED */
    		}
    	});

    	const writable_props = ['path', 'fallback', 'redirect', 'firstmatch', 'breadcrumb'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Route> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('path' in $$props) $$invalidate(3, path = $$props.path);
    		if ('fallback' in $$props) $$invalidate(4, fallback = $$props.fallback);
    		if ('redirect' in $$props) $$invalidate(5, redirect = $$props.redirect);
    		if ('firstmatch' in $$props) $$invalidate(6, firstmatch = $$props.firstmatch);
    		if ('breadcrumb' in $$props) $$invalidate(7, breadcrumb = $$props.breadcrumb);
    		if ('$$scope' in $$props) $$invalidate(8, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		createRouteObject: q,
    		path,
    		fallback,
    		redirect,
    		firstmatch,
    		breadcrumb,
    		showContent,
    		params,
    		meta,
    		route
    	});

    	$$self.$inject_state = $$props => {
    		if ('path' in $$props) $$invalidate(3, path = $$props.path);
    		if ('fallback' in $$props) $$invalidate(4, fallback = $$props.fallback);
    		if ('redirect' in $$props) $$invalidate(5, redirect = $$props.redirect);
    		if ('firstmatch' in $$props) $$invalidate(6, firstmatch = $$props.firstmatch);
    		if ('breadcrumb' in $$props) $$invalidate(7, breadcrumb = $$props.breadcrumb);
    		if ('showContent' in $$props) $$invalidate(0, showContent = $$props.showContent);
    		if ('params' in $$props) $$invalidate(1, params = $$props.params);
    		if ('meta' in $$props) $$invalidate(2, meta = $$props.meta);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*path, redirect, firstmatch, breadcrumb*/ 232) {
    			 route.update({ path, redirect, firstmatch, breadcrumb });
    		}
    	};

    	return [
    		showContent,
    		params,
    		meta,
    		path,
    		fallback,
    		redirect,
    		firstmatch,
    		breadcrumb,
    		$$scope,
    		slots
    	];
    }

    class Route extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance, create_fragment, safe_not_equal, {
    			path: 3,
    			fallback: 4,
    			redirect: 5,
    			firstmatch: 6,
    			breadcrumb: 7
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Route",
    			options,
    			id: create_fragment.name
    		});
    	}

    	get path() {
    		throw new Error("<Route>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set path(value) {
    		throw new Error("<Route>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get fallback() {
    		throw new Error("<Route>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set fallback(value) {
    		throw new Error("<Route>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get redirect() {
    		throw new Error("<Route>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set redirect(value) {
    		throw new Error("<Route>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get firstmatch() {
    		throw new Error("<Route>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set firstmatch(value) {
    		throw new Error("<Route>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get breadcrumb() {
    		throw new Error("<Route>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set breadcrumb(value) {
    		throw new Error("<Route>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* components/user/UserNavbar.svelte generated by Svelte v3.50.1 */
    const file = "components/user/UserNavbar.svelte";

    function create_fragment$1(ctx) {
    	let div3;
    	let div2;
    	let div0;
    	let a0;
    	let img;
    	let img_src_value;
    	let t0;
    	let div1;
    	let a1;
    	let svg0;
    	let path0;
    	let t1;
    	let a2;
    	let svg1;
    	let path1;

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			div2 = element("div");
    			div0 = element("div");
    			a0 = element("a");
    			img = element("img");
    			t0 = space();
    			div1 = element("div");
    			a1 = element("a");
    			svg0 = svg_element("svg");
    			path0 = svg_element("path");
    			t1 = space();
    			a2 = element("a");
    			svg1 = svg_element("svg");
    			path1 = svg_element("path");
    			if (!src_url_equal(img.src, img_src_value = "/public/nama_logo.png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "navy");
    			attr_dev(img, "height", "60");
    			add_location(img, file, 78, 16, 1485);
    			attr_dev(a0, "href", "/");
    			add_location(a0, file, 77, 12, 1455);
    			attr_dev(div0, "class", "logo-wrap svelte-1tr0jot");
    			add_location(div0, file, 76, 8, 1418);
    			attr_dev(path0, "stroke-linecap", "round");
    			attr_dev(path0, "stroke-linejoin", "round");
    			attr_dev(path0, "d", "M15.75 6a3.75 3.75 0 11-7.5 0 3.75 3.75 0 017.5 0zM4.501 20.118a7.5 7.5 0 0114.998 0A17.933 17.933 0 0112 21.75c-2.676 0-5.216-.584-7.499-1.632z");
    			add_location(path0, file, 84, 20, 1838);
    			attr_dev(svg0, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg0, "fill", "none");
    			attr_dev(svg0, "viewBox", "0 0 24 24");
    			attr_dev(svg0, "stroke-width", "1.5");
    			attr_dev(svg0, "stroke", "#15133C");
    			attr_dev(svg0, "width", "18");
    			attr_dev(svg0, "height", "18");
    			add_location(svg0, file, 83, 16, 1685);
    			attr_dev(a1, "class", "menu-select svelte-1tr0jot");
    			attr_dev(a1, "href", "/user/accounts");
    			add_location(a1, file, 82, 12, 1622);
    			attr_dev(path1, "stroke-linecap", "round");
    			attr_dev(path1, "stroke-linejoin", "round");
    			attr_dev(path1, "d", "M14.857 17.082a23.848 23.848 0 005.454-1.31A8.967 8.967 0 0118 9.75v-.7V9A6 6 0 006 9v.75a8.967 8.967 0 01-2.312 6.022c1.733.64 3.56 1.085 5.455 1.31m5.714 0a24.255 24.255 0 01-5.714 0m5.714 0a3 3 0 11-5.714 0");
    			add_location(path1, file, 89, 20, 2313);
    			attr_dev(svg1, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg1, "fill", "none");
    			attr_dev(svg1, "viewBox", "0 0 24 24");
    			attr_dev(svg1, "stroke-width", "1.5");
    			attr_dev(svg1, "stroke", "#15133C");
    			attr_dev(svg1, "width", "18");
    			attr_dev(svg1, "height", "18");
    			add_location(svg1, file, 88, 16, 2160);
    			attr_dev(a2, "class", "menu-select svelte-1tr0jot");
    			attr_dev(a2, "href", "/user/notices");
    			add_location(a2, file, 87, 12, 2098);
    			attr_dev(div1, "class", "menu-wrap svelte-1tr0jot");
    			add_location(div1, file, 81, 8, 1585);
    			attr_dev(div2, "class", "navbar svelte-1tr0jot");
    			add_location(div2, file, 75, 4, 1388);
    			attr_dev(div3, "class", "navbar-wrap svelte-1tr0jot");
    			add_location(div3, file, 74, 0, 1357);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div2);
    			append_dev(div2, div0);
    			append_dev(div0, a0);
    			append_dev(a0, img);
    			append_dev(div2, t0);
    			append_dev(div2, div1);
    			append_dev(div1, a1);
    			append_dev(a1, svg0);
    			append_dev(svg0, path0);
    			append_dev(div1, t1);
    			append_dev(div1, a2);
    			append_dev(a2, svg1);
    			append_dev(svg1, path1);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('UserNavbar', slots, []);
    	let hover = null;

    	function overHandle(item) {
    		hover = item;
    	}

    	function outHandle() {
    		if (hover) {
    			hover = null;
    		}
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<UserNavbar> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ Route, hover, overHandle, outHandle });

    	$$self.$inject_state = $$props => {
    		if ('hover' in $$props) hover = $$props.hover;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [];
    }

    class UserNavbar extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "UserNavbar",
    			options,
    			id: create_fragment$1.name
    		});
    	}
    }

    function cubicInOut(t) {
        return t < 0.5 ? 4.0 * t * t * t : 0.5 * Math.pow(2.0 * t - 2.0, 3.0) + 1.0;
    }
    function cubicOut(t) {
        const f = t - 1.0;
        return f * f * f + 1.0;
    }
    function quadIn(t) {
        return t * t;
    }
    function quintIn(t) {
        return t * t * t * t * t;
    }
    function quintOut(t) {
        return --t * t * t * t * t + 1;
    }

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function fade(node, { delay = 0, duration = 400, easing = identity } = {}) {
        const o = +getComputedStyle(node).opacity;
        return {
            delay,
            duration,
            easing,
            css: t => `opacity: ${t * o}`
        };
    }
    function fly(node, { delay = 0, duration = 400, easing = cubicOut, x = 0, y = 0, opacity = 0 } = {}) {
        const style = getComputedStyle(node);
        const target_opacity = +style.opacity;
        const transform = style.transform === 'none' ? '' : style.transform;
        const od = target_opacity * (1 - opacity);
        return {
            delay,
            duration,
            easing,
            css: (t, u) => `
			transform: ${transform} translate(${(1 - t) * x}px, ${(1 - t) * y}px);
			opacity: ${target_opacity - (od * u)}`
        };
    }
    function slide(node, { delay = 0, duration = 400, easing = cubicOut } = {}) {
        const style = getComputedStyle(node);
        const opacity = +style.opacity;
        const height = parseFloat(style.height);
        const padding_top = parseFloat(style.paddingTop);
        const padding_bottom = parseFloat(style.paddingBottom);
        const margin_top = parseFloat(style.marginTop);
        const margin_bottom = parseFloat(style.marginBottom);
        const border_top_width = parseFloat(style.borderTopWidth);
        const border_bottom_width = parseFloat(style.borderBottomWidth);
        return {
            delay,
            duration,
            easing,
            css: t => 'overflow: hidden;' +
                `opacity: ${Math.min(t * 20, 1) * opacity};` +
                `height: ${t * height}px;` +
                `padding-top: ${t * padding_top}px;` +
                `padding-bottom: ${t * padding_bottom}px;` +
                `margin-top: ${t * margin_top}px;` +
                `margin-bottom: ${t * margin_bottom}px;` +
                `border-top-width: ${t * border_top_width}px;` +
                `border-bottom-width: ${t * border_bottom_width}px;`
        };
    }
    function draw(node, { delay = 0, speed, duration, easing = cubicInOut } = {}) {
        let len = node.getTotalLength();
        const style = getComputedStyle(node);
        if (style.strokeLinecap !== 'butt') {
            len += parseInt(style.strokeWidth);
        }
        if (duration === undefined) {
            if (speed === undefined) {
                duration = 800;
            }
            else {
                duration = len / speed;
            }
        }
        else if (typeof duration === 'function') {
            duration = duration(len);
        }
        return {
            delay,
            duration,
            easing,
            css: (t, u) => `stroke-dasharray: ${t * len} ${u * len}`
        };
    }
    function crossfade(_a) {
        var { fallback } = _a, defaults = __rest(_a, ["fallback"]);
        const to_receive = new Map();
        const to_send = new Map();
        function crossfade(from, node, params) {
            const { delay = 0, duration = d => Math.sqrt(d) * 30, easing = cubicOut } = assign(assign({}, defaults), params);
            const to = node.getBoundingClientRect();
            const dx = from.left - to.left;
            const dy = from.top - to.top;
            const dw = from.width / to.width;
            const dh = from.height / to.height;
            const d = Math.sqrt(dx * dx + dy * dy);
            const style = getComputedStyle(node);
            const transform = style.transform === 'none' ? '' : style.transform;
            const opacity = +style.opacity;
            return {
                delay,
                duration: is_function(duration) ? duration(d) : duration,
                easing,
                css: (t, u) => `
				opacity: ${t * opacity};
				transform-origin: top left;
				transform: ${transform} translate(${u * dx}px,${u * dy}px) scale(${t + (1 - t) * dw}, ${t + (1 - t) * dh});
			`
            };
        }
        function transition(items, counterparts, intro) {
            return (node, params) => {
                items.set(params.key, {
                    rect: node.getBoundingClientRect()
                });
                return () => {
                    if (counterparts.has(params.key)) {
                        const { rect } = counterparts.get(params.key);
                        counterparts.delete(params.key);
                        return crossfade(rect, node, params);
                    }
                    // if the node is disappearing altogether
                    // (i.e. wasn't claimed by the other list)
                    // then we need to supply an outro
                    items.delete(params.key);
                    return fallback && fallback(node, params, intro);
                };
            };
        }
        return [
            transition(to_send, to_receive, false),
            transition(to_receive, to_send, true)
        ];
    }

    /* components/manager/ManageNavbar.svelte generated by Svelte v3.50.1 */
    const file$1 = "components/manager/ManageNavbar.svelte";

    function create_fragment$2(ctx) {
    	let div3;
    	let div2;
    	let div0;
    	let a0;
    	let img;
    	let img_src_value;
    	let t0;
    	let div1;
    	let a1;
    	let t1;
    	let a1_class_value;
    	let t2;
    	let a2;
    	let t3;
    	let a2_class_value;
    	let t4;
    	let a3;
    	let t5;
    	let a3_class_value;
    	let div2_transition;
    	let current;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			div2 = element("div");
    			div0 = element("div");
    			a0 = element("a");
    			img = element("img");
    			t0 = space();
    			div1 = element("div");
    			a1 = element("a");
    			t1 = text("기록물 관리");
    			t2 = space();
    			a2 = element("a");
    			t3 = text("헬프데스크");
    			t4 = space();
    			a3 = element("a");
    			t5 = text("회원관리");
    			if (!src_url_equal(img.src, img_src_value = "/public/navy-logo.JPG")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "navy");
    			attr_dev(img, "height", "40");
    			add_location(img, file$1, 104, 16, 2102);
    			attr_dev(a0, "href", "/");
    			add_location(a0, file$1, 103, 12, 2073);
    			attr_dev(div0, "class", "logo-wrap svelte-qjqqwz");
    			add_location(div0, file$1, 102, 8, 2037);

    			attr_dev(a1, "class", a1_class_value = "" + (null_to_empty(/*hover*/ ctx[0] == 2
    			? 'menu-select-hover'
    			: 'menu-select') + " svelte-qjqqwz"));

    			attr_dev(a1, "href", "/manage/cases");
    			add_location(a1, file$1, 108, 12, 2235);

    			attr_dev(a2, "class", a2_class_value = "" + (null_to_empty(/*hover*/ ctx[0] == 3
    			? 'menu-select-hover'
    			: 'menu-select') + " svelte-qjqqwz"));

    			attr_dev(a2, "href", "/manage/help");
    			add_location(a2, file$1, 111, 12, 2432);

    			attr_dev(a3, "class", a3_class_value = "" + (null_to_empty(/*hover*/ ctx[0] == 5
    			? 'menu-select-hover'
    			: 'menu-select') + " svelte-qjqqwz"));

    			attr_dev(a3, "href", "/manage/accounts");
    			add_location(a3, file$1, 114, 12, 2627);
    			attr_dev(div1, "class", "menu-wrap svelte-qjqqwz");
    			add_location(div1, file$1, 107, 8, 2199);
    			attr_dev(div2, "class", "navbar svelte-qjqqwz");
    			add_location(div2, file$1, 101, 4, 1960);
    			attr_dev(div3, "class", "navbar-wrap svelte-qjqqwz");
    			add_location(div3, file$1, 100, 0, 1930);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div2);
    			append_dev(div2, div0);
    			append_dev(div0, a0);
    			append_dev(a0, img);
    			append_dev(div2, t0);
    			append_dev(div2, div1);
    			append_dev(div1, a1);
    			append_dev(a1, t1);
    			append_dev(div1, t2);
    			append_dev(div1, a2);
    			append_dev(a2, t3);
    			append_dev(div1, t4);
    			append_dev(div1, a3);
    			append_dev(a3, t5);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(a1, "mouseover", /*mouseover_handler*/ ctx[3], false, false, false),
    					listen_dev(a1, "mouseout", /*outHandle*/ ctx[2], false, false, false),
    					listen_dev(a2, "mouseover", /*mouseover_handler_1*/ ctx[4], false, false, false),
    					listen_dev(a2, "mouseout", /*outHandle*/ ctx[2], false, false, false),
    					listen_dev(a3, "mouseover", /*mouseover_handler_2*/ ctx[5], false, false, false),
    					listen_dev(a3, "mouseout", /*outHandle*/ ctx[2], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (!current || dirty & /*hover*/ 1 && a1_class_value !== (a1_class_value = "" + (null_to_empty(/*hover*/ ctx[0] == 2
    			? 'menu-select-hover'
    			: 'menu-select') + " svelte-qjqqwz"))) {
    				attr_dev(a1, "class", a1_class_value);
    			}

    			if (!current || dirty & /*hover*/ 1 && a2_class_value !== (a2_class_value = "" + (null_to_empty(/*hover*/ ctx[0] == 3
    			? 'menu-select-hover'
    			: 'menu-select') + " svelte-qjqqwz"))) {
    				attr_dev(a2, "class", a2_class_value);
    			}

    			if (!current || dirty & /*hover*/ 1 && a3_class_value !== (a3_class_value = "" + (null_to_empty(/*hover*/ ctx[0] == 5
    			? 'menu-select-hover'
    			: 'menu-select') + " svelte-qjqqwz"))) {
    				attr_dev(a3, "class", a3_class_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			add_render_callback(() => {
    				if (!div2_transition) div2_transition = create_bidirectional_transition(div2, fly, { duration: 200, x: 0, y: -100 }, true);
    				div2_transition.run(1);
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			if (!div2_transition) div2_transition = create_bidirectional_transition(div2, fly, { duration: 200, x: 0, y: -100 }, false);
    			div2_transition.run(0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    			if (detaching && div2_transition) div2_transition.end();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$2.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$2($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ManageNavbar', slots, []);
    	let hover = null;

    	function overHandle(item) {
    		$$invalidate(0, hover = item);
    	}

    	function outHandle() {
    		if (hover) {
    			$$invalidate(0, hover = null);
    		}
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ManageNavbar> was created with unknown prop '${key}'`);
    	});

    	const mouseover_handler = () => overHandle(2);
    	const mouseover_handler_1 = () => overHandle(3);
    	const mouseover_handler_2 = () => overHandle(5);
    	$$self.$capture_state = () => ({ Route, fly, hover, overHandle, outHandle });

    	$$self.$inject_state = $$props => {
    		if ('hover' in $$props) $$invalidate(0, hover = $$props.hover);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		hover,
    		overHandle,
    		outHandle,
    		mouseover_handler,
    		mouseover_handler_1,
    		mouseover_handler_2
    	];
    }

    class ManageNavbar extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$2, create_fragment$2, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ManageNavbar",
    			options,
    			id: create_fragment$2.name
    		});
    	}
    }

    /* components/Footer.svelte generated by Svelte v3.50.1 */

    const file$2 = "components/Footer.svelte";

    function create_fragment$3(ctx) {
    	let div1;
    	let div0;
    	let h3;

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			h3 = element("h3");
    			h3.textContent = "Copyright by © 2022 해군사관학교 학술정보원";
    			attr_dev(h3, "class", "copyright svelte-q8ffqf");
    			add_location(h3, file$2, 40, 8, 716);
    			attr_dev(div0, "class", "footer svelte-q8ffqf");
    			add_location(div0, file$2, 39, 4, 687);
    			attr_dev(div1, "class", "footer-wrap svelte-q8ffqf");
    			add_location(div1, file$2, 38, 0, 657);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			append_dev(div0, h3);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$3.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$3($$self, $$props) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Footer', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Footer> was created with unknown prop '${key}'`);
    	});

    	return [];
    }

    class Footer extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$3, create_fragment$3, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Footer",
    			options,
    			id: create_fragment$3.name
    		});
    	}
    }

    function flip(node, { from, to }, params = {}) {
        const style = getComputedStyle(node);
        const transform = style.transform === 'none' ? '' : style.transform;
        const [ox, oy] = style.transformOrigin.split(' ').map(parseFloat);
        const dx = (from.left + from.width * ox / to.width) - (to.left + ox);
        const dy = (from.top + from.height * oy / to.height) - (to.top + oy);
        const { delay = 0, duration = (d) => Math.sqrt(d) * 120, easing = cubicOut } = params;
        return {
            delay,
            duration: is_function(duration) ? duration(Math.sqrt(dx * dx + dy * dy)) : duration,
            easing,
            css: (t, u) => {
                const x = u * dx;
                const y = u * dy;
                const sx = t + u * from.width / to.width;
                const sy = t + u * from.height / to.height;
                return `transform: ${transform} translate(${x}px, ${y}px) scale(${sx}, ${sy});`;
            }
        };
    }

    /* components/user/UserSearch.svelte generated by Svelte v3.50.1 */

    const { console: console_1 } = globals;
    const file$3 = "components/user/UserSearch.svelte";

    // (138:12) {:else}
    function create_else_block(ctx) {
    	let label;
    	let h3;
    	let label_intro;
    	let label_outro;
    	let current;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			label = element("label");
    			h3 = element("h3");
    			h3.textContent = "제목, 이름 또는 장소를 검색해보세요";
    			attr_dev(h3, "class", "svelte-10cphl4");
    			add_location(h3, file$3, 143, 27, 3442);
    			attr_dev(label, "for", "search-input");
    			attr_dev(label, "class", "search-label svelte-10cphl4");
    			add_location(label, file$3, 139, 20, 3199);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, label, anchor);
    			append_dev(label, h3);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(label, "click", labelHandle, false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;

    			add_render_callback(() => {
    				if (label_outro) label_outro.end(1);
    				label_intro = create_in_transition(label, /*receive*/ ctx[3], { key: 'unfocused' });
    				label_intro.start();
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			if (label_intro) label_intro.invalidate();
    			label_outro = create_out_transition(label, /*send*/ ctx[2], { key: 'focused' });
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(label);
    			if (detaching && label_outro) label_outro.end();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block.name,
    		type: "else",
    		source: "(138:12) {:else}",
    		ctx
    	});

    	return block;
    }

    // (130:12) {#if focused || search_value}
    function create_if_block$1(ctx) {
    	let label;
    	let h3;
    	let label_intro;
    	let label_outro;
    	let current;

    	const block = {
    		c: function create() {
    			label = element("label");
    			h3 = element("h3");
    			h3.textContent = "제목, 이름 또는 장소를 검색해보세요";
    			attr_dev(h3, "class", "svelte-10cphl4");
    			add_location(h3, file$3, 134, 27, 3037);
    			attr_dev(label, "for", "search-input");
    			attr_dev(label, "class", "search-label-focused svelte-10cphl4");
    			add_location(label, file$3, 131, 20, 2837);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, label, anchor);
    			append_dev(label, h3);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;

    			add_render_callback(() => {
    				if (label_outro) label_outro.end(1);
    				label_intro = create_in_transition(label, /*receive*/ ctx[3], { key: 'focused' });
    				label_intro.start();
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			if (label_intro) label_intro.invalidate();
    			label_outro = create_out_transition(label, /*send*/ ctx[2], { key: 'unfocused' });
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(label);
    			if (detaching && label_outro) label_outro.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$1.name,
    		type: "if",
    		source: "(130:12) {#if focused || search_value}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$4(ctx) {
    	let div1;
    	let div0;
    	let form;
    	let input;
    	let t0;
    	let current_block_type_index;
    	let if_block;
    	let t1;
    	let button;
    	let span;
    	let svg;
    	let path;
    	let current;
    	let mounted;
    	let dispose;
    	const if_block_creators = [create_if_block$1, create_else_block];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*focused*/ ctx[0] || /*search_value*/ ctx[1]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			form = element("form");
    			input = element("input");
    			t0 = space();
    			if_block.c();
    			t1 = space();
    			button = element("button");
    			span = element("span");
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(input, "class", "search-input svelte-10cphl4");
    			attr_dev(input, "type", "text");
    			add_location(input, file$3, 128, 8, 2627);
    			attr_dev(path, "d", "M10.5 0C11.0052 0 11.4922 0.0651042 11.9609 0.195312C12.4297 0.325521 12.8672 0.510417 13.2734 0.75C13.6797 0.989583 14.0495 1.27865 14.3828 1.61719C14.7214 1.95052 15.0104 2.32031 15.25 2.72656C15.4896 3.13281 15.6745 3.57031 15.8047 4.03906C15.9349 4.50781 16 4.99479 16 5.5C16 6.00521 15.9349 6.49219 15.8047 6.96094C15.6745 7.42969 15.4896 7.86719 15.25 8.27344C15.0104 8.67969 14.7214 9.05208 14.3828 9.39062C14.0495 9.72396 13.6797 10.0104 13.2734 10.25C12.8672 10.4896 12.4297 10.6745 11.9609 10.8047C11.4922 10.9349 11.0052 11 10.5 11C9.84896 11 9.22396 10.8906 8.625 10.6719C8.03125 10.4531 7.48438 10.138 6.98438 9.72656L0.851562 15.8516C0.752604 15.9505 0.635417 16 0.5 16C0.364583 16 0.247396 15.9505 0.148438 15.8516C0.0494792 15.7526 0 15.6354 0 15.5C0 15.3646 0.0494792 15.2474 0.148438 15.1484L6.27344 9.01562C5.86198 8.51562 5.54688 7.96875 5.32812 7.375C5.10938 6.77604 5 6.15104 5 5.5C5 4.99479 5.0651 4.50781 5.19531 4.03906C5.32552 3.57031 5.51042 3.13281 5.75 2.72656C5.98958 2.32031 6.27604 1.95052 6.60938 1.61719C6.94792 1.27865 7.32031 0.989583 7.72656 0.75C8.13281 0.510417 8.57031 0.325521 9.03906 0.195312C9.50781 0.0651042 9.99479 0 10.5 0ZM10.5 10C11.1198 10 11.7031 9.88281 12.25 9.64844C12.7969 9.40885 13.2734 9.08594 13.6797 8.67969C14.0859 8.27344 14.4062 7.79688 14.6406 7.25C14.8802 6.70312 15 6.11979 15 5.5C15 4.88021 14.8802 4.29688 14.6406 3.75C14.4062 3.20312 14.0859 2.72656 13.6797 2.32031C13.2734 1.91406 12.7969 1.59375 12.25 1.35938C11.7031 1.11979 11.1198 1 10.5 1C9.88021 1 9.29688 1.11979 8.75 1.35938C8.20312 1.59375 7.72656 1.91406 7.32031 2.32031C6.91406 2.72656 6.59115 3.20312 6.35156 3.75C6.11719 4.29688 6 4.88021 6 5.5C6 6.11979 6.11719 6.70312 6.35156 7.25C6.59115 7.79688 6.91406 8.27344 7.32031 8.67969C7.72656 9.08594 8.20312 9.40885 8.75 9.64844C9.29688 9.88281 9.88021 10 10.5 10Z");
    			add_location(path, file$3, 150, 24, 3914);
    			attr_dev(svg, "viewBox", "0 0 16 16");
    			attr_dev(svg, "width", "16px");
    			attr_dev(svg, "height", "16px");
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			set_style(svg, "width", "20px");
    			set_style(svg, "height", "20px");
    			add_location(svg, file$3, 149, 20, 3766);
    			attr_dev(span, "class", "search-icon");
    			add_location(span, file$3, 148, 16, 3718);
    			attr_dev(button, "class", "search-button svelte-10cphl4");
    			attr_dev(button, "aria-hidden", "true");
    			attr_dev(button, "aria-disabled", "true");
    			attr_dev(button, "aria-label", "제목, 이름 또는 장소를 검색해보세요");
    			add_location(button, file$3, 147, 12, 3558);
    			attr_dev(form, "class", "search-form svelte-10cphl4");
    			add_location(form, file$3, 127, 4, 2591);
    			attr_dev(div0, "class", "user-search-container svelte-10cphl4");
    			add_location(div0, file$3, 126, 4, 2550);
    			attr_dev(div1, "class", "user-search-wrap svelte-10cphl4");
    			add_location(div1, file$3, 125, 0, 2514);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			append_dev(div0, form);
    			append_dev(form, input);
    			set_input_value(input, /*search_value*/ ctx[1]);
    			append_dev(form, t0);
    			if_blocks[current_block_type_index].m(form, null);
    			append_dev(form, t1);
    			append_dev(form, button);
    			append_dev(button, span);
    			append_dev(span, svg);
    			append_dev(svg, path);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(input, "focus", /*focusHandle*/ ctx[4], false, false, false),
    					listen_dev(input, "blur", /*blurHandle*/ ctx[5], false, false, false),
    					listen_dev(input, "input", /*input_input_handler*/ ctx[7]),
    					listen_dev(button, "click", prevent_default(/*navToBrowse*/ ctx[6]), false, true, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*search_value*/ 2 && input.value !== /*search_value*/ ctx[1]) {
    				set_input_value(input, /*search_value*/ ctx[1]);
    			}

    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(form, t1);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if_blocks[current_block_type_index].d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$4.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function labelHandle() {
    	document.querySelector('.search-input').focus = true;
    }

    function instance$4($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('UserSearch', slots, []);
    	const [send, receive] = crossfade({});
    	let focused = false;
    	let search_value = null;
    	let SEARCH_INPUT;

    	function focusHandle() {
    		$$invalidate(0, focused = true);
    		console.log("focused", focused);
    	}

    	function blurHandle() {
    		$$invalidate(0, focused = false);
    		console.log("blurred", focused);
    	}

    	function navToBrowse() {
    		f.goto("/user/browse");
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1.warn(`<UserSearch> was created with unknown prop '${key}'`);
    	});

    	function input_input_handler() {
    		search_value = this.value;
    		$$invalidate(1, search_value);
    	}

    	$$self.$capture_state = () => ({
    		Route,
    		router: f,
    		crossfade,
    		flip,
    		send,
    		receive,
    		focused,
    		search_value,
    		SEARCH_INPUT,
    		focusHandle,
    		blurHandle,
    		labelHandle,
    		navToBrowse
    	});

    	$$self.$inject_state = $$props => {
    		if ('focused' in $$props) $$invalidate(0, focused = $$props.focused);
    		if ('search_value' in $$props) $$invalidate(1, search_value = $$props.search_value);
    		if ('SEARCH_INPUT' in $$props) SEARCH_INPUT = $$props.SEARCH_INPUT;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		focused,
    		search_value,
    		send,
    		receive,
    		focusHandle,
    		blurHandle,
    		navToBrowse,
    		input_input_handler
    	];
    }

    class UserSearch extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$4, create_fragment$4, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "UserSearch",
    			options,
    			id: create_fragment$4.name
    		});
    	}
    }

    /* pages/UserMain.svelte generated by Svelte v3.50.1 */
    const file$4 = "pages/UserMain.svelte";

    function create_fragment$5(ctx) {
    	let div3;
    	let div1;
    	let div0;
    	let a0;
    	let h30;
    	let t1;
    	let a1;
    	let h31;
    	let t3;
    	let div2;
    	let usersearch;
    	let current;
    	usersearch = new UserSearch({ $$inline: true });

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			div1 = element("div");
    			div0 = element("div");
    			a0 = element("a");
    			h30 = element("h3");
    			h30.textContent = "관리자";
    			t1 = space();
    			a1 = element("a");
    			h31 = element("h3");
    			h31.textContent = "로그인";
    			t3 = space();
    			div2 = element("div");
    			create_component(usersearch.$$.fragment);
    			attr_dev(h30, "class", "svelte-3zwetz");
    			add_location(h30, file$4, 131, 16, 2873);
    			attr_dev(a0, "href", "/manage");
    			attr_dev(a0, "class", "manage-nav svelte-3zwetz");
    			add_location(a0, file$4, 130, 12, 2818);
    			attr_dev(h31, "class", "svelte-3zwetz");
    			add_location(h31, file$4, 134, 16, 2975);
    			attr_dev(a1, "href", "/auth/login");
    			attr_dev(a1, "class", "login-nav svelte-3zwetz");
    			add_location(a1, file$4, 133, 12, 2917);
    			attr_dev(div0, "class", "user-panel svelte-3zwetz");
    			add_location(div0, file$4, 129, 8, 2780);
    			attr_dev(div1, "class", "user-panel-wrap svelte-3zwetz");
    			add_location(div1, file$4, 128, 4, 2741);
    			attr_dev(div2, "class", "search-wrap svelte-3zwetz");
    			add_location(div2, file$4, 138, 4, 3039);
    			attr_dev(div3, "class", "main-view-home svelte-3zwetz");
    			add_location(div3, file$4, 127, 0, 2707);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div1);
    			append_dev(div1, div0);
    			append_dev(div0, a0);
    			append_dev(a0, h30);
    			append_dev(div0, t1);
    			append_dev(div0, a1);
    			append_dev(a1, h31);
    			append_dev(div3, t3);
    			append_dev(div3, div2);
    			mount_component(usersearch, div2, null);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(usersearch.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(usersearch.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    			destroy_component(usersearch);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$5.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$5($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('UserMain', slots, []);
    	let image_src_lst = ["1.jpg", "2.jpg", "3.jpg", "4.JPG", "5.jpg"];
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<UserMain> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ UserSearch, image_src_lst });

    	$$self.$inject_state = $$props => {
    		if ('image_src_lst' in $$props) image_src_lst = $$props.image_src_lst;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [];
    }

    class UserMain extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$5, create_fragment$5, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "UserMain",
    			options,
    			id: create_fragment$5.name
    		});
    	}
    }

    /* components/manager/Input/InputDateValue.svelte generated by Svelte v3.50.1 */

    function create_fragment$6(ctx) {
    	const block = {
    		c: noop,
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: noop,
    		p: noop,
    		i: noop,
    		o: noop,
    		d: noop
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$6.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$6($$self, $$props) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('InputDateValue', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<InputDateValue> was created with unknown prop '${key}'`);
    	});

    	return [];
    }

    class InputDateValue extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$6, create_fragment$6, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "InputDateValue",
    			options,
    			id: create_fragment$6.name
    		});
    	}
    }

    /* components/manager/Input/InputSingleValue.svelte generated by Svelte v3.50.1 */
    const file$5 = "components/manager/Input/InputSingleValue.svelte";

    function get_each_context(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[14] = list[i];
    	child_ctx[16] = i;
    	return child_ctx;
    }

    // (220:12) {:else}
    function create_else_block$1(ctx) {
    	let label;
    	let h3;
    	let t;
    	let label_intro;
    	let label_outro;
    	let current;

    	const block = {
    		c: function create() {
    			label = element("label");
    			h3 = element("h3");
    			t = text(/*placeholder*/ ctx[0]);
    			attr_dev(h3, "class", "svelte-4m851m");
    			add_location(h3, file$5, 224, 27, 5177);
    			attr_dev(label, "for", "input");
    			attr_dev(label, "class", "label svelte-4m851m");
    			add_location(label, file$5, 221, 20, 4999);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, label, anchor);
    			append_dev(label, h3);
    			append_dev(h3, t);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (!current || dirty & /*placeholder*/ 1) set_data_dev(t, /*placeholder*/ ctx[0]);
    		},
    		i: function intro(local) {
    			if (current) return;

    			add_render_callback(() => {
    				if (label_outro) label_outro.end(1);
    				label_intro = create_in_transition(label, /*receive*/ ctx[6], { key: 'unfocused' });
    				label_intro.start();
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			if (label_intro) label_intro.invalidate();
    			label_outro = create_out_transition(label, /*send*/ ctx[5], { key: 'focused' });
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(label);
    			if (detaching && label_outro) label_outro.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$1.name,
    		type: "else",
    		source: "(220:12) {:else}",
    		ctx
    	});

    	return block;
    }

    // (212:12) {#if focused || value}
    function create_if_block_2(ctx) {
    	let label;
    	let h3;
    	let t;
    	let label_intro;
    	let label_outro;
    	let current;

    	const block = {
    		c: function create() {
    			label = element("label");
    			h3 = element("h3");
    			t = text(/*placeholder*/ ctx[0]);
    			attr_dev(h3, "class", "svelte-4m851m");
    			add_location(h3, file$5, 216, 27, 4844);
    			attr_dev(label, "for", "input");
    			attr_dev(label, "class", "label-focused svelte-4m851m");
    			add_location(label, file$5, 213, 20, 4658);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, label, anchor);
    			append_dev(label, h3);
    			append_dev(h3, t);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (!current || dirty & /*placeholder*/ 1) set_data_dev(t, /*placeholder*/ ctx[0]);
    		},
    		i: function intro(local) {
    			if (current) return;

    			add_render_callback(() => {
    				if (label_outro) label_outro.end(1);
    				label_intro = create_in_transition(label, /*receive*/ ctx[6], { key: 'focused' });
    				label_intro.start();
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			if (label_intro) label_intro.invalidate();
    			label_outro = create_out_transition(label, /*send*/ ctx[5], { key: 'unfocused' });
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(label);
    			if (detaching && label_outro) label_outro.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2.name,
    		type: "if",
    		source: "(212:12) {#if focused || value}",
    		ctx
    	});

    	return block;
    }

    // (234:16) {#if !con.condition(value)}
    function create_if_block_1(ctx) {
    	let h3;
    	let t_value = /*con*/ ctx[14].not_satisfied_text + "";
    	let t;

    	const block = {
    		c: function create() {
    			h3 = element("h3");
    			t = text(t_value);
    			attr_dev(h3, "class", "not-satisfied svelte-4m851m");
    			add_location(h3, file$5, 234, 20, 5473);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h3, anchor);
    			append_dev(h3, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*conditions*/ 2 && t_value !== (t_value = /*con*/ ctx[14].not_satisfied_text + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h3);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1.name,
    		type: "if",
    		source: "(234:16) {#if !con.condition(value)}",
    		ctx
    	});

    	return block;
    }

    // (233:12) {#each conditions as con, con_id}
    function create_each_block(ctx) {
    	let show_if = !/*con*/ ctx[14].condition(/*value*/ ctx[2]);
    	let if_block_anchor;
    	let if_block = show_if && create_if_block_1(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*conditions, value*/ 6) show_if = !/*con*/ ctx[14].condition(/*value*/ ctx[2]);

    			if (show_if) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_1(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block.name,
    		type: "each",
    		source: "(233:12) {#each conditions as con, con_id}",
    		ctx
    	});

    	return block;
    }

    // (238:12) {#if condition_result}
    function create_if_block$2(ctx) {
    	let h3;
    	let t_value = /*conditions*/ ctx[1][0].satisfied_text + "";
    	let t;

    	const block = {
    		c: function create() {
    			h3 = element("h3");
    			t = text(t_value);
    			attr_dev(h3, "class", "satisfied svelte-4m851m");
    			add_location(h3, file$5, 238, 16, 5626);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h3, anchor);
    			append_dev(h3, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*conditions*/ 2 && t_value !== (t_value = /*conditions*/ ctx[1][0].satisfied_text + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h3);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$2.name,
    		type: "if",
    		source: "(238:12) {#if condition_result}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$7(ctx) {
    	let div3;
    	let div0;
    	let input;
    	let t0;
    	let current_block_type_index;
    	let if_block0;
    	let div0_class_value;
    	let t1;
    	let div2;
    	let div1;
    	let t2;
    	let current;
    	let mounted;
    	let dispose;
    	const if_block_creators = [create_if_block_2, create_else_block$1];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*focused*/ ctx[3] || /*value*/ ctx[2]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	let each_value = /*conditions*/ ctx[1];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
    	}

    	let if_block1 = /*condition_result*/ ctx[4] && create_if_block$2(ctx);

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			div0 = element("div");
    			input = element("input");
    			t0 = space();
    			if_block0.c();
    			t1 = space();
    			div2 = element("div");
    			div1 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t2 = space();
    			if (if_block1) if_block1.c();
    			attr_dev(input, "class", "input svelte-4m851m");
    			attr_dev(input, "type", "text");
    			add_location(input, file$5, 210, 8, 4470);

    			attr_dev(div0, "class", div0_class_value = "" + (null_to_empty(/*condition_result*/ ctx[4]
    			? 'input-container'
    			: 'input-container-not-satisfied') + " svelte-4m851m"));

    			add_location(div0, file$5, 209, 4, 4375);
    			attr_dev(div1, "class", "warning-container svelte-4m851m");
    			add_location(div1, file$5, 231, 8, 5328);
    			attr_dev(div2, "class", "warning-wrap svelte-4m851m");
    			add_location(div2, file$5, 230, 4, 5292);
    			attr_dev(div3, "class", "input-wrap svelte-4m851m");
    			add_location(div3, file$5, 208, 0, 4345);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div0);
    			append_dev(div0, input);
    			set_input_value(input, /*value*/ ctx[2]);
    			append_dev(div0, t0);
    			if_blocks[current_block_type_index].m(div0, null);
    			append_dev(div3, t1);
    			append_dev(div3, div2);
    			append_dev(div2, div1);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div1, null);
    			}

    			append_dev(div1, t2);
    			if (if_block1) if_block1.m(div1, null);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(input, "focus", /*focusHandle*/ ctx[7], false, false, false),
    					listen_dev(input, "blur", /*blurHandle*/ ctx[8], false, false, false),
    					listen_dev(input, "input", /*input_input_handler*/ ctx[11])
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*value*/ 4 && input.value !== /*value*/ ctx[2]) {
    				set_input_value(input, /*value*/ ctx[2]);
    			}

    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block0 = if_blocks[current_block_type_index];

    				if (!if_block0) {
    					if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block0.c();
    				} else {
    					if_block0.p(ctx, dirty);
    				}

    				transition_in(if_block0, 1);
    				if_block0.m(div0, null);
    			}

    			if (!current || dirty & /*condition_result*/ 16 && div0_class_value !== (div0_class_value = "" + (null_to_empty(/*condition_result*/ ctx[4]
    			? 'input-container'
    			: 'input-container-not-satisfied') + " svelte-4m851m"))) {
    				attr_dev(div0, "class", div0_class_value);
    			}

    			if (dirty & /*conditions, value*/ 6) {
    				each_value = /*conditions*/ ctx[1];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div1, t2);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (/*condition_result*/ ctx[4]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block$2(ctx);
    					if_block1.c();
    					if_block1.m(div1, null);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    			if_blocks[current_block_type_index].d();
    			destroy_each(each_blocks, detaching);
    			if (if_block1) if_block1.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$7.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$7($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('InputSingleValue', slots, []);
    	const [send, receive] = crossfade({});
    	var dispatch = createEventDispatcher();
    	let { init = '' } = $$props;
    	let { immutable = false } = $$props;
    	let { placeholder = null } = $$props;

    	let { conditions = [
    		{
    			condition: () => {
    				
    			},
    			name: "",
    			not_satisfied_text: "",
    			satisfied_text: ""
    		},
    		{
    			condition: () => {
    				
    			},
    			name: "",
    			not_satisfied_text: "",
    			satisfied_text: ""
    		},
    		{
    			condition: () => {
    				
    			},
    			name: "",
    			not_satisfied_text: "",
    			satisfied_text: ""
    		}
    	] } = $$props;

    	let focused = false;
    	let condition_result = false;
    	let value = '';

    	onMount(() => {
    		$$invalidate(2, value = init);
    	});

    	function focusHandle() {
    		$$invalidate(3, focused = true);
    	}

    	function blurHandle() {
    		$$invalidate(3, focused = false);
    	}

    	function conditionResult(value) {
    		let result = true;

    		conditions.forEach(con => {
    			if (!con.condition(value)) {
    				result = false;
    			}
    		});

    		return result;
    	}

    	const writable_props = ['init', 'immutable', 'placeholder', 'conditions'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<InputSingleValue> was created with unknown prop '${key}'`);
    	});

    	function input_input_handler() {
    		value = this.value;
    		(($$invalidate(2, value), $$invalidate(10, immutable)), $$invalidate(9, init));
    	}

    	$$self.$$set = $$props => {
    		if ('init' in $$props) $$invalidate(9, init = $$props.init);
    		if ('immutable' in $$props) $$invalidate(10, immutable = $$props.immutable);
    		if ('placeholder' in $$props) $$invalidate(0, placeholder = $$props.placeholder);
    		if ('conditions' in $$props) $$invalidate(1, conditions = $$props.conditions);
    	};

    	$$self.$capture_state = () => ({
    		Route,
    		router: f,
    		createEventDispatcher,
    		onMount,
    		crossfade,
    		flip,
    		send,
    		receive,
    		dispatch,
    		init,
    		immutable,
    		placeholder,
    		conditions,
    		focused,
    		condition_result,
    		value,
    		focusHandle,
    		blurHandle,
    		conditionResult
    	});

    	$$self.$inject_state = $$props => {
    		if ('dispatch' in $$props) $$invalidate(12, dispatch = $$props.dispatch);
    		if ('init' in $$props) $$invalidate(9, init = $$props.init);
    		if ('immutable' in $$props) $$invalidate(10, immutable = $$props.immutable);
    		if ('placeholder' in $$props) $$invalidate(0, placeholder = $$props.placeholder);
    		if ('conditions' in $$props) $$invalidate(1, conditions = $$props.conditions);
    		if ('focused' in $$props) $$invalidate(3, focused = $$props.focused);
    		if ('condition_result' in $$props) $$invalidate(4, condition_result = $$props.condition_result);
    		if ('value' in $$props) $$invalidate(2, value = $$props.value);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*immutable, value, init*/ 1540) {
    			 {
    				if (immutable) {
    					(($$invalidate(2, value), $$invalidate(10, immutable)), $$invalidate(9, init));
    					$$invalidate(2, value = init);
    				}
    			}
    		}

    		if ($$self.$$.dirty & /*value*/ 4) {
    			 dispatch('change', { value, pass: conditionResult(value) });
    		}

    		if ($$self.$$.dirty & /*value*/ 4) {
    			 {
    				$$invalidate(4, condition_result = conditionResult(value));
    			}
    		}
    	};

    	return [
    		placeholder,
    		conditions,
    		value,
    		focused,
    		condition_result,
    		send,
    		receive,
    		focusHandle,
    		blurHandle,
    		init,
    		immutable,
    		input_input_handler
    	];
    }

    class InputSingleValue extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$7, create_fragment$7, safe_not_equal, {
    			init: 9,
    			immutable: 10,
    			placeholder: 0,
    			conditions: 1
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "InputSingleValue",
    			options,
    			id: create_fragment$7.name
    		});
    	}

    	get init() {
    		throw new Error("<InputSingleValue>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set init(value) {
    		throw new Error("<InputSingleValue>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get immutable() {
    		throw new Error("<InputSingleValue>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set immutable(value) {
    		throw new Error("<InputSingleValue>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get placeholder() {
    		throw new Error("<InputSingleValue>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set placeholder(value) {
    		throw new Error("<InputSingleValue>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get conditions() {
    		throw new Error("<InputSingleValue>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set conditions(value) {
    		throw new Error("<InputSingleValue>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const condition_set = {};



    condition_set.default_conditions = [
        {
            condition: (val) => {
                if (val.length >= 1) {
                    return true;
                }

                return false;
            },
            name: "longerThanOneLetter",
            not_satisfied_text: "최소 한자 이상 들어가야 합니다",
            satisfied_text: "좋습니다!"
        },
        {
            condition: (val) => {
                if (val.length <= 20) {
                    return true;
                }

                return false;
            },
            name: "shorterThanGivenLength",
            not_satisfied_text: "더 짧게 입력해주세요"
        }
    ];

    condition_set.attendee_conditions = [
        {
            condition: (val) => {
                let words = val.split(' ');
                if (words.length >= 1 && words[0] != '' && words[0] != '#') {
                    return true;
                } 
                return false;
            },
            name: "longerThanOneWord",
            not_satisfied_text: "인물이 한명 이상 들어가야 합니다",
            satisfied_text: "좋습니다!"
        }
    ];

    condition_set.select_conditions = [
        {
            condition: (val) => {
                if (val == -1) {
                    return false;
                } else {
                    return true;
                }
            },
            name: "pickOne",
            not_satisfied_text: "한개를 반드시 선택해야 합니다",
            satisfied_text: "좋습니다!"
        }
    ];

    condition_set.unchangable_conditions = (type) => {
        return [{
            condition: (val) => {
                return true;
            },
            name: "unchangable",
            not_satisfied_text: "오류",
            satisfied_text: `${type} 임의로 바꿀 수 없습니다`
        }]
    };

    condition_set.registered_id_conditions = [
        {
            condition: (val) => {
                if (val.length < 6) {
                    return false;
                }
                return true;
            },
            name: "longerThanSixLetters",
            not_satisfied_text: "아이디는 최소 6자 이상이어야 합니다",
            satisfied_text: '좋습니다!'
        }, {
            condition: (val) => {
                if (val.includes(' ')) {
                    return false;
                }
                return true;
            },
            name: "noWhiteSpace",
            not_satisfied_text: "공백이 들어가서는 안됩니다",
            satisfied_text: '좋습니다!'
        }
    ];

    /* pages/Auth/Login.svelte generated by Svelte v3.50.1 */
    const file$6 = "pages/Auth/Login.svelte";

    function create_fragment$8(ctx) {
    	let div10;
    	let div9;
    	let div0;
    	let h30;
    	let t1;
    	let h40;
    	let t3;
    	let form;
    	let div3;
    	let div1;
    	let inputsinglevalue0;
    	let t4;
    	let div2;
    	let inputsinglevalue1;
    	let t5;
    	let div4;
    	let button0;
    	let svg0;
    	let path0;
    	let t6;
    	let h31;
    	let t8;
    	let div8;
    	let div5;
    	let button1;
    	let svg1;
    	let path1;
    	let t9;
    	let h32;
    	let t11;
    	let div6;
    	let a;
    	let t13;
    	let div7;
    	let h41;
    	let current;

    	inputsinglevalue0 = new InputSingleValue({
    			props: {
    				placeholder: "아이디",
    				conditions: condition_set.registered_id_conditions
    			},
    			$$inline: true
    		});

    	inputsinglevalue1 = new InputSingleValue({
    			props: {
    				placeholder: "비밀번호",
    				conditions: condition_set.default_conditions
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div10 = element("div");
    			div9 = element("div");
    			div0 = element("div");
    			h30 = element("h3");
    			h30.textContent = "로그인";
    			t1 = space();
    			h40 = element("h4");
    			h40.textContent = "해사미디어아카이브에 오신 것을 환영합니다!";
    			t3 = space();
    			form = element("form");
    			div3 = element("div");
    			div1 = element("div");
    			create_component(inputsinglevalue0.$$.fragment);
    			t4 = space();
    			div2 = element("div");
    			create_component(inputsinglevalue1.$$.fragment);
    			t5 = space();
    			div4 = element("div");
    			button0 = element("button");
    			svg0 = svg_element("svg");
    			path0 = svg_element("path");
    			t6 = space();
    			h31 = element("h3");
    			h31.textContent = "로그인";
    			t8 = space();
    			div8 = element("div");
    			div5 = element("div");
    			button1 = element("button");
    			svg1 = svg_element("svg");
    			path1 = svg_element("path");
    			t9 = space();
    			h32 = element("h3");
    			h32.textContent = "회원가입";
    			t11 = space();
    			div6 = element("div");
    			a = element("a");
    			a.textContent = "비밀번호가 기억이 나지 않나요 ?";
    			t13 = space();
    			div7 = element("div");
    			h41 = element("h4");
    			h41.textContent = "미디어 아카이브 체계에 제공되는 개인정보는 1년의 유휴기간 이후 자동 소멸됩니다.\r\n                또한 미디어 아카이브 체계가 제공하는 모든 자료들은 비공개 자료로 특별한 허가 없이\r\n                타인에게 제공하는 등의 행위는 위법이므로 자료 활용에 주의를 바랍니다.";
    			attr_dev(h30, "class", "svelte-1vr07tj");
    			add_location(h30, file$6, 149, 12, 3183);
    			attr_dev(h40, "class", "svelte-1vr07tj");
    			add_location(h40, file$6, 150, 12, 3209);
    			attr_dev(div0, "class", "title svelte-1vr07tj");
    			add_location(div0, file$6, 148, 8, 3150);
    			attr_dev(div1, "class", "username svelte-1vr07tj");
    			add_location(div1, file$6, 154, 16, 3348);
    			attr_dev(div2, "class", "password svelte-1vr07tj");
    			add_location(div2, file$6, 157, 16, 3523);
    			attr_dev(div3, "class", "form-input");
    			add_location(div3, file$6, 153, 12, 3306);
    			attr_dev(path0, "stroke-linecap", "round");
    			attr_dev(path0, "stroke-linejoin", "round");
    			attr_dev(path0, "d", "M16.5 10.5V6.75a4.5 4.5 0 10-9 0v3.75m-.75 11.25h10.5a2.25 2.25 0 002.25-2.25v-6.75a2.25 2.25 0 00-2.25-2.25H6.75a2.25 2.25 0 00-2.25 2.25v6.75a2.25 2.25 0 002.25 2.25z");
    			add_location(path0, file$6, 164, 24, 3944);
    			attr_dev(svg0, "class", "svg svelte-1vr07tj");
    			attr_dev(svg0, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg0, "fill", "none");
    			attr_dev(svg0, "viewBox", "0 0 24 24");
    			attr_dev(svg0, "stroke-width", "2");
    			attr_dev(svg0, "stroke", "white");
    			attr_dev(svg0, "height", "18");
    			attr_dev(svg0, "width", "18");
    			add_location(svg0, file$6, 163, 20, 3779);
    			attr_dev(h31, "class", "svelte-1vr07tj");
    			add_location(h31, file$6, 166, 20, 4222);
    			attr_dev(button0, "class", "svelte-1vr07tj");
    			add_location(button0, file$6, 162, 16, 3749);
    			attr_dev(div4, "class", "form-btn svelte-1vr07tj");
    			add_location(div4, file$6, 161, 12, 3709);
    			attr_dev(form, "class", "login-form svelte-1vr07tj");
    			add_location(form, file$6, 152, 8, 3267);
    			attr_dev(path1, "stroke-linecap", "round");
    			attr_dev(path1, "stroke-linejoin", "round");
    			attr_dev(path1, "d", "M19 7.5v3m0 0v3m0-3h3m-3 0h-3m-2.25-4.125a3.375 3.375 0 11-6.75 0 3.375 3.375 0 016.75 0zM4 19.235v-.11a6.375 6.375 0 0112.75 0v.109A12.318 12.318 0 0110.374 21c-2.331 0-4.512-.645-6.374-1.766z");
    			add_location(path1, file$6, 176, 24, 4633);
    			attr_dev(svg1, "class", "svg svelte-1vr07tj");
    			attr_dev(svg1, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg1, "fill", "none");
    			attr_dev(svg1, "viewBox", "0 0 24 24");
    			attr_dev(svg1, "stroke-width", "2");
    			attr_dev(svg1, "stroke", "white");
    			attr_dev(svg1, "height", "18");
    			attr_dev(svg1, "width", "18");
    			add_location(svg1, file$6, 175, 20, 4468);
    			attr_dev(h32, "class", "svelte-1vr07tj");
    			add_location(h32, file$6, 178, 20, 4936);
    			attr_dev(button1, "class", "svelte-1vr07tj");
    			add_location(button1, file$6, 174, 16, 4438);
    			attr_dev(div5, "class", "signin-wrap svelte-1vr07tj");
    			add_location(div5, file$6, 173, 12, 4395);
    			attr_dev(a, "href", "/auth/recovery");
    			attr_dev(a, "class", "svelte-1vr07tj");
    			add_location(a, file$6, 184, 16, 5101);
    			attr_dev(div6, "class", "forgot-wrap svelte-1vr07tj");
    			add_location(div6, file$6, 183, 12, 5058);
    			attr_dev(h41, "class", "svelte-1vr07tj");
    			add_location(h41, file$6, 189, 16, 5266);
    			attr_dev(div7, "class", "license-wrap svelte-1vr07tj");
    			add_location(div7, file$6, 188, 12, 5222);
    			attr_dev(div8, "class", "miscel-wrap svelte-1vr07tj");
    			add_location(div8, file$6, 172, 8, 4356);
    			attr_dev(div9, "class", "login-form-wrap svelte-1vr07tj");
    			add_location(div9, file$6, 147, 4, 3111);
    			attr_dev(div10, "class", "login-wrap svelte-1vr07tj");
    			add_location(div10, file$6, 146, 0, 3081);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div10, anchor);
    			append_dev(div10, div9);
    			append_dev(div9, div0);
    			append_dev(div0, h30);
    			append_dev(div0, t1);
    			append_dev(div0, h40);
    			append_dev(div9, t3);
    			append_dev(div9, form);
    			append_dev(form, div3);
    			append_dev(div3, div1);
    			mount_component(inputsinglevalue0, div1, null);
    			append_dev(div3, t4);
    			append_dev(div3, div2);
    			mount_component(inputsinglevalue1, div2, null);
    			append_dev(form, t5);
    			append_dev(form, div4);
    			append_dev(div4, button0);
    			append_dev(button0, svg0);
    			append_dev(svg0, path0);
    			append_dev(button0, t6);
    			append_dev(button0, h31);
    			append_dev(div9, t8);
    			append_dev(div9, div8);
    			append_dev(div8, div5);
    			append_dev(div5, button1);
    			append_dev(button1, svg1);
    			append_dev(svg1, path1);
    			append_dev(button1, t9);
    			append_dev(button1, h32);
    			append_dev(div8, t11);
    			append_dev(div8, div6);
    			append_dev(div6, a);
    			append_dev(div8, t13);
    			append_dev(div8, div7);
    			append_dev(div7, h41);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(inputsinglevalue0.$$.fragment, local);
    			transition_in(inputsinglevalue1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(inputsinglevalue0.$$.fragment, local);
    			transition_out(inputsinglevalue1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div10);
    			destroy_component(inputsinglevalue0);
    			destroy_component(inputsinglevalue1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$8.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$8($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Login', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Login> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		InputDateValue,
    		InputSingleValue,
    		condition_set
    	});

    	return [];
    }

    class Login extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$8, create_fragment$8, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Login",
    			options,
    			id: create_fragment$8.name
    		});
    	}
    }

    /* pages/sidebar/Category.svelte generated by Svelte v3.50.1 */
    const file$7 = "pages/sidebar/Category.svelte";

    function get_each_context$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[6] = list[i];
    	child_ctx[8] = i;
    	return child_ctx;
    }

    // (95:4) {:else}
    function create_else_block$2(ctx) {
    	let svg;
    	let path;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "stroke-linecap", "round");
    			attr_dev(path, "stroke-linejoin", "round");
    			attr_dev(path, "d", "M19.5 8.25l-7.5 7.5-7.5-7.5");
    			add_location(path, file$7, 96, 8, 2270);
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "fill", "none");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			attr_dev(svg, "stroke-width", "3");
    			attr_dev(svg, "stroke", "currentColor");
    			attr_dev(svg, "class", "w-6 h-6 svelte-1lzq6gj");
    			attr_dev(svg, "width", "15");
    			attr_dev(svg, "height", "15");
    			add_location(svg, file$7, 95, 4, 2111);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$2.name,
    		type: "else",
    		source: "(95:4) {:else}",
    		ctx
    	});

    	return block;
    }

    // (91:4) {#if selected_index == index}
    function create_if_block_1$1(ctx) {
    	let svg;
    	let path;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "stroke-linecap", "round");
    			attr_dev(path, "stroke-linejoin", "round");
    			attr_dev(path, "d", "M4.5 15.75l7.5-7.5 7.5 7.5");
    			add_location(path, file$7, 92, 12, 1993);
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "fill", "none");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			attr_dev(svg, "stroke-width", "3");
    			attr_dev(svg, "stroke", "currentColor");
    			attr_dev(svg, "class", "w-6 h-6 svelte-1lzq6gj");
    			attr_dev(svg, "width", "15");
    			attr_dev(svg, "height", "15");
    			add_location(svg, file$7, 91, 8, 1830);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$1.name,
    		type: "if",
    		source: "(91:4) {#if selected_index == index}",
    		ctx
    	});

    	return block;
    }

    // (101:0) {#if selected_index == index}
    function create_if_block$3(ctx) {
    	let div;
    	let div_intro;
    	let div_outro;
    	let current;
    	let each_value = /*sub_categories*/ ctx[3];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(div, "class", "sub-category-container svelte-1lzq6gj");
    			add_location(div, file$7, 101, 4, 2420);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}

    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty & /*sub_categories*/ 8) {
    				each_value = /*sub_categories*/ ctx[3];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$1(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			add_render_callback(() => {
    				if (div_outro) div_outro.end(1);

    				div_intro = create_in_transition(div, fly, {
    					duration: 400,
    					x: 0,
    					y: -200,
    					easing: quintOut
    				});

    				div_intro.start();
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			if (div_intro) div_intro.invalidate();

    			div_outro = create_out_transition(div, fly, {
    				duration: 10,
    				x: 0,
    				y: -200,
    				easing: quadIn
    			});

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_each(each_blocks, detaching);
    			if (detaching && div_outro) div_outro.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$3.name,
    		type: "if",
    		source: "(101:0) {#if selected_index == index}",
    		ctx
    	});

    	return block;
    }

    // (103:8) {#each sub_categories as sub_category, sub_index}
    function create_each_block$1(ctx) {
    	let div;
    	let h3;
    	let t0_value = /*sub_category*/ ctx[6] + "";
    	let t0;
    	let t1;

    	const block = {
    		c: function create() {
    			div = element("div");
    			h3 = element("h3");
    			t0 = text(t0_value);
    			t1 = space();
    			attr_dev(h3, "class", "svelte-1lzq6gj");
    			add_location(h3, file$7, 104, 12, 2670);
    			attr_dev(div, "class", "sub-category svelte-1lzq6gj");
    			add_location(div, file$7, 103, 8, 2631);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, h3);
    			append_dev(h3, t0);
    			append_dev(div, t1);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$1.name,
    		type: "each",
    		source: "(103:8) {#each sub_categories as sub_category, sub_index}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$9(ctx) {
    	let div;
    	let h3;
    	let t0;
    	let t1;
    	let t2;
    	let if_block1_anchor;
    	let current;
    	let mounted;
    	let dispose;

    	function select_block_type(ctx, dirty) {
    		if (/*selected_index*/ ctx[1] == /*index*/ ctx[2]) return create_if_block_1$1;
    		return create_else_block$2;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block0 = current_block_type(ctx);
    	let if_block1 = /*selected_index*/ ctx[1] == /*index*/ ctx[2] && create_if_block$3(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			h3 = element("h3");
    			t0 = text(/*category*/ ctx[0]);
    			t1 = space();
    			if_block0.c();
    			t2 = space();
    			if (if_block1) if_block1.c();
    			if_block1_anchor = empty();
    			attr_dev(h3, "class", "svelte-1lzq6gj");
    			add_location(h3, file$7, 89, 4, 1768);
    			attr_dev(div, "class", "category svelte-1lzq6gj");
    			add_location(div, file$7, 88, 0, 1715);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, h3);
    			append_dev(h3, t0);
    			append_dev(div, t1);
    			if_block0.m(div, null);
    			insert_dev(target, t2, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, if_block1_anchor, anchor);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(div, "click", /*categorySelect*/ ctx[4], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (!current || dirty & /*category*/ 1) set_data_dev(t0, /*category*/ ctx[0]);

    			if (current_block_type !== (current_block_type = select_block_type(ctx))) {
    				if_block0.d(1);
    				if_block0 = current_block_type(ctx);

    				if (if_block0) {
    					if_block0.c();
    					if_block0.m(div, null);
    				}
    			}

    			if (/*selected_index*/ ctx[1] == /*index*/ ctx[2]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty & /*selected_index, index*/ 6) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block$3(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block1);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block1);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if_block0.d();
    			if (detaching) detach_dev(t2);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach_dev(if_block1_anchor);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$9.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$9($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Category', slots, []);
    	let { category = "이름없음" } = $$props;
    	let { selected_index = null } = $$props;
    	let { index = 0 } = $$props;
    	let sub_categories = ["행사", "훈련", "교육", "교장"];
    	var dispatch = createEventDispatcher();

    	function categorySelect() {
    		if (index == selected_index) {
    			dispatch('click', { index: null });
    		} else {
    			dispatch('click', { index });
    		}
    	}

    	const writable_props = ['category', 'selected_index', 'index'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Category> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('category' in $$props) $$invalidate(0, category = $$props.category);
    		if ('selected_index' in $$props) $$invalidate(1, selected_index = $$props.selected_index);
    		if ('index' in $$props) $$invalidate(2, index = $$props.index);
    	};

    	$$self.$capture_state = () => ({
    		category,
    		selected_index,
    		index,
    		sub_categories,
    		createEventDispatcher,
    		fly,
    		quintIn,
    		quintOut,
    		quadIn,
    		dispatch,
    		categorySelect
    	});

    	$$self.$inject_state = $$props => {
    		if ('category' in $$props) $$invalidate(0, category = $$props.category);
    		if ('selected_index' in $$props) $$invalidate(1, selected_index = $$props.selected_index);
    		if ('index' in $$props) $$invalidate(2, index = $$props.index);
    		if ('sub_categories' in $$props) $$invalidate(3, sub_categories = $$props.sub_categories);
    		if ('dispatch' in $$props) dispatch = $$props.dispatch;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [category, selected_index, index, sub_categories, categorySelect];
    }

    class Category extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$9, create_fragment$9, safe_not_equal, { category: 0, selected_index: 1, index: 2 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Category",
    			options,
    			id: create_fragment$9.name
    		});
    	}

    	get category() {
    		throw new Error("<Category>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set category(value) {
    		throw new Error("<Category>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get selected_index() {
    		throw new Error("<Category>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selected_index(value) {
    		throw new Error("<Category>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get index() {
    		throw new Error("<Category>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set index(value) {
    		throw new Error("<Category>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* pages/content_container/ContentItem.svelte generated by Svelte v3.50.1 */
    const file$8 = "pages/content_container/ContentItem.svelte";

    function create_fragment$a(ctx) {
    	let div5;
    	let div4;
    	let div0;
    	let img;
    	let img_src_value;
    	let t0;
    	let div1;
    	let h30;
    	let t1_value = /*item*/ ctx[0].title + "";
    	let t1;
    	let t2;
    	let div2;
    	let h31;
    	let t3_value = /*item*/ ctx[0].created_at + "";
    	let t3;
    	let t4;
    	let div3;
    	let h32;
    	let t5;
    	let t6_value = /*item*/ ctx[0].associate + "";
    	let t6;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div5 = element("div");
    			div4 = element("div");
    			div0 = element("div");
    			img = element("img");
    			t0 = space();
    			div1 = element("div");
    			h30 = element("h3");
    			t1 = text(t1_value);
    			t2 = space();
    			div2 = element("div");
    			h31 = element("h3");
    			t3 = text(t3_value);
    			t4 = space();
    			div3 = element("div");
    			h32 = element("h3");
    			t5 = text("촬영자: ");
    			t6 = text(t6_value);
    			if (!src_url_equal(img.src, img_src_value = /*item*/ ctx[0].src[0])) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "width", "100%");
    			add_location(img, file$8, 92, 12, 1958);
    			attr_dev(div0, "class", "img-container svelte-1al6yfm");
    			add_location(div0, file$8, 91, 8, 1918);
    			attr_dev(h30, "class", "svelte-1al6yfm");
    			add_location(h30, file$8, 96, 12, 2091);
    			attr_dev(div1, "class", "title-container svelte-1al6yfm");
    			add_location(div1, file$8, 95, 8, 2049);
    			attr_dev(h31, "class", "svelte-1al6yfm");
    			add_location(h31, file$8, 99, 12, 2177);
    			attr_dev(div2, "class", "date-container svelte-1al6yfm");
    			add_location(div2, file$8, 98, 8, 2136);
    			attr_dev(h32, "class", "svelte-1al6yfm");
    			add_location(h32, file$8, 102, 12, 2271);
    			attr_dev(div3, "class", "creater-container svelte-1al6yfm");
    			add_location(div3, file$8, 101, 8, 2227);
    			attr_dev(div4, "class", "content-item-folder svelte-1al6yfm");
    			add_location(div4, file$8, 90, 4, 1876);
    			attr_dev(div5, "class", "browse-contents-list-item svelte-1al6yfm");
    			add_location(div5, file$8, 89, 0, 1809);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div5, anchor);
    			append_dev(div5, div4);
    			append_dev(div4, div0);
    			append_dev(div0, img);
    			append_dev(div4, t0);
    			append_dev(div4, div1);
    			append_dev(div1, h30);
    			append_dev(h30, t1);
    			append_dev(div4, t2);
    			append_dev(div4, div2);
    			append_dev(div2, h31);
    			append_dev(h31, t3);
    			append_dev(div4, t4);
    			append_dev(div4, div3);
    			append_dev(div3, h32);
    			append_dev(h32, t5);
    			append_dev(h32, t6);

    			if (!mounted) {
    				dispose = listen_dev(div5, "click", /*clickHandle*/ ctx[1], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*item*/ 1 && !src_url_equal(img.src, img_src_value = /*item*/ ctx[0].src[0])) {
    				attr_dev(img, "src", img_src_value);
    			}

    			if (dirty & /*item*/ 1 && t1_value !== (t1_value = /*item*/ ctx[0].title + "")) set_data_dev(t1, t1_value);
    			if (dirty & /*item*/ 1 && t3_value !== (t3_value = /*item*/ ctx[0].created_at + "")) set_data_dev(t3, t3_value);
    			if (dirty & /*item*/ 1 && t6_value !== (t6_value = /*item*/ ctx[0].associate + "")) set_data_dev(t6, t6_value);
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div5);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$a.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$a($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ContentItem', slots, []);
    	var dispatch = createEventDispatcher();
    	let { item } = $$props;

    	function clickHandle() {
    		dispatch('click', { item });
    	}

    	const writable_props = ['item'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ContentItem> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('item' in $$props) $$invalidate(0, item = $$props.item);
    	};

    	$$self.$capture_state = () => ({
    		createEventDispatcher,
    		dispatch,
    		item,
    		clickHandle
    	});

    	$$self.$inject_state = $$props => {
    		if ('dispatch' in $$props) dispatch = $$props.dispatch;
    		if ('item' in $$props) $$invalidate(0, item = $$props.item);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [item, clickHandle];
    }

    class ContentItem extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$a, create_fragment$a, safe_not_equal, { item: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ContentItem",
    			options,
    			id: create_fragment$a.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*item*/ ctx[0] === undefined && !('item' in props)) {
    			console.warn("<ContentItem> was created without expected prop 'item'");
    		}
    	}

    	get item() {
    		throw new Error("<ContentItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set item(value) {
    		throw new Error("<ContentItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var bind = function bind(fn, thisArg) {
      return function wrap() {
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i];
        }
        return fn.apply(thisArg, args);
      };
    };

    // utils is a library of generic helper functions non-specific to axios

    var toString = Object.prototype.toString;

    // eslint-disable-next-line func-names
    var kindOf = (function(cache) {
      // eslint-disable-next-line func-names
      return function(thing) {
        var str = toString.call(thing);
        return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
      };
    })(Object.create(null));

    function kindOfTest(type) {
      type = type.toLowerCase();
      return function isKindOf(thing) {
        return kindOf(thing) === type;
      };
    }

    /**
     * Determine if a value is an Array
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is an Array, otherwise false
     */
    function isArray(val) {
      return Array.isArray(val);
    }

    /**
     * Determine if a value is undefined
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if the value is undefined, otherwise false
     */
    function isUndefined(val) {
      return typeof val === 'undefined';
    }

    /**
     * Determine if a value is a Buffer
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Buffer, otherwise false
     */
    function isBuffer(val) {
      return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)
        && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);
    }

    /**
     * Determine if a value is an ArrayBuffer
     *
     * @function
     * @param {Object} val The value to test
     * @returns {boolean} True if value is an ArrayBuffer, otherwise false
     */
    var isArrayBuffer = kindOfTest('ArrayBuffer');


    /**
     * Determine if a value is a view on an ArrayBuffer
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
     */
    function isArrayBufferView(val) {
      var result;
      if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
        result = ArrayBuffer.isView(val);
      } else {
        result = (val) && (val.buffer) && (isArrayBuffer(val.buffer));
      }
      return result;
    }

    /**
     * Determine if a value is a String
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a String, otherwise false
     */
    function isString(val) {
      return typeof val === 'string';
    }

    /**
     * Determine if a value is a Number
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Number, otherwise false
     */
    function isNumber(val) {
      return typeof val === 'number';
    }

    /**
     * Determine if a value is an Object
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is an Object, otherwise false
     */
    function isObject(val) {
      return val !== null && typeof val === 'object';
    }

    /**
     * Determine if a value is a plain Object
     *
     * @param {Object} val The value to test
     * @return {boolean} True if value is a plain Object, otherwise false
     */
    function isPlainObject(val) {
      if (kindOf(val) !== 'object') {
        return false;
      }

      var prototype = Object.getPrototypeOf(val);
      return prototype === null || prototype === Object.prototype;
    }

    /**
     * Determine if a value is a Date
     *
     * @function
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Date, otherwise false
     */
    var isDate = kindOfTest('Date');

    /**
     * Determine if a value is a File
     *
     * @function
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a File, otherwise false
     */
    var isFile = kindOfTest('File');

    /**
     * Determine if a value is a Blob
     *
     * @function
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Blob, otherwise false
     */
    var isBlob = kindOfTest('Blob');

    /**
     * Determine if a value is a FileList
     *
     * @function
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a File, otherwise false
     */
    var isFileList = kindOfTest('FileList');

    /**
     * Determine if a value is a Function
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Function, otherwise false
     */
    function isFunction(val) {
      return toString.call(val) === '[object Function]';
    }

    /**
     * Determine if a value is a Stream
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Stream, otherwise false
     */
    function isStream(val) {
      return isObject(val) && isFunction(val.pipe);
    }

    /**
     * Determine if a value is a FormData
     *
     * @param {Object} thing The value to test
     * @returns {boolean} True if value is an FormData, otherwise false
     */
    function isFormData(thing) {
      var pattern = '[object FormData]';
      return thing && (
        (typeof FormData === 'function' && thing instanceof FormData) ||
        toString.call(thing) === pattern ||
        (isFunction(thing.toString) && thing.toString() === pattern)
      );
    }

    /**
     * Determine if a value is a URLSearchParams object
     * @function
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a URLSearchParams object, otherwise false
     */
    var isURLSearchParams = kindOfTest('URLSearchParams');

    /**
     * Trim excess whitespace off the beginning and end of a string
     *
     * @param {String} str The String to trim
     * @returns {String} The String freed of excess whitespace
     */
    function trim(str) {
      return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, '');
    }

    /**
     * Determine if we're running in a standard browser environment
     *
     * This allows axios to run in a web worker, and react-native.
     * Both environments support XMLHttpRequest, but not fully standard globals.
     *
     * web workers:
     *  typeof window -> undefined
     *  typeof document -> undefined
     *
     * react-native:
     *  navigator.product -> 'ReactNative'
     * nativescript
     *  navigator.product -> 'NativeScript' or 'NS'
     */
    function isStandardBrowserEnv() {
      if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||
                                               navigator.product === 'NativeScript' ||
                                               navigator.product === 'NS')) {
        return false;
      }
      return (
        typeof window !== 'undefined' &&
        typeof document !== 'undefined'
      );
    }

    /**
     * Iterate over an Array or an Object invoking a function for each item.
     *
     * If `obj` is an Array callback will be called passing
     * the value, index, and complete array for each item.
     *
     * If 'obj' is an Object callback will be called passing
     * the value, key, and complete object for each property.
     *
     * @param {Object|Array} obj The object to iterate
     * @param {Function} fn The callback to invoke for each item
     */
    function forEach(obj, fn) {
      // Don't bother if no value provided
      if (obj === null || typeof obj === 'undefined') {
        return;
      }

      // Force an array if not already something iterable
      if (typeof obj !== 'object') {
        /*eslint no-param-reassign:0*/
        obj = [obj];
      }

      if (isArray(obj)) {
        // Iterate over array values
        for (var i = 0, l = obj.length; i < l; i++) {
          fn.call(null, obj[i], i, obj);
        }
      } else {
        // Iterate over object keys
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
            fn.call(null, obj[key], key, obj);
          }
        }
      }
    }

    /**
     * Accepts varargs expecting each argument to be an object, then
     * immutably merges the properties of each object and returns result.
     *
     * When multiple objects contain the same key the later object in
     * the arguments list will take precedence.
     *
     * Example:
     *
     * ```js
     * var result = merge({foo: 123}, {foo: 456});
     * console.log(result.foo); // outputs 456
     * ```
     *
     * @param {Object} obj1 Object to merge
     * @returns {Object} Result of all merge properties
     */
    function merge(/* obj1, obj2, obj3, ... */) {
      var result = {};
      function assignValue(val, key) {
        if (isPlainObject(result[key]) && isPlainObject(val)) {
          result[key] = merge(result[key], val);
        } else if (isPlainObject(val)) {
          result[key] = merge({}, val);
        } else if (isArray(val)) {
          result[key] = val.slice();
        } else {
          result[key] = val;
        }
      }

      for (var i = 0, l = arguments.length; i < l; i++) {
        forEach(arguments[i], assignValue);
      }
      return result;
    }

    /**
     * Extends object a by mutably adding to it the properties of object b.
     *
     * @param {Object} a The object to be extended
     * @param {Object} b The object to copy properties from
     * @param {Object} thisArg The object to bind function to
     * @return {Object} The resulting value of object a
     */
    function extend(a, b, thisArg) {
      forEach(b, function assignValue(val, key) {
        if (thisArg && typeof val === 'function') {
          a[key] = bind(val, thisArg);
        } else {
          a[key] = val;
        }
      });
      return a;
    }

    /**
     * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
     *
     * @param {string} content with BOM
     * @return {string} content value without BOM
     */
    function stripBOM(content) {
      if (content.charCodeAt(0) === 0xFEFF) {
        content = content.slice(1);
      }
      return content;
    }

    /**
     * Inherit the prototype methods from one constructor into another
     * @param {function} constructor
     * @param {function} superConstructor
     * @param {object} [props]
     * @param {object} [descriptors]
     */

    function inherits(constructor, superConstructor, props, descriptors) {
      constructor.prototype = Object.create(superConstructor.prototype, descriptors);
      constructor.prototype.constructor = constructor;
      props && Object.assign(constructor.prototype, props);
    }

    /**
     * Resolve object with deep prototype chain to a flat object
     * @param {Object} sourceObj source object
     * @param {Object} [destObj]
     * @param {Function} [filter]
     * @returns {Object}
     */

    function toFlatObject(sourceObj, destObj, filter) {
      var props;
      var i;
      var prop;
      var merged = {};

      destObj = destObj || {};

      do {
        props = Object.getOwnPropertyNames(sourceObj);
        i = props.length;
        while (i-- > 0) {
          prop = props[i];
          if (!merged[prop]) {
            destObj[prop] = sourceObj[prop];
            merged[prop] = true;
          }
        }
        sourceObj = Object.getPrototypeOf(sourceObj);
      } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);

      return destObj;
    }

    /*
     * determines whether a string ends with the characters of a specified string
     * @param {String} str
     * @param {String} searchString
     * @param {Number} [position= 0]
     * @returns {boolean}
     */
    function endsWith(str, searchString, position) {
      str = String(str);
      if (position === undefined || position > str.length) {
        position = str.length;
      }
      position -= searchString.length;
      var lastIndex = str.indexOf(searchString, position);
      return lastIndex !== -1 && lastIndex === position;
    }


    /**
     * Returns new array from array like object
     * @param {*} [thing]
     * @returns {Array}
     */
    function toArray(thing) {
      if (!thing) return null;
      var i = thing.length;
      if (isUndefined(i)) return null;
      var arr = new Array(i);
      while (i-- > 0) {
        arr[i] = thing[i];
      }
      return arr;
    }

    // eslint-disable-next-line func-names
    var isTypedArray = (function(TypedArray) {
      // eslint-disable-next-line func-names
      return function(thing) {
        return TypedArray && thing instanceof TypedArray;
      };
    })(typeof Uint8Array !== 'undefined' && Object.getPrototypeOf(Uint8Array));

    var utils = {
      isArray: isArray,
      isArrayBuffer: isArrayBuffer,
      isBuffer: isBuffer,
      isFormData: isFormData,
      isArrayBufferView: isArrayBufferView,
      isString: isString,
      isNumber: isNumber,
      isObject: isObject,
      isPlainObject: isPlainObject,
      isUndefined: isUndefined,
      isDate: isDate,
      isFile: isFile,
      isBlob: isBlob,
      isFunction: isFunction,
      isStream: isStream,
      isURLSearchParams: isURLSearchParams,
      isStandardBrowserEnv: isStandardBrowserEnv,
      forEach: forEach,
      merge: merge,
      extend: extend,
      trim: trim,
      stripBOM: stripBOM,
      inherits: inherits,
      toFlatObject: toFlatObject,
      kindOf: kindOf,
      kindOfTest: kindOfTest,
      endsWith: endsWith,
      toArray: toArray,
      isTypedArray: isTypedArray,
      isFileList: isFileList
    };

    function encode(val) {
      return encodeURIComponent(val).
        replace(/%3A/gi, ':').
        replace(/%24/g, '$').
        replace(/%2C/gi, ',').
        replace(/%20/g, '+').
        replace(/%5B/gi, '[').
        replace(/%5D/gi, ']');
    }

    /**
     * Build a URL by appending params to the end
     *
     * @param {string} url The base of the url (e.g., http://www.google.com)
     * @param {object} [params] The params to be appended
     * @returns {string} The formatted url
     */
    var buildURL = function buildURL(url, params, paramsSerializer) {
      /*eslint no-param-reassign:0*/
      if (!params) {
        return url;
      }

      var serializedParams;
      if (paramsSerializer) {
        serializedParams = paramsSerializer(params);
      } else if (utils.isURLSearchParams(params)) {
        serializedParams = params.toString();
      } else {
        var parts = [];

        utils.forEach(params, function serialize(val, key) {
          if (val === null || typeof val === 'undefined') {
            return;
          }

          if (utils.isArray(val)) {
            key = key + '[]';
          } else {
            val = [val];
          }

          utils.forEach(val, function parseValue(v) {
            if (utils.isDate(v)) {
              v = v.toISOString();
            } else if (utils.isObject(v)) {
              v = JSON.stringify(v);
            }
            parts.push(encode(key) + '=' + encode(v));
          });
        });

        serializedParams = parts.join('&');
      }

      if (serializedParams) {
        var hashmarkIndex = url.indexOf('#');
        if (hashmarkIndex !== -1) {
          url = url.slice(0, hashmarkIndex);
        }

        url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
      }

      return url;
    };

    function InterceptorManager() {
      this.handlers = [];
    }

    /**
     * Add a new interceptor to the stack
     *
     * @param {Function} fulfilled The function to handle `then` for a `Promise`
     * @param {Function} rejected The function to handle `reject` for a `Promise`
     *
     * @return {Number} An ID used to remove interceptor later
     */
    InterceptorManager.prototype.use = function use(fulfilled, rejected, options) {
      this.handlers.push({
        fulfilled: fulfilled,
        rejected: rejected,
        synchronous: options ? options.synchronous : false,
        runWhen: options ? options.runWhen : null
      });
      return this.handlers.length - 1;
    };

    /**
     * Remove an interceptor from the stack
     *
     * @param {Number} id The ID that was returned by `use`
     */
    InterceptorManager.prototype.eject = function eject(id) {
      if (this.handlers[id]) {
        this.handlers[id] = null;
      }
    };

    /**
     * Iterate over all the registered interceptors
     *
     * This method is particularly useful for skipping over any
     * interceptors that may have become `null` calling `eject`.
     *
     * @param {Function} fn The function to call for each interceptor
     */
    InterceptorManager.prototype.forEach = function forEach(fn) {
      utils.forEach(this.handlers, function forEachHandler(h) {
        if (h !== null) {
          fn(h);
        }
      });
    };

    var InterceptorManager_1 = InterceptorManager;

    var normalizeHeaderName = function normalizeHeaderName(headers, normalizedName) {
      utils.forEach(headers, function processHeader(value, name) {
        if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
          headers[normalizedName] = value;
          delete headers[name];
        }
      });
    };

    /**
     * Create an Error with the specified message, config, error code, request and response.
     *
     * @param {string} message The error message.
     * @param {string} [code] The error code (for example, 'ECONNABORTED').
     * @param {Object} [config] The config.
     * @param {Object} [request] The request.
     * @param {Object} [response] The response.
     * @returns {Error} The created error.
     */
    function AxiosError(message, code, config, request, response) {
      Error.call(this);
      this.message = message;
      this.name = 'AxiosError';
      code && (this.code = code);
      config && (this.config = config);
      request && (this.request = request);
      response && (this.response = response);
    }

    utils.inherits(AxiosError, Error, {
      toJSON: function toJSON() {
        return {
          // Standard
          message: this.message,
          name: this.name,
          // Microsoft
          description: this.description,
          number: this.number,
          // Mozilla
          fileName: this.fileName,
          lineNumber: this.lineNumber,
          columnNumber: this.columnNumber,
          stack: this.stack,
          // Axios
          config: this.config,
          code: this.code,
          status: this.response && this.response.status ? this.response.status : null
        };
      }
    });

    var prototype = AxiosError.prototype;
    var descriptors = {};

    [
      'ERR_BAD_OPTION_VALUE',
      'ERR_BAD_OPTION',
      'ECONNABORTED',
      'ETIMEDOUT',
      'ERR_NETWORK',
      'ERR_FR_TOO_MANY_REDIRECTS',
      'ERR_DEPRECATED',
      'ERR_BAD_RESPONSE',
      'ERR_BAD_REQUEST',
      'ERR_CANCELED'
    // eslint-disable-next-line func-names
    ].forEach(function(code) {
      descriptors[code] = {value: code};
    });

    Object.defineProperties(AxiosError, descriptors);
    Object.defineProperty(prototype, 'isAxiosError', {value: true});

    // eslint-disable-next-line func-names
    AxiosError.from = function(error, code, config, request, response, customProps) {
      var axiosError = Object.create(prototype);

      utils.toFlatObject(error, axiosError, function filter(obj) {
        return obj !== Error.prototype;
      });

      AxiosError.call(axiosError, error.message, code, config, request, response);

      axiosError.name = error.name;

      customProps && Object.assign(axiosError, customProps);

      return axiosError;
    };

    var AxiosError_1 = AxiosError;

    var transitional = {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    };

    /**
     * Convert a data object to FormData
     * @param {Object} obj
     * @param {?Object} [formData]
     * @returns {Object}
     **/

    function toFormData(obj, formData) {
      // eslint-disable-next-line no-param-reassign
      formData = formData || new FormData();

      var stack = [];

      function convertValue(value) {
        if (value === null) return '';

        if (utils.isDate(value)) {
          return value.toISOString();
        }

        if (utils.isArrayBuffer(value) || utils.isTypedArray(value)) {
          return typeof Blob === 'function' ? new Blob([value]) : Buffer.from(value);
        }

        return value;
      }

      function build(data, parentKey) {
        if (utils.isPlainObject(data) || utils.isArray(data)) {
          if (stack.indexOf(data) !== -1) {
            throw Error('Circular reference detected in ' + parentKey);
          }

          stack.push(data);

          utils.forEach(data, function each(value, key) {
            if (utils.isUndefined(value)) return;
            var fullKey = parentKey ? parentKey + '.' + key : key;
            var arr;

            if (value && !parentKey && typeof value === 'object') {
              if (utils.endsWith(key, '{}')) {
                // eslint-disable-next-line no-param-reassign
                value = JSON.stringify(value);
              } else if (utils.endsWith(key, '[]') && (arr = utils.toArray(value))) {
                // eslint-disable-next-line func-names
                arr.forEach(function(el) {
                  !utils.isUndefined(el) && formData.append(fullKey, convertValue(el));
                });
                return;
              }
            }

            build(value, fullKey);
          });

          stack.pop();
        } else {
          formData.append(parentKey, convertValue(data));
        }
      }

      build(obj);

      return formData;
    }

    var toFormData_1 = toFormData;

    /**
     * Resolve or reject a Promise based on response status.
     *
     * @param {Function} resolve A function that resolves the promise.
     * @param {Function} reject A function that rejects the promise.
     * @param {object} response The response.
     */
    var settle = function settle(resolve, reject, response) {
      var validateStatus = response.config.validateStatus;
      if (!response.status || !validateStatus || validateStatus(response.status)) {
        resolve(response);
      } else {
        reject(new AxiosError_1(
          'Request failed with status code ' + response.status,
          [AxiosError_1.ERR_BAD_REQUEST, AxiosError_1.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
          response.config,
          response.request,
          response
        ));
      }
    };

    var cookies = (
      utils.isStandardBrowserEnv() ?

      // Standard browser envs support document.cookie
        (function standardBrowserEnv() {
          return {
            write: function write(name, value, expires, path, domain, secure) {
              var cookie = [];
              cookie.push(name + '=' + encodeURIComponent(value));

              if (utils.isNumber(expires)) {
                cookie.push('expires=' + new Date(expires).toGMTString());
              }

              if (utils.isString(path)) {
                cookie.push('path=' + path);
              }

              if (utils.isString(domain)) {
                cookie.push('domain=' + domain);
              }

              if (secure === true) {
                cookie.push('secure');
              }

              document.cookie = cookie.join('; ');
            },

            read: function read(name) {
              var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
              return (match ? decodeURIComponent(match[3]) : null);
            },

            remove: function remove(name) {
              this.write(name, '', Date.now() - 86400000);
            }
          };
        })() :

      // Non standard browser env (web workers, react-native) lack needed support.
        (function nonStandardBrowserEnv() {
          return {
            write: function write() {},
            read: function read() { return null; },
            remove: function remove() {}
          };
        })()
    );

    /**
     * Determines whether the specified URL is absolute
     *
     * @param {string} url The URL to test
     * @returns {boolean} True if the specified URL is absolute, otherwise false
     */
    var isAbsoluteURL = function isAbsoluteURL(url) {
      // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
      // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
      // by any combination of letters, digits, plus, period, or hyphen.
      return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
    };

    /**
     * Creates a new URL by combining the specified URLs
     *
     * @param {string} baseURL The base URL
     * @param {string} relativeURL The relative URL
     * @returns {string} The combined URL
     */
    var combineURLs = function combineURLs(baseURL, relativeURL) {
      return relativeURL
        ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
        : baseURL;
    };

    /**
     * Creates a new URL by combining the baseURL with the requestedURL,
     * only when the requestedURL is not already an absolute URL.
     * If the requestURL is absolute, this function returns the requestedURL untouched.
     *
     * @param {string} baseURL The base URL
     * @param {string} requestedURL Absolute or relative URL to combine
     * @returns {string} The combined full path
     */
    var buildFullPath = function buildFullPath(baseURL, requestedURL) {
      if (baseURL && !isAbsoluteURL(requestedURL)) {
        return combineURLs(baseURL, requestedURL);
      }
      return requestedURL;
    };

    // Headers whose duplicates are ignored by node
    // c.f. https://nodejs.org/api/http.html#http_message_headers
    var ignoreDuplicateOf = [
      'age', 'authorization', 'content-length', 'content-type', 'etag',
      'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
      'last-modified', 'location', 'max-forwards', 'proxy-authorization',
      'referer', 'retry-after', 'user-agent'
    ];

    /**
     * Parse headers into an object
     *
     * ```
     * Date: Wed, 27 Aug 2014 08:58:49 GMT
     * Content-Type: application/json
     * Connection: keep-alive
     * Transfer-Encoding: chunked
     * ```
     *
     * @param {String} headers Headers needing to be parsed
     * @returns {Object} Headers parsed into an object
     */
    var parseHeaders = function parseHeaders(headers) {
      var parsed = {};
      var key;
      var val;
      var i;

      if (!headers) { return parsed; }

      utils.forEach(headers.split('\n'), function parser(line) {
        i = line.indexOf(':');
        key = utils.trim(line.substr(0, i)).toLowerCase();
        val = utils.trim(line.substr(i + 1));

        if (key) {
          if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
            return;
          }
          if (key === 'set-cookie') {
            parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
          } else {
            parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
          }
        }
      });

      return parsed;
    };

    var isURLSameOrigin = (
      utils.isStandardBrowserEnv() ?

      // Standard browser envs have full support of the APIs needed to test
      // whether the request URL is of the same origin as current location.
        (function standardBrowserEnv() {
          var msie = /(msie|trident)/i.test(navigator.userAgent);
          var urlParsingNode = document.createElement('a');
          var originURL;

          /**
        * Parse a URL to discover it's components
        *
        * @param {String} url The URL to be parsed
        * @returns {Object}
        */
          function resolveURL(url) {
            var href = url;

            if (msie) {
            // IE needs attribute set twice to normalize properties
              urlParsingNode.setAttribute('href', href);
              href = urlParsingNode.href;
            }

            urlParsingNode.setAttribute('href', href);

            // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
            return {
              href: urlParsingNode.href,
              protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
              host: urlParsingNode.host,
              search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
              hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
              hostname: urlParsingNode.hostname,
              port: urlParsingNode.port,
              pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
                urlParsingNode.pathname :
                '/' + urlParsingNode.pathname
            };
          }

          originURL = resolveURL(window.location.href);

          /**
        * Determine if a URL shares the same origin as the current location
        *
        * @param {String} requestURL The URL to test
        * @returns {boolean} True if URL shares the same origin, otherwise false
        */
          return function isURLSameOrigin(requestURL) {
            var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
            return (parsed.protocol === originURL.protocol &&
                parsed.host === originURL.host);
          };
        })() :

      // Non standard browser envs (web workers, react-native) lack needed support.
        (function nonStandardBrowserEnv() {
          return function isURLSameOrigin() {
            return true;
          };
        })()
    );

    /**
     * A `CanceledError` is an object that is thrown when an operation is canceled.
     *
     * @class
     * @param {string=} message The message.
     */
    function CanceledError(message) {
      // eslint-disable-next-line no-eq-null,eqeqeq
      AxiosError_1.call(this, message == null ? 'canceled' : message, AxiosError_1.ERR_CANCELED);
      this.name = 'CanceledError';
    }

    utils.inherits(CanceledError, AxiosError_1, {
      __CANCEL__: true
    });

    var CanceledError_1 = CanceledError;

    var parseProtocol = function parseProtocol(url) {
      var match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
      return match && match[1] || '';
    };

    var xhr = function xhrAdapter(config) {
      return new Promise(function dispatchXhrRequest(resolve, reject) {
        var requestData = config.data;
        var requestHeaders = config.headers;
        var responseType = config.responseType;
        var onCanceled;
        function done() {
          if (config.cancelToken) {
            config.cancelToken.unsubscribe(onCanceled);
          }

          if (config.signal) {
            config.signal.removeEventListener('abort', onCanceled);
          }
        }

        if (utils.isFormData(requestData) && utils.isStandardBrowserEnv()) {
          delete requestHeaders['Content-Type']; // Let the browser set it
        }

        var request = new XMLHttpRequest();

        // HTTP basic authentication
        if (config.auth) {
          var username = config.auth.username || '';
          var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';
          requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
        }

        var fullPath = buildFullPath(config.baseURL, config.url);

        request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);

        // Set the request timeout in MS
        request.timeout = config.timeout;

        function onloadend() {
          if (!request) {
            return;
          }
          // Prepare the response
          var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
          var responseData = !responseType || responseType === 'text' ||  responseType === 'json' ?
            request.responseText : request.response;
          var response = {
            data: responseData,
            status: request.status,
            statusText: request.statusText,
            headers: responseHeaders,
            config: config,
            request: request
          };

          settle(function _resolve(value) {
            resolve(value);
            done();
          }, function _reject(err) {
            reject(err);
            done();
          }, response);

          // Clean up request
          request = null;
        }

        if ('onloadend' in request) {
          // Use onloadend if available
          request.onloadend = onloadend;
        } else {
          // Listen for ready state to emulate onloadend
          request.onreadystatechange = function handleLoad() {
            if (!request || request.readyState !== 4) {
              return;
            }

            // The request errored out and we didn't get a response, this will be
            // handled by onerror instead
            // With one exception: request that using file: protocol, most browsers
            // will return status as 0 even though it's a successful request
            if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
              return;
            }
            // readystate handler is calling before onerror or ontimeout handlers,
            // so we should call onloadend on the next 'tick'
            setTimeout(onloadend);
          };
        }

        // Handle browser request cancellation (as opposed to a manual cancellation)
        request.onabort = function handleAbort() {
          if (!request) {
            return;
          }

          reject(new AxiosError_1('Request aborted', AxiosError_1.ECONNABORTED, config, request));

          // Clean up request
          request = null;
        };

        // Handle low level network errors
        request.onerror = function handleError() {
          // Real errors are hidden from us by the browser
          // onerror should only fire if it's a network error
          reject(new AxiosError_1('Network Error', AxiosError_1.ERR_NETWORK, config, request, request));

          // Clean up request
          request = null;
        };

        // Handle timeout
        request.ontimeout = function handleTimeout() {
          var timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';
          var transitional$1 = config.transitional || transitional;
          if (config.timeoutErrorMessage) {
            timeoutErrorMessage = config.timeoutErrorMessage;
          }
          reject(new AxiosError_1(
            timeoutErrorMessage,
            transitional$1.clarifyTimeoutError ? AxiosError_1.ETIMEDOUT : AxiosError_1.ECONNABORTED,
            config,
            request));

          // Clean up request
          request = null;
        };

        // Add xsrf header
        // This is only done if running in a standard browser environment.
        // Specifically not if we're in a web worker, or react-native.
        if (utils.isStandardBrowserEnv()) {
          // Add xsrf header
          var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?
            cookies.read(config.xsrfCookieName) :
            undefined;

          if (xsrfValue) {
            requestHeaders[config.xsrfHeaderName] = xsrfValue;
          }
        }

        // Add headers to the request
        if ('setRequestHeader' in request) {
          utils.forEach(requestHeaders, function setRequestHeader(val, key) {
            if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
              // Remove Content-Type if data is undefined
              delete requestHeaders[key];
            } else {
              // Otherwise add header to the request
              request.setRequestHeader(key, val);
            }
          });
        }

        // Add withCredentials to request if needed
        if (!utils.isUndefined(config.withCredentials)) {
          request.withCredentials = !!config.withCredentials;
        }

        // Add responseType to request if needed
        if (responseType && responseType !== 'json') {
          request.responseType = config.responseType;
        }

        // Handle progress if needed
        if (typeof config.onDownloadProgress === 'function') {
          request.addEventListener('progress', config.onDownloadProgress);
        }

        // Not all browsers support upload events
        if (typeof config.onUploadProgress === 'function' && request.upload) {
          request.upload.addEventListener('progress', config.onUploadProgress);
        }

        if (config.cancelToken || config.signal) {
          // Handle cancellation
          // eslint-disable-next-line func-names
          onCanceled = function(cancel) {
            if (!request) {
              return;
            }
            reject(!cancel || (cancel && cancel.type) ? new CanceledError_1() : cancel);
            request.abort();
            request = null;
          };

          config.cancelToken && config.cancelToken.subscribe(onCanceled);
          if (config.signal) {
            config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);
          }
        }

        if (!requestData) {
          requestData = null;
        }

        var protocol = parseProtocol(fullPath);

        if (protocol && [ 'http', 'https', 'file' ].indexOf(protocol) === -1) {
          reject(new AxiosError_1('Unsupported protocol ' + protocol + ':', AxiosError_1.ERR_BAD_REQUEST, config));
          return;
        }


        // Send the request
        request.send(requestData);
      });
    };

    // eslint-disable-next-line strict
    var _null = null;

    var DEFAULT_CONTENT_TYPE = {
      'Content-Type': 'application/x-www-form-urlencoded'
    };

    function setContentTypeIfUnset(headers, value) {
      if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
        headers['Content-Type'] = value;
      }
    }

    function getDefaultAdapter() {
      var adapter;
      if (typeof XMLHttpRequest !== 'undefined') {
        // For browsers use XHR adapter
        adapter = xhr;
      } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
        // For node use HTTP adapter
        adapter = xhr;
      }
      return adapter;
    }

    function stringifySafely(rawValue, parser, encoder) {
      if (utils.isString(rawValue)) {
        try {
          (parser || JSON.parse)(rawValue);
          return utils.trim(rawValue);
        } catch (e) {
          if (e.name !== 'SyntaxError') {
            throw e;
          }
        }
      }

      return (encoder || JSON.stringify)(rawValue);
    }

    var defaults = {

      transitional: transitional,

      adapter: getDefaultAdapter(),

      transformRequest: [function transformRequest(data, headers) {
        normalizeHeaderName(headers, 'Accept');
        normalizeHeaderName(headers, 'Content-Type');

        if (utils.isFormData(data) ||
          utils.isArrayBuffer(data) ||
          utils.isBuffer(data) ||
          utils.isStream(data) ||
          utils.isFile(data) ||
          utils.isBlob(data)
        ) {
          return data;
        }
        if (utils.isArrayBufferView(data)) {
          return data.buffer;
        }
        if (utils.isURLSearchParams(data)) {
          setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
          return data.toString();
        }

        var isObjectPayload = utils.isObject(data);
        var contentType = headers && headers['Content-Type'];

        var isFileList;

        if ((isFileList = utils.isFileList(data)) || (isObjectPayload && contentType === 'multipart/form-data')) {
          var _FormData = this.env && this.env.FormData;
          return toFormData_1(isFileList ? {'files[]': data} : data, _FormData && new _FormData());
        } else if (isObjectPayload || contentType === 'application/json') {
          setContentTypeIfUnset(headers, 'application/json');
          return stringifySafely(data);
        }

        return data;
      }],

      transformResponse: [function transformResponse(data) {
        var transitional = this.transitional || defaults.transitional;
        var silentJSONParsing = transitional && transitional.silentJSONParsing;
        var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
        var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';

        if (strictJSONParsing || (forcedJSONParsing && utils.isString(data) && data.length)) {
          try {
            return JSON.parse(data);
          } catch (e) {
            if (strictJSONParsing) {
              if (e.name === 'SyntaxError') {
                throw AxiosError_1.from(e, AxiosError_1.ERR_BAD_RESPONSE, this, null, this.response);
              }
              throw e;
            }
          }
        }

        return data;
      }],

      /**
       * A timeout in milliseconds to abort a request. If set to 0 (default) a
       * timeout is not created.
       */
      timeout: 0,

      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',

      maxContentLength: -1,
      maxBodyLength: -1,

      env: {
        FormData: _null
      },

      validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
      },

      headers: {
        common: {
          'Accept': 'application/json, text/plain, */*'
        }
      }
    };

    utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
      defaults.headers[method] = {};
    });

    utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
      defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
    });

    var defaults_1 = defaults;

    /**
     * Transform the data for a request or a response
     *
     * @param {Object|String} data The data to be transformed
     * @param {Array} headers The headers for the request or response
     * @param {Array|Function} fns A single function or Array of functions
     * @returns {*} The resulting transformed data
     */
    var transformData = function transformData(data, headers, fns) {
      var context = this || defaults_1;
      /*eslint no-param-reassign:0*/
      utils.forEach(fns, function transform(fn) {
        data = fn.call(context, data, headers);
      });

      return data;
    };

    var isCancel = function isCancel(value) {
      return !!(value && value.__CANCEL__);
    };

    /**
     * Throws a `CanceledError` if cancellation has been requested.
     */
    function throwIfCancellationRequested(config) {
      if (config.cancelToken) {
        config.cancelToken.throwIfRequested();
      }

      if (config.signal && config.signal.aborted) {
        throw new CanceledError_1();
      }
    }

    /**
     * Dispatch a request to the server using the configured adapter.
     *
     * @param {object} config The config that is to be used for the request
     * @returns {Promise} The Promise to be fulfilled
     */
    var dispatchRequest = function dispatchRequest(config) {
      throwIfCancellationRequested(config);

      // Ensure headers exist
      config.headers = config.headers || {};

      // Transform request data
      config.data = transformData.call(
        config,
        config.data,
        config.headers,
        config.transformRequest
      );

      // Flatten headers
      config.headers = utils.merge(
        config.headers.common || {},
        config.headers[config.method] || {},
        config.headers
      );

      utils.forEach(
        ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
        function cleanHeaderConfig(method) {
          delete config.headers[method];
        }
      );

      var adapter = config.adapter || defaults_1.adapter;

      return adapter(config).then(function onAdapterResolution(response) {
        throwIfCancellationRequested(config);

        // Transform response data
        response.data = transformData.call(
          config,
          response.data,
          response.headers,
          config.transformResponse
        );

        return response;
      }, function onAdapterRejection(reason) {
        if (!isCancel(reason)) {
          throwIfCancellationRequested(config);

          // Transform response data
          if (reason && reason.response) {
            reason.response.data = transformData.call(
              config,
              reason.response.data,
              reason.response.headers,
              config.transformResponse
            );
          }
        }

        return Promise.reject(reason);
      });
    };

    /**
     * Config-specific merge-function which creates a new config-object
     * by merging two configuration objects together.
     *
     * @param {Object} config1
     * @param {Object} config2
     * @returns {Object} New object resulting from merging config2 to config1
     */
    var mergeConfig = function mergeConfig(config1, config2) {
      // eslint-disable-next-line no-param-reassign
      config2 = config2 || {};
      var config = {};

      function getMergedValue(target, source) {
        if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
          return utils.merge(target, source);
        } else if (utils.isPlainObject(source)) {
          return utils.merge({}, source);
        } else if (utils.isArray(source)) {
          return source.slice();
        }
        return source;
      }

      // eslint-disable-next-line consistent-return
      function mergeDeepProperties(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(config1[prop], config2[prop]);
        } else if (!utils.isUndefined(config1[prop])) {
          return getMergedValue(undefined, config1[prop]);
        }
      }

      // eslint-disable-next-line consistent-return
      function valueFromConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(undefined, config2[prop]);
        }
      }

      // eslint-disable-next-line consistent-return
      function defaultToConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(undefined, config2[prop]);
        } else if (!utils.isUndefined(config1[prop])) {
          return getMergedValue(undefined, config1[prop]);
        }
      }

      // eslint-disable-next-line consistent-return
      function mergeDirectKeys(prop) {
        if (prop in config2) {
          return getMergedValue(config1[prop], config2[prop]);
        } else if (prop in config1) {
          return getMergedValue(undefined, config1[prop]);
        }
      }

      var mergeMap = {
        'url': valueFromConfig2,
        'method': valueFromConfig2,
        'data': valueFromConfig2,
        'baseURL': defaultToConfig2,
        'transformRequest': defaultToConfig2,
        'transformResponse': defaultToConfig2,
        'paramsSerializer': defaultToConfig2,
        'timeout': defaultToConfig2,
        'timeoutMessage': defaultToConfig2,
        'withCredentials': defaultToConfig2,
        'adapter': defaultToConfig2,
        'responseType': defaultToConfig2,
        'xsrfCookieName': defaultToConfig2,
        'xsrfHeaderName': defaultToConfig2,
        'onUploadProgress': defaultToConfig2,
        'onDownloadProgress': defaultToConfig2,
        'decompress': defaultToConfig2,
        'maxContentLength': defaultToConfig2,
        'maxBodyLength': defaultToConfig2,
        'beforeRedirect': defaultToConfig2,
        'transport': defaultToConfig2,
        'httpAgent': defaultToConfig2,
        'httpsAgent': defaultToConfig2,
        'cancelToken': defaultToConfig2,
        'socketPath': defaultToConfig2,
        'responseEncoding': defaultToConfig2,
        'validateStatus': mergeDirectKeys
      };

      utils.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
        var merge = mergeMap[prop] || mergeDeepProperties;
        var configValue = merge(prop);
        (utils.isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);
      });

      return config;
    };

    var data = {
      "version": "0.27.2"
    };

    var VERSION = data.version;


    var validators = {};

    // eslint-disable-next-line func-names
    ['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach(function(type, i) {
      validators[type] = function validator(thing) {
        return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
      };
    });

    var deprecatedWarnings = {};

    /**
     * Transitional option validator
     * @param {function|boolean?} validator - set to false if the transitional option has been removed
     * @param {string?} version - deprecated version / removed since version
     * @param {string?} message - some message with additional info
     * @returns {function}
     */
    validators.transitional = function transitional(validator, version, message) {
      function formatMessage(opt, desc) {
        return '[Axios v' + VERSION + '] Transitional option \'' + opt + '\'' + desc + (message ? '. ' + message : '');
      }

      // eslint-disable-next-line func-names
      return function(value, opt, opts) {
        if (validator === false) {
          throw new AxiosError_1(
            formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')),
            AxiosError_1.ERR_DEPRECATED
          );
        }

        if (version && !deprecatedWarnings[opt]) {
          deprecatedWarnings[opt] = true;
          // eslint-disable-next-line no-console
          console.warn(
            formatMessage(
              opt,
              ' has been deprecated since v' + version + ' and will be removed in the near future'
            )
          );
        }

        return validator ? validator(value, opt, opts) : true;
      };
    };

    /**
     * Assert object's properties type
     * @param {object} options
     * @param {object} schema
     * @param {boolean?} allowUnknown
     */

    function assertOptions(options, schema, allowUnknown) {
      if (typeof options !== 'object') {
        throw new AxiosError_1('options must be an object', AxiosError_1.ERR_BAD_OPTION_VALUE);
      }
      var keys = Object.keys(options);
      var i = keys.length;
      while (i-- > 0) {
        var opt = keys[i];
        var validator = schema[opt];
        if (validator) {
          var value = options[opt];
          var result = value === undefined || validator(value, opt, options);
          if (result !== true) {
            throw new AxiosError_1('option ' + opt + ' must be ' + result, AxiosError_1.ERR_BAD_OPTION_VALUE);
          }
          continue;
        }
        if (allowUnknown !== true) {
          throw new AxiosError_1('Unknown option ' + opt, AxiosError_1.ERR_BAD_OPTION);
        }
      }
    }

    var validator = {
      assertOptions: assertOptions,
      validators: validators
    };

    var validators$1 = validator.validators;
    /**
     * Create a new instance of Axios
     *
     * @param {Object} instanceConfig The default config for the instance
     */
    function Axios(instanceConfig) {
      this.defaults = instanceConfig;
      this.interceptors = {
        request: new InterceptorManager_1(),
        response: new InterceptorManager_1()
      };
    }

    /**
     * Dispatch a request
     *
     * @param {Object} config The config specific for this request (merged with this.defaults)
     */
    Axios.prototype.request = function request(configOrUrl, config) {
      /*eslint no-param-reassign:0*/
      // Allow for axios('example/url'[, config]) a la fetch API
      if (typeof configOrUrl === 'string') {
        config = config || {};
        config.url = configOrUrl;
      } else {
        config = configOrUrl || {};
      }

      config = mergeConfig(this.defaults, config);

      // Set config.method
      if (config.method) {
        config.method = config.method.toLowerCase();
      } else if (this.defaults.method) {
        config.method = this.defaults.method.toLowerCase();
      } else {
        config.method = 'get';
      }

      var transitional = config.transitional;

      if (transitional !== undefined) {
        validator.assertOptions(transitional, {
          silentJSONParsing: validators$1.transitional(validators$1.boolean),
          forcedJSONParsing: validators$1.transitional(validators$1.boolean),
          clarifyTimeoutError: validators$1.transitional(validators$1.boolean)
        }, false);
      }

      // filter out skipped interceptors
      var requestInterceptorChain = [];
      var synchronousRequestInterceptors = true;
      this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
        if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {
          return;
        }

        synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;

        requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
      });

      var responseInterceptorChain = [];
      this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
        responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
      });

      var promise;

      if (!synchronousRequestInterceptors) {
        var chain = [dispatchRequest, undefined];

        Array.prototype.unshift.apply(chain, requestInterceptorChain);
        chain = chain.concat(responseInterceptorChain);

        promise = Promise.resolve(config);
        while (chain.length) {
          promise = promise.then(chain.shift(), chain.shift());
        }

        return promise;
      }


      var newConfig = config;
      while (requestInterceptorChain.length) {
        var onFulfilled = requestInterceptorChain.shift();
        var onRejected = requestInterceptorChain.shift();
        try {
          newConfig = onFulfilled(newConfig);
        } catch (error) {
          onRejected(error);
          break;
        }
      }

      try {
        promise = dispatchRequest(newConfig);
      } catch (error) {
        return Promise.reject(error);
      }

      while (responseInterceptorChain.length) {
        promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
      }

      return promise;
    };

    Axios.prototype.getUri = function getUri(config) {
      config = mergeConfig(this.defaults, config);
      var fullPath = buildFullPath(config.baseURL, config.url);
      return buildURL(fullPath, config.params, config.paramsSerializer);
    };

    // Provide aliases for supported request methods
    utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
      /*eslint func-names:0*/
      Axios.prototype[method] = function(url, config) {
        return this.request(mergeConfig(config || {}, {
          method: method,
          url: url,
          data: (config || {}).data
        }));
      };
    });

    utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
      /*eslint func-names:0*/

      function generateHTTPMethod(isForm) {
        return function httpMethod(url, data, config) {
          return this.request(mergeConfig(config || {}, {
            method: method,
            headers: isForm ? {
              'Content-Type': 'multipart/form-data'
            } : {},
            url: url,
            data: data
          }));
        };
      }

      Axios.prototype[method] = generateHTTPMethod();

      Axios.prototype[method + 'Form'] = generateHTTPMethod(true);
    });

    var Axios_1 = Axios;

    /**
     * A `CancelToken` is an object that can be used to request cancellation of an operation.
     *
     * @class
     * @param {Function} executor The executor function.
     */
    function CancelToken(executor) {
      if (typeof executor !== 'function') {
        throw new TypeError('executor must be a function.');
      }

      var resolvePromise;

      this.promise = new Promise(function promiseExecutor(resolve) {
        resolvePromise = resolve;
      });

      var token = this;

      // eslint-disable-next-line func-names
      this.promise.then(function(cancel) {
        if (!token._listeners) return;

        var i;
        var l = token._listeners.length;

        for (i = 0; i < l; i++) {
          token._listeners[i](cancel);
        }
        token._listeners = null;
      });

      // eslint-disable-next-line func-names
      this.promise.then = function(onfulfilled) {
        var _resolve;
        // eslint-disable-next-line func-names
        var promise = new Promise(function(resolve) {
          token.subscribe(resolve);
          _resolve = resolve;
        }).then(onfulfilled);

        promise.cancel = function reject() {
          token.unsubscribe(_resolve);
        };

        return promise;
      };

      executor(function cancel(message) {
        if (token.reason) {
          // Cancellation has already been requested
          return;
        }

        token.reason = new CanceledError_1(message);
        resolvePromise(token.reason);
      });
    }

    /**
     * Throws a `CanceledError` if cancellation has been requested.
     */
    CancelToken.prototype.throwIfRequested = function throwIfRequested() {
      if (this.reason) {
        throw this.reason;
      }
    };

    /**
     * Subscribe to the cancel signal
     */

    CancelToken.prototype.subscribe = function subscribe(listener) {
      if (this.reason) {
        listener(this.reason);
        return;
      }

      if (this._listeners) {
        this._listeners.push(listener);
      } else {
        this._listeners = [listener];
      }
    };

    /**
     * Unsubscribe from the cancel signal
     */

    CancelToken.prototype.unsubscribe = function unsubscribe(listener) {
      if (!this._listeners) {
        return;
      }
      var index = this._listeners.indexOf(listener);
      if (index !== -1) {
        this._listeners.splice(index, 1);
      }
    };

    /**
     * Returns an object that contains a new `CancelToken` and a function that, when called,
     * cancels the `CancelToken`.
     */
    CancelToken.source = function source() {
      var cancel;
      var token = new CancelToken(function executor(c) {
        cancel = c;
      });
      return {
        token: token,
        cancel: cancel
      };
    };

    var CancelToken_1 = CancelToken;

    /**
     * Syntactic sugar for invoking a function and expanding an array for arguments.
     *
     * Common use case would be to use `Function.prototype.apply`.
     *
     *  ```js
     *  function f(x, y, z) {}
     *  var args = [1, 2, 3];
     *  f.apply(null, args);
     *  ```
     *
     * With `spread` this example can be re-written.
     *
     *  ```js
     *  spread(function(x, y, z) {})([1, 2, 3]);
     *  ```
     *
     * @param {Function} callback
     * @returns {Function}
     */
    var spread = function spread(callback) {
      return function wrap(arr) {
        return callback.apply(null, arr);
      };
    };

    /**
     * Determines whether the payload is an error thrown by Axios
     *
     * @param {*} payload The value to test
     * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
     */
    var isAxiosError = function isAxiosError(payload) {
      return utils.isObject(payload) && (payload.isAxiosError === true);
    };

    /**
     * Create an instance of Axios
     *
     * @param {Object} defaultConfig The default config for the instance
     * @return {Axios} A new instance of Axios
     */
    function createInstance(defaultConfig) {
      var context = new Axios_1(defaultConfig);
      var instance = bind(Axios_1.prototype.request, context);

      // Copy axios.prototype to instance
      utils.extend(instance, Axios_1.prototype, context);

      // Copy context to instance
      utils.extend(instance, context);

      // Factory for creating new instances
      instance.create = function create(instanceConfig) {
        return createInstance(mergeConfig(defaultConfig, instanceConfig));
      };

      return instance;
    }

    // Create the default instance to be exported
    var axios = createInstance(defaults_1);

    // Expose Axios class to allow class inheritance
    axios.Axios = Axios_1;

    // Expose Cancel & CancelToken
    axios.CanceledError = CanceledError_1;
    axios.CancelToken = CancelToken_1;
    axios.isCancel = isCancel;
    axios.VERSION = data.version;
    axios.toFormData = toFormData_1;

    // Expose AxiosError class
    axios.AxiosError = AxiosError_1;

    // alias for CanceledError for backward compatibility
    axios.Cancel = axios.CanceledError;

    // Expose all/spread
    axios.all = function all(promises) {
      return Promise.all(promises);
    };
    axios.spread = spread;

    // Expose isAxiosError
    axios.isAxiosError = isAxiosError;

    var axios_1 = axios;

    // Allow use of default import syntax in TypeScript
    var default_1 = axios;
    axios_1.default = default_1;

    var axios$1 = axios_1;

    /* pages/content_container/ContentView.svelte generated by Svelte v3.50.1 */

    const { console: console_1$1 } = globals;
    const file_1 = "pages/content_container/ContentView.svelte";

    function get_each_context$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[21] = list[i];
    	child_ctx[23] = i;
    	return child_ctx;
    }

    // (396:8) {:catch error}
    function create_catch_block(ctx) {
    	let div;
    	let svg;
    	let path;
    	let t0;
    	let h3;

    	const block = {
    		c: function create() {
    			div = element("div");
    			svg = svg_element("svg");
    			path = svg_element("path");
    			t0 = space();
    			h3 = element("h3");
    			h3.textContent = "다시 시도 바랍니다";
    			attr_dev(path, "stroke-linecap", "round");
    			attr_dev(path, "stroke-linejoin", "round");
    			attr_dev(path, "d", "M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126zM12 15.75h.007v.008H12v-.008z");
    			add_location(path, file_1, 398, 20, 9097);
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "fill", "none");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			attr_dev(svg, "stroke-width", "1.5");
    			attr_dev(svg, "stroke", "rgb(226, 41, 41)");
    			attr_dev(svg, "height", "18");
    			attr_dev(svg, "width", "18");
    			add_location(svg, file_1, 397, 16, 8935);
    			attr_dev(div, "class", "approved-mark-wrap svelte-v33x7t");
    			add_location(div, file_1, 396, 12, 8885);
    			attr_dev(h3, "class", "svelte-v33x7t");
    			add_location(h3, file_1, 401, 12, 9391);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, svg);
    			append_dev(svg, path);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, h3, anchor);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(h3);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_catch_block.name,
    		type: "catch",
    		source: "(396:8) {:catch error}",
    		ctx
    	});

    	return block;
    }

    // (387:8) {:then result}
    function create_then_block(ctx) {
    	let div;
    	let svg;
    	let path;
    	let path_intro;
    	let t0;
    	let h3;
    	let t1_value = /*result*/ ctx[24].title + "";
    	let t1;

    	const block = {
    		c: function create() {
    			div = element("div");
    			svg = svg_element("svg");
    			path = svg_element("path");
    			t0 = space();
    			h3 = element("h3");
    			t1 = text(t1_value);
    			attr_dev(path, "stroke-linecap", "round");
    			attr_dev(path, "stroke-linejoin", "round");
    			attr_dev(path, "d", "M9 12.75L11.25 15 15 9.75M21 12a9 9 0 11-18 0 9 9 0 0118 0z");
    			add_location(path, file_1, 389, 20, 8580);
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "fill", "none");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			attr_dev(svg, "stroke-width", "2");
    			attr_dev(svg, "stroke", "rgb(99, 228, 99)");
    			attr_dev(svg, "height", "18");
    			attr_dev(svg, "width", "18");
    			add_location(svg, file_1, 388, 16, 8420);
    			attr_dev(div, "class", "approved-mark-wrap svelte-v33x7t");
    			add_location(div, file_1, 387, 12, 8370);
    			attr_dev(h3, "class", "svelte-v33x7t");
    			add_location(h3, file_1, 392, 12, 8792);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, svg);
    			append_dev(svg, path);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, h3, anchor);
    			append_dev(h3, t1);
    		},
    		p: noop,
    		i: function intro(local) {
    			if (!path_intro) {
    				add_render_callback(() => {
    					path_intro = create_in_transition(path, draw, { duration: 700, speed: 1 });
    					path_intro.start();
    				});
    			}
    		},
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(h3);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_then_block.name,
    		type: "then",
    		source: "(387:8) {:then result}",
    		ctx
    	});

    	return block;
    }

    // (381:39)               <div class="approved-mark-wrap">              </div>              <h3>                  파일을 받아오는 중입니다              </h3>          {:then result}
    function create_pending_block(ctx) {
    	let div;
    	let t0;
    	let h3;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t0 = space();
    			h3 = element("h3");
    			h3.textContent = "파일을 받아오는 중입니다";
    			attr_dev(div, "class", "approved-mark-wrap svelte-v33x7t");
    			add_location(div, file_1, 381, 12, 8212);
    			attr_dev(h3, "class", "svelte-v33x7t");
    			add_location(h3, file_1, 383, 12, 8278);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, h3, anchor);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(h3);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_pending_block.name,
    		type: "pending",
    		source: "(381:39)               <div class=\\\"approved-mark-wrap\\\">              </div>              <h3>                  파일을 받아오는 중입니다              </h3>          {:then result}",
    		ctx
    	});

    	return block;
    }

    // (408:8) {#if status == 1}
    function create_if_block_10(ctx) {
    	let div4;
    	let div1;
    	let svg0;
    	let path0;
    	let t0;
    	let div0;
    	let t1;
    	let h30;
    	let t2_value = /*file*/ ctx[0].associate + "";
    	let t2;
    	let t3;
    	let div3;
    	let svg1;
    	let path1;
    	let t4;
    	let div2;
    	let t5;
    	let h31;
    	let t6_value = /*file*/ ctx[0].created_at + "";
    	let t6;
    	let t7;
    	let div8;
    	let div5;
    	let svg2;
    	let path2;
    	let t8;
    	let div6;
    	let svg3;
    	let path3;
    	let t9;
    	let div7;
    	let svg4;
    	let path4;

    	const block = {
    		c: function create() {
    			div4 = element("div");
    			div1 = element("div");
    			svg0 = svg_element("svg");
    			path0 = svg_element("path");
    			t0 = space();
    			div0 = element("div");
    			t1 = space();
    			h30 = element("h3");
    			t2 = text(t2_value);
    			t3 = space();
    			div3 = element("div");
    			svg1 = svg_element("svg");
    			path1 = svg_element("path");
    			t4 = space();
    			div2 = element("div");
    			t5 = space();
    			h31 = element("h3");
    			t6 = text(t6_value);
    			t7 = space();
    			div8 = element("div");
    			div5 = element("div");
    			svg2 = svg_element("svg");
    			path2 = svg_element("path");
    			t8 = space();
    			div6 = element("div");
    			svg3 = svg_element("svg");
    			path3 = svg_element("path");
    			t9 = space();
    			div7 = element("div");
    			svg4 = svg_element("svg");
    			path4 = svg_element("path");
    			attr_dev(path0, "stroke-linecap", "round");
    			attr_dev(path0, "stroke-linejoin", "round");
    			attr_dev(path0, "d", "M15.75 6a3.75 3.75 0 11-7.5 0 3.75 3.75 0 017.5 0zM4.501 20.118a7.5 7.5 0 0114.998 0A17.933 17.933 0 0112 21.75c-2.676 0-5.216-.584-7.499-1.632z");
    			add_location(path0, file_1, 411, 24, 9751);
    			attr_dev(svg0, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg0, "fill", "none");
    			attr_dev(svg0, "viewBox", "0 0 24 24");
    			attr_dev(svg0, "stroke-width", "2");
    			attr_dev(svg0, "stroke", "currentColor");
    			attr_dev(svg0, "height", "11");
    			attr_dev(svg0, "width", "11");
    			add_location(svg0, file_1, 410, 20, 9591);
    			attr_dev(div0, "class", "space svelte-v33x7t");
    			add_location(div0, file_1, 413, 20, 10005);
    			attr_dev(h30, "class", "svelte-v33x7t");
    			add_location(h30, file_1, 414, 20, 10052);
    			attr_dev(div1, "class", "name-wrap svelte-v33x7t");
    			add_location(div1, file_1, 409, 16, 9546);
    			attr_dev(path1, "stroke-linecap", "round");
    			attr_dev(path1, "stroke-linejoin", "round");
    			attr_dev(path1, "d", "M6.75 3v2.25M17.25 3v2.25M3 18.75V7.5a2.25 2.25 0 012.25-2.25h13.5A2.25 2.25 0 0121 7.5v11.25m-18 0A2.25 2.25 0 005.25 21h13.5A2.25 2.25 0 0021 18.75m-18 0v-7.5A2.25 2.25 0 015.25 9h13.5A2.25 2.25 0 0121 11.25v7.5");
    			add_location(path1, file_1, 418, 24, 10324);
    			attr_dev(svg1, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg1, "fill", "none");
    			attr_dev(svg1, "viewBox", "0 0 24 24");
    			attr_dev(svg1, "stroke-width", "2");
    			attr_dev(svg1, "stroke", "currentColor");
    			attr_dev(svg1, "height", "11");
    			attr_dev(svg1, "width", "11");
    			add_location(svg1, file_1, 417, 20, 10164);
    			attr_dev(div2, "class", "space svelte-v33x7t");
    			add_location(div2, file_1, 420, 20, 10647);
    			attr_dev(h31, "class", "svelte-v33x7t");
    			add_location(h31, file_1, 421, 20, 10694);
    			attr_dev(div3, "class", "date-wrap svelte-v33x7t");
    			add_location(div3, file_1, 416, 16, 10119);
    			attr_dev(div4, "class", "info-wrap svelte-v33x7t");
    			add_location(div4, file_1, 408, 12, 9505);
    			attr_dev(path2, "stroke-linecap", "round");
    			attr_dev(path2, "stroke-linejoin", "round");
    			attr_dev(path2, "d", "M12 4.5v15m7.5-7.5h-15");
    			add_location(path2, file_1, 428, 24, 11031);
    			attr_dev(svg2, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg2, "fill", "none");
    			attr_dev(svg2, "viewBox", "0 0 24 24");
    			attr_dev(svg2, "stroke-width", "2");
    			attr_dev(svg2, "stroke", "currentColor");
    			attr_dev(svg2, "height", "18");
    			attr_dev(svg2, "width", "18");
    			add_location(svg2, file_1, 427, 20, 10871);
    			attr_dev(div5, "class", "fix-wrap icon svelte-v33x7t");
    			add_location(div5, file_1, 426, 16, 10822);
    			attr_dev(path3, "stroke-linecap", "round");
    			attr_dev(path3, "stroke-linejoin", "round");
    			attr_dev(path3, "d", "M14.857 17.082a23.848 23.848 0 005.454-1.31A8.967 8.967 0 0118 9.75v-.7V9A6 6 0 006 9v.75a8.967 8.967 0 01-2.312 6.022c1.733.64 3.56 1.085 5.455 1.31m5.714 0a24.255 24.255 0 01-5.714 0m5.714 0a3 3 0 11-5.714 0");
    			add_location(path3, file_1, 433, 24, 11393);
    			attr_dev(svg3, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg3, "fill", "none");
    			attr_dev(svg3, "viewBox", "0 0 24 24");
    			attr_dev(svg3, "stroke-width", "2");
    			attr_dev(svg3, "stroke", "currentColor");
    			attr_dev(svg3, "height", "18");
    			attr_dev(svg3, "width", "18");
    			add_location(svg3, file_1, 432, 20, 11233);
    			attr_dev(div6, "class", "bell-wrap icon svelte-v33x7t");
    			add_location(div6, file_1, 431, 16, 11183);
    			attr_dev(path4, "stroke-linecap", "round");
    			attr_dev(path4, "stroke-linejoin", "round");
    			attr_dev(path4, "d", "M3 16.5v2.25A2.25 2.25 0 005.25 21h13.5A2.25 2.25 0 0021 18.75V16.5M16.5 12L12 16.5m0 0L7.5 12m4.5 4.5V3");
    			add_location(path4, file_1, 438, 24, 11946);
    			attr_dev(svg4, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg4, "fill", "none");
    			attr_dev(svg4, "viewBox", "0 0 24 24");
    			attr_dev(svg4, "stroke-width", "2");
    			attr_dev(svg4, "stroke", "currentColor");
    			attr_dev(svg4, "height", "18");
    			attr_dev(svg4, "width", "18");
    			add_location(svg4, file_1, 437, 20, 11786);
    			attr_dev(div7, "class", "download-wrap icon svelte-v33x7t");
    			add_location(div7, file_1, 436, 16, 11732);
    			attr_dev(div8, "class", "icons-wrap svelte-v33x7t");
    			add_location(div8, file_1, 425, 12, 10780);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div4, anchor);
    			append_dev(div4, div1);
    			append_dev(div1, svg0);
    			append_dev(svg0, path0);
    			append_dev(div1, t0);
    			append_dev(div1, div0);
    			append_dev(div1, t1);
    			append_dev(div1, h30);
    			append_dev(h30, t2);
    			append_dev(div4, t3);
    			append_dev(div4, div3);
    			append_dev(div3, svg1);
    			append_dev(svg1, path1);
    			append_dev(div3, t4);
    			append_dev(div3, div2);
    			append_dev(div3, t5);
    			append_dev(div3, h31);
    			append_dev(h31, t6);
    			insert_dev(target, t7, anchor);
    			insert_dev(target, div8, anchor);
    			append_dev(div8, div5);
    			append_dev(div5, svg2);
    			append_dev(svg2, path2);
    			append_dev(div8, t8);
    			append_dev(div8, div6);
    			append_dev(div6, svg3);
    			append_dev(svg3, path3);
    			append_dev(div8, t9);
    			append_dev(div8, div7);
    			append_dev(div7, svg4);
    			append_dev(svg4, path4);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*file*/ 1 && t2_value !== (t2_value = /*file*/ ctx[0].associate + "")) set_data_dev(t2, t2_value);
    			if (dirty & /*file*/ 1 && t6_value !== (t6_value = /*file*/ ctx[0].created_at + "")) set_data_dev(t6, t6_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div4);
    			if (detaching) detach_dev(t7);
    			if (detaching) detach_dev(div8);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_10.name,
    		type: "if",
    		source: "(408:8) {#if status == 1}",
    		ctx
    	});

    	return block;
    }

    // (566:8) {:else}
    function create_else_block_4(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "class", "body-content-wrap-unauthorized");
    			add_location(div, file_1, 566, 12, 19406);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_4.name,
    		type: "else",
    		source: "(566:8) {:else}",
    		ctx
    	});

    	return block;
    }

    // (447:8) {#if user.authority}
    function create_if_block$4(ctx) {
    	let div;

    	function select_block_type_1(ctx, dirty) {
    		if (/*status*/ ctx[6] == 0) return create_if_block_1$2;
    		if (/*status*/ ctx[6] == 2) return create_if_block_9;
    	}

    	let current_block_type = select_block_type_1(ctx);
    	let if_block = current_block_type && current_block_type(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (if_block) if_block.c();
    			attr_dev(div, "class", "body-content-wrap svelte-v33x7t");
    			add_location(div, file_1, 447, 12, 12279);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if (if_block) if_block.m(div, null);
    		},
    		p: function update(ctx, dirty) {
    			if (if_block) if_block.p(ctx, dirty);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);

    			if (if_block) {
    				if_block.d();
    			}
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$4.name,
    		type: "if",
    		source: "(447:8) {#if user.authority}",
    		ctx
    	});

    	return block;
    }

    // (562:38) 
    function create_if_block_9(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Error!");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_9.name,
    		type: "if",
    		source: "(562:38) ",
    		ctx
    	});

    	return block;
    }

    // (450:16) {#if status == 0}
    function create_if_block_1$2(ctx) {
    	let div1;
    	let div0;
    	let t0;
    	let t1;
    	let t2;
    	let div17;
    	let div2;
    	let h50;
    	let t4;
    	let div14;
    	let div5;
    	let div3;
    	let h51;
    	let t6;
    	let div4;
    	let h52;
    	let t7;
    	let t8_value = /*file*/ ctx[0].location + "";
    	let t8;
    	let t9;
    	let div8;
    	let div6;
    	let h53;
    	let t11;
    	let div7;
    	let h54;
    	let t12;
    	let t13_value = /*file*/ ctx[0].associate + "";
    	let t13;
    	let t14;
    	let div11;
    	let div9;
    	let h55;
    	let t16;
    	let div10;
    	let t17;
    	let div12;
    	let t18;
    	let div13;
    	let t19;
    	let div15;
    	let h56;
    	let t21;
    	let div16;
    	let mounted;
    	let dispose;
    	let if_block0 = /*img_hover*/ ctx[3] && create_if_block_8(ctx);

    	function select_block_type_2(ctx, dirty) {
    		if (/*file*/ ctx[0].type == 1) return create_if_block_5;
    		if (/*file*/ ctx[0].type == 0) return create_if_block_6;
    		if (/*file*/ ctx[0].type == 2) return create_if_block_7;
    	}

    	let current_block_type = select_block_type_2(ctx);
    	let if_block1 = current_block_type && current_block_type(ctx);

    	function select_block_type_3(ctx, dirty) {
    		if (/*img_hover*/ ctx[3]) return create_if_block_4;
    		return create_else_block_3;
    	}

    	let current_block_type_1 = select_block_type_3(ctx);
    	let if_block2 = current_block_type_1(ctx);
    	let each_value = /*file*/ ctx[0].attendee;
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$2(get_each_context$2(ctx, each_value, i));
    	}

    	let each_1_else = null;

    	if (!each_value.length) {
    		each_1_else = create_else_block_2(ctx);
    	}

    	function select_block_type_4(ctx, dirty) {
    		if (/*file*/ ctx[0].collected) return create_if_block_3;
    		return create_else_block_1;
    	}

    	let current_block_type_2 = select_block_type_4(ctx);
    	let if_block3 = current_block_type_2(ctx);

    	function select_block_type_5(ctx, dirty) {
    		if (/*file*/ ctx[0].private) return create_if_block_2$1;
    		return create_else_block$3;
    	}

    	let current_block_type_3 = select_block_type_5(ctx);
    	let if_block4 = current_block_type_3(ctx);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			if (if_block0) if_block0.c();
    			t0 = space();
    			if (if_block1) if_block1.c();
    			t1 = space();
    			if_block2.c();
    			t2 = space();
    			div17 = element("div");
    			div2 = element("div");
    			h50 = element("h5");
    			h50.textContent = "세부사항";
    			t4 = space();
    			div14 = element("div");
    			div5 = element("div");
    			div3 = element("div");
    			h51 = element("h5");
    			h51.textContent = "대표장소:";
    			t6 = space();
    			div4 = element("div");
    			h52 = element("h5");
    			t7 = text("@");
    			t8 = text(t8_value);
    			t9 = space();
    			div8 = element("div");
    			div6 = element("div");
    			h53 = element("h5");
    			h53.textContent = "촬영자:";
    			t11 = space();
    			div7 = element("div");
    			h54 = element("h5");
    			t12 = text("#");
    			t13 = text(t13_value);
    			t14 = space();
    			div11 = element("div");
    			div9 = element("div");
    			h55 = element("h5");
    			h55.textContent = "주요참석자:";
    			t16 = space();
    			div10 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			if (each_1_else) {
    				each_1_else.c();
    			}

    			t17 = space();
    			div12 = element("div");
    			if_block3.c();
    			t18 = space();
    			div13 = element("div");
    			if_block4.c();
    			t19 = space();
    			div15 = element("div");
    			h56 = element("h5");
    			h56.textContent = "설명";
    			t21 = space();
    			div16 = element("div");
    			attr_dev(div0, "class", "photo-container svelte-v33x7t");
    			add_location(div0, file_1, 451, 20, 12480);
    			attr_dev(div1, "class", "media-wrap svelte-v33x7t");
    			add_location(div1, file_1, 450, 16, 12434);
    			attr_dev(h50, "class", "svelte-v33x7t");
    			add_location(h50, file_1, 488, 24, 14645);
    			attr_dev(div2, "class", "info-header svelte-v33x7t");
    			add_location(div2, file_1, 487, 20, 14594);
    			add_location(h51, file_1, 493, 32, 14884);
    			attr_dev(div3, "class", "label");
    			add_location(div3, file_1, 492, 28, 14831);
    			add_location(h52, file_1, 496, 32, 15038);
    			attr_dev(div4, "class", "location info-item-content svelte-v33x7t");
    			add_location(div4, file_1, 495, 28, 14964);
    			attr_dev(div5, "class", "location-wrap info-item svelte-v33x7t");
    			add_location(div5, file_1, 491, 24, 14764);
    			add_location(h53, file_1, 502, 32, 15312);
    			attr_dev(div6, "class", "label");
    			add_location(div6, file_1, 501, 28, 15259);
    			add_location(h54, file_1, 505, 32, 15466);
    			attr_dev(div7, "class", "associate info-item-content svelte-v33x7t");
    			add_location(div7, file_1, 504, 28, 15391);
    			attr_dev(div8, "class", "assosiate-wrap info-item svelte-v33x7t");
    			add_location(div8, file_1, 500, 24, 15191);
    			add_location(h55, file_1, 510, 32, 15706);
    			attr_dev(div9, "class", "label");
    			add_location(div9, file_1, 509, 28, 15653);
    			attr_dev(div10, "class", "attendees info-item-content svelte-v33x7t");
    			add_location(div10, file_1, 512, 28, 15787);
    			attr_dev(div11, "class", "attendee-wrap info-item svelte-v33x7t");
    			add_location(div11, file_1, 508, 24, 15586);
    			attr_dev(div12, "class", "collected-wrap info-item svelte-v33x7t");
    			add_location(div12, file_1, 520, 24, 16196);
    			attr_dev(div13, "class", "private-wrap info-item svelte-v33x7t");
    			add_location(div13, file_1, 537, 24, 17588);
    			attr_dev(div14, "class", "detail-wrap-info svelte-v33x7t");
    			add_location(div14, file_1, 490, 20, 14708);
    			attr_dev(h56, "class", "svelte-v33x7t");
    			add_location(h56, file_1, 556, 24, 19065);
    			attr_dev(div15, "class", "content-header svelte-v33x7t");
    			add_location(div15, file_1, 555, 20, 19011);
    			attr_dev(div16, "class", "detail-wrap-content svelte-v33x7t");
    			attr_dev(div16, "contenteditable", "true");
    			if (/*file*/ ctx[0].content === void 0) add_render_callback(() => /*div16_input_handler*/ ctx[16].call(div16));
    			add_location(div16, file_1, 558, 20, 19126);
    			attr_dev(div17, "class", "details-wrap svelte-v33x7t");
    			add_location(div17, file_1, 486, 16, 14546);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			if (if_block0) if_block0.m(div0, null);
    			append_dev(div0, t0);
    			if (if_block1) if_block1.m(div0, null);
    			append_dev(div0, t1);
    			if_block2.m(div0, null);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, div17, anchor);
    			append_dev(div17, div2);
    			append_dev(div2, h50);
    			append_dev(div17, t4);
    			append_dev(div17, div14);
    			append_dev(div14, div5);
    			append_dev(div5, div3);
    			append_dev(div3, h51);
    			append_dev(div5, t6);
    			append_dev(div5, div4);
    			append_dev(div4, h52);
    			append_dev(h52, t7);
    			append_dev(h52, t8);
    			append_dev(div14, t9);
    			append_dev(div14, div8);
    			append_dev(div8, div6);
    			append_dev(div6, h53);
    			append_dev(div8, t11);
    			append_dev(div8, div7);
    			append_dev(div7, h54);
    			append_dev(h54, t12);
    			append_dev(h54, t13);
    			append_dev(div14, t14);
    			append_dev(div14, div11);
    			append_dev(div11, div9);
    			append_dev(div9, h55);
    			append_dev(div11, t16);
    			append_dev(div11, div10);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div10, null);
    			}

    			if (each_1_else) {
    				each_1_else.m(div10, null);
    			}

    			append_dev(div14, t17);
    			append_dev(div14, div12);
    			if_block3.m(div12, null);
    			append_dev(div14, t18);
    			append_dev(div14, div13);
    			if_block4.m(div13, null);
    			append_dev(div17, t19);
    			append_dev(div17, div15);
    			append_dev(div15, h56);
    			append_dev(div17, t21);
    			append_dev(div17, div16);

    			if (/*file*/ ctx[0].content !== void 0) {
    				div16.innerHTML = /*file*/ ctx[0].content;
    			}

    			if (!mounted) {
    				dispose = listen_dev(div16, "input", /*div16_input_handler*/ ctx[16]);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (/*img_hover*/ ctx[3]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_8(ctx);
    					if_block0.c();
    					if_block0.m(div0, t0);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (current_block_type === (current_block_type = select_block_type_2(ctx)) && if_block1) {
    				if_block1.p(ctx, dirty);
    			} else {
    				if (if_block1) if_block1.d(1);
    				if_block1 = current_block_type && current_block_type(ctx);

    				if (if_block1) {
    					if_block1.c();
    					if_block1.m(div0, t1);
    				}
    			}

    			if (current_block_type_1 === (current_block_type_1 = select_block_type_3(ctx)) && if_block2) {
    				if_block2.p(ctx, dirty);
    			} else {
    				if_block2.d(1);
    				if_block2 = current_block_type_1(ctx);

    				if (if_block2) {
    					if_block2.c();
    					if_block2.m(div0, null);
    				}
    			}

    			if (dirty & /*file*/ 1 && t8_value !== (t8_value = /*file*/ ctx[0].location + "")) set_data_dev(t8, t8_value);
    			if (dirty & /*file*/ 1 && t13_value !== (t13_value = /*file*/ ctx[0].associate + "")) set_data_dev(t13, t13_value);

    			if (dirty & /*file*/ 1) {
    				each_value = /*file*/ ctx[0].attendee;
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$2(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$2(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div10, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;

    				if (!each_value.length && each_1_else) {
    					each_1_else.p(ctx, dirty);
    				} else if (!each_value.length) {
    					each_1_else = create_else_block_2(ctx);
    					each_1_else.c();
    					each_1_else.m(div10, null);
    				} else if (each_1_else) {
    					each_1_else.d(1);
    					each_1_else = null;
    				}
    			}

    			if (current_block_type_2 !== (current_block_type_2 = select_block_type_4(ctx))) {
    				if_block3.d(1);
    				if_block3 = current_block_type_2(ctx);

    				if (if_block3) {
    					if_block3.c();
    					if_block3.m(div12, null);
    				}
    			}

    			if (current_block_type_3 !== (current_block_type_3 = select_block_type_5(ctx))) {
    				if_block4.d(1);
    				if_block4 = current_block_type_3(ctx);

    				if (if_block4) {
    					if_block4.c();
    					if_block4.m(div13, null);
    				}
    			}

    			if (dirty & /*file*/ 1 && /*file*/ ctx[0].content !== div16.innerHTML) {
    				div16.innerHTML = /*file*/ ctx[0].content;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if (if_block0) if_block0.d();

    			if (if_block1) {
    				if_block1.d();
    			}

    			if_block2.d();
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(div17);
    			destroy_each(each_blocks, detaching);
    			if (each_1_else) each_1_else.d();
    			if_block3.d();
    			if_block4.d();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$2.name,
    		type: "if",
    		source: "(450:16) {#if status == 0}",
    		ctx
    	});

    	return block;
    }

    // (453:24) {#if img_hover}
    function create_if_block_8(ctx) {
    	let div2;
    	let div0;
    	let svg0;
    	let path0;
    	let t;
    	let div1;
    	let svg1;
    	let path1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div0 = element("div");
    			svg0 = svg_element("svg");
    			path0 = svg_element("path");
    			t = space();
    			div1 = element("div");
    			svg1 = svg_element("svg");
    			path1 = svg_element("path");
    			attr_dev(path0, "stroke-linecap", "round");
    			attr_dev(path0, "stroke-linejoin", "round");
    			attr_dev(path0, "d", "M15.75 19.5L8.25 12l7.5-7.5");
    			add_location(path0, file_1, 456, 36, 12882);
    			attr_dev(svg0, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg0, "fill", "none");
    			attr_dev(svg0, "viewBox", "0 0 24 24");
    			attr_dev(svg0, "stroke-width", "2");
    			attr_dev(svg0, "stroke", "white");
    			attr_dev(svg0, "height", "60");
    			attr_dev(svg0, "width", "60");
    			add_location(svg0, file_1, 455, 32, 12717);
    			attr_dev(div0, "class", "left-arrow-wrap");
    			add_location(div0, file_1, 454, 28, 12625);
    			attr_dev(path1, "stroke-linecap", "round");
    			attr_dev(path1, "stroke-linejoin", "round");
    			attr_dev(path1, "d", "M8.25 4.5l7.5 7.5-7.5 7.5");
    			add_location(path1, file_1, 461, 36, 13334);
    			attr_dev(svg1, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg1, "fill", "none");
    			attr_dev(svg1, "viewBox", "0 0 24 24");
    			attr_dev(svg1, "stroke-width", "2");
    			attr_dev(svg1, "stroke", "white");
    			attr_dev(svg1, "height", "60");
    			attr_dev(svg1, "width", "60");
    			add_location(svg1, file_1, 460, 32, 13169);
    			attr_dev(div1, "class", "right-arrow-wrap");
    			add_location(div1, file_1, 459, 28, 13075);
    			attr_dev(div2, "class", "facad svelte-v33x7t");
    			add_location(div2, file_1, 453, 24, 12576);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div0);
    			append_dev(div0, svg0);
    			append_dev(svg0, path0);
    			append_dev(div2, t);
    			append_dev(div2, div1);
    			append_dev(div1, svg1);
    			append_dev(svg1, path1);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*imageNavigateBack*/ ctx[9], false, false, false),
    					listen_dev(div1, "click", /*imageNavigateForth*/ ctx[10], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_8.name,
    		type: "if",
    		source: "(453:24) {#if img_hover}",
    		ctx
    	});

    	return block;
    }

    // (474:49) 
    function create_if_block_7(ctx) {
    	let h1;

    	const block = {
    		c: function create() {
    			h1 = element("h1");
    			h1.textContent = "아직 문서지원 준비중입니다";
    			add_location(h1, file_1, 474, 28, 14110);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h1, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_7.name,
    		type: "if",
    		source: "(474:49) ",
    		ctx
    	});

    	return block;
    }

    // (471:49) 
    function create_if_block_6(ctx) {
    	let img;
    	let img_src_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			img = element("img");
    			if (!src_url_equal(img.src, img_src_value = /*curr*/ ctx[1])) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "main_pg_bg");
    			add_location(img, file_1, 472, 28, 13951);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    			/*img_binding*/ ctx[15](img);

    			if (!mounted) {
    				dispose = listen_dev(img, "mouseover", /*hoverHandle*/ ctx[7], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*curr*/ 2 && !src_url_equal(img.src, img_src_value = /*curr*/ ctx[1])) {
    				attr_dev(img, "src", img_src_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    			/*img_binding*/ ctx[15](null);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6.name,
    		type: "if",
    		source: "(471:49) ",
    		ctx
    	});

    	return block;
    }

    // (467:24) {#if file.type == 1}
    function create_if_block_5(ctx) {
    	let video;
    	let source_1;
    	let source_1_src_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			video = element("video");
    			source_1 = element("source");
    			if (!src_url_equal(source_1.src, source_1_src_value = /*curr*/ ctx[1])) attr_dev(source_1, "src", source_1_src_value);
    			add_location(source_1, file_1, 468, 32, 13729);
    			video.controls = true;
    			add_location(video, file_1, 467, 28, 13634);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, video, anchor);
    			append_dev(video, source_1);
    			/*video_binding*/ ctx[14](video);

    			if (!mounted) {
    				dispose = listen_dev(video, "mouseover", /*hoverHandle*/ ctx[7], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*curr*/ 2 && !src_url_equal(source_1.src, source_1_src_value = /*curr*/ ctx[1])) {
    				attr_dev(source_1, "src", source_1_src_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(video);
    			/*video_binding*/ ctx[14](null);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5.name,
    		type: "if",
    		source: "(467:24) {#if file.type == 1}",
    		ctx
    	});

    	return block;
    }

    // (481:24) {:else}
    function create_else_block_3(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "class", "caption-placeholder svelte-v33x7t");
    			add_location(div, file_1, 481, 28, 14404);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_3.name,
    		type: "else",
    		source: "(481:24) {:else}",
    		ctx
    	});

    	return block;
    }

    // (477:24) {#if img_hover}
    function create_if_block_4(ctx) {
    	let div;
    	let h4;
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			h4 = element("h4");
    			t = text(/*name*/ ctx[4]);
    			attr_dev(h4, "class", "svelte-v33x7t");
    			add_location(h4, file_1, 478, 32, 14290);
    			attr_dev(div, "class", "caption svelte-v33x7t");
    			add_location(div, file_1, 477, 28, 14235);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, h4);
    			append_dev(h4, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*name*/ 16) set_data_dev(t, /*name*/ ctx[4]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4.name,
    		type: "if",
    		source: "(477:24) {#if img_hover}",
    		ctx
    	});

    	return block;
    }

    // (516:32) {:else}
    function create_else_block_2(ctx) {
    	let h4;

    	const block = {
    		c: function create() {
    			h4 = element("h4");
    			h4.textContent = "주요 참석자가 없습니다.";
    			add_location(h4, file_1, 516, 36, 16039);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h4, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h4);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_2.name,
    		type: "else",
    		source: "(516:32) {:else}",
    		ctx
    	});

    	return block;
    }

    // (514:32) {#each file.attendee as attendee, index}
    function create_each_block$2(ctx) {
    	let h5;
    	let t0;
    	let t1_value = /*attendee*/ ctx[21] + "";
    	let t1;

    	const block = {
    		c: function create() {
    			h5 = element("h5");
    			t0 = text("#");
    			t1 = text(t1_value);
    			add_location(h5, file_1, 514, 36, 15940);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h5, anchor);
    			append_dev(h5, t0);
    			append_dev(h5, t1);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*file*/ 1 && t1_value !== (t1_value = /*attendee*/ ctx[21] + "")) set_data_dev(t1, t1_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h5);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$2.name,
    		type: "each",
    		source: "(514:32) {#each file.attendee as attendee, index}",
    		ctx
    	});

    	return block;
    }

    // (529:28) {:else}
    function create_else_block_1(ctx) {
    	let h5;
    	let svg;
    	let path;
    	let t;

    	const block = {
    		c: function create() {
    			h5 = element("h5");
    			svg = svg_element("svg");
    			path = svg_element("path");
    			t = text("\r\n                                    본 기록물은 생산되었습니다.");
    			attr_dev(path, "stroke-linecap", "round");
    			attr_dev(path, "stroke-linejoin", "round");
    			attr_dev(path, "d", "M11.25 11.25l.041-.02a.75.75 0 011.063.852l-.708 2.836a.75.75 0 001.063.853l.041-.021M21 12a9 9 0 11-18 0 9 9 0 0118 0zm-9-3.75h.008v.008H12V8.25z");
    			add_location(path, file_1, 531, 40, 17153);
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "fill", "none");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			attr_dev(svg, "stroke-width", "2");
    			attr_dev(svg, "stroke", "black");
    			attr_dev(svg, "width", "14");
    			attr_dev(svg, "height", "14");
    			attr_dev(svg, "class", "svelte-v33x7t");
    			add_location(svg, file_1, 530, 36, 16984);
    			attr_dev(h5, "class", "svelte-v33x7t");
    			add_location(h5, file_1, 529, 32, 16942);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h5, anchor);
    			append_dev(h5, svg);
    			append_dev(svg, path);
    			append_dev(h5, t);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h5);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1.name,
    		type: "else",
    		source: "(529:28) {:else}",
    		ctx
    	});

    	return block;
    }

    // (522:28) {#if file.collected}
    function create_if_block_3(ctx) {
    	let h5;
    	let svg;
    	let path;
    	let t;

    	const block = {
    		c: function create() {
    			h5 = element("h5");
    			svg = svg_element("svg");
    			path = svg_element("path");
    			t = text("\r\n                                    본 기록물은 수집되었습니다.");
    			attr_dev(path, "stroke-linecap", "round");
    			attr_dev(path, "stroke-linejoin", "round");
    			attr_dev(path, "d", "M11.25 11.25l.041-.02a.75.75 0 011.063.852l-.708 2.836a.75.75 0 001.063.853l.041-.021M21 12a9 9 0 11-18 0 9 9 0 0118 0zm-9-3.75h.008v.008H12V8.25z");
    			add_location(path, file_1, 524, 40, 16529);
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "fill", "none");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			attr_dev(svg, "stroke-width", "2");
    			attr_dev(svg, "stroke", "black");
    			attr_dev(svg, "width", "14");
    			attr_dev(svg, "height", "14");
    			attr_dev(svg, "class", "svelte-v33x7t");
    			add_location(svg, file_1, 523, 36, 16360);
    			attr_dev(h5, "class", "svelte-v33x7t");
    			add_location(h5, file_1, 522, 32, 16318);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h5, anchor);
    			append_dev(h5, svg);
    			append_dev(svg, path);
    			append_dev(h5, t);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h5);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3.name,
    		type: "if",
    		source: "(522:28) {#if file.collected}",
    		ctx
    	});

    	return block;
    }

    // (546:28) {:else}
    function create_else_block$3(ctx) {
    	let h5;
    	let svg;
    	let path;
    	let t;

    	const block = {
    		c: function create() {
    			h5 = element("h5");
    			svg = svg_element("svg");
    			path = svg_element("path");
    			t = text("\r\n                                    본 기록물은 또한 공개 기록물입니다.");
    			attr_dev(path, "stroke-linecap", "round");
    			attr_dev(path, "stroke-linejoin", "round");
    			attr_dev(path, "d", "M11.25 11.25l.041-.02a.75.75 0 011.063.852l-.708 2.836a.75.75 0 001.063.853l.041-.021M21 12a9 9 0 11-18 0 9 9 0 0118 0zm-9-3.75h.008v.008H12V8.25z");
    			add_location(path, file_1, 548, 40, 18547);
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "fill", "none");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			attr_dev(svg, "stroke-width", "2");
    			attr_dev(svg, "stroke", "black");
    			attr_dev(svg, "width", "14");
    			attr_dev(svg, "height", "14");
    			attr_dev(svg, "class", "svelte-v33x7t");
    			add_location(svg, file_1, 547, 36, 18378);
    			attr_dev(h5, "class", "svelte-v33x7t");
    			add_location(h5, file_1, 546, 32, 18336);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h5, anchor);
    			append_dev(h5, svg);
    			append_dev(svg, path);
    			append_dev(h5, t);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h5);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$3.name,
    		type: "else",
    		source: "(546:28) {:else}",
    		ctx
    	});

    	return block;
    }

    // (539:28) {#if file.private}
    function create_if_block_2$1(ctx) {
    	let h5;
    	let svg;
    	let path;
    	let t;

    	const block = {
    		c: function create() {
    			h5 = element("h5");
    			svg = svg_element("svg");
    			path = svg_element("path");
    			t = text("\r\n                                    본 기록물은 또한 비공개 기록물입니다.");
    			attr_dev(path, "stroke-linecap", "round");
    			attr_dev(path, "stroke-linejoin", "round");
    			attr_dev(path, "d", "M11.25 11.25l.041-.02a.75.75 0 011.063.852l-.708 2.836a.75.75 0 001.063.853l.041-.021M21 12a9 9 0 11-18 0 9 9 0 0118 0zm-9-3.75h.008v.008H12V8.25z");
    			add_location(path, file_1, 541, 40, 17917);
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "fill", "none");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			attr_dev(svg, "stroke-width", "2");
    			attr_dev(svg, "stroke", "black");
    			attr_dev(svg, "width", "14");
    			attr_dev(svg, "height", "14");
    			attr_dev(svg, "class", "svelte-v33x7t");
    			add_location(svg, file_1, 540, 36, 17748);
    			attr_dev(h5, "class", "svelte-v33x7t");
    			add_location(h5, file_1, 539, 32, 17706);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h5, anchor);
    			append_dev(h5, svg);
    			append_dev(svg, path);
    			append_dev(h5, t);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h5);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$1.name,
    		type: "if",
    		source: "(539:28) {#if file.private}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$b(ctx) {
    	let div3;
    	let div1;
    	let div0;
    	let button;
    	let svg;
    	let path;
    	let t0;
    	let promise;
    	let t1;
    	let t2;
    	let div2;
    	let mounted;
    	let dispose;

    	let info = {
    		ctx,
    		current: null,
    		token: null,
    		hasCatch: true,
    		pending: create_pending_block,
    		then: create_then_block,
    		catch: create_catch_block,
    		value: 24,
    		error: 25
    	};

    	handle_promise(promise = /*getDataFromId*/ ctx[11](/*file_id*/ ctx[5]), info);
    	let if_block0 = /*status*/ ctx[6] == 1 && create_if_block_10(ctx);

    	function select_block_type(ctx, dirty) {
    		if (/*user*/ ctx[12].authority) return create_if_block$4;
    		return create_else_block_4;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block1 = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			div1 = element("div");
    			div0 = element("div");
    			button = element("button");
    			svg = svg_element("svg");
    			path = svg_element("path");
    			t0 = space();
    			info.block.c();
    			t1 = space();
    			if (if_block0) if_block0.c();
    			t2 = space();
    			div2 = element("div");
    			if_block1.c();
    			attr_dev(path, "stroke-linecap", "round");
    			attr_dev(path, "stroke-linejoin", "round");
    			attr_dev(path, "d", "M9 15L3 9m0 0l6-6M3 9h12a6 6 0 010 12h-3");
    			add_location(path, file_1, 376, 20, 7995);
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "fill", "none");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			attr_dev(svg, "stroke-width", "2");
    			attr_dev(svg, "stroke", "currentColor");
    			attr_dev(svg, "class", "w-6 h-6");
    			attr_dev(svg, "height", "18");
    			attr_dev(svg, "width", "18");
    			add_location(svg, file_1, 375, 16, 7823);
    			attr_dev(button, "class", "back-btn svelte-v33x7t");
    			add_location(button, file_1, 374, 12, 7759);
    			attr_dev(div0, "class", "back-btn-wrap svelte-v33x7t");
    			add_location(div0, file_1, 373, 8, 7718);
    			attr_dev(div1, "class", "header svelte-v33x7t");
    			add_location(div1, file_1, 372, 4, 7688);
    			attr_dev(div2, "class", "body svelte-v33x7t");
    			add_location(div2, file_1, 445, 4, 12217);
    			attr_dev(div3, "class", "focus svelte-v33x7t");
    			add_location(div3, file_1, 371, 0, 7663);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div1);
    			append_dev(div1, div0);
    			append_dev(div0, button);
    			append_dev(button, svg);
    			append_dev(svg, path);
    			append_dev(div1, t0);
    			info.block.m(div1, info.anchor = null);
    			info.mount = () => div1;
    			info.anchor = t1;
    			append_dev(div1, t1);
    			if (if_block0) if_block0.m(div1, null);
    			append_dev(div3, t2);
    			append_dev(div3, div2);
    			if_block1.m(div2, null);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*undoFocus*/ ctx[8], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;
    			update_await_block_branch(info, ctx, dirty);
    			if (/*status*/ ctx[6] == 1) if_block0.p(ctx, dirty);
    			if_block1.p(ctx, dirty);
    		},
    		i: function intro(local) {
    			transition_in(info.block);
    		},
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    			info.block.d();
    			info.token = null;
    			info = null;
    			if (if_block0) if_block0.d();
    			if_block1.d();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$b.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$b($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ContentView', slots, []);
    	let { file } = $$props;
    	const route = O();
    	let file_id = route.params._id;
    	let img_hover = false;
    	let curr;
    	let status = 0;
    	curr = getPhotoFromFront();
    	console.log(curr);
    	var dispatch = createEventDispatcher();

    	function hoverHandle() {
    		$$invalidate(3, img_hover = true);

    		setTimeout(
    			() => {
    				if (img_hover) {
    					$$invalidate(3, img_hover = false);
    				}
    			},
    			4000
    		);
    	}

    	function undoFocus() {
    		dispatch('escape', { focus: null });
    		f.goto('/manage/cases');
    	}

    	/* copies file.src into fileLst */
    	function getPhotoFromFront() {
    		if (file) {
    			let result = file.src.shift();
    			$$invalidate(0, file.src = [...file.src, result], file);
    			return result;
    		} else {
    			console.log("No file object detected");
    		}
    	}

    	function getPhotoFromBack() {
    		if (file) {
    			let result = file.src.pop();
    			$$invalidate(0, file.src = [result, ...file.src], file);
    			return result;
    		} else {
    			console.log("No file object detected");
    		}
    	}

    	function imageNavigateBack() {
    		$$invalidate(1, curr = getPhotoFromBack());
    	}

    	function imageNavigateForth() {
    		$$invalidate(1, curr = getPhotoFromFront());
    	}

    	async function getDataFromId(id) {
    		$$invalidate(0, file = await axios$1.get(`http://localhost:8000/users/cases/${id}`));

    		if (file) {
    			console.log(file.data[0]);
    			return file.data[0];
    		} else {
    			throw 'Error 404';
    		}
    	}

    	/* Test variables to be fetched from server when online */
    	/* USER object:
            @authority - Show the contents to authorized personal only. 
                         Set false at default.
            @name      - Name of the logged in user.  
    */
    	let user = { authority: true, name: "Kim" };

    	let image;
    	let source;
    	let name;
    	const writable_props = ['file'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$1.warn(`<ContentView> was created with unknown prop '${key}'`);
    	});

    	function video_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			image = $$value;
    			(($$invalidate(2, image), $$invalidate(1, curr)), $$invalidate(13, source));
    		});
    	}

    	function img_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			image = $$value;
    			(($$invalidate(2, image), $$invalidate(1, curr)), $$invalidate(13, source));
    		});
    	}

    	function div16_input_handler() {
    		file.content = this.innerHTML;
    		$$invalidate(0, file);
    	}

    	$$self.$$set = $$props => {
    		if ('file' in $$props) $$invalidate(0, file = $$props.file);
    	};

    	$$self.$capture_state = () => ({
    		Route,
    		meta: O,
    		router: f,
    		axios: axios$1,
    		draw,
    		fade,
    		createEventDispatcher,
    		onMount,
    		file,
    		route,
    		file_id,
    		img_hover,
    		curr,
    		status,
    		dispatch,
    		hoverHandle,
    		undoFocus,
    		getPhotoFromFront,
    		getPhotoFromBack,
    		imageNavigateBack,
    		imageNavigateForth,
    		getDataFromId,
    		user,
    		image,
    		source,
    		name
    	});

    	$$self.$inject_state = $$props => {
    		if ('file' in $$props) $$invalidate(0, file = $$props.file);
    		if ('file_id' in $$props) $$invalidate(5, file_id = $$props.file_id);
    		if ('img_hover' in $$props) $$invalidate(3, img_hover = $$props.img_hover);
    		if ('curr' in $$props) $$invalidate(1, curr = $$props.curr);
    		if ('status' in $$props) $$invalidate(6, status = $$props.status);
    		if ('dispatch' in $$props) dispatch = $$props.dispatch;
    		if ('user' in $$props) $$invalidate(12, user = $$props.user);
    		if ('image' in $$props) $$invalidate(2, image = $$props.image);
    		if ('source' in $$props) $$invalidate(13, source = $$props.source);
    		if ('name' in $$props) $$invalidate(4, name = $$props.name);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*image, curr, source*/ 8198) {
    			 {
    				if (image) {
    					$$invalidate(13, source = curr.split('/'));
    					$$invalidate(4, name = source.pop());

    					if (image.offsetHeight > image.offsetWidth) {
    						$$invalidate(2, image.height = 450, image);
    					} else {
    						$$invalidate(2, image.width = 450, image);
    					}
    				}
    			}
    		}
    	};

    	return [
    		file,
    		curr,
    		image,
    		img_hover,
    		name,
    		file_id,
    		status,
    		hoverHandle,
    		undoFocus,
    		imageNavigateBack,
    		imageNavigateForth,
    		getDataFromId,
    		user,
    		source,
    		video_binding,
    		img_binding,
    		div16_input_handler
    	];
    }

    class ContentView extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$b, create_fragment$b, safe_not_equal, { file: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ContentView",
    			options,
    			id: create_fragment$b.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*file*/ ctx[0] === undefined && !('file' in props)) {
    			console_1$1.warn("<ContentView> was created without expected prop 'file'");
    		}
    	}

    	get file() {
    		throw new Error("<ContentView>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set file(value) {
    		throw new Error("<ContentView>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* pages/content_container/ContentItemList.svelte generated by Svelte v3.50.1 */
    const file$9 = "pages/content_container/ContentItemList.svelte";

    // (108:12) {:else}
    function create_else_block$4(ctx) {
    	const block = { c: noop, m: noop, p: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$4.name,
    		type: "else",
    		source: "(108:12) {:else}",
    		ctx
    	});

    	return block;
    }

    // (104:37) 
    function create_if_block_1$3(ctx) {
    	let video;
    	let source;
    	let source_src_value;

    	const block = {
    		c: function create() {
    			video = element("video");
    			source = element("source");
    			if (!src_url_equal(source.src, source_src_value = /*item*/ ctx[0].src[0])) attr_dev(source, "src", source_src_value);
    			attr_dev(source, "type", "video/mp4");
    			add_location(source, file$9, 105, 20, 2304);
    			attr_dev(video, "height", "85px");
    			video.controls = true;
    			add_location(video, file$9, 104, 16, 2252);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, video, anchor);
    			append_dev(video, source);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*item*/ 1 && !src_url_equal(source.src, source_src_value = /*item*/ ctx[0].src[0])) {
    				attr_dev(source, "src", source_src_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(video);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$3.name,
    		type: "if",
    		source: "(104:37) ",
    		ctx
    	});

    	return block;
    }

    // (102:12) {#if item.type == 0}
    function create_if_block$5(ctx) {
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			if (!src_url_equal(img.src, img_src_value = /*item*/ ctx[0].src[0])) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "height", "85px");
    			attr_dev(img, "alt", "test-img");
    			add_location(img, file$9, 102, 16, 2141);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*item*/ 1 && !src_url_equal(img.src, img_src_value = /*item*/ ctx[0].src[0])) {
    				attr_dev(img, "src", img_src_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$5.name,
    		type: "if",
    		source: "(102:12) {#if item.type == 0}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$c(ctx) {
    	let div10;
    	let div1;
    	let div0;
    	let h30;
    	let t0_value = /*item*/ ctx[0]._id + "";
    	let t0;
    	let t1;
    	let div3;
    	let div2;
    	let t2;
    	let div5;
    	let div4;
    	let h31;
    	let t3_value = /*item*/ ctx[0].title + "";
    	let t3;
    	let t4;
    	let div7;
    	let div6;
    	let h32;
    	let t5_value = /*item*/ ctx[0].associate + "";
    	let t5;
    	let t6;
    	let div9;
    	let div8;
    	let h33;
    	let t7_value = /*item*/ ctx[0].date + "";
    	let t7;
    	let mounted;
    	let dispose;

    	function select_block_type(ctx, dirty) {
    		if (/*item*/ ctx[0].type == 0) return create_if_block$5;
    		if (/*item*/ ctx[0].type == 1) return create_if_block_1$3;
    		return create_else_block$4;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			div10 = element("div");
    			div1 = element("div");
    			div0 = element("div");
    			h30 = element("h3");
    			t0 = text(t0_value);
    			t1 = space();
    			div3 = element("div");
    			div2 = element("div");
    			if_block.c();
    			t2 = space();
    			div5 = element("div");
    			div4 = element("div");
    			h31 = element("h3");
    			t3 = text(t3_value);
    			t4 = space();
    			div7 = element("div");
    			div6 = element("div");
    			h32 = element("h3");
    			t5 = text(t5_value);
    			t6 = space();
    			div9 = element("div");
    			div8 = element("div");
    			h33 = element("h3");
    			t7 = text(t7_value);
    			attr_dev(h30, "class", "svelte-qoir9s");
    			add_location(h30, file$9, 96, 12, 1957);
    			attr_dev(div0, "class", "id-container container svelte-qoir9s");
    			add_location(div0, file$9, 95, 8, 1907);
    			attr_dev(div1, "class", "id-wrap wrap svelte-qoir9s");
    			add_location(div1, file$9, 94, 4, 1871);
    			attr_dev(div2, "class", "snapshot-container container svelte-qoir9s");
    			add_location(div2, file$9, 100, 8, 2047);
    			attr_dev(div3, "class", "snapshot-wrap svelte-qoir9s");
    			add_location(div3, file$9, 99, 4, 2010);
    			attr_dev(h31, "class", "svelte-qoir9s");
    			add_location(h31, file$9, 113, 12, 2535);
    			attr_dev(div4, "class", "title-container container svelte-qoir9s");
    			add_location(div4, file$9, 112, 8, 2482);
    			attr_dev(div5, "class", "title-wrap svelte-qoir9s");
    			add_location(div5, file$9, 111, 4, 2448);
    			attr_dev(h32, "class", "svelte-qoir9s");
    			add_location(h32, file$9, 118, 12, 2685);
    			attr_dev(div6, "class", "associate-container container svelte-qoir9s");
    			add_location(div6, file$9, 117, 8, 2628);
    			attr_dev(div7, "class", "associate-wrap svelte-qoir9s");
    			add_location(div7, file$9, 116, 4, 2590);
    			attr_dev(h33, "class", "svelte-qoir9s");
    			add_location(h33, file$9, 123, 12, 2829);
    			attr_dev(div8, "class", "date-container container svelte-qoir9s");
    			add_location(div8, file$9, 122, 8, 2777);
    			attr_dev(div9, "class", "date-wrap svelte-qoir9s");
    			add_location(div9, file$9, 121, 4, 2744);
    			attr_dev(div10, "class", "table-content svelte-qoir9s");
    			add_location(div10, file$9, 93, 0, 1817);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div10, anchor);
    			append_dev(div10, div1);
    			append_dev(div1, div0);
    			append_dev(div0, h30);
    			append_dev(h30, t0);
    			append_dev(div10, t1);
    			append_dev(div10, div3);
    			append_dev(div3, div2);
    			if_block.m(div2, null);
    			append_dev(div10, t2);
    			append_dev(div10, div5);
    			append_dev(div5, div4);
    			append_dev(div4, h31);
    			append_dev(h31, t3);
    			append_dev(div10, t4);
    			append_dev(div10, div7);
    			append_dev(div7, div6);
    			append_dev(div6, h32);
    			append_dev(h32, t5);
    			append_dev(div10, t6);
    			append_dev(div10, div9);
    			append_dev(div9, div8);
    			append_dev(div8, h33);
    			append_dev(h33, t7);

    			if (!mounted) {
    				dispose = listen_dev(div10, "click", /*clickCall*/ ctx[1], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*item*/ 1 && t0_value !== (t0_value = /*item*/ ctx[0]._id + "")) set_data_dev(t0, t0_value);

    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(div2, null);
    				}
    			}

    			if (dirty & /*item*/ 1 && t3_value !== (t3_value = /*item*/ ctx[0].title + "")) set_data_dev(t3, t3_value);
    			if (dirty & /*item*/ 1 && t5_value !== (t5_value = /*item*/ ctx[0].associate + "")) set_data_dev(t5, t5_value);
    			if (dirty & /*item*/ 1 && t7_value !== (t7_value = /*item*/ ctx[0].date + "")) set_data_dev(t7, t7_value);
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div10);
    			if_block.d();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$c.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$c($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ContentItemList', slots, []);
    	let { item = item } = $$props;
    	var dispatch = createEventDispatcher();

    	function clickCall() {
    		dispatch('click', { item });
    	}

    	const writable_props = ['item'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ContentItemList> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('item' in $$props) $$invalidate(0, item = $$props.item);
    	};

    	$$self.$capture_state = () => ({
    		createEventDispatcher,
    		onDestroy,
    		onMount,
    		item,
    		dispatch,
    		clickCall
    	});

    	$$self.$inject_state = $$props => {
    		if ('item' in $$props) $$invalidate(0, item = $$props.item);
    		if ('dispatch' in $$props) dispatch = $$props.dispatch;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [item, clickCall];
    }

    class ContentItemList extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$c, create_fragment$c, safe_not_equal, { item: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ContentItemList",
    			options,
    			id: create_fragment$c.name
    		});
    	}

    	get item() {
    		throw new Error("<ContentItemList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set item(value) {
    		throw new Error("<ContentItemList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* pages/content_container/ContentContainer.svelte generated by Svelte v3.50.1 */
    const file$a = "pages/content_container/ContentContainer.svelte";

    function get_each_context_1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[11] = list[i];
    	child_ctx[13] = i;
    	return child_ctx;
    }

    function get_each_context$3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[11] = list[i];
    	child_ctx[13] = i;
    	return child_ctx;
    }

    // (296:4) {:catch error}
    function create_catch_block$1(ctx) {
    	let div1;
    	let div0;
    	let svg;
    	let path;
    	let path_intro;
    	let t0;
    	let h4;
    	let t2;
    	let h5;

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			svg = svg_element("svg");
    			path = svg_element("path");
    			t0 = space();
    			h4 = element("h4");
    			h4.textContent = "조회에 실패했습니다";
    			t2 = space();
    			h5 = element("h5");
    			h5.textContent = "인터넷 연결을 확인해주세요";
    			attr_dev(path, "stroke-linecap", "round");
    			attr_dev(path, "stroke-linejoin", "round");
    			attr_dev(path, "d", "M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126zM12 15.75h.007v.008H12v-.008z");
    			add_location(path, file$a, 299, 16, 7935);
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "fill", "none");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			attr_dev(svg, "stroke-width", "0.8");
    			attr_dev(svg, "stroke", "rgb(226, 41, 41)");
    			attr_dev(svg, "height", "100");
    			attr_dev(svg, "width", "100");
    			add_location(svg, file$a, 298, 12, 7776);
    			attr_dev(div0, "class", "svg-wrap");
    			add_location(div0, file$a, 297, 8, 7741);
    			attr_dev(h4, "class", "svelte-15516wd");
    			add_location(h4, file$a, 302, 8, 8249);
    			attr_dev(h5, "class", "svelte-15516wd");
    			add_location(h5, file$a, 303, 8, 8277);
    			attr_dev(div1, "class", "fetch-fail-page svelte-15516wd");
    			add_location(div1, file$a, 296, 4, 7703);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			append_dev(div0, svg);
    			append_dev(svg, path);
    			append_dev(div1, t0);
    			append_dev(div1, h4);
    			append_dev(div1, t2);
    			append_dev(div1, h5);
    		},
    		p: noop,
    		i: function intro(local) {
    			if (!path_intro) {
    				add_render_callback(() => {
    					path_intro = create_in_transition(path, draw, { duration: 700, speed: 1 });
    					path_intro.start();
    				});
    			}
    		},
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_catch_block$1.name,
    		type: "catch",
    		source: "(296:4) {:catch error}",
    		ctx
    	});

    	return block;
    }

    // (251:4) {:then result}
    function create_then_block$1(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block$6, create_if_block_1$4];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*view*/ ctx[1] == 'box') return 0;
    		if (/*view*/ ctx[1] == 'list') return 1;
    		return -1;
    	}

    	if (~(current_block_type_index = select_block_type(ctx))) {
    		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	}

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].m(target, anchor);
    			}

    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if (~current_block_type_index) {
    					if_blocks[current_block_type_index].p(ctx, dirty);
    				}
    			} else {
    				if (if_block) {
    					group_outros();

    					transition_out(if_blocks[previous_block_index], 1, 1, () => {
    						if_blocks[previous_block_index] = null;
    					});

    					check_outros();
    				}

    				if (~current_block_type_index) {
    					if_block = if_blocks[current_block_type_index];

    					if (!if_block) {
    						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    						if_block.c();
    					} else {
    						if_block.p(ctx, dirty);
    					}

    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				} else {
    					if_block = null;
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].d(detaching);
    			}

    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_then_block$1.name,
    		type: "then",
    		source: "(251:4) {:then result}",
    		ctx
    	});

    	return block;
    }

    // (258:29) 
    function create_if_block_1$4(ctx) {
    	let div13;
    	let div10;
    	let div1;
    	let div0;
    	let h30;
    	let t1;
    	let div3;
    	let div2;
    	let h31;
    	let t3;
    	let div5;
    	let div4;
    	let h32;
    	let t5;
    	let div7;
    	let div6;
    	let h33;
    	let t7;
    	let div9;
    	let div8;
    	let h34;
    	let t9;
    	let div12;
    	let div11;
    	let current;
    	let each_value_1 = /*result*/ ctx[10];
    	validate_each_argument(each_value_1);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			div13 = element("div");
    			div10 = element("div");
    			div1 = element("div");
    			div0 = element("div");
    			h30 = element("h3");
    			h30.textContent = "ID";
    			t1 = space();
    			div3 = element("div");
    			div2 = element("div");
    			h31 = element("h3");
    			h31.textContent = "스냅샷";
    			t3 = space();
    			div5 = element("div");
    			div4 = element("div");
    			h32 = element("h3");
    			h32.textContent = "행사명";
    			t5 = space();
    			div7 = element("div");
    			div6 = element("div");
    			h33 = element("h3");
    			h33.textContent = "제작자";
    			t7 = space();
    			div9 = element("div");
    			div8 = element("div");
    			h34 = element("h3");
    			h34.textContent = "제작일자";
    			t9 = space();
    			div12 = element("div");
    			div11 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(h30, "class", "svelte-15516wd");
    			add_location(h30, file$a, 262, 24, 6533);
    			attr_dev(div0, "class", "header-container svelte-15516wd");
    			add_location(div0, file$a, 261, 20, 6478);
    			attr_dev(div1, "class", "header-id-container svelte-15516wd");
    			add_location(div1, file$a, 260, 16, 6424);
    			attr_dev(h31, "class", "svelte-15516wd");
    			add_location(h31, file$a, 267, 24, 6726);
    			attr_dev(div2, "class", "header-container svelte-15516wd");
    			add_location(div2, file$a, 266, 20, 6671);
    			attr_dev(div3, "class", "header-snapshot-container svelte-15516wd");
    			add_location(div3, file$a, 265, 16, 6611);
    			attr_dev(h32, "class", "svelte-15516wd");
    			add_location(h32, file$a, 272, 24, 6917);
    			attr_dev(div4, "class", "header-container svelte-15516wd");
    			add_location(div4, file$a, 271, 20, 6862);
    			attr_dev(div5, "class", "header-title-container svelte-15516wd");
    			add_location(div5, file$a, 270, 16, 6805);
    			attr_dev(h33, "class", "svelte-15516wd");
    			add_location(h33, file$a, 277, 24, 7112);
    			attr_dev(div6, "class", "header-container svelte-15516wd");
    			add_location(div6, file$a, 276, 20, 7057);
    			attr_dev(div7, "class", "header-associate-container svelte-15516wd");
    			add_location(div7, file$a, 275, 16, 6996);
    			attr_dev(h34, "class", "svelte-15516wd");
    			add_location(h34, file$a, 282, 24, 7302);
    			attr_dev(div8, "class", "header-container svelte-15516wd");
    			add_location(div8, file$a, 281, 20, 7247);
    			attr_dev(div9, "class", "header-date-container svelte-15516wd");
    			add_location(div9, file$a, 280, 16, 7191);
    			attr_dev(div10, "class", "table-header svelte-15516wd");
    			add_location(div10, file$a, 259, 12, 6381);
    			attr_dev(div11, "class", "table svelte-15516wd");
    			add_location(div11, file$a, 287, 16, 7438);
    			attr_dev(div12, "class", "list-frame svelte-15516wd");
    			add_location(div12, file$a, 286, 12, 7397);
    			attr_dev(div13, "class", "upload-view svelte-15516wd");
    			add_location(div13, file$a, 258, 8, 6343);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div13, anchor);
    			append_dev(div13, div10);
    			append_dev(div10, div1);
    			append_dev(div1, div0);
    			append_dev(div0, h30);
    			append_dev(div10, t1);
    			append_dev(div10, div3);
    			append_dev(div3, div2);
    			append_dev(div2, h31);
    			append_dev(div10, t3);
    			append_dev(div10, div5);
    			append_dev(div5, div4);
    			append_dev(div4, h32);
    			append_dev(div10, t5);
    			append_dev(div10, div7);
    			append_dev(div7, div6);
    			append_dev(div6, h33);
    			append_dev(div10, t7);
    			append_dev(div10, div9);
    			append_dev(div9, div8);
    			append_dev(div8, h34);
    			append_dev(div13, t9);
    			append_dev(div13, div12);
    			append_dev(div12, div11);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div11, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*fetch_items, page, passFocus*/ 25) {
    				each_value_1 = /*result*/ ctx[10];
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block_1(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(div11, null);
    					}
    				}

    				group_outros();

    				for (i = each_value_1.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value_1.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div13);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$4.name,
    		type: "if",
    		source: "(258:29) ",
    		ctx
    	});

    	return block;
    }

    // (252:4) {#if view == 'box'}
    function create_if_block$6(ctx) {
    	let div;
    	let current;
    	let each_value = /*result*/ ctx[10];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$3(get_each_context$3(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(div, "class", "browse-contents-list-view svelte-15516wd");
    			add_location(div, file$a, 252, 8, 6123);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*fetch_items, page, passFocus*/ 25) {
    				each_value = /*result*/ ctx[10];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$3(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$3(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(div, null);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$6.name,
    		type: "if",
    		source: "(252:4) {#if view == 'box'}",
    		ctx
    	});

    	return block;
    }

    // (289:20) {#each result as item, index}
    function create_each_block_1(ctx) {
    	let contentitemlist;
    	let current;

    	contentitemlist = new ContentItemList({
    			props: { item: /*item*/ ctx[11] },
    			$$inline: true
    		});

    	contentitemlist.$on("click", /*passFocus*/ ctx[4]);

    	const block = {
    		c: function create() {
    			create_component(contentitemlist.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(contentitemlist, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const contentitemlist_changes = {};
    			if (dirty & /*page*/ 1) contentitemlist_changes.item = /*item*/ ctx[11];
    			contentitemlist.$set(contentitemlist_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(contentitemlist.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(contentitemlist.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(contentitemlist, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1.name,
    		type: "each",
    		source: "(289:20) {#each result as item, index}",
    		ctx
    	});

    	return block;
    }

    // (254:12) {#each result as item, index}
    function create_each_block$3(ctx) {
    	let contentitem;
    	let current;

    	contentitem = new ContentItem({
    			props: { item: /*item*/ ctx[11] },
    			$$inline: true
    		});

    	contentitem.$on("click", /*passFocus*/ ctx[4]);

    	const block = {
    		c: function create() {
    			create_component(contentitem.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(contentitem, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const contentitem_changes = {};
    			if (dirty & /*page*/ 1) contentitem_changes.item = /*item*/ ctx[11];
    			contentitem.$set(contentitem_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(contentitem.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(contentitem.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(contentitem, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$3.name,
    		type: "each",
    		source: "(254:12) {#each result as item, index}",
    		ctx
    	});

    	return block;
    }

    // (249:30)      <h3>로딩 중...</h3>     {:then result}
    function create_pending_block$1(ctx) {
    	let h3;

    	const block = {
    		c: function create() {
    			h3 = element("h3");
    			h3.textContent = "로딩 중...";
    			add_location(h3, file$a, 249, 4, 6055);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h3, anchor);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h3);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_pending_block$1.name,
    		type: "pending",
    		source: "(249:30)      <h3>로딩 중...</h3>     {:then result}",
    		ctx
    	});

    	return block;
    }

    // (307:4) <Route path="/:_id">
    function create_default_slot(ctx) {
    	let contentview;
    	let current;

    	contentview = new ContentView({
    			props: { file: /*focus*/ ctx[2] },
    			$$inline: true
    		});

    	contentview.$on("escape", /*undoFocus*/ ctx[5]);

    	const block = {
    		c: function create() {
    			create_component(contentview.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(contentview, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const contentview_changes = {};
    			if (dirty & /*focus*/ 4) contentview_changes.file = /*focus*/ ctx[2];
    			contentview.$set(contentview_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(contentview.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(contentview.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(contentview, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot.name,
    		type: "slot",
    		source: "(307:4) <Route path=\\\"/:_id\\\">",
    		ctx
    	});

    	return block;
    }

    function create_fragment$d(ctx) {
    	let div;
    	let promise;
    	let t;
    	let route;
    	let current;

    	let info = {
    		ctx,
    		current: null,
    		token: null,
    		hasCatch: true,
    		pending: create_pending_block$1,
    		then: create_then_block$1,
    		catch: create_catch_block$1,
    		value: 10,
    		error: 15,
    		blocks: [,,,]
    	};

    	handle_promise(promise = /*fetch_items*/ ctx[3](/*page*/ ctx[0]), info);

    	route = new Route({
    			props: {
    				path: "/:_id",
    				$$slots: { default: [create_default_slot] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div = element("div");
    			info.block.c();
    			t = space();
    			create_component(route.$$.fragment);
    			attr_dev(div, "class", "browse-content-container svelte-15516wd");
    			add_location(div, file$a, 247, 0, 5981);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			info.block.m(div, info.anchor = null);
    			info.mount = () => div;
    			info.anchor = t;
    			append_dev(div, t);
    			mount_component(route, div, null);
    			current = true;
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;
    			info.ctx = ctx;

    			if (dirty & /*page*/ 1 && promise !== (promise = /*fetch_items*/ ctx[3](/*page*/ ctx[0])) && handle_promise(promise, info)) ; else {
    				update_await_block_branch(info, ctx, dirty);
    			}

    			const route_changes = {};

    			if (dirty & /*$$scope, focus*/ 65540) {
    				route_changes.$$scope = { dirty, ctx };
    			}

    			route.$set(route_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(info.block);
    			transition_in(route.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			for (let i = 0; i < 3; i += 1) {
    				const block = info.blocks[i];
    				transition_out(block);
    			}

    			transition_out(route.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			info.block.d();
    			info.token = null;
    			info = null;
    			destroy_component(route);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$d.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$d($$self, $$props, $$invalidate) {
    	let curr_page_items;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ContentContainer', slots, []);
    	let { page = 1 } = $$props;
    	let { view = 'box' } = $$props;
    	var dispatch = createEventDispatcher();
    	let focus = null;
    	let fetched_items = [];

    	async function fetch_items(page) {
    		$$invalidate(6, fetched_items = await axios$1({
    			url: `http://localhost:8000/drf/cases/browse?_page=${page}`,
    			method: 'get'
    		}));

    		return fetched_items;
    	}

    	function passFocus(e) {
    		$$invalidate(2, focus = e.detail.item);
    		dispatch('focus', { focus: true });
    		f.goto(`/manage/cases/browse/${focus._id}`);
    	}

    	function undoFocus() {
    		$$invalidate(2, focus = null);
    		dispatch('focus', { focus: false });
    	}

    	/* Test variables to be fetched from server when online */
    	/* USER object:
            @authority - Show the contents to authorized personal only. 
                         Set false at default.
            @name      - Name of the logged in user.  
    */
    	let user = { authority: true, name: "Kim" };

    	/* ITEM object:
            @authority - Show the contents to authorized personal only. 
                         Set false at default.
            @name      - Name of the logged in user.  
    */
    	for (let i = 0; i < 40; i++) {
    		fetched_items = [
    			...fetched_items,
    			{
    				type: 0,
    				_id: i,
    				uploader_id: 2,
    				associate: "김재우",
    				location: "학술정보원",
    				collected: true,
    				private: false,
    				attendee: ["교장", "부교장", "대통령", "국방부장관", "생도"],
    				created_at: "22년 2월 3일",
    				title: "이인호 동상 앞에서",
    				src: [
    					"/public/main_page_bg.JPG",
    					"/public/nama_logo.png",
    					"/public/navy-logo.JPG"
    				],
    				content: "<h4>This is sample content of the post.<h4>"
    			}
    		];
    	}

    	const writable_props = ['page', 'view'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ContentContainer> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('page' in $$props) $$invalidate(0, page = $$props.page);
    		if ('view' in $$props) $$invalidate(1, view = $$props.view);
    	};

    	$$self.$capture_state = () => ({
    		Route,
    		meta: O,
    		router: f,
    		draw,
    		fade,
    		createEventDispatcher,
    		onMount,
    		ContentItem,
    		ContentView,
    		ContentItemList,
    		axios: axios$1,
    		page,
    		view,
    		dispatch,
    		focus,
    		fetched_items,
    		fetch_items,
    		passFocus,
    		undoFocus,
    		user,
    		curr_page_items
    	});

    	$$self.$inject_state = $$props => {
    		if ('page' in $$props) $$invalidate(0, page = $$props.page);
    		if ('view' in $$props) $$invalidate(1, view = $$props.view);
    		if ('dispatch' in $$props) dispatch = $$props.dispatch;
    		if ('focus' in $$props) $$invalidate(2, focus = $$props.focus);
    		if ('fetched_items' in $$props) $$invalidate(6, fetched_items = $$props.fetched_items);
    		if ('user' in $$props) user = $$props.user;
    		if ('curr_page_items' in $$props) curr_page_items = $$props.curr_page_items;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*fetched_items, page*/ 65) {
    			 curr_page_items = fetched_items.slice((page - 1) * 12, page * 12);
    		}
    	};

    	return [page, view, focus, fetch_items, passFocus, undoFocus, fetched_items];
    }

    class ContentContainer extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$d, create_fragment$d, safe_not_equal, { page: 0, view: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ContentContainer",
    			options,
    			id: create_fragment$d.name
    		});
    	}

    	get page() {
    		throw new Error("<ContentContainer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set page(value) {
    		throw new Error("<ContentContainer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get view() {
    		throw new Error("<ContentContainer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set view(value) {
    		throw new Error("<ContentContainer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* pages/sidebar/BrowseNavbar.svelte generated by Svelte v3.50.1 */
    const file$b = "pages/sidebar/BrowseNavbar.svelte";

    // (139:4) {#if !focus}
    function create_if_block$7(ctx) {
    	let t0;
    	let div0;
    	let usersearch;
    	let t1;
    	let div1;
    	let button;
    	let svg;
    	let path;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block = /*page*/ ctx[0] != 1 && create_if_block_1$5(ctx);
    	usersearch = new UserSearch({ $$inline: true });

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			t0 = space();
    			div0 = element("div");
    			create_component(usersearch.$$.fragment);
    			t1 = space();
    			div1 = element("div");
    			button = element("button");
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(div0, "class", "search-panel-wrap svelte-1crfji7");
    			add_location(div0, file$b, 149, 8, 3523);
    			attr_dev(path, "stroke-linecap", "round");
    			attr_dev(path, "stroke-linejoin", "round");
    			attr_dev(path, "d", "M8.25 4.5l7.5 7.5-7.5 7.5");
    			add_location(path, file$b, 156, 20, 3887);
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "fill", "none");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			attr_dev(svg, "stroke-width", "2.5");
    			attr_dev(svg, "stroke", "white");
    			attr_dev(svg, "class", "right-svg svelte-1crfji7");
    			attr_dev(svg, "width", "19");
    			attr_dev(svg, "height", "19");
    			add_location(svg, file$b, 155, 16, 3718);
    			attr_dev(button, "class", "go-forth svelte-1crfji7");
    			add_location(button, file$b, 154, 12, 3651);
    			attr_dev(div1, "class", "go-forth-wrap svelte-1crfji7");
    			add_location(div1, file$b, 153, 8, 3610);
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div0, anchor);
    			mount_component(usersearch, div0, null);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div1, anchor);
    			append_dev(div1, button);
    			append_dev(button, svg);
    			append_dev(svg, path);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*pageIncrease*/ ctx[2], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (/*page*/ ctx[0] != 1) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_1$5(ctx);
    					if_block.c();
    					if_block.m(t0.parentNode, t0);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(usersearch.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(usersearch.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div0);
    			destroy_component(usersearch);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$7.name,
    		type: "if",
    		source: "(139:4) {#if !focus}",
    		ctx
    	});

    	return block;
    }

    // (140:8) {#if page != 1}
    function create_if_block_1$5(ctx) {
    	let div;
    	let button;
    	let svg;
    	let path;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			button = element("button");
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "stroke-linecap", "round");
    			attr_dev(path, "stroke-linejoin", "round");
    			attr_dev(path, "d", "M15.75 19.5L8.25 12l7.5-7.5");
    			add_location(path, file$b, 143, 24, 3334);
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "fill", "none");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			attr_dev(svg, "stroke-width", "2.5");
    			attr_dev(svg, "stroke", "white");
    			attr_dev(svg, "class", "left-svg svelte-1crfji7");
    			attr_dev(svg, "width", "19");
    			attr_dev(svg, "height", "19");
    			add_location(svg, file$b, 142, 20, 3162);
    			attr_dev(button, "class", "go-back svelte-1crfji7");
    			add_location(button, file$b, 141, 16, 3092);
    			attr_dev(div, "class", "go-back-wrap svelte-1crfji7");
    			add_location(div, file$b, 140, 12, 3048);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, button);
    			append_dev(button, svg);
    			append_dev(svg, path);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*pageDecrease*/ ctx[3], false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$5.name,
    		type: "if",
    		source: "(140:8) {#if page != 1}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$e(ctx) {
    	let div;
    	let current;
    	let if_block = !/*focus*/ ctx[1] && create_if_block$7(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (if_block) if_block.c();
    			attr_dev(div, "class", "browse-navbar-wrap svelte-1crfji7");
    			add_location(div, file$b, 137, 0, 2959);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if (if_block) if_block.m(div, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (!/*focus*/ ctx[1]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*focus*/ 2) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$7(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div, null);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$e.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$e($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('BrowseNavbar', slots, []);
    	var dispatch = createEventDispatcher();
    	let { page = 1 } = $$props;
    	let { focus = false } = $$props;

    	function pageIncrease() {
    		$$invalidate(0, page += 1);
    		dispatch('pageChange', { page });
    	}

    	function pageDecrease() {
    		if (page != 1) {
    			$$invalidate(0, page -= 1);
    			dispatch('pageChange', { page });
    		}
    	}

    	const writable_props = ['page', 'focus'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<BrowseNavbar> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('page' in $$props) $$invalidate(0, page = $$props.page);
    		if ('focus' in $$props) $$invalidate(1, focus = $$props.focus);
    	};

    	$$self.$capture_state = () => ({
    		createEventDispatcher,
    		UserSearch,
    		dispatch,
    		page,
    		focus,
    		pageIncrease,
    		pageDecrease
    	});

    	$$self.$inject_state = $$props => {
    		if ('dispatch' in $$props) dispatch = $$props.dispatch;
    		if ('page' in $$props) $$invalidate(0, page = $$props.page);
    		if ('focus' in $$props) $$invalidate(1, focus = $$props.focus);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [page, focus, pageIncrease, pageDecrease];
    }

    class BrowseNavbar extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$e, create_fragment$e, safe_not_equal, { page: 0, focus: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "BrowseNavbar",
    			options,
    			id: create_fragment$e.name
    		});
    	}

    	get page() {
    		throw new Error("<BrowseNavbar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set page(value) {
    		throw new Error("<BrowseNavbar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get focus() {
    		throw new Error("<BrowseNavbar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set focus(value) {
    		throw new Error("<BrowseNavbar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* pages/Browse.svelte generated by Svelte v3.50.1 */
    const file$c = "pages/Browse.svelte";

    function get_each_context$4(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[7] = list[i];
    	child_ctx[9] = i;
    	return child_ctx;
    }

    // (88:16) {:else}
    function create_else_block$5(ctx) {
    	let h3;

    	const block = {
    		c: function create() {
    			h3 = element("h3");
    			h3.textContent = "비어있음";
    			add_location(h3, file$c, 88, 20, 2007);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h3, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h3);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$5.name,
    		type: "else",
    		source: "(88:16) {:else}",
    		ctx
    	});

    	return block;
    }

    // (86:16) {#each categories as category, index}
    function create_each_block$4(ctx) {
    	let category;
    	let current;

    	category = new Category({
    			props: {
    				category: /*category*/ ctx[7],
    				index: /*index*/ ctx[9],
    				selected_index: /*selected_index*/ ctx[0]
    			},
    			$$inline: true
    		});

    	category.$on("click", /*categorySelect*/ ctx[4]);

    	const block = {
    		c: function create() {
    			create_component(category.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(category, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const category_changes = {};
    			if (dirty & /*selected_index*/ 1) category_changes.selected_index = /*selected_index*/ ctx[0];
    			category.$set(category_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(category.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(category.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(category, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$4.name,
    		type: "each",
    		source: "(86:16) {#each categories as category, index}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$f(ctx) {
    	let div4;
    	let div3;
    	let div1;
    	let div0;
    	let t0;
    	let div2;
    	let contentcontainer;
    	let t1;
    	let browsenavbar;
    	let current;
    	let each_value = /*categories*/ ctx[3];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$4(get_each_context$4(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	let each_1_else = null;

    	if (!each_value.length) {
    		each_1_else = create_else_block$5(ctx);
    	}

    	contentcontainer = new ContentContainer({
    			props: { page: /*page*/ ctx[1] },
    			$$inline: true
    		});

    	contentcontainer.$on("pageChange", /*pageHandle*/ ctx[5]);
    	contentcontainer.$on("focus", /*focusHandle*/ ctx[6]);

    	browsenavbar = new BrowseNavbar({
    			props: {
    				page: /*page*/ ctx[1],
    				focus: /*focus*/ ctx[2]
    			},
    			$$inline: true
    		});

    	browsenavbar.$on("pageChange", /*pageHandle*/ ctx[5]);

    	const block = {
    		c: function create() {
    			div4 = element("div");
    			div3 = element("div");
    			div1 = element("div");
    			div0 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			if (each_1_else) {
    				each_1_else.c();
    			}

    			t0 = space();
    			div2 = element("div");
    			create_component(contentcontainer.$$.fragment);
    			t1 = space();
    			create_component(browsenavbar.$$.fragment);
    			attr_dev(div0, "class", "browse-control-container svelte-7d4dsw");
    			add_location(div0, file$c, 84, 12, 1746);
    			attr_dev(div1, "class", "browse-control-wrap svelte-7d4dsw");
    			add_location(div1, file$c, 83, 8, 1700);
    			attr_dev(div2, "class", "browse-content-wrap svelte-7d4dsw");
    			add_location(div2, file$c, 93, 8, 2096);
    			attr_dev(div3, "class", "browse-main-container svelte-7d4dsw");
    			add_location(div3, file$c, 82, 4, 1656);
    			attr_dev(div4, "class", "browse-main-wrap svelte-7d4dsw");
    			add_location(div4, file$c, 81, 0, 1621);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div4, anchor);
    			append_dev(div4, div3);
    			append_dev(div3, div1);
    			append_dev(div1, div0);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div0, null);
    			}

    			if (each_1_else) {
    				each_1_else.m(div0, null);
    			}

    			append_dev(div3, t0);
    			append_dev(div3, div2);
    			mount_component(contentcontainer, div2, null);
    			append_dev(div2, t1);
    			mount_component(browsenavbar, div2, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*categories, selected_index, categorySelect*/ 25) {
    				each_value = /*categories*/ ctx[3];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$4(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$4(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(div0, null);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();

    				if (!each_value.length && each_1_else) {
    					each_1_else.p(ctx, dirty);
    				} else if (!each_value.length) {
    					each_1_else = create_else_block$5(ctx);
    					each_1_else.c();
    					each_1_else.m(div0, null);
    				} else if (each_1_else) {
    					each_1_else.d(1);
    					each_1_else = null;
    				}
    			}

    			const contentcontainer_changes = {};
    			if (dirty & /*page*/ 2) contentcontainer_changes.page = /*page*/ ctx[1];
    			contentcontainer.$set(contentcontainer_changes);
    			const browsenavbar_changes = {};
    			if (dirty & /*page*/ 2) browsenavbar_changes.page = /*page*/ ctx[1];
    			if (dirty & /*focus*/ 4) browsenavbar_changes.focus = /*focus*/ ctx[2];
    			browsenavbar.$set(browsenavbar_changes);
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			transition_in(contentcontainer.$$.fragment, local);
    			transition_in(browsenavbar.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			transition_out(contentcontainer.$$.fragment, local);
    			transition_out(browsenavbar.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div4);
    			destroy_each(each_blocks, detaching);
    			if (each_1_else) each_1_else.d();
    			destroy_component(contentcontainer);
    			destroy_component(browsenavbar);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$f.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$f($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Browse', slots, []);
    	let categories = ["영상", "사진", "문서"];
    	let selected_index = null;
    	let page = 1;
    	let focus = false;

    	function categorySelect(e) {
    		$$invalidate(0, selected_index = e.detail.index);
    	}

    	function pageHandle(e) {
    		$$invalidate(1, page = e.detail.page);
    	}

    	function focusHandle(e) {
    		$$invalidate(2, focus = e.detail.focus);
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Browse> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		Category,
    		ContentContainer,
    		BrowseNavbar,
    		meta: O,
    		Route,
    		categories,
    		selected_index,
    		page,
    		focus,
    		categorySelect,
    		pageHandle,
    		focusHandle
    	});

    	$$self.$inject_state = $$props => {
    		if ('categories' in $$props) $$invalidate(3, categories = $$props.categories);
    		if ('selected_index' in $$props) $$invalidate(0, selected_index = $$props.selected_index);
    		if ('page' in $$props) $$invalidate(1, page = $$props.page);
    		if ('focus' in $$props) $$invalidate(2, focus = $$props.focus);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		selected_index,
    		page,
    		focus,
    		categories,
    		categorySelect,
    		pageHandle,
    		focusHandle
    	];
    }

    class Browse extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$f, create_fragment$f, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Browse",
    			options,
    			id: create_fragment$f.name
    		});
    	}
    }

    /* components/Search.svelte generated by Svelte v3.50.1 */

    const file$d = "components/Search.svelte";

    function create_fragment$g(ctx) {
    	let div17;
    	let div0;
    	let h30;
    	let t1;
    	let div3;
    	let div1;
    	let svg0;
    	let path0;
    	let t2;
    	let div2;
    	let input;
    	let t3;
    	let div4;
    	let svg1;
    	let path1;
    	let t4;
    	let div5;
    	let svg2;
    	let path2;
    	let t5;
    	let div6;
    	let svg3;
    	let path3;
    	let t6;
    	let div8;
    	let div7;
    	let h31;
    	let t8;
    	let div10;
    	let div9;
    	let h32;
    	let t10;
    	let div12;
    	let div11;
    	let h33;
    	let t12;
    	let div14;
    	let div13;
    	let h34;
    	let t14;
    	let div16;
    	let div15;
    	let h35;

    	const block = {
    		c: function create() {
    			div17 = element("div");
    			div0 = element("div");
    			h30 = element("h3");
    			h30.textContent = "전체선택";
    			t1 = space();
    			div3 = element("div");
    			div1 = element("div");
    			svg0 = svg_element("svg");
    			path0 = svg_element("path");
    			t2 = space();
    			div2 = element("div");
    			input = element("input");
    			t3 = space();
    			div4 = element("div");
    			svg1 = svg_element("svg");
    			path1 = svg_element("path");
    			t4 = space();
    			div5 = element("div");
    			svg2 = svg_element("svg");
    			path2 = svg_element("path");
    			t5 = space();
    			div6 = element("div");
    			svg3 = svg_element("svg");
    			path3 = svg_element("path");
    			t6 = space();
    			div8 = element("div");
    			div7 = element("div");
    			h31 = element("h3");
    			h31.textContent = "인물";
    			t8 = space();
    			div10 = element("div");
    			div9 = element("div");
    			h32 = element("h3");
    			h32.textContent = "제목";
    			t10 = space();
    			div12 = element("div");
    			div11 = element("div");
    			h33 = element("h3");
    			h33.textContent = "장소";
    			t12 = space();
    			div14 = element("div");
    			div13 = element("div");
    			h34 = element("h3");
    			h34.textContent = "최근순";
    			t14 = space();
    			div16 = element("div");
    			div15 = element("div");
    			h35 = element("h3");
    			h35.textContent = "검색";
    			attr_dev(h30, "class", "svelte-1tv1249");
    			add_location(h30, file$d, 95, 12, 1977);
    			attr_dev(div0, "class", "select-all-or-reset svelte-1tv1249");
    			add_location(div0, file$d, 94, 8, 1931);
    			attr_dev(path0, "stroke-linecap", "round");
    			attr_dev(path0, "stroke-linejoin", "round");
    			attr_dev(path0, "d", "M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z");
    			add_location(path0, file$d, 102, 22, 2309);
    			attr_dev(svg0, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg0, "fill", "none");
    			attr_dev(svg0, "viewBox", "0 0 24 24");
    			attr_dev(svg0, "stroke-width", "1.5");
    			attr_dev(svg0, "stroke", "currentColor");
    			attr_dev(svg0, "class", "w-6 h-6");
    			attr_dev(svg0, "height", "25px");
    			attr_dev(svg0, "width", "25px");
    			add_location(svg0, file$d, 101, 16, 2130);
    			attr_dev(div1, "class", "search-icon-wrap svelte-1tv1249");
    			add_location(div1, file$d, 100, 12, 2083);
    			attr_dev(input, "class", "search-input svelte-1tv1249");
    			add_location(input, file$d, 106, 16, 2539);
    			attr_dev(div2, "class", "search-bar svelte-1tv1249");
    			add_location(div2, file$d, 105, 12, 2498);
    			attr_dev(div3, "class", "search-panel svelte-1tv1249");
    			add_location(div3, file$d, 99, 8, 2044);
    			attr_dev(path1, "stroke-linecap", "round");
    			attr_dev(path1, "d", "M15.75 10.5l4.72-4.72a.75.75 0 011.28.53v11.38a.75.75 0 01-1.28.53l-4.72-4.72M4.5 18.75h9a2.25 2.25 0 002.25-2.25v-9a2.25 2.25 0 00-2.25-2.25h-9A2.25 2.25 0 002.25 7.5v9a2.25 2.25 0 002.25 2.25z");
    			add_location(path1, file$d, 112, 18, 2820);
    			attr_dev(svg1, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg1, "viewBox", "0 0 24 24");
    			attr_dev(svg1, "stroke-width", "1");
    			attr_dev(svg1, "stroke", "#011284");
    			attr_dev(svg1, "class", "w-6 h-6");
    			attr_dev(svg1, "height", "30px");
    			attr_dev(svg1, "width", "30px");
    			attr_dev(svg1, "fill", "none");
    			add_location(svg1, file$d, 111, 12, 2652);
    			attr_dev(div4, "class", "select svelte-1tv1249");
    			add_location(div4, file$d, 110, 8, 2619);
    			attr_dev(path2, "stroke-linecap", "round");
    			attr_dev(path2, "stroke-linejoin", "round");
    			attr_dev(path2, "d", "M2.25 15.75l5.159-5.159a2.25 2.25 0 013.182 0l5.159 5.159m-1.5-1.5l1.409-1.409a2.25 2.25 0 013.182 0l2.909 2.909m-18 3.75h16.5a1.5 1.5 0 001.5-1.5V6a1.5 1.5 0 00-1.5-1.5H3.75A1.5 1.5 0 002.25 6v12a1.5 1.5 0 001.5 1.5zm10.5-11.25h.008v.008h-.008V8.25zm.375 0a.375.375 0 11-.75 0 .375.375 0 01.75 0z");
    			add_location(path2, file$d, 118, 18, 3303);
    			attr_dev(svg2, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg2, "viewBox", "0 0 24 24");
    			attr_dev(svg2, "stroke-width", "1");
    			attr_dev(svg2, "stroke", "#011284");
    			attr_dev(svg2, "class", "w-6 h-6");
    			attr_dev(svg2, "height", "30px");
    			attr_dev(svg2, "width", "30px");
    			attr_dev(svg2, "fill", "none");
    			add_location(svg2, file$d, 117, 12, 3135);
    			attr_dev(div5, "class", "select svelte-1tv1249");
    			add_location(div5, file$d, 116, 8, 3102);
    			attr_dev(path3, "stroke-linecap", "round");
    			attr_dev(path3, "stroke-linejoin", "round");
    			attr_dev(path3, "d", "M19.5 14.25v-2.625a3.375 3.375 0 00-3.375-3.375h-1.5A1.125 1.125 0 0113.5 7.125v-1.5a3.375 3.375 0 00-3.375-3.375H8.25m2.25 0H5.625c-.621 0-1.125.504-1.125 1.125v17.25c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125V11.25a9 9 0 00-9-9z");
    			add_location(path3, file$d, 124, 2, 3897);
    			attr_dev(svg3, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg3, "viewBox", "0 0 24 24");
    			attr_dev(svg3, "stroke-width", "1");
    			attr_dev(svg3, "stroke", "#011284");
    			attr_dev(svg3, "class", "w-6 h-6");
    			attr_dev(svg3, "height", "30px");
    			attr_dev(svg3, "width", "30px");
    			attr_dev(svg3, "fill", "none");
    			add_location(svg3, file$d, 123, 12, 3745);
    			attr_dev(div6, "class", "select svelte-1tv1249");
    			add_location(div6, file$d, 122, 8, 3712);
    			attr_dev(h31, "class", "svelte-1tv1249");
    			add_location(h31, file$d, 130, 16, 4328);
    			attr_dev(div7, "class", "btn svelte-1tv1249");
    			add_location(div7, file$d, 129, 12, 4294);
    			attr_dev(div8, "class", "select svelte-1tv1249");
    			add_location(div8, file$d, 128, 8, 4261);
    			attr_dev(h32, "class", "svelte-1tv1249");
    			add_location(h32, file$d, 135, 16, 4449);
    			attr_dev(div9, "class", "btn svelte-1tv1249");
    			add_location(div9, file$d, 134, 12, 4415);
    			attr_dev(div10, "class", "select svelte-1tv1249");
    			add_location(div10, file$d, 133, 8, 4382);
    			attr_dev(h33, "class", "svelte-1tv1249");
    			add_location(h33, file$d, 140, 16, 4570);
    			attr_dev(div11, "class", "btn svelte-1tv1249");
    			add_location(div11, file$d, 139, 12, 4536);
    			attr_dev(div12, "class", "select svelte-1tv1249");
    			add_location(div12, file$d, 138, 8, 4503);
    			attr_dev(h34, "class", "svelte-1tv1249");
    			add_location(h34, file$d, 145, 16, 4691);
    			attr_dev(div13, "class", "btn svelte-1tv1249");
    			add_location(div13, file$d, 144, 12, 4657);
    			attr_dev(div14, "class", "select svelte-1tv1249");
    			add_location(div14, file$d, 143, 8, 4624);
    			attr_dev(h35, "class", "svelte-1tv1249");
    			add_location(h35, file$d, 150, 16, 4820);
    			attr_dev(div15, "class", "search-btn svelte-1tv1249");
    			add_location(div15, file$d, 149, 12, 4779);
    			attr_dev(div16, "class", "select svelte-1tv1249");
    			add_location(div16, file$d, 148, 8, 4746);
    			attr_dev(div17, "class", "search-main svelte-1tv1249");
    			add_location(div17, file$d, 93, 0, 1897);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div17, anchor);
    			append_dev(div17, div0);
    			append_dev(div0, h30);
    			append_dev(div17, t1);
    			append_dev(div17, div3);
    			append_dev(div3, div1);
    			append_dev(div1, svg0);
    			append_dev(svg0, path0);
    			append_dev(div3, t2);
    			append_dev(div3, div2);
    			append_dev(div2, input);
    			append_dev(div17, t3);
    			append_dev(div17, div4);
    			append_dev(div4, svg1);
    			append_dev(svg1, path1);
    			append_dev(div17, t4);
    			append_dev(div17, div5);
    			append_dev(div5, svg2);
    			append_dev(svg2, path2);
    			append_dev(div17, t5);
    			append_dev(div17, div6);
    			append_dev(div6, svg3);
    			append_dev(svg3, path3);
    			append_dev(div17, t6);
    			append_dev(div17, div8);
    			append_dev(div8, div7);
    			append_dev(div7, h31);
    			append_dev(div17, t8);
    			append_dev(div17, div10);
    			append_dev(div10, div9);
    			append_dev(div9, h32);
    			append_dev(div17, t10);
    			append_dev(div17, div12);
    			append_dev(div12, div11);
    			append_dev(div11, h33);
    			append_dev(div17, t12);
    			append_dev(div17, div14);
    			append_dev(div14, div13);
    			append_dev(div13, h34);
    			append_dev(div17, t14);
    			append_dev(div17, div16);
    			append_dev(div16, div15);
    			append_dev(div15, h35);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div17);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$g.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$g($$self, $$props) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Search', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Search> was created with unknown prop '${key}'`);
    	});

    	return [];
    }

    class Search extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$g, create_fragment$g, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Search",
    			options,
    			id: create_fragment$g.name
    		});
    	}
    }

    /* pages/Info.svelte generated by Svelte v3.50.1 */

    const file$e = "pages/Info.svelte";

    function create_fragment$h(ctx) {
    	let div12;
    	let div3;
    	let div0;
    	let svg0;
    	let path0;
    	let t0;
    	let div2;
    	let div1;
    	let h30;
    	let t2;
    	let h31;
    	let t4;
    	let div7;
    	let div4;
    	let svg1;
    	let path1;
    	let t5;
    	let div6;
    	let div5;
    	let h32;
    	let t7;
    	let h33;
    	let t9;
    	let div11;
    	let div8;
    	let svg2;
    	let path2;
    	let t10;
    	let div10;
    	let div9;
    	let h34;
    	let t12;
    	let h35;

    	const block = {
    		c: function create() {
    			div12 = element("div");
    			div3 = element("div");
    			div0 = element("div");
    			svg0 = svg_element("svg");
    			path0 = svg_element("path");
    			t0 = space();
    			div2 = element("div");
    			div1 = element("div");
    			h30 = element("h3");
    			h30.textContent = "3";
    			t2 = space();
    			h31 = element("h3");
    			h31.textContent = "개";
    			t4 = space();
    			div7 = element("div");
    			div4 = element("div");
    			svg1 = svg_element("svg");
    			path1 = svg_element("path");
    			t5 = space();
    			div6 = element("div");
    			div5 = element("div");
    			h32 = element("h3");
    			h32.textContent = "3";
    			t7 = space();
    			h33 = element("h3");
    			h33.textContent = "개";
    			t9 = space();
    			div11 = element("div");
    			div8 = element("div");
    			svg2 = svg_element("svg");
    			path2 = svg_element("path");
    			t10 = space();
    			div10 = element("div");
    			div9 = element("div");
    			h34 = element("h3");
    			h34.textContent = "3";
    			t12 = space();
    			h35 = element("h3");
    			h35.textContent = "개";
    			attr_dev(path0, "stroke-linecap", "round");
    			attr_dev(path0, "d", "M15.75 10.5l4.72-4.72a.75.75 0 011.28.53v11.38a.75.75 0 01-1.28.53l-4.72-4.72M4.5 18.75h9a2.25 2.25 0 002.25-2.25v-9a2.25 2.25 0 00-2.25-2.25h-9A2.25 2.25 0 002.25 7.5v9a2.25 2.25 0 002.25 2.25z");
    			add_location(path0, file$e, 69, 18, 1427);
    			attr_dev(svg0, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg0, "viewBox", "0 0 24 24");
    			attr_dev(svg0, "stroke-width", "1");
    			attr_dev(svg0, "stroke", "#011284");
    			attr_dev(svg0, "class", "w-6 h-6");
    			attr_dev(svg0, "height", "25px");
    			attr_dev(svg0, "width", "25px");
    			attr_dev(svg0, "fill", "none");
    			add_location(svg0, file$e, 68, 12, 1259);
    			attr_dev(div0, "class", "info-title svelte-mm3wap");
    			add_location(div0, file$e, 67, 8, 1222);
    			attr_dev(h30, "class", "number svelte-mm3wap");
    			add_location(h30, file$e, 74, 16, 1784);
    			attr_dev(div1, "class", "number-container svelte-mm3wap");
    			add_location(div1, file$e, 73, 12, 1737);
    			attr_dev(h31, "class", "count svelte-mm3wap");
    			add_location(h31, file$e, 78, 12, 1879);
    			attr_dev(div2, "class", "statistics svelte-mm3wap");
    			add_location(div2, file$e, 72, 8, 1700);
    			attr_dev(div3, "class", "info-container svelte-mm3wap");
    			add_location(div3, file$e, 66, 4, 1185);
    			attr_dev(path1, "stroke-linecap", "round");
    			attr_dev(path1, "stroke-linejoin", "round");
    			attr_dev(path1, "d", "M2.25 15.75l5.159-5.159a2.25 2.25 0 013.182 0l5.159 5.159m-1.5-1.5l1.409-1.409a2.25 2.25 0 013.182 0l2.909 2.909m-18 3.75h16.5a1.5 1.5 0 001.5-1.5V6a1.5 1.5 0 00-1.5-1.5H3.75A1.5 1.5 0 002.25 6v12a1.5 1.5 0 001.5 1.5zm10.5-11.25h.008v.008h-.008V8.25zm.375 0a.375.375 0 11-.75 0 .375.375 0 01.75 0z");
    			add_location(path1, file$e, 85, 18, 2181);
    			attr_dev(svg1, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg1, "viewBox", "0 0 24 24");
    			attr_dev(svg1, "stroke-width", "1");
    			attr_dev(svg1, "stroke", "#011284");
    			attr_dev(svg1, "class", "w-6 h-6");
    			attr_dev(svg1, "height", "25px");
    			attr_dev(svg1, "width", "25px");
    			attr_dev(svg1, "fill", "none");
    			add_location(svg1, file$e, 84, 12, 2013);
    			attr_dev(div4, "class", "info-title svelte-mm3wap");
    			add_location(div4, file$e, 83, 8, 1976);
    			attr_dev(h32, "class", "number svelte-mm3wap");
    			add_location(h32, file$e, 90, 16, 2665);
    			attr_dev(div5, "class", "number-container svelte-mm3wap");
    			add_location(div5, file$e, 89, 12, 2618);
    			attr_dev(h33, "class", "count svelte-mm3wap");
    			add_location(h33, file$e, 94, 12, 2760);
    			attr_dev(div6, "class", "statistics svelte-mm3wap");
    			add_location(div6, file$e, 88, 8, 2581);
    			attr_dev(div7, "class", "info-container svelte-mm3wap");
    			add_location(div7, file$e, 82, 4, 1939);
    			attr_dev(path2, "stroke-linecap", "round");
    			attr_dev(path2, "stroke-linejoin", "round");
    			attr_dev(path2, "d", "M19.5 14.25v-2.625a3.375 3.375 0 00-3.375-3.375h-1.5A1.125 1.125 0 0113.5 7.125v-1.5a3.375 3.375 0 00-3.375-3.375H8.25m2.25 0H5.625c-.621 0-1.125.504-1.125 1.125v17.25c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125V11.25a9 9 0 00-9-9z");
    			add_location(path2, file$e, 101, 2, 3046);
    			attr_dev(svg2, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg2, "viewBox", "0 0 24 24");
    			attr_dev(svg2, "stroke-width", "1");
    			attr_dev(svg2, "stroke", "#011284");
    			attr_dev(svg2, "class", "w-6 h-6");
    			attr_dev(svg2, "height", "25px");
    			attr_dev(svg2, "width", "25px");
    			attr_dev(svg2, "fill", "none");
    			add_location(svg2, file$e, 100, 12, 2894);
    			attr_dev(div8, "class", "info-title svelte-mm3wap");
    			add_location(div8, file$e, 99, 8, 2857);
    			attr_dev(h34, "class", "number svelte-mm3wap");
    			add_location(h34, file$e, 106, 16, 3485);
    			attr_dev(div9, "class", "number-container svelte-mm3wap");
    			add_location(div9, file$e, 105, 12, 3438);
    			attr_dev(h35, "class", "count svelte-mm3wap");
    			add_location(h35, file$e, 110, 12, 3580);
    			attr_dev(div10, "class", "statistics svelte-mm3wap");
    			add_location(div10, file$e, 104, 8, 3401);
    			attr_dev(div11, "class", "info-container svelte-mm3wap");
    			add_location(div11, file$e, 98, 4, 2820);
    			attr_dev(div12, "class", "info-wrap svelte-mm3wap");
    			add_location(div12, file$e, 64, 0, 1156);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div12, anchor);
    			append_dev(div12, div3);
    			append_dev(div3, div0);
    			append_dev(div0, svg0);
    			append_dev(svg0, path0);
    			append_dev(div3, t0);
    			append_dev(div3, div2);
    			append_dev(div2, div1);
    			append_dev(div1, h30);
    			append_dev(div2, t2);
    			append_dev(div2, h31);
    			append_dev(div12, t4);
    			append_dev(div12, div7);
    			append_dev(div7, div4);
    			append_dev(div4, svg1);
    			append_dev(svg1, path1);
    			append_dev(div7, t5);
    			append_dev(div7, div6);
    			append_dev(div6, div5);
    			append_dev(div5, h32);
    			append_dev(div6, t7);
    			append_dev(div6, h33);
    			append_dev(div12, t9);
    			append_dev(div12, div11);
    			append_dev(div11, div8);
    			append_dev(div8, svg2);
    			append_dev(svg2, path2);
    			append_dev(div11, t10);
    			append_dev(div11, div10);
    			append_dev(div10, div9);
    			append_dev(div9, h34);
    			append_dev(div10, t12);
    			append_dev(div10, h35);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div12);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$h.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$h($$self, $$props) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Info', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Info> was created with unknown prop '${key}'`);
    	});

    	return [];
    }

    class Info extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$h, create_fragment$h, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Info",
    			options,
    			id: create_fragment$h.name
    		});
    	}
    }

    /* pages/ManageMain.svelte generated by Svelte v3.50.1 */
    const file$f = "pages/ManageMain.svelte";

    function create_fragment$i(ctx) {
    	let div2;
    	let div0;
    	let search;
    	let t;
    	let div1;
    	let info;
    	let current;
    	search = new Search({ $$inline: true });
    	info = new Info({ $$inline: true });

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div0 = element("div");
    			create_component(search.$$.fragment);
    			t = space();
    			div1 = element("div");
    			create_component(info.$$.fragment);
    			attr_dev(div0, "class", "search-wrap svelte-6pcxg4");
    			add_location(div0, file$f, 42, 8, 754);
    			attr_dev(div1, "class", "info-wrap svelte-6pcxg4");
    			add_location(div1, file$f, 45, 8, 829);
    			attr_dev(div2, "class", "main-view-home svelte-6pcxg4");
    			add_location(div2, file$f, 41, 4, 716);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div0);
    			mount_component(search, div0, null);
    			append_dev(div2, t);
    			append_dev(div2, div1);
    			mount_component(info, div1, null);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(search.$$.fragment, local);
    			transition_in(info.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(search.$$.fragment, local);
    			transition_out(info.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			destroy_component(search);
    			destroy_component(info);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$i.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$i($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ManageMain', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ManageMain> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ Route, Search, Info });
    	return [];
    }

    class ManageMain extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$i, create_fragment$i, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ManageMain",
    			options,
    			id: create_fragment$i.name
    		});
    	}
    }

    /* pages/sidebar/ManageCategory.svelte generated by Svelte v3.50.1 */
    const file$g = "pages/sidebar/ManageCategory.svelte";

    function get_each_context$5(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[8] = list[i];
    	child_ctx[10] = i;
    	return child_ctx;
    }

    // (100:4) {:else}
    function create_else_block$6(ctx) {
    	let svg;
    	let path;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "stroke-linecap", "round");
    			attr_dev(path, "stroke-linejoin", "round");
    			attr_dev(path, "d", "M19.5 8.25l-7.5 7.5-7.5-7.5");
    			add_location(path, file$g, 101, 8, 2551);
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "fill", "none");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			attr_dev(svg, "stroke-width", "3");
    			attr_dev(svg, "stroke", "white");
    			attr_dev(svg, "class", "w-6 h-6 svelte-1ko1bmi");
    			attr_dev(svg, "width", "15");
    			attr_dev(svg, "height", "15");
    			add_location(svg, file$g, 100, 4, 2398);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$6.name,
    		type: "else",
    		source: "(100:4) {:else}",
    		ctx
    	});

    	return block;
    }

    // (96:4) {#if selected_index == index}
    function create_if_block_1$6(ctx) {
    	let svg;
    	let path;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "stroke-linecap", "round");
    			attr_dev(path, "stroke-linejoin", "round");
    			attr_dev(path, "d", "M4.5 15.75l7.5-7.5 7.5 7.5");
    			add_location(path, file$g, 97, 12, 2277);
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "fill", "none");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			attr_dev(svg, "stroke-width", "3");
    			attr_dev(svg, "stroke", "white");
    			attr_dev(svg, "class", "w-6 h-6 svelte-1ko1bmi");
    			attr_dev(svg, "width", "15");
    			attr_dev(svg, "height", "15");
    			add_location(svg, file$g, 96, 8, 2120);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$6.name,
    		type: "if",
    		source: "(96:4) {#if selected_index == index}",
    		ctx
    	});

    	return block;
    }

    // (106:0) {#if selected_index == index}
    function create_if_block$8(ctx) {
    	let div;
    	let div_intro;
    	let div_outro;
    	let current;
    	let each_value = /*sub_categories*/ ctx[3];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$5(get_each_context$5(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(div, "class", "sub-category-container svelte-1ko1bmi");
    			add_location(div, file$g, 106, 4, 2706);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}

    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty & /*categoryNavigate, sub_categories*/ 24) {
    				each_value = /*sub_categories*/ ctx[3];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$5(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$5(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			add_render_callback(() => {
    				if (div_outro) div_outro.end(1);
    				div_intro = create_in_transition(div, slide, { duration: 400, easing: quintOut });
    				div_intro.start();
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			if (div_intro) div_intro.invalidate();
    			div_outro = create_out_transition(div, slide, { duration: 10, easing: quadIn });
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_each(each_blocks, detaching);
    			if (detaching && div_outro) div_outro.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$8.name,
    		type: "if",
    		source: "(106:0) {#if selected_index == index}",
    		ctx
    	});

    	return block;
    }

    // (108:8) {#each sub_categories as sub_category, sub_index}
    function create_each_block$5(ctx) {
    	let div;
    	let h3;
    	let t0_value = /*sub_category*/ ctx[8].name + "";
    	let t0;
    	let t1;
    	let mounted;
    	let dispose;

    	function click_handler() {
    		return /*click_handler*/ ctx[6](/*sub_index*/ ctx[10]);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			h3 = element("h3");
    			t0 = text(t0_value);
    			t1 = space();
    			attr_dev(h3, "class", "svelte-1ko1bmi");
    			add_location(h3, file$g, 109, 16, 2990);
    			attr_dev(div, "class", "sub-category svelte-1ko1bmi");
    			add_location(div, file$g, 108, 12, 2901);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, h3);
    			append_dev(h3, t0);
    			append_dev(div, t1);

    			if (!mounted) {
    				dispose = listen_dev(div, "click", click_handler, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$5.name,
    		type: "each",
    		source: "(108:8) {#each sub_categories as sub_category, sub_index}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$j(ctx) {
    	let div;
    	let h3;
    	let t0_value = /*category*/ ctx[0].name + "";
    	let t0;
    	let t1;
    	let t2;
    	let if_block1_anchor;
    	let current;
    	let mounted;
    	let dispose;

    	function select_block_type(ctx, dirty) {
    		if (/*selected_index*/ ctx[1] == /*index*/ ctx[2]) return create_if_block_1$6;
    		return create_else_block$6;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block0 = current_block_type(ctx);
    	let if_block1 = /*selected_index*/ ctx[1] == /*index*/ ctx[2] && create_if_block$8(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			h3 = element("h3");
    			t0 = text(t0_value);
    			t1 = space();
    			if_block0.c();
    			t2 = space();
    			if (if_block1) if_block1.c();
    			if_block1_anchor = empty();
    			attr_dev(h3, "class", "svelte-1ko1bmi");
    			add_location(h3, file$g, 94, 4, 2051);
    			attr_dev(div, "class", "category svelte-1ko1bmi");
    			add_location(div, file$g, 93, 0, 1997);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, h3);
    			append_dev(h3, t0);
    			append_dev(div, t1);
    			if_block0.m(div, null);
    			insert_dev(target, t2, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, if_block1_anchor, anchor);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(div, "click", /*categorySelect*/ ctx[5], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if ((!current || dirty & /*category*/ 1) && t0_value !== (t0_value = /*category*/ ctx[0].name + "")) set_data_dev(t0, t0_value);

    			if (current_block_type !== (current_block_type = select_block_type(ctx))) {
    				if_block0.d(1);
    				if_block0 = current_block_type(ctx);

    				if (if_block0) {
    					if_block0.c();
    					if_block0.m(div, null);
    				}
    			}

    			if (/*selected_index*/ ctx[1] == /*index*/ ctx[2]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty & /*selected_index, index*/ 6) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block$8(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block1);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block1);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if_block0.d();
    			if (detaching) detach_dev(t2);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach_dev(if_block1_anchor);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$j.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$j($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ManageCategory', slots, []);
    	let { category = { name: '이름없음', sub_category: [] } } = $$props;
    	let { selected_index = null } = $$props;
    	let { index = 0 } = $$props;
    	let sub_categories = category.sub_category;
    	var dispatch = createEventDispatcher();

    	function categoryNavigate(sub_index) {
    		dispatch('navigate', { path: sub_categories[sub_index].path });
    	}

    	function categorySelect() {
    		if (index == selected_index) {
    			dispatch('click', { index: null });
    		} else {
    			dispatch('click', { index });
    		}
    	}

    	const writable_props = ['category', 'selected_index', 'index'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ManageCategory> was created with unknown prop '${key}'`);
    	});

    	const click_handler = sub_index => categoryNavigate(sub_index);

    	$$self.$$set = $$props => {
    		if ('category' in $$props) $$invalidate(0, category = $$props.category);
    		if ('selected_index' in $$props) $$invalidate(1, selected_index = $$props.selected_index);
    		if ('index' in $$props) $$invalidate(2, index = $$props.index);
    	};

    	$$self.$capture_state = () => ({
    		category,
    		selected_index,
    		index,
    		sub_categories,
    		createEventDispatcher,
    		fly,
    		slide,
    		quintIn,
    		quintOut,
    		quadIn,
    		dispatch,
    		categoryNavigate,
    		categorySelect
    	});

    	$$self.$inject_state = $$props => {
    		if ('category' in $$props) $$invalidate(0, category = $$props.category);
    		if ('selected_index' in $$props) $$invalidate(1, selected_index = $$props.selected_index);
    		if ('index' in $$props) $$invalidate(2, index = $$props.index);
    		if ('sub_categories' in $$props) $$invalidate(3, sub_categories = $$props.sub_categories);
    		if ('dispatch' in $$props) dispatch = $$props.dispatch;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		category,
    		selected_index,
    		index,
    		sub_categories,
    		categoryNavigate,
    		categorySelect,
    		click_handler
    	];
    }

    class ManageCategory extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$j, create_fragment$j, safe_not_equal, { category: 0, selected_index: 1, index: 2 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ManageCategory",
    			options,
    			id: create_fragment$j.name
    		});
    	}

    	get category() {
    		throw new Error("<ManageCategory>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set category(value) {
    		throw new Error("<ManageCategory>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get selected_index() {
    		throw new Error("<ManageCategory>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selected_index(value) {
    		throw new Error("<ManageCategory>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get index() {
    		throw new Error("<ManageCategory>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set index(value) {
    		throw new Error("<ManageCategory>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* components/manager/ManageSidebar.svelte generated by Svelte v3.50.1 */
    const file$h = "components/manager/ManageSidebar.svelte";

    function get_each_context$6(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[4] = list[i];
    	child_ctx[6] = i;
    	return child_ctx;
    }

    // (42:4) {:else}
    function create_else_block$7(ctx) {
    	let h3;

    	const block = {
    		c: function create() {
    			h3 = element("h3");
    			h3.textContent = "비어있음";
    			add_location(h3, file$h, 42, 8, 954);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h3, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h3);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$7.name,
    		type: "else",
    		source: "(42:4) {:else}",
    		ctx
    	});

    	return block;
    }

    // (40:4) {#each categories as category, index}
    function create_each_block$6(ctx) {
    	let managecategory;
    	let current;

    	managecategory = new ManageCategory({
    			props: {
    				category: /*category*/ ctx[4],
    				index: /*index*/ ctx[6],
    				selected_index: /*selected_index*/ ctx[1]
    			},
    			$$inline: true
    		});

    	managecategory.$on("click", /*categorySelect*/ ctx[2]);
    	managecategory.$on("navigate", /*categoryNavigate*/ ctx[3]);

    	const block = {
    		c: function create() {
    			create_component(managecategory.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(managecategory, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const managecategory_changes = {};
    			if (dirty & /*categories*/ 1) managecategory_changes.category = /*category*/ ctx[4];
    			if (dirty & /*selected_index*/ 2) managecategory_changes.selected_index = /*selected_index*/ ctx[1];
    			managecategory.$set(managecategory_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(managecategory.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(managecategory.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(managecategory, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$6.name,
    		type: "each",
    		source: "(40:4) {#each categories as category, index}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$k(ctx) {
    	let div1;
    	let div0;
    	let t;
    	let current;
    	let each_value = /*categories*/ ctx[0];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$6(get_each_context$6(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	let each_1_else = null;

    	if (!each_value.length) {
    		each_1_else = create_else_block$7(ctx);
    	}

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			t = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			if (each_1_else) {
    				each_1_else.c();
    			}

    			attr_dev(div0, "class", "block svelte-r7n4zx");
    			add_location(div0, file$h, 37, 4, 707);
    			attr_dev(div1, "class", "browse-control-container svelte-r7n4zx");
    			add_location(div1, file$h, 36, 0, 663);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			append_dev(div1, t);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div1, null);
    			}

    			if (each_1_else) {
    				each_1_else.m(div1, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*categories, selected_index, categorySelect, categoryNavigate*/ 15) {
    				each_value = /*categories*/ ctx[0];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$6(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$6(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(div1, null);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();

    				if (!each_value.length && each_1_else) {
    					each_1_else.p(ctx, dirty);
    				} else if (!each_value.length) {
    					each_1_else = create_else_block$7(ctx);
    					each_1_else.c();
    					each_1_else.m(div1, null);
    				} else if (each_1_else) {
    					each_1_else.d(1);
    					each_1_else = null;
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			destroy_each(each_blocks, detaching);
    			if (each_1_else) each_1_else.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$k.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$k($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ManageSidebar', slots, []);
    	let { categories } = $$props;
    	let selected_index = null;

    	function categorySelect(e) {
    		$$invalidate(1, selected_index = e.detail.index);
    	}

    	function categoryNavigate(e) {
    		f.goto(e.detail.path);
    	}

    	const writable_props = ['categories'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ManageSidebar> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('categories' in $$props) $$invalidate(0, categories = $$props.categories);
    	};

    	$$self.$capture_state = () => ({
    		ManageCategory,
    		meta: O,
    		Route,
    		router: f,
    		categories,
    		selected_index,
    		categorySelect,
    		categoryNavigate
    	});

    	$$self.$inject_state = $$props => {
    		if ('categories' in $$props) $$invalidate(0, categories = $$props.categories);
    		if ('selected_index' in $$props) $$invalidate(1, selected_index = $$props.selected_index);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [categories, selected_index, categorySelect, categoryNavigate];
    }

    class ManageSidebar extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$k, create_fragment$k, safe_not_equal, { categories: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ManageSidebar",
    			options,
    			id: create_fragment$k.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*categories*/ ctx[0] === undefined && !('categories' in props)) {
    			console.warn("<ManageSidebar> was created without expected prop 'categories'");
    		}
    	}

    	get categories() {
    		throw new Error("<ManageSidebar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set categories(value) {
    		throw new Error("<ManageSidebar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* components/manager/ContentTitle/BrowseTitle.svelte generated by Svelte v3.50.1 */

    const { console: console_1$2 } = globals;
    const file$i = "components/manager/ContentTitle/BrowseTitle.svelte";

    function create_fragment$l(ctx) {
    	let div9;
    	let h30;
    	let t1;
    	let div0;
    	let svg0;
    	let path0;
    	let t2;
    	let svg1;
    	let path1;
    	let path2;
    	let t3;
    	let div8;
    	let div1;
    	let h31;
    	let t5;
    	let div7;
    	let div2;
    	let h32;
    	let t7;
    	let div3;
    	let h33;
    	let t9;
    	let div4;
    	let h34;
    	let t11;
    	let div5;
    	let h35;
    	let t13;
    	let div6;
    	let h36;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div9 = element("div");
    			h30 = element("h3");
    			h30.textContent = "기록물 조회";
    			t1 = space();
    			div0 = element("div");
    			svg0 = svg_element("svg");
    			path0 = svg_element("path");
    			t2 = space();
    			svg1 = svg_element("svg");
    			path1 = svg_element("path");
    			path2 = svg_element("path");
    			t3 = space();
    			div8 = element("div");
    			div1 = element("div");
    			h31 = element("h3");
    			h31.textContent = "키워드:";
    			t5 = space();
    			div7 = element("div");
    			div2 = element("div");
    			h32 = element("h3");
    			h32.textContent = "#이인호_동상";
    			t7 = space();
    			div3 = element("div");
    			h33 = element("h3");
    			h33.textContent = "#김재우";
    			t9 = space();
    			div4 = element("div");
    			h34 = element("h3");
    			h34.textContent = "#학정원_배경";
    			t11 = space();
    			div5 = element("div");
    			h35 = element("h3");
    			h35.textContent = "#2022";
    			t13 = space();
    			div6 = element("div");
    			h36 = element("h3");
    			h36.textContent = "#배경화면";
    			attr_dev(h30, "class", "svelte-1822ocs");
    			add_location(h30, file$i, 110, 8, 2660);
    			attr_dev(path0, "stroke-linecap", "round");
    			attr_dev(path0, "stroke-linejoin", "round");
    			attr_dev(path0, "d", "M8.25 6.75h12M8.25 12h12m-12 5.25h12M3.75 6.75h.007v.008H3.75V6.75zm.375 0a.375.375 0 11-.75 0 .375.375 0 01.75 0zM3.75 12h.007v.008H3.75V12zm.375 0a.375.375 0 11-.75 0 .375.375 0 01.75 0zm-.375 5.25h.007v.008H3.75v-.008zm.375 0a.375.375 0 11-.75 0 .375.375 0 01.75 0z");
    			add_location(path0, file$i, 113, 16, 2904);
    			attr_dev(svg0, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg0, "fill", "none");
    			attr_dev(svg0, "viewBox", "0 0 24 24");
    			attr_dev(svg0, "stroke-width", "2");
    			attr_dev(svg0, "stroke", "white");
    			attr_dev(svg0, "width", "18");
    			attr_dev(svg0, "height", "18");
    			add_location(svg0, file$i, 112, 12, 2723);
    			attr_dev(path1, "fill", "none");
    			attr_dev(path1, "d", "M0 0h24v24H0z");
    			add_location(path1, file$i, 116, 16, 3415);
    			attr_dev(path2, "d", "M3 3h8v8H3V3zm0 10h8v8H3v-8zM13 3h8v8h-8V3zm0 10h8v8h-8v-8z");
    			add_location(path2, file$i, 116, 53, 3452);
    			attr_dev(svg1, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg1, "viewBox", "0 0 24 24");
    			attr_dev(svg1, "width", "18");
    			attr_dev(svg1, "height", "18");
    			attr_dev(svg1, "fill", "white");
    			add_location(svg1, file$i, 115, 12, 3266);
    			attr_dev(div0, "class", "svg-holder svelte-1822ocs");
    			add_location(div0, file$i, 111, 8, 2685);
    			attr_dev(h31, "class", "svelte-1822ocs");
    			add_location(h31, file$i, 121, 16, 3668);
    			attr_dev(div1, "class", "keyword-holder-label svelte-1822ocs");
    			add_location(div1, file$i, 120, 12, 3616);
    			attr_dev(h32, "class", "svelte-1822ocs");
    			add_location(h32, file$i, 124, 37, 3782);
    			attr_dev(div2, "class", "keyword svelte-1822ocs");
    			add_location(div2, file$i, 124, 16, 3761);
    			attr_dev(h33, "class", "svelte-1822ocs");
    			add_location(h33, file$i, 125, 37, 3843);
    			attr_dev(div3, "class", "keyword svelte-1822ocs");
    			add_location(div3, file$i, 125, 16, 3822);
    			attr_dev(h34, "class", "svelte-1822ocs");
    			add_location(h34, file$i, 126, 37, 3901);
    			attr_dev(div4, "class", "keyword svelte-1822ocs");
    			add_location(div4, file$i, 126, 16, 3880);
    			attr_dev(h35, "class", "svelte-1822ocs");
    			add_location(h35, file$i, 127, 37, 3962);
    			attr_dev(div5, "class", "keyword svelte-1822ocs");
    			add_location(div5, file$i, 127, 16, 3941);
    			attr_dev(h36, "class", "svelte-1822ocs");
    			add_location(h36, file$i, 128, 37, 4021);
    			attr_dev(div6, "class", "keyword svelte-1822ocs");
    			add_location(div6, file$i, 128, 16, 4000);
    			attr_dev(div7, "class", "keyword-holder svelte-1822ocs");
    			add_location(div7, file$i, 123, 12, 3715);
    			attr_dev(div8, "class", "keyword-holder-wrap svelte-1822ocs");
    			add_location(div8, file$i, 119, 8, 3569);
    			attr_dev(div9, "class", "browse-content-title svelte-1822ocs");
    			add_location(div9, file$i, 109, 4, 2616);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div9, anchor);
    			append_dev(div9, h30);
    			append_dev(div9, t1);
    			append_dev(div9, div0);
    			append_dev(div0, svg0);
    			append_dev(svg0, path0);
    			append_dev(div0, t2);
    			append_dev(div0, svg1);
    			append_dev(svg1, path1);
    			append_dev(svg1, path2);
    			append_dev(div9, t3);
    			append_dev(div9, div8);
    			append_dev(div8, div1);
    			append_dev(div1, h31);
    			append_dev(div8, t5);
    			append_dev(div8, div7);
    			append_dev(div7, div2);
    			append_dev(div2, h32);
    			append_dev(div7, t7);
    			append_dev(div7, div3);
    			append_dev(div3, h33);
    			append_dev(div7, t9);
    			append_dev(div7, div4);
    			append_dev(div4, h34);
    			append_dev(div7, t11);
    			append_dev(div7, div5);
    			append_dev(div5, h35);
    			append_dev(div7, t13);
    			append_dev(div7, div6);
    			append_dev(div6, h36);

    			if (!mounted) {
    				dispose = [
    					listen_dev(svg0, "click", /*click_handler*/ ctx[1], false, false, false),
    					listen_dev(svg1, "click", /*click_handler_1*/ ctx[2], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div9);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$l.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$l($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('BrowseTitle', slots, []);
    	var dispatch = createEventDispatcher();

    	function viewChange(template) {
    		if (template == 'list') {
    			dispatch('viewChange', { view: 'list' });
    		} else if (template == 'box') {
    			dispatch('viewChange', { view: 'box' });
    		} else {
    			console.log('Error on browse content view change');
    		}
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$2.warn(`<BrowseTitle> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => viewChange('list');
    	const click_handler_1 = () => viewChange('box');

    	$$self.$capture_state = () => ({
    		Route,
    		createEventDispatcher,
    		dispatch,
    		viewChange
    	});

    	$$self.$inject_state = $$props => {
    		if ('dispatch' in $$props) dispatch = $$props.dispatch;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [viewChange, click_handler, click_handler_1];
    }

    class BrowseTitle extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$l, create_fragment$l, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "BrowseTitle",
    			options,
    			id: create_fragment$l.name
    		});
    	}
    }

    /* components/manager/Input/InputMultiValue.svelte generated by Svelte v3.50.1 */

    const { console: console_1$3 } = globals;
    const file$j = "components/manager/Input/InputMultiValue.svelte";

    function get_each_context$7(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[16] = list[i];
    	child_ctx[18] = i;
    	return child_ctx;
    }

    // (262:12) {:else}
    function create_else_block$8(ctx) {
    	let label;
    	let h3;
    	let t;
    	let label_intro;
    	let label_outro;
    	let current;

    	const block = {
    		c: function create() {
    			label = element("label");
    			h3 = element("h3");
    			t = text(/*placeholder*/ ctx[0]);
    			attr_dev(h3, "class", "svelte-4m851m");
    			add_location(h3, file$j, 266, 27, 6295);
    			attr_dev(label, "for", "input");
    			attr_dev(label, "class", "label svelte-4m851m");
    			add_location(label, file$j, 263, 20, 6117);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, label, anchor);
    			append_dev(label, h3);
    			append_dev(h3, t);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (!current || dirty & /*placeholder*/ 1) set_data_dev(t, /*placeholder*/ ctx[0]);
    		},
    		i: function intro(local) {
    			if (current) return;

    			add_render_callback(() => {
    				if (label_outro) label_outro.end(1);
    				label_intro = create_in_transition(label, /*receive*/ ctx[6], { key: 'unfocused' });
    				label_intro.start();
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			if (label_intro) label_intro.invalidate();
    			label_outro = create_out_transition(label, /*send*/ ctx[5], { key: 'focused' });
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(label);
    			if (detaching && label_outro) label_outro.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$8.name,
    		type: "else",
    		source: "(262:12) {:else}",
    		ctx
    	});

    	return block;
    }

    // (254:12) {#if focused || value}
    function create_if_block_2$2(ctx) {
    	let label;
    	let h3;
    	let t;
    	let label_intro;
    	let label_outro;
    	let current;

    	const block = {
    		c: function create() {
    			label = element("label");
    			h3 = element("h3");
    			t = text(/*placeholder*/ ctx[0]);
    			attr_dev(h3, "class", "svelte-4m851m");
    			add_location(h3, file$j, 258, 27, 5962);
    			attr_dev(label, "for", "input");
    			attr_dev(label, "class", "label-focused svelte-4m851m");
    			add_location(label, file$j, 255, 20, 5776);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, label, anchor);
    			append_dev(label, h3);
    			append_dev(h3, t);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (!current || dirty & /*placeholder*/ 1) set_data_dev(t, /*placeholder*/ ctx[0]);
    		},
    		i: function intro(local) {
    			if (current) return;

    			add_render_callback(() => {
    				if (label_outro) label_outro.end(1);
    				label_intro = create_in_transition(label, /*receive*/ ctx[6], { key: 'focused' });
    				label_intro.start();
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			if (label_intro) label_intro.invalidate();
    			label_outro = create_out_transition(label, /*send*/ ctx[5], { key: 'unfocused' });
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(label);
    			if (detaching && label_outro) label_outro.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$2.name,
    		type: "if",
    		source: "(254:12) {#if focused || value}",
    		ctx
    	});

    	return block;
    }

    // (276:16) {#if !con.condition(value)}
    function create_if_block_1$7(ctx) {
    	let h3;
    	let t_value = /*con*/ ctx[16].not_satisfied_text + "";
    	let t;

    	const block = {
    		c: function create() {
    			h3 = element("h3");
    			t = text(t_value);
    			attr_dev(h3, "class", "not-satisfied svelte-4m851m");
    			add_location(h3, file$j, 276, 20, 6591);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h3, anchor);
    			append_dev(h3, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*conditions*/ 2 && t_value !== (t_value = /*con*/ ctx[16].not_satisfied_text + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h3);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$7.name,
    		type: "if",
    		source: "(276:16) {#if !con.condition(value)}",
    		ctx
    	});

    	return block;
    }

    // (275:12) {#each conditions as con, con_id}
    function create_each_block$7(ctx) {
    	let show_if = !/*con*/ ctx[16].condition(/*value*/ ctx[4]);
    	let if_block_anchor;
    	let if_block = show_if && create_if_block_1$7(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*conditions, value*/ 18) show_if = !/*con*/ ctx[16].condition(/*value*/ ctx[4]);

    			if (show_if) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_1$7(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$7.name,
    		type: "each",
    		source: "(275:12) {#each conditions as con, con_id}",
    		ctx
    	});

    	return block;
    }

    // (280:12) {#if condition_result}
    function create_if_block$9(ctx) {
    	let h3;
    	let t_value = /*conditions*/ ctx[1][0].satisfied_text + "";
    	let t;

    	const block = {
    		c: function create() {
    			h3 = element("h3");
    			t = text(t_value);
    			attr_dev(h3, "class", "satisfied svelte-4m851m");
    			add_location(h3, file$j, 280, 16, 6744);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h3, anchor);
    			append_dev(h3, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*conditions*/ 2 && t_value !== (t_value = /*conditions*/ ctx[1][0].satisfied_text + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h3);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$9.name,
    		type: "if",
    		source: "(280:12) {#if condition_result}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$m(ctx) {
    	let div3;
    	let div0;
    	let input;
    	let t0;
    	let current_block_type_index;
    	let if_block0;
    	let div0_class_value;
    	let t1;
    	let div2;
    	let div1;
    	let t2;
    	let current;
    	let mounted;
    	let dispose;
    	const if_block_creators = [create_if_block_2$2, create_else_block$8];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*focused*/ ctx[2] || /*value*/ ctx[4]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	let each_value = /*conditions*/ ctx[1];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$7(get_each_context$7(ctx, each_value, i));
    	}

    	let if_block1 = /*condition_result*/ ctx[3] && create_if_block$9(ctx);

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			div0 = element("div");
    			input = element("input");
    			t0 = space();
    			if_block0.c();
    			t1 = space();
    			div2 = element("div");
    			div1 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t2 = space();
    			if (if_block1) if_block1.c();
    			attr_dev(input, "class", "input svelte-4m851m");
    			attr_dev(input, "type", "text");
    			add_location(input, file$j, 252, 8, 5588);

    			attr_dev(div0, "class", div0_class_value = "" + (null_to_empty(/*condition_result*/ ctx[3]
    			? 'input-container'
    			: 'input-container-not-satisfied') + " svelte-4m851m"));

    			add_location(div0, file$j, 251, 4, 5493);
    			attr_dev(div1, "class", "warning-container svelte-4m851m");
    			add_location(div1, file$j, 273, 8, 6446);
    			attr_dev(div2, "class", "warning-wrap svelte-4m851m");
    			add_location(div2, file$j, 272, 4, 6410);
    			attr_dev(div3, "class", "input-wrap svelte-4m851m");
    			add_location(div3, file$j, 250, 0, 5463);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div0);
    			append_dev(div0, input);
    			set_input_value(input, /*value*/ ctx[4]);
    			append_dev(div0, t0);
    			if_blocks[current_block_type_index].m(div0, null);
    			append_dev(div3, t1);
    			append_dev(div3, div2);
    			append_dev(div2, div1);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div1, null);
    			}

    			append_dev(div1, t2);
    			if (if_block1) if_block1.m(div1, null);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(input, "focus", /*focusHandle*/ ctx[7], false, false, false),
    					listen_dev(input, "blur", /*blurHandle*/ ctx[8], false, false, false),
    					listen_dev(input, "input", /*input_input_handler*/ ctx[13])
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*value*/ 16 && input.value !== /*value*/ ctx[4]) {
    				set_input_value(input, /*value*/ ctx[4]);
    			}

    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block0 = if_blocks[current_block_type_index];

    				if (!if_block0) {
    					if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block0.c();
    				} else {
    					if_block0.p(ctx, dirty);
    				}

    				transition_in(if_block0, 1);
    				if_block0.m(div0, null);
    			}

    			if (!current || dirty & /*condition_result*/ 8 && div0_class_value !== (div0_class_value = "" + (null_to_empty(/*condition_result*/ ctx[3]
    			? 'input-container'
    			: 'input-container-not-satisfied') + " svelte-4m851m"))) {
    				attr_dev(div0, "class", div0_class_value);
    			}

    			if (dirty & /*conditions, value*/ 18) {
    				each_value = /*conditions*/ ctx[1];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$7(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$7(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div1, t2);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (/*condition_result*/ ctx[3]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block$9(ctx);
    					if_block1.c();
    					if_block1.m(div1, null);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    			if_blocks[current_block_type_index].d();
    			destroy_each(each_blocks, detaching);
    			if (if_block1) if_block1.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$m.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function tagSplice(string) {
    	let str = [...string];

    	for (let i = 0; i <= str.length; i++) {
    		if (str[i] == ',') {
    			if (i + 1 == str.length) {
    				str[i] = ' ';
    				str = [...str, '#'];
    			} else {
    				str[i] = ' ';
    				str.splice(i + 1, 0, '#');
    			}
    		}
    	}

    	return str;
    }

    function instance$m($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('InputMultiValue', slots, []);
    	const [send, receive] = crossfade({});
    	var dispatch = createEventDispatcher();
    	let { init = '' } = $$props;
    	let { immutable = false } = $$props;
    	let { placeholder = null } = $$props;

    	let { conditions = [
    		{
    			condition: () => {
    				
    			},
    			name: "",
    			not_satisfied_text: "",
    			satisfied_text: ""
    		},
    		{
    			condition: () => {
    				
    			},
    			name: "",
    			not_satisfied_text: "",
    			satisfied_text: ""
    		},
    		{
    			condition: () => {
    				
    			},
    			name: "",
    			not_satisfied_text: "",
    			satisfied_text: ""
    		}
    	] } = $$props;

    	let focused = false;
    	let condition_result = false;
    	let value = '';
    	let result = '';
    	let str_list = [];

    	onMount(() => {
    		$$invalidate(4, value = init);
    	});

    	function focusHandle() {
    		$$invalidate(2, focused = true);
    	}

    	function blurHandle() {
    		$$invalidate(2, focused = false);
    	}

    	function conditionResult(value) {
    		let result = true;

    		conditions.forEach(con => {
    			if (!con.condition(value)) {
    				result = false;
    			}
    		});

    		return result;
    	}

    	const writable_props = ['init', 'immutable', 'placeholder', 'conditions'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$3.warn(`<InputMultiValue> was created with unknown prop '${key}'`);
    	});

    	function input_input_handler() {
    		value = this.value;
    		((((((($$invalidate(4, value), $$invalidate(14, dispatch)), $$invalidate(2, focused)), $$invalidate(10, immutable)), $$invalidate(9, init)), $$invalidate(12, str_list)), $$invalidate(11, result)), $$invalidate(3, condition_result));
    	}

    	$$self.$$set = $$props => {
    		if ('init' in $$props) $$invalidate(9, init = $$props.init);
    		if ('immutable' in $$props) $$invalidate(10, immutable = $$props.immutable);
    		if ('placeholder' in $$props) $$invalidate(0, placeholder = $$props.placeholder);
    		if ('conditions' in $$props) $$invalidate(1, conditions = $$props.conditions);
    	};

    	$$self.$capture_state = () => ({
    		Route,
    		router: f,
    		createEventDispatcher,
    		onMount,
    		crossfade,
    		flip,
    		Search,
    		send,
    		receive,
    		dispatch,
    		init,
    		immutable,
    		placeholder,
    		conditions,
    		focused,
    		condition_result,
    		value,
    		result,
    		str_list,
    		focusHandle,
    		blurHandle,
    		tagSplice,
    		conditionResult
    	});

    	$$self.$inject_state = $$props => {
    		if ('dispatch' in $$props) $$invalidate(14, dispatch = $$props.dispatch);
    		if ('init' in $$props) $$invalidate(9, init = $$props.init);
    		if ('immutable' in $$props) $$invalidate(10, immutable = $$props.immutable);
    		if ('placeholder' in $$props) $$invalidate(0, placeholder = $$props.placeholder);
    		if ('conditions' in $$props) $$invalidate(1, conditions = $$props.conditions);
    		if ('focused' in $$props) $$invalidate(2, focused = $$props.focused);
    		if ('condition_result' in $$props) $$invalidate(3, condition_result = $$props.condition_result);
    		if ('value' in $$props) $$invalidate(4, value = $$props.value);
    		if ('result' in $$props) $$invalidate(11, result = $$props.result);
    		if ('str_list' in $$props) $$invalidate(12, str_list = $$props.str_list);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*value, focused*/ 20) {
    			 {
    				if (value) {
    					dispatch('change', { value, pass: conditionResult(value) });
    				}

    				if (focused) {
    					if (!value) {
    						$$invalidate(4, value = '#');
    					}
    				} else if (value.length == 1) {
    					$$invalidate(4, value = '');
    				}
    			}
    		}

    		if ($$self.$$.dirty & /*immutable, value, init*/ 1552) {
    			 {
    				if (immutable) {
    					((((((($$invalidate(4, value), $$invalidate(14, dispatch)), $$invalidate(2, focused)), $$invalidate(10, immutable)), $$invalidate(9, init)), $$invalidate(12, str_list)), $$invalidate(11, result)), $$invalidate(3, condition_result));
    					$$invalidate(4, value = init);
    				}
    			}
    		}

    		if ($$self.$$.dirty & /*value, str_list, result, condition_result*/ 6168) {
    			 {
    				$$invalidate(11, result = '');
    				$$invalidate(12, str_list = value.split(''));
    				$$invalidate(12, str_list = tagSplice(str_list));

    				if (str_list) {
    					str_list.forEach(char => {
    						$$invalidate(11, result = result + char);
    					});

    					$$invalidate(4, value = result);
    				}

    				$$invalidate(4, value = value.replace(/\s+[^#]/, '_'));
    				$$invalidate(3, condition_result = conditionResult(value));
    				console.log(condition_result);
    			}
    		}
    	};

    	return [
    		placeholder,
    		conditions,
    		focused,
    		condition_result,
    		value,
    		send,
    		receive,
    		focusHandle,
    		blurHandle,
    		init,
    		immutable,
    		result,
    		str_list,
    		input_input_handler
    	];
    }

    class InputMultiValue extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$m, create_fragment$m, safe_not_equal, {
    			init: 9,
    			immutable: 10,
    			placeholder: 0,
    			conditions: 1
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "InputMultiValue",
    			options,
    			id: create_fragment$m.name
    		});
    	}

    	get init() {
    		throw new Error("<InputMultiValue>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set init(value) {
    		throw new Error("<InputMultiValue>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get immutable() {
    		throw new Error("<InputMultiValue>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set immutable(value) {
    		throw new Error("<InputMultiValue>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get placeholder() {
    		throw new Error("<InputMultiValue>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set placeholder(value) {
    		throw new Error("<InputMultiValue>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get conditions() {
    		throw new Error("<InputMultiValue>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set conditions(value) {
    		throw new Error("<InputMultiValue>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* components/manager/Input/InputCheckboxValue.svelte generated by Svelte v3.50.1 */

    function create_fragment$n(ctx) {
    	const block = {
    		c: noop,
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: noop,
    		p: noop,
    		i: noop,
    		o: noop,
    		d: noop
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$n.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$n($$self, $$props) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('InputCheckboxValue', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<InputCheckboxValue> was created with unknown prop '${key}'`);
    	});

    	return [];
    }

    class InputCheckboxValue extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$n, create_fragment$n, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "InputCheckboxValue",
    			options,
    			id: create_fragment$n.name
    		});
    	}
    }

    /* components/manager/Input/InputSelectValue.svelte generated by Svelte v3.50.1 */

    const { console: console_1$4 } = globals;
    const file$k = "components/manager/Input/InputSelectValue.svelte";

    function get_each_context$8(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[15] = list[i];
    	child_ctx[17] = i;
    	return child_ctx;
    }

    function get_each_context_1$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[18] = list[i];
    	child_ctx[20] = i;
    	return child_ctx;
    }

    // (223:8) {:else}
    function create_else_block$9(ctx) {
    	let div;
    	let h3;
    	let t;
    	let div_intro;
    	let div_outro;
    	let current;

    	const block = {
    		c: function create() {
    			div = element("div");
    			h3 = element("h3");
    			t = text(/*placeholder*/ ctx[0]);
    			attr_dev(h3, "class", "svelte-1xq5eq6");
    			add_location(h3, file$k, 227, 20, 5113);
    			attr_dev(div, "class", "label svelte-1xq5eq6");
    			add_location(div, file$k, 224, 16, 4970);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, h3);
    			append_dev(h3, t);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (!current || dirty & /*placeholder*/ 1) set_data_dev(t, /*placeholder*/ ctx[0]);
    		},
    		i: function intro(local) {
    			if (current) return;

    			add_render_callback(() => {
    				if (div_outro) div_outro.end(1);
    				div_intro = create_in_transition(div, /*receive*/ ctx[6], { key: 'unfocused' });
    				div_intro.start();
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			if (div_intro) div_intro.invalidate();
    			div_outro = create_out_transition(div, /*send*/ ctx[5], { key: 'focused' });
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (detaching && div_outro) div_outro.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$9.name,
    		type: "else",
    		source: "(223:8) {:else}",
    		ctx
    	});

    	return block;
    }

    // (215:8) {#if value}
    function create_if_block_2$3(ctx) {
    	let div;
    	let h3;
    	let t;
    	let div_intro;
    	let div_outro;
    	let current;

    	const block = {
    		c: function create() {
    			div = element("div");
    			h3 = element("h3");
    			t = text(/*placeholder*/ ctx[0]);
    			attr_dev(h3, "class", "svelte-1xq5eq6");
    			add_location(h3, file$k, 219, 20, 4837);
    			attr_dev(div, "class", "label-focused svelte-1xq5eq6");
    			add_location(div, file$k, 216, 16, 4686);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, h3);
    			append_dev(h3, t);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (!current || dirty & /*placeholder*/ 1) set_data_dev(t, /*placeholder*/ ctx[0]);
    		},
    		i: function intro(local) {
    			if (current) return;

    			add_render_callback(() => {
    				if (div_outro) div_outro.end(1);
    				div_intro = create_in_transition(div, /*receive*/ ctx[6], { key: 'focused' });
    				div_intro.start();
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			if (div_intro) div_intro.invalidate();
    			div_outro = create_out_transition(div, /*send*/ ctx[5], { key: 'unfocused' });
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (detaching && div_outro) div_outro.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$3.name,
    		type: "if",
    		source: "(215:8) {#if value}",
    		ctx
    	});

    	return block;
    }

    // (233:12) {#each option_list as option, index}
    function create_each_block_1$1(ctx) {
    	let option;
    	let h3;
    	let t_value = /*option*/ ctx[18] + "";
    	let t;
    	let option_value_value;

    	const block = {
    		c: function create() {
    			option = element("option");
    			h3 = element("h3");
    			t = text(t_value);
    			add_location(h3, file$k, 233, 39, 5376);
    			option.__value = option_value_value = /*option*/ ctx[18];
    			option.value = option.__value;
    			add_location(option, file$k, 233, 16, 5353);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, h3);
    			append_dev(h3, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*option_list*/ 2 && t_value !== (t_value = /*option*/ ctx[18] + "")) set_data_dev(t, t_value);

    			if (dirty & /*option_list*/ 2 && option_value_value !== (option_value_value = /*option*/ ctx[18])) {
    				prop_dev(option, "__value", option_value_value);
    				option.value = option.__value;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$1.name,
    		type: "each",
    		source: "(233:12) {#each option_list as option, index}",
    		ctx
    	});

    	return block;
    }

    // (242:16) {#if !con.condition(option_list.indexOf(value))}
    function create_if_block_1$8(ctx) {
    	let h3;
    	let t_value = /*con*/ ctx[15].not_satisfied_text + "";
    	let t;

    	const block = {
    		c: function create() {
    			h3 = element("h3");
    			t = text(t_value);
    			attr_dev(h3, "class", "not-satisfied svelte-1xq5eq6");
    			add_location(h3, file$k, 242, 20, 5665);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h3, anchor);
    			append_dev(h3, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*conditions*/ 4 && t_value !== (t_value = /*con*/ ctx[15].not_satisfied_text + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h3);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$8.name,
    		type: "if",
    		source: "(242:16) {#if !con.condition(option_list.indexOf(value))}",
    		ctx
    	});

    	return block;
    }

    // (241:12) {#each conditions as con, con_id}
    function create_each_block$8(ctx) {
    	let show_if = !/*con*/ ctx[15].condition(/*option_list*/ ctx[1].indexOf(/*value*/ ctx[3]));
    	let if_block_anchor;
    	let if_block = show_if && create_if_block_1$8(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*conditions, option_list, value*/ 14) show_if = !/*con*/ ctx[15].condition(/*option_list*/ ctx[1].indexOf(/*value*/ ctx[3]));

    			if (show_if) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_1$8(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$8.name,
    		type: "each",
    		source: "(241:12) {#each conditions as con, con_id}",
    		ctx
    	});

    	return block;
    }

    // (246:12) {#if condition_result}
    function create_if_block$a(ctx) {
    	let h3;

    	const block = {
    		c: function create() {
    			h3 = element("h3");
    			h3.textContent = "좋습니다!";
    			attr_dev(h3, "class", "satisfied svelte-1xq5eq6");
    			add_location(h3, file$k, 246, 16, 5818);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h3, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h3);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$a.name,
    		type: "if",
    		source: "(246:12) {#if condition_result}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$o(ctx) {
    	let div3;
    	let div0;
    	let current_block_type_index;
    	let if_block0;
    	let t0;
    	let select;
    	let div0_class_value;
    	let t1;
    	let div2;
    	let div1;
    	let t2;
    	let current;
    	let mounted;
    	let dispose;
    	const if_block_creators = [create_if_block_2$3, create_else_block$9];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*value*/ ctx[3]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	let each_value_1 = /*option_list*/ ctx[1];
    	validate_each_argument(each_value_1);
    	let each_blocks_1 = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks_1[i] = create_each_block_1$1(get_each_context_1$1(ctx, each_value_1, i));
    	}

    	let each_value = /*conditions*/ ctx[2];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$8(get_each_context$8(ctx, each_value, i));
    	}

    	let if_block1 = /*condition_result*/ ctx[4] && create_if_block$a(ctx);

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			div0 = element("div");
    			if_block0.c();
    			t0 = space();
    			select = element("select");

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].c();
    			}

    			t1 = space();
    			div2 = element("div");
    			div1 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t2 = space();
    			if (if_block1) if_block1.c();
    			attr_dev(select, "class", "input svelte-1xq5eq6");
    			if (/*value*/ ctx[3] === void 0) add_render_callback(() => /*select_change_handler*/ ctx[10].call(select));
    			add_location(select, file$k, 231, 8, 5200);

    			attr_dev(div0, "class", div0_class_value = "" + (null_to_empty(/*condition_result*/ ctx[4]
    			? 'input-container'
    			: 'input-container-not-satisfied') + " svelte-1xq5eq6"));

    			add_location(div0, file$k, 213, 4, 4532);
    			attr_dev(div1, "class", "warning-container svelte-1xq5eq6");
    			add_location(div1, file$k, 239, 8, 5499);
    			attr_dev(div2, "class", "warning-wrap svelte-1xq5eq6");
    			add_location(div2, file$k, 238, 4, 5463);
    			attr_dev(div3, "class", "input-wrap svelte-1xq5eq6");
    			add_location(div3, file$k, 212, 0, 4502);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div0);
    			if_blocks[current_block_type_index].m(div0, null);
    			append_dev(div0, t0);
    			append_dev(div0, select);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].m(select, null);
    			}

    			select_option(select, /*value*/ ctx[3]);
    			append_dev(div3, t1);
    			append_dev(div3, div2);
    			append_dev(div2, div1);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div1, null);
    			}

    			append_dev(div1, t2);
    			if (if_block1) if_block1.m(div1, null);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(select, "focus", /*focusHandle*/ ctx[7], false, false, false),
    					listen_dev(select, "blur", /*blurHandle*/ ctx[8], false, false, false),
    					listen_dev(select, "change", /*select_change_handler*/ ctx[10])
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block0 = if_blocks[current_block_type_index];

    				if (!if_block0) {
    					if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block0.c();
    				} else {
    					if_block0.p(ctx, dirty);
    				}

    				transition_in(if_block0, 1);
    				if_block0.m(div0, t0);
    			}

    			if (dirty & /*option_list*/ 2) {
    				each_value_1 = /*option_list*/ ctx[1];
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$1(ctx, each_value_1, i);

    					if (each_blocks_1[i]) {
    						each_blocks_1[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_1[i] = create_each_block_1$1(child_ctx);
    						each_blocks_1[i].c();
    						each_blocks_1[i].m(select, null);
    					}
    				}

    				for (; i < each_blocks_1.length; i += 1) {
    					each_blocks_1[i].d(1);
    				}

    				each_blocks_1.length = each_value_1.length;
    			}

    			if (dirty & /*value, option_list*/ 10) {
    				select_option(select, /*value*/ ctx[3]);
    			}

    			if (!current || dirty & /*condition_result*/ 16 && div0_class_value !== (div0_class_value = "" + (null_to_empty(/*condition_result*/ ctx[4]
    			? 'input-container'
    			: 'input-container-not-satisfied') + " svelte-1xq5eq6"))) {
    				attr_dev(div0, "class", div0_class_value);
    			}

    			if (dirty & /*conditions, option_list, value*/ 14) {
    				each_value = /*conditions*/ ctx[2];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$8(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$8(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div1, t2);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (/*condition_result*/ ctx[4]) {
    				if (if_block1) ; else {
    					if_block1 = create_if_block$a(ctx);
    					if_block1.c();
    					if_block1.m(div1, null);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    			if_blocks[current_block_type_index].d();
    			destroy_each(each_blocks_1, detaching);
    			destroy_each(each_blocks, detaching);
    			if (if_block1) if_block1.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$o.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$o($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('InputSelectValue', slots, []);
    	const [send, receive] = crossfade({});
    	var dispatch = createEventDispatcher();
    	let { init } = $$props;
    	let { placeholder = null } = $$props;
    	let { option_list = [] } = $$props;

    	let { conditions = [
    		{
    			condition: () => {
    				
    			},
    			name: "",
    			not_satisfied_text: "",
    			satisfied_text: ""
    		},
    		{
    			condition: () => {
    				
    			},
    			name: "",
    			not_satisfied_text: "",
    			satisfied_text: ""
    		},
    		{
    			condition: () => {
    				
    			},
    			name: "",
    			not_satisfied_text: "",
    			satisfied_text: ""
    		}
    	] } = $$props;

    	let focused = false;
    	let condition_result = false;
    	let value = '';
    	let key;

    	onMount(() => {
    		if (init == 0 || init) {
    			key = init;
    			$$invalidate(3, value = option_list[key]);
    			console.log(key);
    		}
    	});

    	function focusHandle() {
    		focused = true;
    	}

    	function blurHandle() {
    		focused = false;
    	}

    	function conditionResult(value) {
    		let result = true;

    		conditions.forEach(con => {
    			if (!con.condition(option_list.indexOf(value))) {
    				result = false;
    			}
    		});

    		return result;
    	}

    	const writable_props = ['init', 'placeholder', 'option_list', 'conditions'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$4.warn(`<InputSelectValue> was created with unknown prop '${key}'`);
    	});

    	function select_change_handler() {
    		value = select_value(this);
    		$$invalidate(3, value);
    		$$invalidate(1, option_list);
    	}

    	$$self.$$set = $$props => {
    		if ('init' in $$props) $$invalidate(9, init = $$props.init);
    		if ('placeholder' in $$props) $$invalidate(0, placeholder = $$props.placeholder);
    		if ('option_list' in $$props) $$invalidate(1, option_list = $$props.option_list);
    		if ('conditions' in $$props) $$invalidate(2, conditions = $$props.conditions);
    	};

    	$$self.$capture_state = () => ({
    		Route,
    		router: f,
    		createEventDispatcher,
    		onMount,
    		crossfade,
    		flip,
    		send,
    		receive,
    		dispatch,
    		init,
    		placeholder,
    		option_list,
    		conditions,
    		focused,
    		condition_result,
    		value,
    		key,
    		focusHandle,
    		blurHandle,
    		conditionResult
    	});

    	$$self.$inject_state = $$props => {
    		if ('dispatch' in $$props) $$invalidate(13, dispatch = $$props.dispatch);
    		if ('init' in $$props) $$invalidate(9, init = $$props.init);
    		if ('placeholder' in $$props) $$invalidate(0, placeholder = $$props.placeholder);
    		if ('option_list' in $$props) $$invalidate(1, option_list = $$props.option_list);
    		if ('conditions' in $$props) $$invalidate(2, conditions = $$props.conditions);
    		if ('focused' in $$props) focused = $$props.focused;
    		if ('condition_result' in $$props) $$invalidate(4, condition_result = $$props.condition_result);
    		if ('value' in $$props) $$invalidate(3, value = $$props.value);
    		if ('key' in $$props) key = $$props.key;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*option_list, value*/ 10) {
    			 {
    				dispatch('change', {
    					key: option_list.indexOf(value),
    					pass: conditionResult(value)
    				});

    				console.log(option_list.indexOf(value));
    			}
    		}

    		if ($$self.$$.dirty & /*value*/ 8) {
    			 {
    				$$invalidate(4, condition_result = conditionResult(value));
    				console.log(value);
    			}
    		}
    	};

    	return [
    		placeholder,
    		option_list,
    		conditions,
    		value,
    		condition_result,
    		send,
    		receive,
    		focusHandle,
    		blurHandle,
    		init,
    		select_change_handler
    	];
    }

    class InputSelectValue extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$o, create_fragment$o, safe_not_equal, {
    			init: 9,
    			placeholder: 0,
    			option_list: 1,
    			conditions: 2
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "InputSelectValue",
    			options,
    			id: create_fragment$o.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*init*/ ctx[9] === undefined && !('init' in props)) {
    			console_1$4.warn("<InputSelectValue> was created without expected prop 'init'");
    		}
    	}

    	get init() {
    		throw new Error("<InputSelectValue>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set init(value) {
    		throw new Error("<InputSelectValue>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get placeholder() {
    		throw new Error("<InputSelectValue>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set placeholder(value) {
    		throw new Error("<InputSelectValue>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get option_list() {
    		throw new Error("<InputSelectValue>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set option_list(value) {
    		throw new Error("<InputSelectValue>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get conditions() {
    		throw new Error("<InputSelectValue>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set conditions(value) {
    		throw new Error("<InputSelectValue>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    // ::- Persistent data structure representing an ordered mapping from
    // strings to values, with some convenient update methods.
    function OrderedMap(content) {
      this.content = content;
    }

    OrderedMap.prototype = {
      constructor: OrderedMap,

      find: function(key) {
        for (var i = 0; i < this.content.length; i += 2)
          if (this.content[i] === key) return i
        return -1
      },

      // :: (string) → ?any
      // Retrieve the value stored under `key`, or return undefined when
      // no such key exists.
      get: function(key) {
        var found = this.find(key);
        return found == -1 ? undefined : this.content[found + 1]
      },

      // :: (string, any, ?string) → OrderedMap
      // Create a new map by replacing the value of `key` with a new
      // value, or adding a binding to the end of the map. If `newKey` is
      // given, the key of the binding will be replaced with that key.
      update: function(key, value, newKey) {
        var self = newKey && newKey != key ? this.remove(newKey) : this;
        var found = self.find(key), content = self.content.slice();
        if (found == -1) {
          content.push(newKey || key, value);
        } else {
          content[found + 1] = value;
          if (newKey) content[found] = newKey;
        }
        return new OrderedMap(content)
      },

      // :: (string) → OrderedMap
      // Return a map with the given key removed, if it existed.
      remove: function(key) {
        var found = this.find(key);
        if (found == -1) return this
        var content = this.content.slice();
        content.splice(found, 2);
        return new OrderedMap(content)
      },

      // :: (string, any) → OrderedMap
      // Add a new key to the start of the map.
      addToStart: function(key, value) {
        return new OrderedMap([key, value].concat(this.remove(key).content))
      },

      // :: (string, any) → OrderedMap
      // Add a new key to the end of the map.
      addToEnd: function(key, value) {
        var content = this.remove(key).content.slice();
        content.push(key, value);
        return new OrderedMap(content)
      },

      // :: (string, string, any) → OrderedMap
      // Add a key after the given key. If `place` is not found, the new
      // key is added to the end.
      addBefore: function(place, key, value) {
        var without = this.remove(key), content = without.content.slice();
        var found = without.find(place);
        content.splice(found == -1 ? content.length : found, 0, key, value);
        return new OrderedMap(content)
      },

      // :: ((key: string, value: any))
      // Call the given function for each key/value pair in the map, in
      // order.
      forEach: function(f) {
        for (var i = 0; i < this.content.length; i += 2)
          f(this.content[i], this.content[i + 1]);
      },

      // :: (union<Object, OrderedMap>) → OrderedMap
      // Create a new map by prepending the keys in this map that don't
      // appear in `map` before the keys in `map`.
      prepend: function(map) {
        map = OrderedMap.from(map);
        if (!map.size) return this
        return new OrderedMap(map.content.concat(this.subtract(map).content))
      },

      // :: (union<Object, OrderedMap>) → OrderedMap
      // Create a new map by appending the keys in this map that don't
      // appear in `map` after the keys in `map`.
      append: function(map) {
        map = OrderedMap.from(map);
        if (!map.size) return this
        return new OrderedMap(this.subtract(map).content.concat(map.content))
      },

      // :: (union<Object, OrderedMap>) → OrderedMap
      // Create a map containing all the keys in this map that don't
      // appear in `map`.
      subtract: function(map) {
        var result = this;
        map = OrderedMap.from(map);
        for (var i = 0; i < map.content.length; i += 2)
          result = result.remove(map.content[i]);
        return result
      },

      // :: () → Object
      // Turn ordered map into a plain object.
      toObject: function() {
        var result = {};
        this.forEach(function(key, value) { result[key] = value; });
        return result
      },

      // :: number
      // The amount of keys in this map.
      get size() {
        return this.content.length >> 1
      }
    };

    // :: (?union<Object, OrderedMap>) → OrderedMap
    // Return a map with the given content. If null, create an empty
    // map. If given an ordered map, return that map itself. If given an
    // object, create a map from the object's properties.
    OrderedMap.from = function(value) {
      if (value instanceof OrderedMap) return value
      var content = [];
      if (value) for (var prop in value) content.push(prop, value[prop]);
      return new OrderedMap(content)
    };

    function findDiffStart(a, b, pos) {
        for (let i = 0;; i++) {
            if (i == a.childCount || i == b.childCount)
                return a.childCount == b.childCount ? null : pos;
            let childA = a.child(i), childB = b.child(i);
            if (childA == childB) {
                pos += childA.nodeSize;
                continue;
            }
            if (!childA.sameMarkup(childB))
                return pos;
            if (childA.isText && childA.text != childB.text) {
                for (let j = 0; childA.text[j] == childB.text[j]; j++)
                    pos++;
                return pos;
            }
            if (childA.content.size || childB.content.size) {
                let inner = findDiffStart(childA.content, childB.content, pos + 1);
                if (inner != null)
                    return inner;
            }
            pos += childA.nodeSize;
        }
    }
    function findDiffEnd(a, b, posA, posB) {
        for (let iA = a.childCount, iB = b.childCount;;) {
            if (iA == 0 || iB == 0)
                return iA == iB ? null : { a: posA, b: posB };
            let childA = a.child(--iA), childB = b.child(--iB), size = childA.nodeSize;
            if (childA == childB) {
                posA -= size;
                posB -= size;
                continue;
            }
            if (!childA.sameMarkup(childB))
                return { a: posA, b: posB };
            if (childA.isText && childA.text != childB.text) {
                let same = 0, minSize = Math.min(childA.text.length, childB.text.length);
                while (same < minSize && childA.text[childA.text.length - same - 1] == childB.text[childB.text.length - same - 1]) {
                    same++;
                    posA--;
                    posB--;
                }
                return { a: posA, b: posB };
            }
            if (childA.content.size || childB.content.size) {
                let inner = findDiffEnd(childA.content, childB.content, posA - 1, posB - 1);
                if (inner)
                    return inner;
            }
            posA -= size;
            posB -= size;
        }
    }

    /**
    A fragment represents a node's collection of child nodes.

    Like nodes, fragments are persistent data structures, and you
    should not mutate them or their content. Rather, you create new
    instances whenever needed. The API tries to make this easy.
    */
    class Fragment {
        /**
        @internal
        */
        constructor(
        /**
        @internal
        */
        content, size) {
            this.content = content;
            this.size = size || 0;
            if (size == null)
                for (let i = 0; i < content.length; i++)
                    this.size += content[i].nodeSize;
        }
        /**
        Invoke a callback for all descendant nodes between the given two
        positions (relative to start of this fragment). Doesn't descend
        into a node when the callback returns `false`.
        */
        nodesBetween(from, to, f, nodeStart = 0, parent) {
            for (let i = 0, pos = 0; pos < to; i++) {
                let child = this.content[i], end = pos + child.nodeSize;
                if (end > from && f(child, nodeStart + pos, parent || null, i) !== false && child.content.size) {
                    let start = pos + 1;
                    child.nodesBetween(Math.max(0, from - start), Math.min(child.content.size, to - start), f, nodeStart + start);
                }
                pos = end;
            }
        }
        /**
        Call the given callback for every descendant node. `pos` will be
        relative to the start of the fragment. The callback may return
        `false` to prevent traversal of a given node's children.
        */
        descendants(f) {
            this.nodesBetween(0, this.size, f);
        }
        /**
        Extract the text between `from` and `to`. See the same method on
        [`Node`](https://prosemirror.net/docs/ref/#model.Node.textBetween).
        */
        textBetween(from, to, blockSeparator, leafText) {
            let text = "", separated = true;
            this.nodesBetween(from, to, (node, pos) => {
                if (node.isText) {
                    text += node.text.slice(Math.max(from, pos) - pos, to - pos);
                    separated = !blockSeparator;
                }
                else if (node.isLeaf) {
                    if (leafText) {
                        text += typeof leafText === "function" ? leafText(node) : leafText;
                    }
                    else if (node.type.spec.leafText) {
                        text += node.type.spec.leafText(node);
                    }
                    separated = !blockSeparator;
                }
                else if (!separated && node.isBlock) {
                    text += blockSeparator;
                    separated = true;
                }
            }, 0);
            return text;
        }
        /**
        Create a new fragment containing the combined content of this
        fragment and the other.
        */
        append(other) {
            if (!other.size)
                return this;
            if (!this.size)
                return other;
            let last = this.lastChild, first = other.firstChild, content = this.content.slice(), i = 0;
            if (last.isText && last.sameMarkup(first)) {
                content[content.length - 1] = last.withText(last.text + first.text);
                i = 1;
            }
            for (; i < other.content.length; i++)
                content.push(other.content[i]);
            return new Fragment(content, this.size + other.size);
        }
        /**
        Cut out the sub-fragment between the two given positions.
        */
        cut(from, to = this.size) {
            if (from == 0 && to == this.size)
                return this;
            let result = [], size = 0;
            if (to > from)
                for (let i = 0, pos = 0; pos < to; i++) {
                    let child = this.content[i], end = pos + child.nodeSize;
                    if (end > from) {
                        if (pos < from || end > to) {
                            if (child.isText)
                                child = child.cut(Math.max(0, from - pos), Math.min(child.text.length, to - pos));
                            else
                                child = child.cut(Math.max(0, from - pos - 1), Math.min(child.content.size, to - pos - 1));
                        }
                        result.push(child);
                        size += child.nodeSize;
                    }
                    pos = end;
                }
            return new Fragment(result, size);
        }
        /**
        @internal
        */
        cutByIndex(from, to) {
            if (from == to)
                return Fragment.empty;
            if (from == 0 && to == this.content.length)
                return this;
            return new Fragment(this.content.slice(from, to));
        }
        /**
        Create a new fragment in which the node at the given index is
        replaced by the given node.
        */
        replaceChild(index, node) {
            let current = this.content[index];
            if (current == node)
                return this;
            let copy = this.content.slice();
            let size = this.size + node.nodeSize - current.nodeSize;
            copy[index] = node;
            return new Fragment(copy, size);
        }
        /**
        Create a new fragment by prepending the given node to this
        fragment.
        */
        addToStart(node) {
            return new Fragment([node].concat(this.content), this.size + node.nodeSize);
        }
        /**
        Create a new fragment by appending the given node to this
        fragment.
        */
        addToEnd(node) {
            return new Fragment(this.content.concat(node), this.size + node.nodeSize);
        }
        /**
        Compare this fragment to another one.
        */
        eq(other) {
            if (this.content.length != other.content.length)
                return false;
            for (let i = 0; i < this.content.length; i++)
                if (!this.content[i].eq(other.content[i]))
                    return false;
            return true;
        }
        /**
        The first child of the fragment, or `null` if it is empty.
        */
        get firstChild() { return this.content.length ? this.content[0] : null; }
        /**
        The last child of the fragment, or `null` if it is empty.
        */
        get lastChild() { return this.content.length ? this.content[this.content.length - 1] : null; }
        /**
        The number of child nodes in this fragment.
        */
        get childCount() { return this.content.length; }
        /**
        Get the child node at the given index. Raise an error when the
        index is out of range.
        */
        child(index) {
            let found = this.content[index];
            if (!found)
                throw new RangeError("Index " + index + " out of range for " + this);
            return found;
        }
        /**
        Get the child node at the given index, if it exists.
        */
        maybeChild(index) {
            return this.content[index] || null;
        }
        /**
        Call `f` for every child node, passing the node, its offset
        into this parent node, and its index.
        */
        forEach(f) {
            for (let i = 0, p = 0; i < this.content.length; i++) {
                let child = this.content[i];
                f(child, p, i);
                p += child.nodeSize;
            }
        }
        /**
        Find the first position at which this fragment and another
        fragment differ, or `null` if they are the same.
        */
        findDiffStart(other, pos = 0) {
            return findDiffStart(this, other, pos);
        }
        /**
        Find the first position, searching from the end, at which this
        fragment and the given fragment differ, or `null` if they are
        the same. Since this position will not be the same in both
        nodes, an object with two separate positions is returned.
        */
        findDiffEnd(other, pos = this.size, otherPos = other.size) {
            return findDiffEnd(this, other, pos, otherPos);
        }
        /**
        Find the index and inner offset corresponding to a given relative
        position in this fragment. The result object will be reused
        (overwritten) the next time the function is called. (Not public.)
        */
        findIndex(pos, round = -1) {
            if (pos == 0)
                return retIndex(0, pos);
            if (pos == this.size)
                return retIndex(this.content.length, pos);
            if (pos > this.size || pos < 0)
                throw new RangeError(`Position ${pos} outside of fragment (${this})`);
            for (let i = 0, curPos = 0;; i++) {
                let cur = this.child(i), end = curPos + cur.nodeSize;
                if (end >= pos) {
                    if (end == pos || round > 0)
                        return retIndex(i + 1, end);
                    return retIndex(i, curPos);
                }
                curPos = end;
            }
        }
        /**
        Return a debugging string that describes this fragment.
        */
        toString() { return "<" + this.toStringInner() + ">"; }
        /**
        @internal
        */
        toStringInner() { return this.content.join(", "); }
        /**
        Create a JSON-serializeable representation of this fragment.
        */
        toJSON() {
            return this.content.length ? this.content.map(n => n.toJSON()) : null;
        }
        /**
        Deserialize a fragment from its JSON representation.
        */
        static fromJSON(schema, value) {
            if (!value)
                return Fragment.empty;
            if (!Array.isArray(value))
                throw new RangeError("Invalid input for Fragment.fromJSON");
            return new Fragment(value.map(schema.nodeFromJSON));
        }
        /**
        Build a fragment from an array of nodes. Ensures that adjacent
        text nodes with the same marks are joined together.
        */
        static fromArray(array) {
            if (!array.length)
                return Fragment.empty;
            let joined, size = 0;
            for (let i = 0; i < array.length; i++) {
                let node = array[i];
                size += node.nodeSize;
                if (i && node.isText && array[i - 1].sameMarkup(node)) {
                    if (!joined)
                        joined = array.slice(0, i);
                    joined[joined.length - 1] = node
                        .withText(joined[joined.length - 1].text + node.text);
                }
                else if (joined) {
                    joined.push(node);
                }
            }
            return new Fragment(joined || array, size);
        }
        /**
        Create a fragment from something that can be interpreted as a
        set of nodes. For `null`, it returns the empty fragment. For a
        fragment, the fragment itself. For a node or array of nodes, a
        fragment containing those nodes.
        */
        static from(nodes) {
            if (!nodes)
                return Fragment.empty;
            if (nodes instanceof Fragment)
                return nodes;
            if (Array.isArray(nodes))
                return this.fromArray(nodes);
            if (nodes.attrs)
                return new Fragment([nodes], nodes.nodeSize);
            throw new RangeError("Can not convert " + nodes + " to a Fragment" +
                (nodes.nodesBetween ? " (looks like multiple versions of prosemirror-model were loaded)" : ""));
        }
    }
    /**
    An empty fragment. Intended to be reused whenever a node doesn't
    contain anything (rather than allocating a new empty fragment for
    each leaf node).
    */
    Fragment.empty = new Fragment([], 0);
    const found = { index: 0, offset: 0 };
    function retIndex(index, offset) {
        found.index = index;
        found.offset = offset;
        return found;
    }

    function compareDeep(a, b) {
        if (a === b)
            return true;
        if (!(a && typeof a == "object") ||
            !(b && typeof b == "object"))
            return false;
        let array = Array.isArray(a);
        if (Array.isArray(b) != array)
            return false;
        if (array) {
            if (a.length != b.length)
                return false;
            for (let i = 0; i < a.length; i++)
                if (!compareDeep(a[i], b[i]))
                    return false;
        }
        else {
            for (let p in a)
                if (!(p in b) || !compareDeep(a[p], b[p]))
                    return false;
            for (let p in b)
                if (!(p in a))
                    return false;
        }
        return true;
    }

    /**
    A mark is a piece of information that can be attached to a node,
    such as it being emphasized, in code font, or a link. It has a
    type and optionally a set of attributes that provide further
    information (such as the target of the link). Marks are created
    through a `Schema`, which controls which types exist and which
    attributes they have.
    */
    class Mark {
        /**
        @internal
        */
        constructor(
        /**
        The type of this mark.
        */
        type, 
        /**
        The attributes associated with this mark.
        */
        attrs) {
            this.type = type;
            this.attrs = attrs;
        }
        /**
        Given a set of marks, create a new set which contains this one as
        well, in the right position. If this mark is already in the set,
        the set itself is returned. If any marks that are set to be
        [exclusive](https://prosemirror.net/docs/ref/#model.MarkSpec.excludes) with this mark are present,
        those are replaced by this one.
        */
        addToSet(set) {
            let copy, placed = false;
            for (let i = 0; i < set.length; i++) {
                let other = set[i];
                if (this.eq(other))
                    return set;
                if (this.type.excludes(other.type)) {
                    if (!copy)
                        copy = set.slice(0, i);
                }
                else if (other.type.excludes(this.type)) {
                    return set;
                }
                else {
                    if (!placed && other.type.rank > this.type.rank) {
                        if (!copy)
                            copy = set.slice(0, i);
                        copy.push(this);
                        placed = true;
                    }
                    if (copy)
                        copy.push(other);
                }
            }
            if (!copy)
                copy = set.slice();
            if (!placed)
                copy.push(this);
            return copy;
        }
        /**
        Remove this mark from the given set, returning a new set. If this
        mark is not in the set, the set itself is returned.
        */
        removeFromSet(set) {
            for (let i = 0; i < set.length; i++)
                if (this.eq(set[i]))
                    return set.slice(0, i).concat(set.slice(i + 1));
            return set;
        }
        /**
        Test whether this mark is in the given set of marks.
        */
        isInSet(set) {
            for (let i = 0; i < set.length; i++)
                if (this.eq(set[i]))
                    return true;
            return false;
        }
        /**
        Test whether this mark has the same type and attributes as
        another mark.
        */
        eq(other) {
            return this == other ||
                (this.type == other.type && compareDeep(this.attrs, other.attrs));
        }
        /**
        Convert this mark to a JSON-serializeable representation.
        */
        toJSON() {
            let obj = { type: this.type.name };
            for (let _ in this.attrs) {
                obj.attrs = this.attrs;
                break;
            }
            return obj;
        }
        /**
        Deserialize a mark from JSON.
        */
        static fromJSON(schema, json) {
            if (!json)
                throw new RangeError("Invalid input for Mark.fromJSON");
            let type = schema.marks[json.type];
            if (!type)
                throw new RangeError(`There is no mark type ${json.type} in this schema`);
            return type.create(json.attrs);
        }
        /**
        Test whether two sets of marks are identical.
        */
        static sameSet(a, b) {
            if (a == b)
                return true;
            if (a.length != b.length)
                return false;
            for (let i = 0; i < a.length; i++)
                if (!a[i].eq(b[i]))
                    return false;
            return true;
        }
        /**
        Create a properly sorted mark set from null, a single mark, or an
        unsorted array of marks.
        */
        static setFrom(marks) {
            if (!marks || Array.isArray(marks) && marks.length == 0)
                return Mark.none;
            if (marks instanceof Mark)
                return [marks];
            let copy = marks.slice();
            copy.sort((a, b) => a.type.rank - b.type.rank);
            return copy;
        }
    }
    /**
    The empty set of marks.
    */
    Mark.none = [];

    /**
    Error type raised by [`Node.replace`](https://prosemirror.net/docs/ref/#model.Node.replace) when
    given an invalid replacement.
    */
    class ReplaceError extends Error {
    }
    /*
    ReplaceError = function(this: any, message: string) {
      let err = Error.call(this, message)
      ;(err as any).__proto__ = ReplaceError.prototype
      return err
    } as any

    ReplaceError.prototype = Object.create(Error.prototype)
    ReplaceError.prototype.constructor = ReplaceError
    ReplaceError.prototype.name = "ReplaceError"
    */
    /**
    A slice represents a piece cut out of a larger document. It
    stores not only a fragment, but also the depth up to which nodes on
    both side are ‘open’ (cut through).
    */
    class Slice {
        /**
        Create a slice. When specifying a non-zero open depth, you must
        make sure that there are nodes of at least that depth at the
        appropriate side of the fragment—i.e. if the fragment is an
        empty paragraph node, `openStart` and `openEnd` can't be greater
        than 1.
        
        It is not necessary for the content of open nodes to conform to
        the schema's content constraints, though it should be a valid
        start/end/middle for such a node, depending on which sides are
        open.
        */
        constructor(
        /**
        The slice's content.
        */
        content, 
        /**
        The open depth at the start of the fragment.
        */
        openStart, 
        /**
        The open depth at the end.
        */
        openEnd) {
            this.content = content;
            this.openStart = openStart;
            this.openEnd = openEnd;
        }
        /**
        The size this slice would add when inserted into a document.
        */
        get size() {
            return this.content.size - this.openStart - this.openEnd;
        }
        /**
        @internal
        */
        insertAt(pos, fragment) {
            let content = insertInto(this.content, pos + this.openStart, fragment);
            return content && new Slice(content, this.openStart, this.openEnd);
        }
        /**
        @internal
        */
        removeBetween(from, to) {
            return new Slice(removeRange(this.content, from + this.openStart, to + this.openStart), this.openStart, this.openEnd);
        }
        /**
        Tests whether this slice is equal to another slice.
        */
        eq(other) {
            return this.content.eq(other.content) && this.openStart == other.openStart && this.openEnd == other.openEnd;
        }
        /**
        @internal
        */
        toString() {
            return this.content + "(" + this.openStart + "," + this.openEnd + ")";
        }
        /**
        Convert a slice to a JSON-serializable representation.
        */
        toJSON() {
            if (!this.content.size)
                return null;
            let json = { content: this.content.toJSON() };
            if (this.openStart > 0)
                json.openStart = this.openStart;
            if (this.openEnd > 0)
                json.openEnd = this.openEnd;
            return json;
        }
        /**
        Deserialize a slice from its JSON representation.
        */
        static fromJSON(schema, json) {
            if (!json)
                return Slice.empty;
            let openStart = json.openStart || 0, openEnd = json.openEnd || 0;
            if (typeof openStart != "number" || typeof openEnd != "number")
                throw new RangeError("Invalid input for Slice.fromJSON");
            return new Slice(Fragment.fromJSON(schema, json.content), openStart, openEnd);
        }
        /**
        Create a slice from a fragment by taking the maximum possible
        open value on both side of the fragment.
        */
        static maxOpen(fragment, openIsolating = true) {
            let openStart = 0, openEnd = 0;
            for (let n = fragment.firstChild; n && !n.isLeaf && (openIsolating || !n.type.spec.isolating); n = n.firstChild)
                openStart++;
            for (let n = fragment.lastChild; n && !n.isLeaf && (openIsolating || !n.type.spec.isolating); n = n.lastChild)
                openEnd++;
            return new Slice(fragment, openStart, openEnd);
        }
    }
    /**
    The empty slice.
    */
    Slice.empty = new Slice(Fragment.empty, 0, 0);
    function removeRange(content, from, to) {
        let { index, offset } = content.findIndex(from), child = content.maybeChild(index);
        let { index: indexTo, offset: offsetTo } = content.findIndex(to);
        if (offset == from || child.isText) {
            if (offsetTo != to && !content.child(indexTo).isText)
                throw new RangeError("Removing non-flat range");
            return content.cut(0, from).append(content.cut(to));
        }
        if (index != indexTo)
            throw new RangeError("Removing non-flat range");
        return content.replaceChild(index, child.copy(removeRange(child.content, from - offset - 1, to - offset - 1)));
    }
    function insertInto(content, dist, insert, parent) {
        let { index, offset } = content.findIndex(dist), child = content.maybeChild(index);
        if (offset == dist || child.isText) {
            if (parent && !parent.canReplace(index, index, insert))
                return null;
            return content.cut(0, dist).append(insert).append(content.cut(dist));
        }
        let inner = insertInto(child.content, dist - offset - 1, insert);
        return inner && content.replaceChild(index, child.copy(inner));
    }
    function replace($from, $to, slice) {
        if (slice.openStart > $from.depth)
            throw new ReplaceError("Inserted content deeper than insertion position");
        if ($from.depth - slice.openStart != $to.depth - slice.openEnd)
            throw new ReplaceError("Inconsistent open depths");
        return replaceOuter($from, $to, slice, 0);
    }
    function replaceOuter($from, $to, slice, depth) {
        let index = $from.index(depth), node = $from.node(depth);
        if (index == $to.index(depth) && depth < $from.depth - slice.openStart) {
            let inner = replaceOuter($from, $to, slice, depth + 1);
            return node.copy(node.content.replaceChild(index, inner));
        }
        else if (!slice.content.size) {
            return close(node, replaceTwoWay($from, $to, depth));
        }
        else if (!slice.openStart && !slice.openEnd && $from.depth == depth && $to.depth == depth) { // Simple, flat case
            let parent = $from.parent, content = parent.content;
            return close(parent, content.cut(0, $from.parentOffset).append(slice.content).append(content.cut($to.parentOffset)));
        }
        else {
            let { start, end } = prepareSliceForReplace(slice, $from);
            return close(node, replaceThreeWay($from, start, end, $to, depth));
        }
    }
    function checkJoin(main, sub) {
        if (!sub.type.compatibleContent(main.type))
            throw new ReplaceError("Cannot join " + sub.type.name + " onto " + main.type.name);
    }
    function joinable($before, $after, depth) {
        let node = $before.node(depth);
        checkJoin(node, $after.node(depth));
        return node;
    }
    function addNode(child, target) {
        let last = target.length - 1;
        if (last >= 0 && child.isText && child.sameMarkup(target[last]))
            target[last] = child.withText(target[last].text + child.text);
        else
            target.push(child);
    }
    function addRange($start, $end, depth, target) {
        let node = ($end || $start).node(depth);
        let startIndex = 0, endIndex = $end ? $end.index(depth) : node.childCount;
        if ($start) {
            startIndex = $start.index(depth);
            if ($start.depth > depth) {
                startIndex++;
            }
            else if ($start.textOffset) {
                addNode($start.nodeAfter, target);
                startIndex++;
            }
        }
        for (let i = startIndex; i < endIndex; i++)
            addNode(node.child(i), target);
        if ($end && $end.depth == depth && $end.textOffset)
            addNode($end.nodeBefore, target);
    }
    function close(node, content) {
        if (!node.type.validContent(content))
            throw new ReplaceError("Invalid content for node " + node.type.name);
        return node.copy(content);
    }
    function replaceThreeWay($from, $start, $end, $to, depth) {
        let openStart = $from.depth > depth && joinable($from, $start, depth + 1);
        let openEnd = $to.depth > depth && joinable($end, $to, depth + 1);
        let content = [];
        addRange(null, $from, depth, content);
        if (openStart && openEnd && $start.index(depth) == $end.index(depth)) {
            checkJoin(openStart, openEnd);
            addNode(close(openStart, replaceThreeWay($from, $start, $end, $to, depth + 1)), content);
        }
        else {
            if (openStart)
                addNode(close(openStart, replaceTwoWay($from, $start, depth + 1)), content);
            addRange($start, $end, depth, content);
            if (openEnd)
                addNode(close(openEnd, replaceTwoWay($end, $to, depth + 1)), content);
        }
        addRange($to, null, depth, content);
        return new Fragment(content);
    }
    function replaceTwoWay($from, $to, depth) {
        let content = [];
        addRange(null, $from, depth, content);
        if ($from.depth > depth) {
            let type = joinable($from, $to, depth + 1);
            addNode(close(type, replaceTwoWay($from, $to, depth + 1)), content);
        }
        addRange($to, null, depth, content);
        return new Fragment(content);
    }
    function prepareSliceForReplace(slice, $along) {
        let extra = $along.depth - slice.openStart, parent = $along.node(extra);
        let node = parent.copy(slice.content);
        for (let i = extra - 1; i >= 0; i--)
            node = $along.node(i).copy(Fragment.from(node));
        return { start: node.resolveNoCache(slice.openStart + extra),
            end: node.resolveNoCache(node.content.size - slice.openEnd - extra) };
    }

    /**
    You can [_resolve_](https://prosemirror.net/docs/ref/#model.Node.resolve) a position to get more
    information about it. Objects of this class represent such a
    resolved position, providing various pieces of context
    information, and some helper methods.

    Throughout this interface, methods that take an optional `depth`
    parameter will interpret undefined as `this.depth` and negative
    numbers as `this.depth + value`.
    */
    class ResolvedPos {
        /**
        @internal
        */
        constructor(
        /**
        The position that was resolved.
        */
        pos, 
        /**
        @internal
        */
        path, 
        /**
        The offset this position has into its parent node.
        */
        parentOffset) {
            this.pos = pos;
            this.path = path;
            this.parentOffset = parentOffset;
            this.depth = path.length / 3 - 1;
        }
        /**
        @internal
        */
        resolveDepth(val) {
            if (val == null)
                return this.depth;
            if (val < 0)
                return this.depth + val;
            return val;
        }
        /**
        The parent node that the position points into. Note that even if
        a position points into a text node, that node is not considered
        the parent—text nodes are ‘flat’ in this model, and have no content.
        */
        get parent() { return this.node(this.depth); }
        /**
        The root node in which the position was resolved.
        */
        get doc() { return this.node(0); }
        /**
        The ancestor node at the given level. `p.node(p.depth)` is the
        same as `p.parent`.
        */
        node(depth) { return this.path[this.resolveDepth(depth) * 3]; }
        /**
        The index into the ancestor at the given level. If this points
        at the 3rd node in the 2nd paragraph on the top level, for
        example, `p.index(0)` is 1 and `p.index(1)` is 2.
        */
        index(depth) { return this.path[this.resolveDepth(depth) * 3 + 1]; }
        /**
        The index pointing after this position into the ancestor at the
        given level.
        */
        indexAfter(depth) {
            depth = this.resolveDepth(depth);
            return this.index(depth) + (depth == this.depth && !this.textOffset ? 0 : 1);
        }
        /**
        The (absolute) position at the start of the node at the given
        level.
        */
        start(depth) {
            depth = this.resolveDepth(depth);
            return depth == 0 ? 0 : this.path[depth * 3 - 1] + 1;
        }
        /**
        The (absolute) position at the end of the node at the given
        level.
        */
        end(depth) {
            depth = this.resolveDepth(depth);
            return this.start(depth) + this.node(depth).content.size;
        }
        /**
        The (absolute) position directly before the wrapping node at the
        given level, or, when `depth` is `this.depth + 1`, the original
        position.
        */
        before(depth) {
            depth = this.resolveDepth(depth);
            if (!depth)
                throw new RangeError("There is no position before the top-level node");
            return depth == this.depth + 1 ? this.pos : this.path[depth * 3 - 1];
        }
        /**
        The (absolute) position directly after the wrapping node at the
        given level, or the original position when `depth` is `this.depth + 1`.
        */
        after(depth) {
            depth = this.resolveDepth(depth);
            if (!depth)
                throw new RangeError("There is no position after the top-level node");
            return depth == this.depth + 1 ? this.pos : this.path[depth * 3 - 1] + this.path[depth * 3].nodeSize;
        }
        /**
        When this position points into a text node, this returns the
        distance between the position and the start of the text node.
        Will be zero for positions that point between nodes.
        */
        get textOffset() { return this.pos - this.path[this.path.length - 1]; }
        /**
        Get the node directly after the position, if any. If the position
        points into a text node, only the part of that node after the
        position is returned.
        */
        get nodeAfter() {
            let parent = this.parent, index = this.index(this.depth);
            if (index == parent.childCount)
                return null;
            let dOff = this.pos - this.path[this.path.length - 1], child = parent.child(index);
            return dOff ? parent.child(index).cut(dOff) : child;
        }
        /**
        Get the node directly before the position, if any. If the
        position points into a text node, only the part of that node
        before the position is returned.
        */
        get nodeBefore() {
            let index = this.index(this.depth);
            let dOff = this.pos - this.path[this.path.length - 1];
            if (dOff)
                return this.parent.child(index).cut(0, dOff);
            return index == 0 ? null : this.parent.child(index - 1);
        }
        /**
        Get the position at the given index in the parent node at the
        given depth (which defaults to `this.depth`).
        */
        posAtIndex(index, depth) {
            depth = this.resolveDepth(depth);
            let node = this.path[depth * 3], pos = depth == 0 ? 0 : this.path[depth * 3 - 1] + 1;
            for (let i = 0; i < index; i++)
                pos += node.child(i).nodeSize;
            return pos;
        }
        /**
        Get the marks at this position, factoring in the surrounding
        marks' [`inclusive`](https://prosemirror.net/docs/ref/#model.MarkSpec.inclusive) property. If the
        position is at the start of a non-empty node, the marks of the
        node after it (if any) are returned.
        */
        marks() {
            let parent = this.parent, index = this.index();
            // In an empty parent, return the empty array
            if (parent.content.size == 0)
                return Mark.none;
            // When inside a text node, just return the text node's marks
            if (this.textOffset)
                return parent.child(index).marks;
            let main = parent.maybeChild(index - 1), other = parent.maybeChild(index);
            // If the `after` flag is true of there is no node before, make
            // the node after this position the main reference.
            if (!main) {
                let tmp = main;
                main = other;
                other = tmp;
            }
            // Use all marks in the main node, except those that have
            // `inclusive` set to false and are not present in the other node.
            let marks = main.marks;
            for (var i = 0; i < marks.length; i++)
                if (marks[i].type.spec.inclusive === false && (!other || !marks[i].isInSet(other.marks)))
                    marks = marks[i--].removeFromSet(marks);
            return marks;
        }
        /**
        Get the marks after the current position, if any, except those
        that are non-inclusive and not present at position `$end`. This
        is mostly useful for getting the set of marks to preserve after a
        deletion. Will return `null` if this position is at the end of
        its parent node or its parent node isn't a textblock (in which
        case no marks should be preserved).
        */
        marksAcross($end) {
            let after = this.parent.maybeChild(this.index());
            if (!after || !after.isInline)
                return null;
            let marks = after.marks, next = $end.parent.maybeChild($end.index());
            for (var i = 0; i < marks.length; i++)
                if (marks[i].type.spec.inclusive === false && (!next || !marks[i].isInSet(next.marks)))
                    marks = marks[i--].removeFromSet(marks);
            return marks;
        }
        /**
        The depth up to which this position and the given (non-resolved)
        position share the same parent nodes.
        */
        sharedDepth(pos) {
            for (let depth = this.depth; depth > 0; depth--)
                if (this.start(depth) <= pos && this.end(depth) >= pos)
                    return depth;
            return 0;
        }
        /**
        Returns a range based on the place where this position and the
        given position diverge around block content. If both point into
        the same textblock, for example, a range around that textblock
        will be returned. If they point into different blocks, the range
        around those blocks in their shared ancestor is returned. You can
        pass in an optional predicate that will be called with a parent
        node to see if a range into that parent is acceptable.
        */
        blockRange(other = this, pred) {
            if (other.pos < this.pos)
                return other.blockRange(this);
            for (let d = this.depth - (this.parent.inlineContent || this.pos == other.pos ? 1 : 0); d >= 0; d--)
                if (other.pos <= this.end(d) && (!pred || pred(this.node(d))))
                    return new NodeRange(this, other, d);
            return null;
        }
        /**
        Query whether the given position shares the same parent node.
        */
        sameParent(other) {
            return this.pos - this.parentOffset == other.pos - other.parentOffset;
        }
        /**
        Return the greater of this and the given position.
        */
        max(other) {
            return other.pos > this.pos ? other : this;
        }
        /**
        Return the smaller of this and the given position.
        */
        min(other) {
            return other.pos < this.pos ? other : this;
        }
        /**
        @internal
        */
        toString() {
            let str = "";
            for (let i = 1; i <= this.depth; i++)
                str += (str ? "/" : "") + this.node(i).type.name + "_" + this.index(i - 1);
            return str + ":" + this.parentOffset;
        }
        /**
        @internal
        */
        static resolve(doc, pos) {
            if (!(pos >= 0 && pos <= doc.content.size))
                throw new RangeError("Position " + pos + " out of range");
            let path = [];
            let start = 0, parentOffset = pos;
            for (let node = doc;;) {
                let { index, offset } = node.content.findIndex(parentOffset);
                let rem = parentOffset - offset;
                path.push(node, index, start + offset);
                if (!rem)
                    break;
                node = node.child(index);
                if (node.isText)
                    break;
                parentOffset = rem - 1;
                start += offset + 1;
            }
            return new ResolvedPos(pos, path, parentOffset);
        }
        /**
        @internal
        */
        static resolveCached(doc, pos) {
            for (let i = 0; i < resolveCache.length; i++) {
                let cached = resolveCache[i];
                if (cached.pos == pos && cached.doc == doc)
                    return cached;
            }
            let result = resolveCache[resolveCachePos] = ResolvedPos.resolve(doc, pos);
            resolveCachePos = (resolveCachePos + 1) % resolveCacheSize;
            return result;
        }
    }
    let resolveCache = [], resolveCachePos = 0, resolveCacheSize = 12;
    /**
    Represents a flat range of content, i.e. one that starts and
    ends in the same node.
    */
    class NodeRange {
        /**
        Construct a node range. `$from` and `$to` should point into the
        same node until at least the given `depth`, since a node range
        denotes an adjacent set of nodes in a single parent node.
        */
        constructor(
        /**
        A resolved position along the start of the content. May have a
        `depth` greater than this object's `depth` property, since
        these are the positions that were used to compute the range,
        not re-resolved positions directly at its boundaries.
        */
        $from, 
        /**
        A position along the end of the content. See
        caveat for [`$from`](https://prosemirror.net/docs/ref/#model.NodeRange.$from).
        */
        $to, 
        /**
        The depth of the node that this range points into.
        */
        depth) {
            this.$from = $from;
            this.$to = $to;
            this.depth = depth;
        }
        /**
        The position at the start of the range.
        */
        get start() { return this.$from.before(this.depth + 1); }
        /**
        The position at the end of the range.
        */
        get end() { return this.$to.after(this.depth + 1); }
        /**
        The parent node that the range points into.
        */
        get parent() { return this.$from.node(this.depth); }
        /**
        The start index of the range in the parent node.
        */
        get startIndex() { return this.$from.index(this.depth); }
        /**
        The end index of the range in the parent node.
        */
        get endIndex() { return this.$to.indexAfter(this.depth); }
    }

    const emptyAttrs = Object.create(null);
    /**
    This class represents a node in the tree that makes up a
    ProseMirror document. So a document is an instance of `Node`, with
    children that are also instances of `Node`.

    Nodes are persistent data structures. Instead of changing them, you
    create new ones with the content you want. Old ones keep pointing
    at the old document shape. This is made cheaper by sharing
    structure between the old and new data as much as possible, which a
    tree shape like this (without back pointers) makes easy.

    **Do not** directly mutate the properties of a `Node` object. See
    [the guide](/docs/guide/#doc) for more information.
    */
    class Node {
        /**
        @internal
        */
        constructor(
        /**
        The type of node that this is.
        */
        type, 
        /**
        An object mapping attribute names to values. The kind of
        attributes allowed and required are
        [determined](https://prosemirror.net/docs/ref/#model.NodeSpec.attrs) by the node type.
        */
        attrs, 
        // A fragment holding the node's children.
        content, 
        /**
        The marks (things like whether it is emphasized or part of a
        link) applied to this node.
        */
        marks = Mark.none) {
            this.type = type;
            this.attrs = attrs;
            this.marks = marks;
            this.content = content || Fragment.empty;
        }
        /**
        The size of this node, as defined by the integer-based [indexing
        scheme](/docs/guide/#doc.indexing). For text nodes, this is the
        amount of characters. For other leaf nodes, it is one. For
        non-leaf nodes, it is the size of the content plus two (the
        start and end token).
        */
        get nodeSize() { return this.isLeaf ? 1 : 2 + this.content.size; }
        /**
        The number of children that the node has.
        */
        get childCount() { return this.content.childCount; }
        /**
        Get the child node at the given index. Raises an error when the
        index is out of range.
        */
        child(index) { return this.content.child(index); }
        /**
        Get the child node at the given index, if it exists.
        */
        maybeChild(index) { return this.content.maybeChild(index); }
        /**
        Call `f` for every child node, passing the node, its offset
        into this parent node, and its index.
        */
        forEach(f) { this.content.forEach(f); }
        /**
        Invoke a callback for all descendant nodes recursively between
        the given two positions that are relative to start of this
        node's content. The callback is invoked with the node, its
        parent-relative position, its parent node, and its child index.
        When the callback returns false for a given node, that node's
        children will not be recursed over. The last parameter can be
        used to specify a starting position to count from.
        */
        nodesBetween(from, to, f, startPos = 0) {
            this.content.nodesBetween(from, to, f, startPos, this);
        }
        /**
        Call the given callback for every descendant node. Doesn't
        descend into a node when the callback returns `false`.
        */
        descendants(f) {
            this.nodesBetween(0, this.content.size, f);
        }
        /**
        Concatenates all the text nodes found in this fragment and its
        children.
        */
        get textContent() {
            return (this.isLeaf && this.type.spec.leafText)
                ? this.type.spec.leafText(this)
                : this.textBetween(0, this.content.size, "");
        }
        /**
        Get all text between positions `from` and `to`. When
        `blockSeparator` is given, it will be inserted to separate text
        from different block nodes. If `leafText` is given, it'll be
        inserted for every non-text leaf node encountered, otherwise
        [`leafText`](https://prosemirror.net/docs/ref/#model.NodeSpec^leafText) will be used.
        */
        textBetween(from, to, blockSeparator, leafText) {
            return this.content.textBetween(from, to, blockSeparator, leafText);
        }
        /**
        Returns this node's first child, or `null` if there are no
        children.
        */
        get firstChild() { return this.content.firstChild; }
        /**
        Returns this node's last child, or `null` if there are no
        children.
        */
        get lastChild() { return this.content.lastChild; }
        /**
        Test whether two nodes represent the same piece of document.
        */
        eq(other) {
            return this == other || (this.sameMarkup(other) && this.content.eq(other.content));
        }
        /**
        Compare the markup (type, attributes, and marks) of this node to
        those of another. Returns `true` if both have the same markup.
        */
        sameMarkup(other) {
            return this.hasMarkup(other.type, other.attrs, other.marks);
        }
        /**
        Check whether this node's markup correspond to the given type,
        attributes, and marks.
        */
        hasMarkup(type, attrs, marks) {
            return this.type == type &&
                compareDeep(this.attrs, attrs || type.defaultAttrs || emptyAttrs) &&
                Mark.sameSet(this.marks, marks || Mark.none);
        }
        /**
        Create a new node with the same markup as this node, containing
        the given content (or empty, if no content is given).
        */
        copy(content = null) {
            if (content == this.content)
                return this;
            return new Node(this.type, this.attrs, content, this.marks);
        }
        /**
        Create a copy of this node, with the given set of marks instead
        of the node's own marks.
        */
        mark(marks) {
            return marks == this.marks ? this : new Node(this.type, this.attrs, this.content, marks);
        }
        /**
        Create a copy of this node with only the content between the
        given positions. If `to` is not given, it defaults to the end of
        the node.
        */
        cut(from, to = this.content.size) {
            if (from == 0 && to == this.content.size)
                return this;
            return this.copy(this.content.cut(from, to));
        }
        /**
        Cut out the part of the document between the given positions, and
        return it as a `Slice` object.
        */
        slice(from, to = this.content.size, includeParents = false) {
            if (from == to)
                return Slice.empty;
            let $from = this.resolve(from), $to = this.resolve(to);
            let depth = includeParents ? 0 : $from.sharedDepth(to);
            let start = $from.start(depth), node = $from.node(depth);
            let content = node.content.cut($from.pos - start, $to.pos - start);
            return new Slice(content, $from.depth - depth, $to.depth - depth);
        }
        /**
        Replace the part of the document between the given positions with
        the given slice. The slice must 'fit', meaning its open sides
        must be able to connect to the surrounding content, and its
        content nodes must be valid children for the node they are placed
        into. If any of this is violated, an error of type
        [`ReplaceError`](https://prosemirror.net/docs/ref/#model.ReplaceError) is thrown.
        */
        replace(from, to, slice) {
            return replace(this.resolve(from), this.resolve(to), slice);
        }
        /**
        Find the node directly after the given position.
        */
        nodeAt(pos) {
            for (let node = this;;) {
                let { index, offset } = node.content.findIndex(pos);
                node = node.maybeChild(index);
                if (!node)
                    return null;
                if (offset == pos || node.isText)
                    return node;
                pos -= offset + 1;
            }
        }
        /**
        Find the (direct) child node after the given offset, if any,
        and return it along with its index and offset relative to this
        node.
        */
        childAfter(pos) {
            let { index, offset } = this.content.findIndex(pos);
            return { node: this.content.maybeChild(index), index, offset };
        }
        /**
        Find the (direct) child node before the given offset, if any,
        and return it along with its index and offset relative to this
        node.
        */
        childBefore(pos) {
            if (pos == 0)
                return { node: null, index: 0, offset: 0 };
            let { index, offset } = this.content.findIndex(pos);
            if (offset < pos)
                return { node: this.content.child(index), index, offset };
            let node = this.content.child(index - 1);
            return { node, index: index - 1, offset: offset - node.nodeSize };
        }
        /**
        Resolve the given position in the document, returning an
        [object](https://prosemirror.net/docs/ref/#model.ResolvedPos) with information about its context.
        */
        resolve(pos) { return ResolvedPos.resolveCached(this, pos); }
        /**
        @internal
        */
        resolveNoCache(pos) { return ResolvedPos.resolve(this, pos); }
        /**
        Test whether a given mark or mark type occurs in this document
        between the two given positions.
        */
        rangeHasMark(from, to, type) {
            let found = false;
            if (to > from)
                this.nodesBetween(from, to, node => {
                    if (type.isInSet(node.marks))
                        found = true;
                    return !found;
                });
            return found;
        }
        /**
        True when this is a block (non-inline node)
        */
        get isBlock() { return this.type.isBlock; }
        /**
        True when this is a textblock node, a block node with inline
        content.
        */
        get isTextblock() { return this.type.isTextblock; }
        /**
        True when this node allows inline content.
        */
        get inlineContent() { return this.type.inlineContent; }
        /**
        True when this is an inline node (a text node or a node that can
        appear among text).
        */
        get isInline() { return this.type.isInline; }
        /**
        True when this is a text node.
        */
        get isText() { return this.type.isText; }
        /**
        True when this is a leaf node.
        */
        get isLeaf() { return this.type.isLeaf; }
        /**
        True when this is an atom, i.e. when it does not have directly
        editable content. This is usually the same as `isLeaf`, but can
        be configured with the [`atom` property](https://prosemirror.net/docs/ref/#model.NodeSpec.atom)
        on a node's spec (typically used when the node is displayed as
        an uneditable [node view](https://prosemirror.net/docs/ref/#view.NodeView)).
        */
        get isAtom() { return this.type.isAtom; }
        /**
        Return a string representation of this node for debugging
        purposes.
        */
        toString() {
            if (this.type.spec.toDebugString)
                return this.type.spec.toDebugString(this);
            let name = this.type.name;
            if (this.content.size)
                name += "(" + this.content.toStringInner() + ")";
            return wrapMarks(this.marks, name);
        }
        /**
        Get the content match in this node at the given index.
        */
        contentMatchAt(index) {
            let match = this.type.contentMatch.matchFragment(this.content, 0, index);
            if (!match)
                throw new Error("Called contentMatchAt on a node with invalid content");
            return match;
        }
        /**
        Test whether replacing the range between `from` and `to` (by
        child index) with the given replacement fragment (which defaults
        to the empty fragment) would leave the node's content valid. You
        can optionally pass `start` and `end` indices into the
        replacement fragment.
        */
        canReplace(from, to, replacement = Fragment.empty, start = 0, end = replacement.childCount) {
            let one = this.contentMatchAt(from).matchFragment(replacement, start, end);
            let two = one && one.matchFragment(this.content, to);
            if (!two || !two.validEnd)
                return false;
            for (let i = start; i < end; i++)
                if (!this.type.allowsMarks(replacement.child(i).marks))
                    return false;
            return true;
        }
        /**
        Test whether replacing the range `from` to `to` (by index) with
        a node of the given type would leave the node's content valid.
        */
        canReplaceWith(from, to, type, marks) {
            if (marks && !this.type.allowsMarks(marks))
                return false;
            let start = this.contentMatchAt(from).matchType(type);
            let end = start && start.matchFragment(this.content, to);
            return end ? end.validEnd : false;
        }
        /**
        Test whether the given node's content could be appended to this
        node. If that node is empty, this will only return true if there
        is at least one node type that can appear in both nodes (to avoid
        merging completely incompatible nodes).
        */
        canAppend(other) {
            if (other.content.size)
                return this.canReplace(this.childCount, this.childCount, other.content);
            else
                return this.type.compatibleContent(other.type);
        }
        /**
        Check whether this node and its descendants conform to the
        schema, and raise error when they do not.
        */
        check() {
            if (!this.type.validContent(this.content))
                throw new RangeError(`Invalid content for node ${this.type.name}: ${this.content.toString().slice(0, 50)}`);
            let copy = Mark.none;
            for (let i = 0; i < this.marks.length; i++)
                copy = this.marks[i].addToSet(copy);
            if (!Mark.sameSet(copy, this.marks))
                throw new RangeError(`Invalid collection of marks for node ${this.type.name}: ${this.marks.map(m => m.type.name)}`);
            this.content.forEach(node => node.check());
        }
        /**
        Return a JSON-serializeable representation of this node.
        */
        toJSON() {
            let obj = { type: this.type.name };
            for (let _ in this.attrs) {
                obj.attrs = this.attrs;
                break;
            }
            if (this.content.size)
                obj.content = this.content.toJSON();
            if (this.marks.length)
                obj.marks = this.marks.map(n => n.toJSON());
            return obj;
        }
        /**
        Deserialize a node from its JSON representation.
        */
        static fromJSON(schema, json) {
            if (!json)
                throw new RangeError("Invalid input for Node.fromJSON");
            let marks = null;
            if (json.marks) {
                if (!Array.isArray(json.marks))
                    throw new RangeError("Invalid mark data for Node.fromJSON");
                marks = json.marks.map(schema.markFromJSON);
            }
            if (json.type == "text") {
                if (typeof json.text != "string")
                    throw new RangeError("Invalid text node in JSON");
                return schema.text(json.text, marks);
            }
            let content = Fragment.fromJSON(schema, json.content);
            return schema.nodeType(json.type).create(json.attrs, content, marks);
        }
    }
    Node.prototype.text = undefined;
    class TextNode extends Node {
        /**
        @internal
        */
        constructor(type, attrs, content, marks) {
            super(type, attrs, null, marks);
            if (!content)
                throw new RangeError("Empty text nodes are not allowed");
            this.text = content;
        }
        toString() {
            if (this.type.spec.toDebugString)
                return this.type.spec.toDebugString(this);
            return wrapMarks(this.marks, JSON.stringify(this.text));
        }
        get textContent() { return this.text; }
        textBetween(from, to) { return this.text.slice(from, to); }
        get nodeSize() { return this.text.length; }
        mark(marks) {
            return marks == this.marks ? this : new TextNode(this.type, this.attrs, this.text, marks);
        }
        withText(text) {
            if (text == this.text)
                return this;
            return new TextNode(this.type, this.attrs, text, this.marks);
        }
        cut(from = 0, to = this.text.length) {
            if (from == 0 && to == this.text.length)
                return this;
            return this.withText(this.text.slice(from, to));
        }
        eq(other) {
            return this.sameMarkup(other) && this.text == other.text;
        }
        toJSON() {
            let base = super.toJSON();
            base.text = this.text;
            return base;
        }
    }
    function wrapMarks(marks, str) {
        for (let i = marks.length - 1; i >= 0; i--)
            str = marks[i].type.name + "(" + str + ")";
        return str;
    }

    /**
    Instances of this class represent a match state of a node type's
    [content expression](https://prosemirror.net/docs/ref/#model.NodeSpec.content), and can be used to
    find out whether further content matches here, and whether a given
    position is a valid end of the node.
    */
    class ContentMatch {
        /**
        @internal
        */
        constructor(
        /**
        True when this match state represents a valid end of the node.
        */
        validEnd) {
            this.validEnd = validEnd;
            /**
            @internal
            */
            this.next = [];
            /**
            @internal
            */
            this.wrapCache = [];
        }
        /**
        @internal
        */
        static parse(string, nodeTypes) {
            let stream = new TokenStream(string, nodeTypes);
            if (stream.next == null)
                return ContentMatch.empty;
            let expr = parseExpr(stream);
            if (stream.next)
                stream.err("Unexpected trailing text");
            let match = dfa(nfa(expr));
            checkForDeadEnds(match, stream);
            return match;
        }
        /**
        Match a node type, returning a match after that node if
        successful.
        */
        matchType(type) {
            for (let i = 0; i < this.next.length; i++)
                if (this.next[i].type == type)
                    return this.next[i].next;
            return null;
        }
        /**
        Try to match a fragment. Returns the resulting match when
        successful.
        */
        matchFragment(frag, start = 0, end = frag.childCount) {
            let cur = this;
            for (let i = start; cur && i < end; i++)
                cur = cur.matchType(frag.child(i).type);
            return cur;
        }
        /**
        @internal
        */
        get inlineContent() {
            return this.next.length && this.next[0].type.isInline;
        }
        /**
        Get the first matching node type at this match position that can
        be generated.
        */
        get defaultType() {
            for (let i = 0; i < this.next.length; i++) {
                let { type } = this.next[i];
                if (!(type.isText || type.hasRequiredAttrs()))
                    return type;
            }
            return null;
        }
        /**
        @internal
        */
        compatible(other) {
            for (let i = 0; i < this.next.length; i++)
                for (let j = 0; j < other.next.length; j++)
                    if (this.next[i].type == other.next[j].type)
                        return true;
            return false;
        }
        /**
        Try to match the given fragment, and if that fails, see if it can
        be made to match by inserting nodes in front of it. When
        successful, return a fragment of inserted nodes (which may be
        empty if nothing had to be inserted). When `toEnd` is true, only
        return a fragment if the resulting match goes to the end of the
        content expression.
        */
        fillBefore(after, toEnd = false, startIndex = 0) {
            let seen = [this];
            function search(match, types) {
                let finished = match.matchFragment(after, startIndex);
                if (finished && (!toEnd || finished.validEnd))
                    return Fragment.from(types.map(tp => tp.createAndFill()));
                for (let i = 0; i < match.next.length; i++) {
                    let { type, next } = match.next[i];
                    if (!(type.isText || type.hasRequiredAttrs()) && seen.indexOf(next) == -1) {
                        seen.push(next);
                        let found = search(next, types.concat(type));
                        if (found)
                            return found;
                    }
                }
                return null;
            }
            return search(this, []);
        }
        /**
        Find a set of wrapping node types that would allow a node of the
        given type to appear at this position. The result may be empty
        (when it fits directly) and will be null when no such wrapping
        exists.
        */
        findWrapping(target) {
            for (let i = 0; i < this.wrapCache.length; i += 2)
                if (this.wrapCache[i] == target)
                    return this.wrapCache[i + 1];
            let computed = this.computeWrapping(target);
            this.wrapCache.push(target, computed);
            return computed;
        }
        /**
        @internal
        */
        computeWrapping(target) {
            let seen = Object.create(null), active = [{ match: this, type: null, via: null }];
            while (active.length) {
                let current = active.shift(), match = current.match;
                if (match.matchType(target)) {
                    let result = [];
                    for (let obj = current; obj.type; obj = obj.via)
                        result.push(obj.type);
                    return result.reverse();
                }
                for (let i = 0; i < match.next.length; i++) {
                    let { type, next } = match.next[i];
                    if (!type.isLeaf && !type.hasRequiredAttrs() && !(type.name in seen) && (!current.type || next.validEnd)) {
                        active.push({ match: type.contentMatch, type, via: current });
                        seen[type.name] = true;
                    }
                }
            }
            return null;
        }
        /**
        The number of outgoing edges this node has in the finite
        automaton that describes the content expression.
        */
        get edgeCount() {
            return this.next.length;
        }
        /**
        Get the _n_​th outgoing edge from this node in the finite
        automaton that describes the content expression.
        */
        edge(n) {
            if (n >= this.next.length)
                throw new RangeError(`There's no ${n}th edge in this content match`);
            return this.next[n];
        }
        /**
        @internal
        */
        toString() {
            let seen = [];
            function scan(m) {
                seen.push(m);
                for (let i = 0; i < m.next.length; i++)
                    if (seen.indexOf(m.next[i].next) == -1)
                        scan(m.next[i].next);
            }
            scan(this);
            return seen.map((m, i) => {
                let out = i + (m.validEnd ? "*" : " ") + " ";
                for (let i = 0; i < m.next.length; i++)
                    out += (i ? ", " : "") + m.next[i].type.name + "->" + seen.indexOf(m.next[i].next);
                return out;
            }).join("\n");
        }
    }
    /**
    @internal
    */
    ContentMatch.empty = new ContentMatch(true);
    class TokenStream {
        constructor(string, nodeTypes) {
            this.string = string;
            this.nodeTypes = nodeTypes;
            this.inline = null;
            this.pos = 0;
            this.tokens = string.split(/\s*(?=\b|\W|$)/);
            if (this.tokens[this.tokens.length - 1] == "")
                this.tokens.pop();
            if (this.tokens[0] == "")
                this.tokens.shift();
        }
        get next() { return this.tokens[this.pos]; }
        eat(tok) { return this.next == tok && (this.pos++ || true); }
        err(str) { throw new SyntaxError(str + " (in content expression '" + this.string + "')"); }
    }
    function parseExpr(stream) {
        let exprs = [];
        do {
            exprs.push(parseExprSeq(stream));
        } while (stream.eat("|"));
        return exprs.length == 1 ? exprs[0] : { type: "choice", exprs };
    }
    function parseExprSeq(stream) {
        let exprs = [];
        do {
            exprs.push(parseExprSubscript(stream));
        } while (stream.next && stream.next != ")" && stream.next != "|");
        return exprs.length == 1 ? exprs[0] : { type: "seq", exprs };
    }
    function parseExprSubscript(stream) {
        let expr = parseExprAtom(stream);
        for (;;) {
            if (stream.eat("+"))
                expr = { type: "plus", expr };
            else if (stream.eat("*"))
                expr = { type: "star", expr };
            else if (stream.eat("?"))
                expr = { type: "opt", expr };
            else if (stream.eat("{"))
                expr = parseExprRange(stream, expr);
            else
                break;
        }
        return expr;
    }
    function parseNum(stream) {
        if (/\D/.test(stream.next))
            stream.err("Expected number, got '" + stream.next + "'");
        let result = Number(stream.next);
        stream.pos++;
        return result;
    }
    function parseExprRange(stream, expr) {
        let min = parseNum(stream), max = min;
        if (stream.eat(",")) {
            if (stream.next != "}")
                max = parseNum(stream);
            else
                max = -1;
        }
        if (!stream.eat("}"))
            stream.err("Unclosed braced range");
        return { type: "range", min, max, expr };
    }
    function resolveName(stream, name) {
        let types = stream.nodeTypes, type = types[name];
        if (type)
            return [type];
        let result = [];
        for (let typeName in types) {
            let type = types[typeName];
            if (type.groups.indexOf(name) > -1)
                result.push(type);
        }
        if (result.length == 0)
            stream.err("No node type or group '" + name + "' found");
        return result;
    }
    function parseExprAtom(stream) {
        if (stream.eat("(")) {
            let expr = parseExpr(stream);
            if (!stream.eat(")"))
                stream.err("Missing closing paren");
            return expr;
        }
        else if (!/\W/.test(stream.next)) {
            let exprs = resolveName(stream, stream.next).map(type => {
                if (stream.inline == null)
                    stream.inline = type.isInline;
                else if (stream.inline != type.isInline)
                    stream.err("Mixing inline and block content");
                return { type: "name", value: type };
            });
            stream.pos++;
            return exprs.length == 1 ? exprs[0] : { type: "choice", exprs };
        }
        else {
            stream.err("Unexpected token '" + stream.next + "'");
        }
    }
    /**
    Construct an NFA from an expression as returned by the parser. The
    NFA is represented as an array of states, which are themselves
    arrays of edges, which are `{term, to}` objects. The first state is
    the entry state and the last node is the success state.

    Note that unlike typical NFAs, the edge ordering in this one is
    significant, in that it is used to contruct filler content when
    necessary.
    */
    function nfa(expr) {
        let nfa = [[]];
        connect(compile(expr, 0), node());
        return nfa;
        function node() { return nfa.push([]) - 1; }
        function edge(from, to, term) {
            let edge = { term, to };
            nfa[from].push(edge);
            return edge;
        }
        function connect(edges, to) {
            edges.forEach(edge => edge.to = to);
        }
        function compile(expr, from) {
            if (expr.type == "choice") {
                return expr.exprs.reduce((out, expr) => out.concat(compile(expr, from)), []);
            }
            else if (expr.type == "seq") {
                for (let i = 0;; i++) {
                    let next = compile(expr.exprs[i], from);
                    if (i == expr.exprs.length - 1)
                        return next;
                    connect(next, from = node());
                }
            }
            else if (expr.type == "star") {
                let loop = node();
                edge(from, loop);
                connect(compile(expr.expr, loop), loop);
                return [edge(loop)];
            }
            else if (expr.type == "plus") {
                let loop = node();
                connect(compile(expr.expr, from), loop);
                connect(compile(expr.expr, loop), loop);
                return [edge(loop)];
            }
            else if (expr.type == "opt") {
                return [edge(from)].concat(compile(expr.expr, from));
            }
            else if (expr.type == "range") {
                let cur = from;
                for (let i = 0; i < expr.min; i++) {
                    let next = node();
                    connect(compile(expr.expr, cur), next);
                    cur = next;
                }
                if (expr.max == -1) {
                    connect(compile(expr.expr, cur), cur);
                }
                else {
                    for (let i = expr.min; i < expr.max; i++) {
                        let next = node();
                        edge(cur, next);
                        connect(compile(expr.expr, cur), next);
                        cur = next;
                    }
                }
                return [edge(cur)];
            }
            else if (expr.type == "name") {
                return [edge(from, undefined, expr.value)];
            }
            else {
                throw new Error("Unknown expr type");
            }
        }
    }
    function cmp(a, b) { return b - a; }
    // Get the set of nodes reachable by null edges from `node`. Omit
    // nodes with only a single null-out-edge, since they may lead to
    // needless duplicated nodes.
    function nullFrom(nfa, node) {
        let result = [];
        scan(node);
        return result.sort(cmp);
        function scan(node) {
            let edges = nfa[node];
            if (edges.length == 1 && !edges[0].term)
                return scan(edges[0].to);
            result.push(node);
            for (let i = 0; i < edges.length; i++) {
                let { term, to } = edges[i];
                if (!term && result.indexOf(to) == -1)
                    scan(to);
            }
        }
    }
    // Compiles an NFA as produced by `nfa` into a DFA, modeled as a set
    // of state objects (`ContentMatch` instances) with transitions
    // between them.
    function dfa(nfa) {
        let labeled = Object.create(null);
        return explore(nullFrom(nfa, 0));
        function explore(states) {
            let out = [];
            states.forEach(node => {
                nfa[node].forEach(({ term, to }) => {
                    if (!term)
                        return;
                    let set;
                    for (let i = 0; i < out.length; i++)
                        if (out[i][0] == term)
                            set = out[i][1];
                    nullFrom(nfa, to).forEach(node => {
                        if (!set)
                            out.push([term, set = []]);
                        if (set.indexOf(node) == -1)
                            set.push(node);
                    });
                });
            });
            let state = labeled[states.join(",")] = new ContentMatch(states.indexOf(nfa.length - 1) > -1);
            for (let i = 0; i < out.length; i++) {
                let states = out[i][1].sort(cmp);
                state.next.push({ type: out[i][0], next: labeled[states.join(",")] || explore(states) });
            }
            return state;
        }
    }
    function checkForDeadEnds(match, stream) {
        for (let i = 0, work = [match]; i < work.length; i++) {
            let state = work[i], dead = !state.validEnd, nodes = [];
            for (let j = 0; j < state.next.length; j++) {
                let { type, next } = state.next[j];
                nodes.push(type.name);
                if (dead && !(type.isText || type.hasRequiredAttrs()))
                    dead = false;
                if (work.indexOf(next) == -1)
                    work.push(next);
            }
            if (dead)
                stream.err("Only non-generatable nodes (" + nodes.join(", ") + ") in a required position (see https://prosemirror.net/docs/guide/#generatable)");
        }
    }

    // For node types where all attrs have a default value (or which don't
    // have any attributes), build up a single reusable default attribute
    // object, and use it for all nodes that don't specify specific
    // attributes.
    function defaultAttrs(attrs) {
        let defaults = Object.create(null);
        for (let attrName in attrs) {
            let attr = attrs[attrName];
            if (!attr.hasDefault)
                return null;
            defaults[attrName] = attr.default;
        }
        return defaults;
    }
    function computeAttrs(attrs, value) {
        let built = Object.create(null);
        for (let name in attrs) {
            let given = value && value[name];
            if (given === undefined) {
                let attr = attrs[name];
                if (attr.hasDefault)
                    given = attr.default;
                else
                    throw new RangeError("No value supplied for attribute " + name);
            }
            built[name] = given;
        }
        return built;
    }
    function initAttrs(attrs) {
        let result = Object.create(null);
        if (attrs)
            for (let name in attrs)
                result[name] = new Attribute(attrs[name]);
        return result;
    }
    /**
    Node types are objects allocated once per `Schema` and used to
    [tag](https://prosemirror.net/docs/ref/#model.Node.type) `Node` instances. They contain information
    about the node type, such as its name and what kind of node it
    represents.
    */
    class NodeType {
        /**
        @internal
        */
        constructor(
        /**
        The name the node type has in this schema.
        */
        name, 
        /**
        A link back to the `Schema` the node type belongs to.
        */
        schema, 
        /**
        The spec that this type is based on
        */
        spec) {
            this.name = name;
            this.schema = schema;
            this.spec = spec;
            /**
            The set of marks allowed in this node. `null` means all marks
            are allowed.
            */
            this.markSet = null;
            this.groups = spec.group ? spec.group.split(" ") : [];
            this.attrs = initAttrs(spec.attrs);
            this.defaultAttrs = defaultAttrs(this.attrs);
            this.contentMatch = null;
            this.inlineContent = null;
            this.isBlock = !(spec.inline || name == "text");
            this.isText = name == "text";
        }
        /**
        True if this is an inline type.
        */
        get isInline() { return !this.isBlock; }
        /**
        True if this is a textblock type, a block that contains inline
        content.
        */
        get isTextblock() { return this.isBlock && this.inlineContent; }
        /**
        True for node types that allow no content.
        */
        get isLeaf() { return this.contentMatch == ContentMatch.empty; }
        /**
        True when this node is an atom, i.e. when it does not have
        directly editable content.
        */
        get isAtom() { return this.isLeaf || !!this.spec.atom; }
        /**
        The node type's [whitespace](https://prosemirror.net/docs/ref/#model.NodeSpec.whitespace) option.
        */
        get whitespace() {
            return this.spec.whitespace || (this.spec.code ? "pre" : "normal");
        }
        /**
        Tells you whether this node type has any required attributes.
        */
        hasRequiredAttrs() {
            for (let n in this.attrs)
                if (this.attrs[n].isRequired)
                    return true;
            return false;
        }
        /**
        Indicates whether this node allows some of the same content as
        the given node type.
        */
        compatibleContent(other) {
            return this == other || this.contentMatch.compatible(other.contentMatch);
        }
        /**
        @internal
        */
        computeAttrs(attrs) {
            if (!attrs && this.defaultAttrs)
                return this.defaultAttrs;
            else
                return computeAttrs(this.attrs, attrs);
        }
        /**
        Create a `Node` of this type. The given attributes are
        checked and defaulted (you can pass `null` to use the type's
        defaults entirely, if no required attributes exist). `content`
        may be a `Fragment`, a node, an array of nodes, or
        `null`. Similarly `marks` may be `null` to default to the empty
        set of marks.
        */
        create(attrs = null, content, marks) {
            if (this.isText)
                throw new Error("NodeType.create can't construct text nodes");
            return new Node(this, this.computeAttrs(attrs), Fragment.from(content), Mark.setFrom(marks));
        }
        /**
        Like [`create`](https://prosemirror.net/docs/ref/#model.NodeType.create), but check the given content
        against the node type's content restrictions, and throw an error
        if it doesn't match.
        */
        createChecked(attrs = null, content, marks) {
            content = Fragment.from(content);
            if (!this.validContent(content))
                throw new RangeError("Invalid content for node " + this.name);
            return new Node(this, this.computeAttrs(attrs), content, Mark.setFrom(marks));
        }
        /**
        Like [`create`](https://prosemirror.net/docs/ref/#model.NodeType.create), but see if it is
        necessary to add nodes to the start or end of the given fragment
        to make it fit the node. If no fitting wrapping can be found,
        return null. Note that, due to the fact that required nodes can
        always be created, this will always succeed if you pass null or
        `Fragment.empty` as content.
        */
        createAndFill(attrs = null, content, marks) {
            attrs = this.computeAttrs(attrs);
            content = Fragment.from(content);
            if (content.size) {
                let before = this.contentMatch.fillBefore(content);
                if (!before)
                    return null;
                content = before.append(content);
            }
            let matched = this.contentMatch.matchFragment(content);
            let after = matched && matched.fillBefore(Fragment.empty, true);
            if (!after)
                return null;
            return new Node(this, attrs, content.append(after), Mark.setFrom(marks));
        }
        /**
        Returns true if the given fragment is valid content for this node
        type with the given attributes.
        */
        validContent(content) {
            let result = this.contentMatch.matchFragment(content);
            if (!result || !result.validEnd)
                return false;
            for (let i = 0; i < content.childCount; i++)
                if (!this.allowsMarks(content.child(i).marks))
                    return false;
            return true;
        }
        /**
        Check whether the given mark type is allowed in this node.
        */
        allowsMarkType(markType) {
            return this.markSet == null || this.markSet.indexOf(markType) > -1;
        }
        /**
        Test whether the given set of marks are allowed in this node.
        */
        allowsMarks(marks) {
            if (this.markSet == null)
                return true;
            for (let i = 0; i < marks.length; i++)
                if (!this.allowsMarkType(marks[i].type))
                    return false;
            return true;
        }
        /**
        Removes the marks that are not allowed in this node from the given set.
        */
        allowedMarks(marks) {
            if (this.markSet == null)
                return marks;
            let copy;
            for (let i = 0; i < marks.length; i++) {
                if (!this.allowsMarkType(marks[i].type)) {
                    if (!copy)
                        copy = marks.slice(0, i);
                }
                else if (copy) {
                    copy.push(marks[i]);
                }
            }
            return !copy ? marks : copy.length ? copy : Mark.none;
        }
        /**
        @internal
        */
        static compile(nodes, schema) {
            let result = Object.create(null);
            nodes.forEach((name, spec) => result[name] = new NodeType(name, schema, spec));
            let topType = schema.spec.topNode || "doc";
            if (!result[topType])
                throw new RangeError("Schema is missing its top node type ('" + topType + "')");
            if (!result.text)
                throw new RangeError("Every schema needs a 'text' type");
            for (let _ in result.text.attrs)
                throw new RangeError("The text node type should not have attributes");
            return result;
        }
    }
    // Attribute descriptors
    class Attribute {
        constructor(options) {
            this.hasDefault = Object.prototype.hasOwnProperty.call(options, "default");
            this.default = options.default;
        }
        get isRequired() {
            return !this.hasDefault;
        }
    }
    // Marks
    /**
    Like nodes, marks (which are associated with nodes to signify
    things like emphasis or being part of a link) are
    [tagged](https://prosemirror.net/docs/ref/#model.Mark.type) with type objects, which are
    instantiated once per `Schema`.
    */
    class MarkType {
        /**
        @internal
        */
        constructor(
        /**
        The name of the mark type.
        */
        name, 
        /**
        @internal
        */
        rank, 
        /**
        The schema that this mark type instance is part of.
        */
        schema, 
        /**
        The spec on which the type is based.
        */
        spec) {
            this.name = name;
            this.rank = rank;
            this.schema = schema;
            this.spec = spec;
            this.attrs = initAttrs(spec.attrs);
            this.excluded = null;
            let defaults = defaultAttrs(this.attrs);
            this.instance = defaults ? new Mark(this, defaults) : null;
        }
        /**
        Create a mark of this type. `attrs` may be `null` or an object
        containing only some of the mark's attributes. The others, if
        they have defaults, will be added.
        */
        create(attrs = null) {
            if (!attrs && this.instance)
                return this.instance;
            return new Mark(this, computeAttrs(this.attrs, attrs));
        }
        /**
        @internal
        */
        static compile(marks, schema) {
            let result = Object.create(null), rank = 0;
            marks.forEach((name, spec) => result[name] = new MarkType(name, rank++, schema, spec));
            return result;
        }
        /**
        When there is a mark of this type in the given set, a new set
        without it is returned. Otherwise, the input set is returned.
        */
        removeFromSet(set) {
            for (var i = 0; i < set.length; i++)
                if (set[i].type == this) {
                    set = set.slice(0, i).concat(set.slice(i + 1));
                    i--;
                }
            return set;
        }
        /**
        Tests whether there is a mark of this type in the given set.
        */
        isInSet(set) {
            for (let i = 0; i < set.length; i++)
                if (set[i].type == this)
                    return set[i];
        }
        /**
        Queries whether a given mark type is
        [excluded](https://prosemirror.net/docs/ref/#model.MarkSpec.excludes) by this one.
        */
        excludes(other) {
            return this.excluded.indexOf(other) > -1;
        }
    }
    /**
    A document schema. Holds [node](https://prosemirror.net/docs/ref/#model.NodeType) and [mark
    type](https://prosemirror.net/docs/ref/#model.MarkType) objects for the nodes and marks that may
    occur in conforming documents, and provides functionality for
    creating and deserializing such documents.

    When given, the type parameters provide the names of the nodes and
    marks in this schema.
    */
    class Schema {
        /**
        Construct a schema from a schema [specification](https://prosemirror.net/docs/ref/#model.SchemaSpec).
        */
        constructor(spec) {
            /**
            An object for storing whatever values modules may want to
            compute and cache per schema. (If you want to store something
            in it, try to use property names unlikely to clash.)
            */
            this.cached = Object.create(null);
            this.spec = {
                nodes: OrderedMap.from(spec.nodes),
                marks: OrderedMap.from(spec.marks || {}),
                topNode: spec.topNode
            };
            this.nodes = NodeType.compile(this.spec.nodes, this);
            this.marks = MarkType.compile(this.spec.marks, this);
            let contentExprCache = Object.create(null);
            for (let prop in this.nodes) {
                if (prop in this.marks)
                    throw new RangeError(prop + " can not be both a node and a mark");
                let type = this.nodes[prop], contentExpr = type.spec.content || "", markExpr = type.spec.marks;
                type.contentMatch = contentExprCache[contentExpr] ||
                    (contentExprCache[contentExpr] = ContentMatch.parse(contentExpr, this.nodes));
                type.inlineContent = type.contentMatch.inlineContent;
                type.markSet = markExpr == "_" ? null :
                    markExpr ? gatherMarks(this, markExpr.split(" ")) :
                        markExpr == "" || !type.inlineContent ? [] : null;
            }
            for (let prop in this.marks) {
                let type = this.marks[prop], excl = type.spec.excludes;
                type.excluded = excl == null ? [type] : excl == "" ? [] : gatherMarks(this, excl.split(" "));
            }
            this.nodeFromJSON = this.nodeFromJSON.bind(this);
            this.markFromJSON = this.markFromJSON.bind(this);
            this.topNodeType = this.nodes[this.spec.topNode || "doc"];
            this.cached.wrappings = Object.create(null);
        }
        /**
        Create a node in this schema. The `type` may be a string or a
        `NodeType` instance. Attributes will be extended with defaults,
        `content` may be a `Fragment`, `null`, a `Node`, or an array of
        nodes.
        */
        node(type, attrs = null, content, marks) {
            if (typeof type == "string")
                type = this.nodeType(type);
            else if (!(type instanceof NodeType))
                throw new RangeError("Invalid node type: " + type);
            else if (type.schema != this)
                throw new RangeError("Node type from different schema used (" + type.name + ")");
            return type.createChecked(attrs, content, marks);
        }
        /**
        Create a text node in the schema. Empty text nodes are not
        allowed.
        */
        text(text, marks) {
            let type = this.nodes.text;
            return new TextNode(type, type.defaultAttrs, text, Mark.setFrom(marks));
        }
        /**
        Create a mark with the given type and attributes.
        */
        mark(type, attrs) {
            if (typeof type == "string")
                type = this.marks[type];
            return type.create(attrs);
        }
        /**
        Deserialize a node from its JSON representation. This method is
        bound.
        */
        nodeFromJSON(json) {
            return Node.fromJSON(this, json);
        }
        /**
        Deserialize a mark from its JSON representation. This method is
        bound.
        */
        markFromJSON(json) {
            return Mark.fromJSON(this, json);
        }
        /**
        @internal
        */
        nodeType(name) {
            let found = this.nodes[name];
            if (!found)
                throw new RangeError("Unknown node type: " + name);
            return found;
        }
    }
    function gatherMarks(schema, marks) {
        let found = [];
        for (let i = 0; i < marks.length; i++) {
            let name = marks[i], mark = schema.marks[name], ok = mark;
            if (mark) {
                found.push(mark);
            }
            else {
                for (let prop in schema.marks) {
                    let mark = schema.marks[prop];
                    if (name == "_" || (mark.spec.group && mark.spec.group.split(" ").indexOf(name) > -1))
                        found.push(ok = mark);
                }
            }
            if (!ok)
                throw new SyntaxError("Unknown mark type: '" + marks[i] + "'");
        }
        return found;
    }

    /**
    A DOM parser represents a strategy for parsing DOM content into a
    ProseMirror document conforming to a given schema. Its behavior is
    defined by an array of [rules](https://prosemirror.net/docs/ref/#model.ParseRule).
    */
    class DOMParser {
        /**
        Create a parser that targets the given schema, using the given
        parsing rules.
        */
        constructor(
        /**
        The schema into which the parser parses.
        */
        schema, 
        /**
        The set of [parse rules](https://prosemirror.net/docs/ref/#model.ParseRule) that the parser
        uses, in order of precedence.
        */
        rules) {
            this.schema = schema;
            this.rules = rules;
            /**
            @internal
            */
            this.tags = [];
            /**
            @internal
            */
            this.styles = [];
            rules.forEach(rule => {
                if (rule.tag)
                    this.tags.push(rule);
                else if (rule.style)
                    this.styles.push(rule);
            });
            // Only normalize list elements when lists in the schema can't directly contain themselves
            this.normalizeLists = !this.tags.some(r => {
                if (!/^(ul|ol)\b/.test(r.tag) || !r.node)
                    return false;
                let node = schema.nodes[r.node];
                return node.contentMatch.matchType(node);
            });
        }
        /**
        Parse a document from the content of a DOM node.
        */
        parse(dom, options = {}) {
            let context = new ParseContext(this, options, false);
            context.addAll(dom, options.from, options.to);
            return context.finish();
        }
        /**
        Parses the content of the given DOM node, like
        [`parse`](https://prosemirror.net/docs/ref/#model.DOMParser.parse), and takes the same set of
        options. But unlike that method, which produces a whole node,
        this one returns a slice that is open at the sides, meaning that
        the schema constraints aren't applied to the start of nodes to
        the left of the input and the end of nodes at the end.
        */
        parseSlice(dom, options = {}) {
            let context = new ParseContext(this, options, true);
            context.addAll(dom, options.from, options.to);
            return Slice.maxOpen(context.finish());
        }
        /**
        @internal
        */
        matchTag(dom, context, after) {
            for (let i = after ? this.tags.indexOf(after) + 1 : 0; i < this.tags.length; i++) {
                let rule = this.tags[i];
                if (matches(dom, rule.tag) &&
                    (rule.namespace === undefined || dom.namespaceURI == rule.namespace) &&
                    (!rule.context || context.matchesContext(rule.context))) {
                    if (rule.getAttrs) {
                        let result = rule.getAttrs(dom);
                        if (result === false)
                            continue;
                        rule.attrs = result || undefined;
                    }
                    return rule;
                }
            }
        }
        /**
        @internal
        */
        matchStyle(prop, value, context, after) {
            for (let i = after ? this.styles.indexOf(after) + 1 : 0; i < this.styles.length; i++) {
                let rule = this.styles[i], style = rule.style;
                if (style.indexOf(prop) != 0 ||
                    rule.context && !context.matchesContext(rule.context) ||
                    // Test that the style string either precisely matches the prop,
                    // or has an '=' sign after the prop, followed by the given
                    // value.
                    style.length > prop.length &&
                        (style.charCodeAt(prop.length) != 61 || style.slice(prop.length + 1) != value))
                    continue;
                if (rule.getAttrs) {
                    let result = rule.getAttrs(value);
                    if (result === false)
                        continue;
                    rule.attrs = result || undefined;
                }
                return rule;
            }
        }
        /**
        @internal
        */
        static schemaRules(schema) {
            let result = [];
            function insert(rule) {
                let priority = rule.priority == null ? 50 : rule.priority, i = 0;
                for (; i < result.length; i++) {
                    let next = result[i], nextPriority = next.priority == null ? 50 : next.priority;
                    if (nextPriority < priority)
                        break;
                }
                result.splice(i, 0, rule);
            }
            for (let name in schema.marks) {
                let rules = schema.marks[name].spec.parseDOM;
                if (rules)
                    rules.forEach(rule => {
                        insert(rule = copy(rule));
                        rule.mark = name;
                    });
            }
            for (let name in schema.nodes) {
                let rules = schema.nodes[name].spec.parseDOM;
                if (rules)
                    rules.forEach(rule => {
                        insert(rule = copy(rule));
                        rule.node = name;
                    });
            }
            return result;
        }
        /**
        Construct a DOM parser using the parsing rules listed in a
        schema's [node specs](https://prosemirror.net/docs/ref/#model.NodeSpec.parseDOM), reordered by
        [priority](https://prosemirror.net/docs/ref/#model.ParseRule.priority).
        */
        static fromSchema(schema) {
            return schema.cached.domParser ||
                (schema.cached.domParser = new DOMParser(schema, DOMParser.schemaRules(schema)));
        }
    }
    const blockTags = {
        address: true, article: true, aside: true, blockquote: true, canvas: true,
        dd: true, div: true, dl: true, fieldset: true, figcaption: true, figure: true,
        footer: true, form: true, h1: true, h2: true, h3: true, h4: true, h5: true,
        h6: true, header: true, hgroup: true, hr: true, li: true, noscript: true, ol: true,
        output: true, p: true, pre: true, section: true, table: true, tfoot: true, ul: true
    };
    const ignoreTags = {
        head: true, noscript: true, object: true, script: true, style: true, title: true
    };
    const listTags = { ol: true, ul: true };
    // Using a bitfield for node context options
    const OPT_PRESERVE_WS = 1, OPT_PRESERVE_WS_FULL = 2, OPT_OPEN_LEFT = 4;
    function wsOptionsFor(type, preserveWhitespace, base) {
        if (preserveWhitespace != null)
            return (preserveWhitespace ? OPT_PRESERVE_WS : 0) |
                (preserveWhitespace === "full" ? OPT_PRESERVE_WS_FULL : 0);
        return type && type.whitespace == "pre" ? OPT_PRESERVE_WS | OPT_PRESERVE_WS_FULL : base & ~OPT_OPEN_LEFT;
    }
    class NodeContext {
        constructor(type, attrs, 
        // Marks applied to this node itself
        marks, 
        // Marks that can't apply here, but will be used in children if possible
        pendingMarks, solid, match, options) {
            this.type = type;
            this.attrs = attrs;
            this.marks = marks;
            this.pendingMarks = pendingMarks;
            this.solid = solid;
            this.options = options;
            this.content = [];
            // Marks applied to the node's children
            this.activeMarks = Mark.none;
            // Nested Marks with same type
            this.stashMarks = [];
            this.match = match || (options & OPT_OPEN_LEFT ? null : type.contentMatch);
        }
        findWrapping(node) {
            if (!this.match) {
                if (!this.type)
                    return [];
                let fill = this.type.contentMatch.fillBefore(Fragment.from(node));
                if (fill) {
                    this.match = this.type.contentMatch.matchFragment(fill);
                }
                else {
                    let start = this.type.contentMatch, wrap;
                    if (wrap = start.findWrapping(node.type)) {
                        this.match = start;
                        return wrap;
                    }
                    else {
                        return null;
                    }
                }
            }
            return this.match.findWrapping(node.type);
        }
        finish(openEnd) {
            if (!(this.options & OPT_PRESERVE_WS)) { // Strip trailing whitespace
                let last = this.content[this.content.length - 1], m;
                if (last && last.isText && (m = /[ \t\r\n\u000c]+$/.exec(last.text))) {
                    let text = last;
                    if (last.text.length == m[0].length)
                        this.content.pop();
                    else
                        this.content[this.content.length - 1] = text.withText(text.text.slice(0, text.text.length - m[0].length));
                }
            }
            let content = Fragment.from(this.content);
            if (!openEnd && this.match)
                content = content.append(this.match.fillBefore(Fragment.empty, true));
            return this.type ? this.type.create(this.attrs, content, this.marks) : content;
        }
        popFromStashMark(mark) {
            for (let i = this.stashMarks.length - 1; i >= 0; i--)
                if (mark.eq(this.stashMarks[i]))
                    return this.stashMarks.splice(i, 1)[0];
        }
        applyPending(nextType) {
            for (let i = 0, pending = this.pendingMarks; i < pending.length; i++) {
                let mark = pending[i];
                if ((this.type ? this.type.allowsMarkType(mark.type) : markMayApply(mark.type, nextType)) &&
                    !mark.isInSet(this.activeMarks)) {
                    this.activeMarks = mark.addToSet(this.activeMarks);
                    this.pendingMarks = mark.removeFromSet(this.pendingMarks);
                }
            }
        }
        inlineContext(node) {
            if (this.type)
                return this.type.inlineContent;
            if (this.content.length)
                return this.content[0].isInline;
            return node.parentNode && !blockTags.hasOwnProperty(node.parentNode.nodeName.toLowerCase());
        }
    }
    class ParseContext {
        constructor(
        // The parser we are using.
        parser, 
        // The options passed to this parse.
        options, isOpen) {
            this.parser = parser;
            this.options = options;
            this.isOpen = isOpen;
            this.open = 0;
            let topNode = options.topNode, topContext;
            let topOptions = wsOptionsFor(null, options.preserveWhitespace, 0) | (isOpen ? OPT_OPEN_LEFT : 0);
            if (topNode)
                topContext = new NodeContext(topNode.type, topNode.attrs, Mark.none, Mark.none, true, options.topMatch || topNode.type.contentMatch, topOptions);
            else if (isOpen)
                topContext = new NodeContext(null, null, Mark.none, Mark.none, true, null, topOptions);
            else
                topContext = new NodeContext(parser.schema.topNodeType, null, Mark.none, Mark.none, true, null, topOptions);
            this.nodes = [topContext];
            this.find = options.findPositions;
            this.needsBlock = false;
        }
        get top() {
            return this.nodes[this.open];
        }
        // Add a DOM node to the content. Text is inserted as text node,
        // otherwise, the node is passed to `addElement` or, if it has a
        // `style` attribute, `addElementWithStyles`.
        addDOM(dom) {
            if (dom.nodeType == 3) {
                this.addTextNode(dom);
            }
            else if (dom.nodeType == 1) {
                let style = dom.getAttribute("style");
                let marks = style ? this.readStyles(parseStyles(style)) : null, top = this.top;
                if (marks != null)
                    for (let i = 0; i < marks.length; i++)
                        this.addPendingMark(marks[i]);
                this.addElement(dom);
                if (marks != null)
                    for (let i = 0; i < marks.length; i++)
                        this.removePendingMark(marks[i], top);
            }
        }
        addTextNode(dom) {
            let value = dom.nodeValue;
            let top = this.top;
            if (top.options & OPT_PRESERVE_WS_FULL ||
                top.inlineContext(dom) ||
                /[^ \t\r\n\u000c]/.test(value)) {
                if (!(top.options & OPT_PRESERVE_WS)) {
                    value = value.replace(/[ \t\r\n\u000c]+/g, " ");
                    // If this starts with whitespace, and there is no node before it, or
                    // a hard break, or a text node that ends with whitespace, strip the
                    // leading space.
                    if (/^[ \t\r\n\u000c]/.test(value) && this.open == this.nodes.length - 1) {
                        let nodeBefore = top.content[top.content.length - 1];
                        let domNodeBefore = dom.previousSibling;
                        if (!nodeBefore ||
                            (domNodeBefore && domNodeBefore.nodeName == 'BR') ||
                            (nodeBefore.isText && /[ \t\r\n\u000c]$/.test(nodeBefore.text)))
                            value = value.slice(1);
                    }
                }
                else if (!(top.options & OPT_PRESERVE_WS_FULL)) {
                    value = value.replace(/\r?\n|\r/g, " ");
                }
                else {
                    value = value.replace(/\r\n?/g, "\n");
                }
                if (value)
                    this.insertNode(this.parser.schema.text(value));
                this.findInText(dom);
            }
            else {
                this.findInside(dom);
            }
        }
        // Try to find a handler for the given tag and use that to parse. If
        // none is found, the element's content nodes are added directly.
        addElement(dom, matchAfter) {
            let name = dom.nodeName.toLowerCase(), ruleID;
            if (listTags.hasOwnProperty(name) && this.parser.normalizeLists)
                normalizeList(dom);
            let rule = (this.options.ruleFromNode && this.options.ruleFromNode(dom)) ||
                (ruleID = this.parser.matchTag(dom, this, matchAfter));
            if (rule ? rule.ignore : ignoreTags.hasOwnProperty(name)) {
                this.findInside(dom);
                this.ignoreFallback(dom);
            }
            else if (!rule || rule.skip || rule.closeParent) {
                if (rule && rule.closeParent)
                    this.open = Math.max(0, this.open - 1);
                else if (rule && rule.skip.nodeType)
                    dom = rule.skip;
                let sync, top = this.top, oldNeedsBlock = this.needsBlock;
                if (blockTags.hasOwnProperty(name)) {
                    sync = true;
                    if (!top.type)
                        this.needsBlock = true;
                }
                else if (!dom.firstChild) {
                    this.leafFallback(dom);
                    return;
                }
                this.addAll(dom);
                if (sync)
                    this.sync(top);
                this.needsBlock = oldNeedsBlock;
            }
            else {
                this.addElementByRule(dom, rule, rule.consuming === false ? ruleID : undefined);
            }
        }
        // Called for leaf DOM nodes that would otherwise be ignored
        leafFallback(dom) {
            if (dom.nodeName == "BR" && this.top.type && this.top.type.inlineContent)
                this.addTextNode(dom.ownerDocument.createTextNode("\n"));
        }
        // Called for ignored nodes
        ignoreFallback(dom) {
            // Ignored BR nodes should at least create an inline context
            if (dom.nodeName == "BR" && (!this.top.type || !this.top.type.inlineContent))
                this.findPlace(this.parser.schema.text("-"));
        }
        // Run any style parser associated with the node's styles. Either
        // return an array of marks, or null to indicate some of the styles
        // had a rule with `ignore` set.
        readStyles(styles) {
            let marks = Mark.none;
            style: for (let i = 0; i < styles.length; i += 2) {
                for (let after = undefined;;) {
                    let rule = this.parser.matchStyle(styles[i], styles[i + 1], this, after);
                    if (!rule)
                        continue style;
                    if (rule.ignore)
                        return null;
                    marks = this.parser.schema.marks[rule.mark].create(rule.attrs).addToSet(marks);
                    if (rule.consuming === false)
                        after = rule;
                    else
                        break;
                }
            }
            return marks;
        }
        // Look up a handler for the given node. If none are found, return
        // false. Otherwise, apply it, use its return value to drive the way
        // the node's content is wrapped, and return true.
        addElementByRule(dom, rule, continueAfter) {
            let sync, nodeType, mark;
            if (rule.node) {
                nodeType = this.parser.schema.nodes[rule.node];
                if (!nodeType.isLeaf) {
                    sync = this.enter(nodeType, rule.attrs || null, rule.preserveWhitespace);
                }
                else if (!this.insertNode(nodeType.create(rule.attrs))) {
                    this.leafFallback(dom);
                }
            }
            else {
                let markType = this.parser.schema.marks[rule.mark];
                mark = markType.create(rule.attrs);
                this.addPendingMark(mark);
            }
            let startIn = this.top;
            if (nodeType && nodeType.isLeaf) {
                this.findInside(dom);
            }
            else if (continueAfter) {
                this.addElement(dom, continueAfter);
            }
            else if (rule.getContent) {
                this.findInside(dom);
                rule.getContent(dom, this.parser.schema).forEach(node => this.insertNode(node));
            }
            else {
                let contentDOM = dom;
                if (typeof rule.contentElement == "string")
                    contentDOM = dom.querySelector(rule.contentElement);
                else if (typeof rule.contentElement == "function")
                    contentDOM = rule.contentElement(dom);
                else if (rule.contentElement)
                    contentDOM = rule.contentElement;
                this.findAround(dom, contentDOM, true);
                this.addAll(contentDOM);
            }
            if (sync && this.sync(startIn))
                this.open--;
            if (mark)
                this.removePendingMark(mark, startIn);
        }
        // Add all child nodes between `startIndex` and `endIndex` (or the
        // whole node, if not given). If `sync` is passed, use it to
        // synchronize after every block element.
        addAll(parent, startIndex, endIndex) {
            let index = startIndex || 0;
            for (let dom = startIndex ? parent.childNodes[startIndex] : parent.firstChild, end = endIndex == null ? null : parent.childNodes[endIndex]; dom != end; dom = dom.nextSibling, ++index) {
                this.findAtPoint(parent, index);
                this.addDOM(dom);
            }
            this.findAtPoint(parent, index);
        }
        // Try to find a way to fit the given node type into the current
        // context. May add intermediate wrappers and/or leave non-solid
        // nodes that we're in.
        findPlace(node) {
            let route, sync;
            for (let depth = this.open; depth >= 0; depth--) {
                let cx = this.nodes[depth];
                let found = cx.findWrapping(node);
                if (found && (!route || route.length > found.length)) {
                    route = found;
                    sync = cx;
                    if (!found.length)
                        break;
                }
                if (cx.solid)
                    break;
            }
            if (!route)
                return false;
            this.sync(sync);
            for (let i = 0; i < route.length; i++)
                this.enterInner(route[i], null, false);
            return true;
        }
        // Try to insert the given node, adjusting the context when needed.
        insertNode(node) {
            if (node.isInline && this.needsBlock && !this.top.type) {
                let block = this.textblockFromContext();
                if (block)
                    this.enterInner(block);
            }
            if (this.findPlace(node)) {
                this.closeExtra();
                let top = this.top;
                top.applyPending(node.type);
                if (top.match)
                    top.match = top.match.matchType(node.type);
                let marks = top.activeMarks;
                for (let i = 0; i < node.marks.length; i++)
                    if (!top.type || top.type.allowsMarkType(node.marks[i].type))
                        marks = node.marks[i].addToSet(marks);
                top.content.push(node.mark(marks));
                return true;
            }
            return false;
        }
        // Try to start a node of the given type, adjusting the context when
        // necessary.
        enter(type, attrs, preserveWS) {
            let ok = this.findPlace(type.create(attrs));
            if (ok)
                this.enterInner(type, attrs, true, preserveWS);
            return ok;
        }
        // Open a node of the given type
        enterInner(type, attrs = null, solid = false, preserveWS) {
            this.closeExtra();
            let top = this.top;
            top.applyPending(type);
            top.match = top.match && top.match.matchType(type);
            let options = wsOptionsFor(type, preserveWS, top.options);
            if ((top.options & OPT_OPEN_LEFT) && top.content.length == 0)
                options |= OPT_OPEN_LEFT;
            this.nodes.push(new NodeContext(type, attrs, top.activeMarks, top.pendingMarks, solid, null, options));
            this.open++;
        }
        // Make sure all nodes above this.open are finished and added to
        // their parents
        closeExtra(openEnd = false) {
            let i = this.nodes.length - 1;
            if (i > this.open) {
                for (; i > this.open; i--)
                    this.nodes[i - 1].content.push(this.nodes[i].finish(openEnd));
                this.nodes.length = this.open + 1;
            }
        }
        finish() {
            this.open = 0;
            this.closeExtra(this.isOpen);
            return this.nodes[0].finish(this.isOpen || this.options.topOpen);
        }
        sync(to) {
            for (let i = this.open; i >= 0; i--)
                if (this.nodes[i] == to) {
                    this.open = i;
                    return true;
                }
            return false;
        }
        get currentPos() {
            this.closeExtra();
            let pos = 0;
            for (let i = this.open; i >= 0; i--) {
                let content = this.nodes[i].content;
                for (let j = content.length - 1; j >= 0; j--)
                    pos += content[j].nodeSize;
                if (i)
                    pos++;
            }
            return pos;
        }
        findAtPoint(parent, offset) {
            if (this.find)
                for (let i = 0; i < this.find.length; i++) {
                    if (this.find[i].node == parent && this.find[i].offset == offset)
                        this.find[i].pos = this.currentPos;
                }
        }
        findInside(parent) {
            if (this.find)
                for (let i = 0; i < this.find.length; i++) {
                    if (this.find[i].pos == null && parent.nodeType == 1 && parent.contains(this.find[i].node))
                        this.find[i].pos = this.currentPos;
                }
        }
        findAround(parent, content, before) {
            if (parent != content && this.find)
                for (let i = 0; i < this.find.length; i++) {
                    if (this.find[i].pos == null && parent.nodeType == 1 && parent.contains(this.find[i].node)) {
                        let pos = content.compareDocumentPosition(this.find[i].node);
                        if (pos & (before ? 2 : 4))
                            this.find[i].pos = this.currentPos;
                    }
                }
        }
        findInText(textNode) {
            if (this.find)
                for (let i = 0; i < this.find.length; i++) {
                    if (this.find[i].node == textNode)
                        this.find[i].pos = this.currentPos - (textNode.nodeValue.length - this.find[i].offset);
                }
        }
        // Determines whether the given context string matches this context.
        matchesContext(context) {
            if (context.indexOf("|") > -1)
                return context.split(/\s*\|\s*/).some(this.matchesContext, this);
            let parts = context.split("/");
            let option = this.options.context;
            let useRoot = !this.isOpen && (!option || option.parent.type == this.nodes[0].type);
            let minDepth = -(option ? option.depth + 1 : 0) + (useRoot ? 0 : 1);
            let match = (i, depth) => {
                for (; i >= 0; i--) {
                    let part = parts[i];
                    if (part == "") {
                        if (i == parts.length - 1 || i == 0)
                            continue;
                        for (; depth >= minDepth; depth--)
                            if (match(i - 1, depth))
                                return true;
                        return false;
                    }
                    else {
                        let next = depth > 0 || (depth == 0 && useRoot) ? this.nodes[depth].type
                            : option && depth >= minDepth ? option.node(depth - minDepth).type
                                : null;
                        if (!next || (next.name != part && next.groups.indexOf(part) == -1))
                            return false;
                        depth--;
                    }
                }
                return true;
            };
            return match(parts.length - 1, this.open);
        }
        textblockFromContext() {
            let $context = this.options.context;
            if ($context)
                for (let d = $context.depth; d >= 0; d--) {
                    let deflt = $context.node(d).contentMatchAt($context.indexAfter(d)).defaultType;
                    if (deflt && deflt.isTextblock && deflt.defaultAttrs)
                        return deflt;
                }
            for (let name in this.parser.schema.nodes) {
                let type = this.parser.schema.nodes[name];
                if (type.isTextblock && type.defaultAttrs)
                    return type;
            }
        }
        addPendingMark(mark) {
            let found = findSameMarkInSet(mark, this.top.pendingMarks);
            if (found)
                this.top.stashMarks.push(found);
            this.top.pendingMarks = mark.addToSet(this.top.pendingMarks);
        }
        removePendingMark(mark, upto) {
            for (let depth = this.open; depth >= 0; depth--) {
                let level = this.nodes[depth];
                let found = level.pendingMarks.lastIndexOf(mark);
                if (found > -1) {
                    level.pendingMarks = mark.removeFromSet(level.pendingMarks);
                }
                else {
                    level.activeMarks = mark.removeFromSet(level.activeMarks);
                    let stashMark = level.popFromStashMark(mark);
                    if (stashMark && level.type && level.type.allowsMarkType(stashMark.type))
                        level.activeMarks = stashMark.addToSet(level.activeMarks);
                }
                if (level == upto)
                    break;
            }
        }
    }
    // Kludge to work around directly nested list nodes produced by some
    // tools and allowed by browsers to mean that the nested list is
    // actually part of the list item above it.
    function normalizeList(dom) {
        for (let child = dom.firstChild, prevItem = null; child; child = child.nextSibling) {
            let name = child.nodeType == 1 ? child.nodeName.toLowerCase() : null;
            if (name && listTags.hasOwnProperty(name) && prevItem) {
                prevItem.appendChild(child);
                child = prevItem;
            }
            else if (name == "li") {
                prevItem = child;
            }
            else if (name) {
                prevItem = null;
            }
        }
    }
    // Apply a CSS selector.
    function matches(dom, selector) {
        return (dom.matches || dom.msMatchesSelector || dom.webkitMatchesSelector || dom.mozMatchesSelector).call(dom, selector);
    }
    // Tokenize a style attribute into property/value pairs.
    function parseStyles(style) {
        let re = /\s*([\w-]+)\s*:\s*([^;]+)/g, m, result = [];
        while (m = re.exec(style))
            result.push(m[1], m[2].trim());
        return result;
    }
    function copy(obj) {
        let copy = {};
        for (let prop in obj)
            copy[prop] = obj[prop];
        return copy;
    }
    // Used when finding a mark at the top level of a fragment parse.
    // Checks whether it would be reasonable to apply a given mark type to
    // a given node, by looking at the way the mark occurs in the schema.
    function markMayApply(markType, nodeType) {
        let nodes = nodeType.schema.nodes;
        for (let name in nodes) {
            let parent = nodes[name];
            if (!parent.allowsMarkType(markType))
                continue;
            let seen = [], scan = (match) => {
                seen.push(match);
                for (let i = 0; i < match.edgeCount; i++) {
                    let { type, next } = match.edge(i);
                    if (type == nodeType)
                        return true;
                    if (seen.indexOf(next) < 0 && scan(next))
                        return true;
                }
            };
            if (scan(parent.contentMatch))
                return true;
        }
    }
    function findSameMarkInSet(mark, set) {
        for (let i = 0; i < set.length; i++) {
            if (mark.eq(set[i]))
                return set[i];
        }
    }

    /**
    A DOM serializer knows how to convert ProseMirror nodes and
    marks of various types to DOM nodes.
    */
    class DOMSerializer {
        /**
        Create a serializer. `nodes` should map node names to functions
        that take a node and return a description of the corresponding
        DOM. `marks` does the same for mark names, but also gets an
        argument that tells it whether the mark's content is block or
        inline content (for typical use, it'll always be inline). A mark
        serializer may be `null` to indicate that marks of that type
        should not be serialized.
        */
        constructor(
        /**
        The node serialization functions.
        */
        nodes, 
        /**
        The mark serialization functions.
        */
        marks) {
            this.nodes = nodes;
            this.marks = marks;
        }
        /**
        Serialize the content of this fragment to a DOM fragment. When
        not in the browser, the `document` option, containing a DOM
        document, should be passed so that the serializer can create
        nodes.
        */
        serializeFragment(fragment, options = {}, target) {
            if (!target)
                target = doc(options).createDocumentFragment();
            let top = target, active = [];
            fragment.forEach(node => {
                if (active.length || node.marks.length) {
                    let keep = 0, rendered = 0;
                    while (keep < active.length && rendered < node.marks.length) {
                        let next = node.marks[rendered];
                        if (!this.marks[next.type.name]) {
                            rendered++;
                            continue;
                        }
                        if (!next.eq(active[keep][0]) || next.type.spec.spanning === false)
                            break;
                        keep++;
                        rendered++;
                    }
                    while (keep < active.length)
                        top = active.pop()[1];
                    while (rendered < node.marks.length) {
                        let add = node.marks[rendered++];
                        let markDOM = this.serializeMark(add, node.isInline, options);
                        if (markDOM) {
                            active.push([add, top]);
                            top.appendChild(markDOM.dom);
                            top = markDOM.contentDOM || markDOM.dom;
                        }
                    }
                }
                top.appendChild(this.serializeNodeInner(node, options));
            });
            return target;
        }
        /**
        @internal
        */
        serializeNodeInner(node, options) {
            let { dom, contentDOM } = DOMSerializer.renderSpec(doc(options), this.nodes[node.type.name](node));
            if (contentDOM) {
                if (node.isLeaf)
                    throw new RangeError("Content hole not allowed in a leaf node spec");
                this.serializeFragment(node.content, options, contentDOM);
            }
            return dom;
        }
        /**
        Serialize this node to a DOM node. This can be useful when you
        need to serialize a part of a document, as opposed to the whole
        document. To serialize a whole document, use
        [`serializeFragment`](https://prosemirror.net/docs/ref/#model.DOMSerializer.serializeFragment) on
        its [content](https://prosemirror.net/docs/ref/#model.Node.content).
        */
        serializeNode(node, options = {}) {
            let dom = this.serializeNodeInner(node, options);
            for (let i = node.marks.length - 1; i >= 0; i--) {
                let wrap = this.serializeMark(node.marks[i], node.isInline, options);
                if (wrap) {
                    (wrap.contentDOM || wrap.dom).appendChild(dom);
                    dom = wrap.dom;
                }
            }
            return dom;
        }
        /**
        @internal
        */
        serializeMark(mark, inline, options = {}) {
            let toDOM = this.marks[mark.type.name];
            return toDOM && DOMSerializer.renderSpec(doc(options), toDOM(mark, inline));
        }
        /**
        Render an [output spec](https://prosemirror.net/docs/ref/#model.DOMOutputSpec) to a DOM node. If
        the spec has a hole (zero) in it, `contentDOM` will point at the
        node with the hole.
        */
        static renderSpec(doc, structure, xmlNS = null) {
            if (typeof structure == "string")
                return { dom: doc.createTextNode(structure) };
            if (structure.nodeType != null)
                return { dom: structure };
            if (structure.dom && structure.dom.nodeType != null)
                return structure;
            let tagName = structure[0], space = tagName.indexOf(" ");
            if (space > 0) {
                xmlNS = tagName.slice(0, space);
                tagName = tagName.slice(space + 1);
            }
            let contentDOM;
            let dom = (xmlNS ? doc.createElementNS(xmlNS, tagName) : doc.createElement(tagName));
            let attrs = structure[1], start = 1;
            if (attrs && typeof attrs == "object" && attrs.nodeType == null && !Array.isArray(attrs)) {
                start = 2;
                for (let name in attrs)
                    if (attrs[name] != null) {
                        let space = name.indexOf(" ");
                        if (space > 0)
                            dom.setAttributeNS(name.slice(0, space), name.slice(space + 1), attrs[name]);
                        else
                            dom.setAttribute(name, attrs[name]);
                    }
            }
            for (let i = start; i < structure.length; i++) {
                let child = structure[i];
                if (child === 0) {
                    if (i < structure.length - 1 || i > start)
                        throw new RangeError("Content hole must be the only child of its parent node");
                    return { dom, contentDOM: dom };
                }
                else {
                    let { dom: inner, contentDOM: innerContent } = DOMSerializer.renderSpec(doc, child, xmlNS);
                    dom.appendChild(inner);
                    if (innerContent) {
                        if (contentDOM)
                            throw new RangeError("Multiple content holes");
                        contentDOM = innerContent;
                    }
                }
            }
            return { dom, contentDOM };
        }
        /**
        Build a serializer using the [`toDOM`](https://prosemirror.net/docs/ref/#model.NodeSpec.toDOM)
        properties in a schema's node and mark specs.
        */
        static fromSchema(schema) {
            return schema.cached.domSerializer ||
                (schema.cached.domSerializer = new DOMSerializer(this.nodesFromSchema(schema), this.marksFromSchema(schema)));
        }
        /**
        Gather the serializers in a schema's node specs into an object.
        This can be useful as a base to build a custom serializer from.
        */
        static nodesFromSchema(schema) {
            let result = gatherToDOM(schema.nodes);
            if (!result.text)
                result.text = node => node.text;
            return result;
        }
        /**
        Gather the serializers in a schema's mark specs into an object.
        */
        static marksFromSchema(schema) {
            return gatherToDOM(schema.marks);
        }
    }
    function gatherToDOM(obj) {
        let result = {};
        for (let name in obj) {
            let toDOM = obj[name].spec.toDOM;
            if (toDOM)
                result[name] = toDOM;
        }
        return result;
    }
    function doc(options) {
        return options.document || window.document;
    }

    // Recovery values encode a range index and an offset. They are
    // represented as numbers, because tons of them will be created when
    // mapping, for example, a large number of decorations. The number's
    // lower 16 bits provide the index, the remaining bits the offset.
    //
    // Note: We intentionally don't use bit shift operators to en- and
    // decode these, since those clip to 32 bits, which we might in rare
    // cases want to overflow. A 64-bit float can represent 48-bit
    // integers precisely.
    const lower16 = 0xffff;
    const factor16 = Math.pow(2, 16);
    function makeRecover(index, offset) { return index + offset * factor16; }
    function recoverIndex(value) { return value & lower16; }
    function recoverOffset(value) { return (value - (value & lower16)) / factor16; }
    const DEL_BEFORE = 1, DEL_AFTER = 2, DEL_ACROSS = 4, DEL_SIDE = 8;
    /**
    An object representing a mapped position with extra
    information.
    */
    class MapResult {
        /**
        @internal
        */
        constructor(
        /**
        The mapped version of the position.
        */
        pos, 
        /**
        @internal
        */
        delInfo, 
        /**
        @internal
        */
        recover) {
            this.pos = pos;
            this.delInfo = delInfo;
            this.recover = recover;
        }
        /**
        Tells you whether the position was deleted, that is, whether the
        step removed the token on the side queried (via the `assoc`)
        argument from the document.
        */
        get deleted() { return (this.delInfo & DEL_SIDE) > 0; }
        /**
        Tells you whether the token before the mapped position was deleted.
        */
        get deletedBefore() { return (this.delInfo & (DEL_BEFORE | DEL_ACROSS)) > 0; }
        /**
        True when the token after the mapped position was deleted.
        */
        get deletedAfter() { return (this.delInfo & (DEL_AFTER | DEL_ACROSS)) > 0; }
        /**
        Tells whether any of the steps mapped through deletes across the
        position (including both the token before and after the
        position).
        */
        get deletedAcross() { return (this.delInfo & DEL_ACROSS) > 0; }
    }
    /**
    A map describing the deletions and insertions made by a step, which
    can be used to find the correspondence between positions in the
    pre-step version of a document and the same position in the
    post-step version.
    */
    class StepMap {
        /**
        Create a position map. The modifications to the document are
        represented as an array of numbers, in which each group of three
        represents a modified chunk as `[start, oldSize, newSize]`.
        */
        constructor(
        /**
        @internal
        */
        ranges, 
        /**
        @internal
        */
        inverted = false) {
            this.ranges = ranges;
            this.inverted = inverted;
            if (!ranges.length && StepMap.empty)
                return StepMap.empty;
        }
        /**
        @internal
        */
        recover(value) {
            let diff = 0, index = recoverIndex(value);
            if (!this.inverted)
                for (let i = 0; i < index; i++)
                    diff += this.ranges[i * 3 + 2] - this.ranges[i * 3 + 1];
            return this.ranges[index * 3] + diff + recoverOffset(value);
        }
        mapResult(pos, assoc = 1) { return this._map(pos, assoc, false); }
        map(pos, assoc = 1) { return this._map(pos, assoc, true); }
        /**
        @internal
        */
        _map(pos, assoc, simple) {
            let diff = 0, oldIndex = this.inverted ? 2 : 1, newIndex = this.inverted ? 1 : 2;
            for (let i = 0; i < this.ranges.length; i += 3) {
                let start = this.ranges[i] - (this.inverted ? diff : 0);
                if (start > pos)
                    break;
                let oldSize = this.ranges[i + oldIndex], newSize = this.ranges[i + newIndex], end = start + oldSize;
                if (pos <= end) {
                    let side = !oldSize ? assoc : pos == start ? -1 : pos == end ? 1 : assoc;
                    let result = start + diff + (side < 0 ? 0 : newSize);
                    if (simple)
                        return result;
                    let recover = pos == (assoc < 0 ? start : end) ? null : makeRecover(i / 3, pos - start);
                    let del = pos == start ? DEL_AFTER : pos == end ? DEL_BEFORE : DEL_ACROSS;
                    if (assoc < 0 ? pos != start : pos != end)
                        del |= DEL_SIDE;
                    return new MapResult(result, del, recover);
                }
                diff += newSize - oldSize;
            }
            return simple ? pos + diff : new MapResult(pos + diff, 0, null);
        }
        /**
        @internal
        */
        touches(pos, recover) {
            let diff = 0, index = recoverIndex(recover);
            let oldIndex = this.inverted ? 2 : 1, newIndex = this.inverted ? 1 : 2;
            for (let i = 0; i < this.ranges.length; i += 3) {
                let start = this.ranges[i] - (this.inverted ? diff : 0);
                if (start > pos)
                    break;
                let oldSize = this.ranges[i + oldIndex], end = start + oldSize;
                if (pos <= end && i == index * 3)
                    return true;
                diff += this.ranges[i + newIndex] - oldSize;
            }
            return false;
        }
        /**
        Calls the given function on each of the changed ranges included in
        this map.
        */
        forEach(f) {
            let oldIndex = this.inverted ? 2 : 1, newIndex = this.inverted ? 1 : 2;
            for (let i = 0, diff = 0; i < this.ranges.length; i += 3) {
                let start = this.ranges[i], oldStart = start - (this.inverted ? diff : 0), newStart = start + (this.inverted ? 0 : diff);
                let oldSize = this.ranges[i + oldIndex], newSize = this.ranges[i + newIndex];
                f(oldStart, oldStart + oldSize, newStart, newStart + newSize);
                diff += newSize - oldSize;
            }
        }
        /**
        Create an inverted version of this map. The result can be used to
        map positions in the post-step document to the pre-step document.
        */
        invert() {
            return new StepMap(this.ranges, !this.inverted);
        }
        /**
        @internal
        */
        toString() {
            return (this.inverted ? "-" : "") + JSON.stringify(this.ranges);
        }
        /**
        Create a map that moves all positions by offset `n` (which may be
        negative). This can be useful when applying steps meant for a
        sub-document to a larger document, or vice-versa.
        */
        static offset(n) {
            return n == 0 ? StepMap.empty : new StepMap(n < 0 ? [0, -n, 0] : [0, 0, n]);
        }
    }
    /**
    A StepMap that contains no changed ranges.
    */
    StepMap.empty = new StepMap([]);
    /**
    A mapping represents a pipeline of zero or more [step
    maps](https://prosemirror.net/docs/ref/#transform.StepMap). It has special provisions for losslessly
    handling mapping positions through a series of steps in which some
    steps are inverted versions of earlier steps. (This comes up when
    ‘[rebasing](/docs/guide/#transform.rebasing)’ steps for
    collaboration or history management.)
    */
    class Mapping {
        /**
        Create a new mapping with the given position maps.
        */
        constructor(
        /**
        The step maps in this mapping.
        */
        maps = [], 
        /**
        @internal
        */
        mirror, 
        /**
        The starting position in the `maps` array, used when `map` or
        `mapResult` is called.
        */
        from = 0, 
        /**
        The end position in the `maps` array.
        */
        to = maps.length) {
            this.maps = maps;
            this.mirror = mirror;
            this.from = from;
            this.to = to;
        }
        /**
        Create a mapping that maps only through a part of this one.
        */
        slice(from = 0, to = this.maps.length) {
            return new Mapping(this.maps, this.mirror, from, to);
        }
        /**
        @internal
        */
        copy() {
            return new Mapping(this.maps.slice(), this.mirror && this.mirror.slice(), this.from, this.to);
        }
        /**
        Add a step map to the end of this mapping. If `mirrors` is
        given, it should be the index of the step map that is the mirror
        image of this one.
        */
        appendMap(map, mirrors) {
            this.to = this.maps.push(map);
            if (mirrors != null)
                this.setMirror(this.maps.length - 1, mirrors);
        }
        /**
        Add all the step maps in a given mapping to this one (preserving
        mirroring information).
        */
        appendMapping(mapping) {
            for (let i = 0, startSize = this.maps.length; i < mapping.maps.length; i++) {
                let mirr = mapping.getMirror(i);
                this.appendMap(mapping.maps[i], mirr != null && mirr < i ? startSize + mirr : undefined);
            }
        }
        /**
        Finds the offset of the step map that mirrors the map at the
        given offset, in this mapping (as per the second argument to
        `appendMap`).
        */
        getMirror(n) {
            if (this.mirror)
                for (let i = 0; i < this.mirror.length; i++)
                    if (this.mirror[i] == n)
                        return this.mirror[i + (i % 2 ? -1 : 1)];
        }
        /**
        @internal
        */
        setMirror(n, m) {
            if (!this.mirror)
                this.mirror = [];
            this.mirror.push(n, m);
        }
        /**
        Append the inverse of the given mapping to this one.
        */
        appendMappingInverted(mapping) {
            for (let i = mapping.maps.length - 1, totalSize = this.maps.length + mapping.maps.length; i >= 0; i--) {
                let mirr = mapping.getMirror(i);
                this.appendMap(mapping.maps[i].invert(), mirr != null && mirr > i ? totalSize - mirr - 1 : undefined);
            }
        }
        /**
        Create an inverted version of this mapping.
        */
        invert() {
            let inverse = new Mapping;
            inverse.appendMappingInverted(this);
            return inverse;
        }
        /**
        Map a position through this mapping.
        */
        map(pos, assoc = 1) {
            if (this.mirror)
                return this._map(pos, assoc, true);
            for (let i = this.from; i < this.to; i++)
                pos = this.maps[i].map(pos, assoc);
            return pos;
        }
        /**
        Map a position through this mapping, returning a mapping
        result.
        */
        mapResult(pos, assoc = 1) { return this._map(pos, assoc, false); }
        /**
        @internal
        */
        _map(pos, assoc, simple) {
            let delInfo = 0;
            for (let i = this.from; i < this.to; i++) {
                let map = this.maps[i], result = map.mapResult(pos, assoc);
                if (result.recover != null) {
                    let corr = this.getMirror(i);
                    if (corr != null && corr > i && corr < this.to) {
                        i = corr;
                        pos = this.maps[corr].recover(result.recover);
                        continue;
                    }
                }
                delInfo |= result.delInfo;
                pos = result.pos;
            }
            return simple ? pos : new MapResult(pos, delInfo, null);
        }
    }

    const stepsByID = Object.create(null);
    /**
    A step object represents an atomic change. It generally applies
    only to the document it was created for, since the positions
    stored in it will only make sense for that document.

    New steps are defined by creating classes that extend `Step`,
    overriding the `apply`, `invert`, `map`, `getMap` and `fromJSON`
    methods, and registering your class with a unique
    JSON-serialization identifier using
    [`Step.jsonID`](https://prosemirror.net/docs/ref/#transform.Step^jsonID).
    */
    class Step {
        /**
        Get the step map that represents the changes made by this step,
        and which can be used to transform between positions in the old
        and the new document.
        */
        getMap() { return StepMap.empty; }
        /**
        Try to merge this step with another one, to be applied directly
        after it. Returns the merged step when possible, null if the
        steps can't be merged.
        */
        merge(other) { return null; }
        /**
        Deserialize a step from its JSON representation. Will call
        through to the step class' own implementation of this method.
        */
        static fromJSON(schema, json) {
            if (!json || !json.stepType)
                throw new RangeError("Invalid input for Step.fromJSON");
            let type = stepsByID[json.stepType];
            if (!type)
                throw new RangeError(`No step type ${json.stepType} defined`);
            return type.fromJSON(schema, json);
        }
        /**
        To be able to serialize steps to JSON, each step needs a string
        ID to attach to its JSON representation. Use this method to
        register an ID for your step classes. Try to pick something
        that's unlikely to clash with steps from other modules.
        */
        static jsonID(id, stepClass) {
            if (id in stepsByID)
                throw new RangeError("Duplicate use of step JSON ID " + id);
            stepsByID[id] = stepClass;
            stepClass.prototype.jsonID = id;
            return stepClass;
        }
    }
    /**
    The result of [applying](https://prosemirror.net/docs/ref/#transform.Step.apply) a step. Contains either a
    new document or a failure value.
    */
    class StepResult {
        /**
        @internal
        */
        constructor(
        /**
        The transformed document, if successful.
        */
        doc, 
        /**
        The failure message, if unsuccessful.
        */
        failed) {
            this.doc = doc;
            this.failed = failed;
        }
        /**
        Create a successful step result.
        */
        static ok(doc) { return new StepResult(doc, null); }
        /**
        Create a failed step result.
        */
        static fail(message) { return new StepResult(null, message); }
        /**
        Call [`Node.replace`](https://prosemirror.net/docs/ref/#model.Node.replace) with the given
        arguments. Create a successful result if it succeeds, and a
        failed one if it throws a `ReplaceError`.
        */
        static fromReplace(doc, from, to, slice) {
            try {
                return StepResult.ok(doc.replace(from, to, slice));
            }
            catch (e) {
                if (e instanceof ReplaceError)
                    return StepResult.fail(e.message);
                throw e;
            }
        }
    }

    function mapFragment(fragment, f, parent) {
        let mapped = [];
        for (let i = 0; i < fragment.childCount; i++) {
            let child = fragment.child(i);
            if (child.content.size)
                child = child.copy(mapFragment(child.content, f, child));
            if (child.isInline)
                child = f(child, parent, i);
            mapped.push(child);
        }
        return Fragment.fromArray(mapped);
    }
    /**
    Add a mark to all inline content between two positions.
    */
    class AddMarkStep extends Step {
        /**
        Create a mark step.
        */
        constructor(
        /**
        The start of the marked range.
        */
        from, 
        /**
        The end of the marked range.
        */
        to, 
        /**
        The mark to add.
        */
        mark) {
            super();
            this.from = from;
            this.to = to;
            this.mark = mark;
        }
        apply(doc) {
            let oldSlice = doc.slice(this.from, this.to), $from = doc.resolve(this.from);
            let parent = $from.node($from.sharedDepth(this.to));
            let slice = new Slice(mapFragment(oldSlice.content, (node, parent) => {
                if (!node.isAtom || !parent.type.allowsMarkType(this.mark.type))
                    return node;
                return node.mark(this.mark.addToSet(node.marks));
            }, parent), oldSlice.openStart, oldSlice.openEnd);
            return StepResult.fromReplace(doc, this.from, this.to, slice);
        }
        invert() {
            return new RemoveMarkStep(this.from, this.to, this.mark);
        }
        map(mapping) {
            let from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1);
            if (from.deleted && to.deleted || from.pos >= to.pos)
                return null;
            return new AddMarkStep(from.pos, to.pos, this.mark);
        }
        merge(other) {
            if (other instanceof AddMarkStep &&
                other.mark.eq(this.mark) &&
                this.from <= other.to && this.to >= other.from)
                return new AddMarkStep(Math.min(this.from, other.from), Math.max(this.to, other.to), this.mark);
            return null;
        }
        toJSON() {
            return { stepType: "addMark", mark: this.mark.toJSON(),
                from: this.from, to: this.to };
        }
        /**
        @internal
        */
        static fromJSON(schema, json) {
            if (typeof json.from != "number" || typeof json.to != "number")
                throw new RangeError("Invalid input for AddMarkStep.fromJSON");
            return new AddMarkStep(json.from, json.to, schema.markFromJSON(json.mark));
        }
    }
    Step.jsonID("addMark", AddMarkStep);
    /**
    Remove a mark from all inline content between two positions.
    */
    class RemoveMarkStep extends Step {
        /**
        Create a mark-removing step.
        */
        constructor(
        /**
        The start of the unmarked range.
        */
        from, 
        /**
        The end of the unmarked range.
        */
        to, 
        /**
        The mark to remove.
        */
        mark) {
            super();
            this.from = from;
            this.to = to;
            this.mark = mark;
        }
        apply(doc) {
            let oldSlice = doc.slice(this.from, this.to);
            let slice = new Slice(mapFragment(oldSlice.content, node => {
                return node.mark(this.mark.removeFromSet(node.marks));
            }, doc), oldSlice.openStart, oldSlice.openEnd);
            return StepResult.fromReplace(doc, this.from, this.to, slice);
        }
        invert() {
            return new AddMarkStep(this.from, this.to, this.mark);
        }
        map(mapping) {
            let from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1);
            if (from.deleted && to.deleted || from.pos >= to.pos)
                return null;
            return new RemoveMarkStep(from.pos, to.pos, this.mark);
        }
        merge(other) {
            if (other instanceof RemoveMarkStep &&
                other.mark.eq(this.mark) &&
                this.from <= other.to && this.to >= other.from)
                return new RemoveMarkStep(Math.min(this.from, other.from), Math.max(this.to, other.to), this.mark);
            return null;
        }
        toJSON() {
            return { stepType: "removeMark", mark: this.mark.toJSON(),
                from: this.from, to: this.to };
        }
        /**
        @internal
        */
        static fromJSON(schema, json) {
            if (typeof json.from != "number" || typeof json.to != "number")
                throw new RangeError("Invalid input for RemoveMarkStep.fromJSON");
            return new RemoveMarkStep(json.from, json.to, schema.markFromJSON(json.mark));
        }
    }
    Step.jsonID("removeMark", RemoveMarkStep);
    /**
    Add a mark to a specific node.
    */
    class AddNodeMarkStep extends Step {
        /**
        Create a node mark step.
        */
        constructor(
        /**
        The position of the target node.
        */
        pos, 
        /**
        The mark to add.
        */
        mark) {
            super();
            this.pos = pos;
            this.mark = mark;
        }
        apply(doc) {
            let node = doc.nodeAt(this.pos);
            if (!node)
                return StepResult.fail("No node at mark step's position");
            let updated = node.type.create(node.attrs, null, this.mark.addToSet(node.marks));
            return StepResult.fromReplace(doc, this.pos, this.pos + 1, new Slice(Fragment.from(updated), 0, node.isLeaf ? 0 : 1));
        }
        invert(doc) {
            let node = doc.nodeAt(this.pos);
            if (node) {
                let newSet = this.mark.addToSet(node.marks);
                if (newSet.length == node.marks.length) {
                    for (let i = 0; i < node.marks.length; i++)
                        if (!node.marks[i].isInSet(newSet))
                            return new AddNodeMarkStep(this.pos, node.marks[i]);
                    return new AddNodeMarkStep(this.pos, this.mark);
                }
            }
            return new RemoveNodeMarkStep(this.pos, this.mark);
        }
        map(mapping) {
            let pos = mapping.mapResult(this.pos, 1);
            return pos.deletedAfter ? null : new AddNodeMarkStep(pos.pos, this.mark);
        }
        toJSON() {
            return { stepType: "addNodeMark", pos: this.pos, mark: this.mark.toJSON() };
        }
        /**
        @internal
        */
        static fromJSON(schema, json) {
            if (typeof json.pos != "number")
                throw new RangeError("Invalid input for AddNodeMarkStep.fromJSON");
            return new AddNodeMarkStep(json.pos, schema.markFromJSON(json.mark));
        }
    }
    Step.jsonID("addNodeMark", AddNodeMarkStep);
    /**
    Remove a mark from a specific node.
    */
    class RemoveNodeMarkStep extends Step {
        /**
        Create a mark-removing step.
        */
        constructor(
        /**
        The position of the target node.
        */
        pos, 
        /**
        The mark to remove.
        */
        mark) {
            super();
            this.pos = pos;
            this.mark = mark;
        }
        apply(doc) {
            let node = doc.nodeAt(this.pos);
            if (!node)
                return StepResult.fail("No node at mark step's position");
            let updated = node.type.create(node.attrs, null, this.mark.removeFromSet(node.marks));
            return StepResult.fromReplace(doc, this.pos, this.pos + 1, new Slice(Fragment.from(updated), 0, node.isLeaf ? 0 : 1));
        }
        invert(doc) {
            let node = doc.nodeAt(this.pos);
            if (!node || !this.mark.isInSet(node.marks))
                return this;
            return new AddNodeMarkStep(this.pos, this.mark);
        }
        map(mapping) {
            let pos = mapping.mapResult(this.pos, 1);
            return pos.deletedAfter ? null : new RemoveNodeMarkStep(pos.pos, this.mark);
        }
        toJSON() {
            return { stepType: "removeNodeMark", pos: this.pos, mark: this.mark.toJSON() };
        }
        /**
        @internal
        */
        static fromJSON(schema, json) {
            if (typeof json.pos != "number")
                throw new RangeError("Invalid input for RemoveNodeMarkStep.fromJSON");
            return new RemoveNodeMarkStep(json.pos, schema.markFromJSON(json.mark));
        }
    }
    Step.jsonID("removeNodeMark", RemoveNodeMarkStep);

    /**
    Replace a part of the document with a slice of new content.
    */
    class ReplaceStep extends Step {
        /**
        The given `slice` should fit the 'gap' between `from` and
        `to`—the depths must line up, and the surrounding nodes must be
        able to be joined with the open sides of the slice. When
        `structure` is true, the step will fail if the content between
        from and to is not just a sequence of closing and then opening
        tokens (this is to guard against rebased replace steps
        overwriting something they weren't supposed to).
        */
        constructor(
        /**
        The start position of the replaced range.
        */
        from, 
        /**
        The end position of the replaced range.
        */
        to, 
        /**
        The slice to insert.
        */
        slice, 
        /**
        @internal
        */
        structure = false) {
            super();
            this.from = from;
            this.to = to;
            this.slice = slice;
            this.structure = structure;
        }
        apply(doc) {
            if (this.structure && contentBetween(doc, this.from, this.to))
                return StepResult.fail("Structure replace would overwrite content");
            return StepResult.fromReplace(doc, this.from, this.to, this.slice);
        }
        getMap() {
            return new StepMap([this.from, this.to - this.from, this.slice.size]);
        }
        invert(doc) {
            return new ReplaceStep(this.from, this.from + this.slice.size, doc.slice(this.from, this.to));
        }
        map(mapping) {
            let from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1);
            if (from.deletedAcross && to.deletedAcross)
                return null;
            return new ReplaceStep(from.pos, Math.max(from.pos, to.pos), this.slice);
        }
        merge(other) {
            if (!(other instanceof ReplaceStep) || other.structure || this.structure)
                return null;
            if (this.from + this.slice.size == other.from && !this.slice.openEnd && !other.slice.openStart) {
                let slice = this.slice.size + other.slice.size == 0 ? Slice.empty
                    : new Slice(this.slice.content.append(other.slice.content), this.slice.openStart, other.slice.openEnd);
                return new ReplaceStep(this.from, this.to + (other.to - other.from), slice, this.structure);
            }
            else if (other.to == this.from && !this.slice.openStart && !other.slice.openEnd) {
                let slice = this.slice.size + other.slice.size == 0 ? Slice.empty
                    : new Slice(other.slice.content.append(this.slice.content), other.slice.openStart, this.slice.openEnd);
                return new ReplaceStep(other.from, this.to, slice, this.structure);
            }
            else {
                return null;
            }
        }
        toJSON() {
            let json = { stepType: "replace", from: this.from, to: this.to };
            if (this.slice.size)
                json.slice = this.slice.toJSON();
            if (this.structure)
                json.structure = true;
            return json;
        }
        /**
        @internal
        */
        static fromJSON(schema, json) {
            if (typeof json.from != "number" || typeof json.to != "number")
                throw new RangeError("Invalid input for ReplaceStep.fromJSON");
            return new ReplaceStep(json.from, json.to, Slice.fromJSON(schema, json.slice), !!json.structure);
        }
    }
    Step.jsonID("replace", ReplaceStep);
    /**
    Replace a part of the document with a slice of content, but
    preserve a range of the replaced content by moving it into the
    slice.
    */
    class ReplaceAroundStep extends Step {
        /**
        Create a replace-around step with the given range and gap.
        `insert` should be the point in the slice into which the content
        of the gap should be moved. `structure` has the same meaning as
        it has in the [`ReplaceStep`](https://prosemirror.net/docs/ref/#transform.ReplaceStep) class.
        */
        constructor(
        /**
        The start position of the replaced range.
        */
        from, 
        /**
        The end position of the replaced range.
        */
        to, 
        /**
        The start of preserved range.
        */
        gapFrom, 
        /**
        The end of preserved range.
        */
        gapTo, 
        /**
        The slice to insert.
        */
        slice, 
        /**
        The position in the slice where the preserved range should be
        inserted.
        */
        insert, 
        /**
        @internal
        */
        structure = false) {
            super();
            this.from = from;
            this.to = to;
            this.gapFrom = gapFrom;
            this.gapTo = gapTo;
            this.slice = slice;
            this.insert = insert;
            this.structure = structure;
        }
        apply(doc) {
            if (this.structure && (contentBetween(doc, this.from, this.gapFrom) ||
                contentBetween(doc, this.gapTo, this.to)))
                return StepResult.fail("Structure gap-replace would overwrite content");
            let gap = doc.slice(this.gapFrom, this.gapTo);
            if (gap.openStart || gap.openEnd)
                return StepResult.fail("Gap is not a flat range");
            let inserted = this.slice.insertAt(this.insert, gap.content);
            if (!inserted)
                return StepResult.fail("Content does not fit in gap");
            return StepResult.fromReplace(doc, this.from, this.to, inserted);
        }
        getMap() {
            return new StepMap([this.from, this.gapFrom - this.from, this.insert,
                this.gapTo, this.to - this.gapTo, this.slice.size - this.insert]);
        }
        invert(doc) {
            let gap = this.gapTo - this.gapFrom;
            return new ReplaceAroundStep(this.from, this.from + this.slice.size + gap, this.from + this.insert, this.from + this.insert + gap, doc.slice(this.from, this.to).removeBetween(this.gapFrom - this.from, this.gapTo - this.from), this.gapFrom - this.from, this.structure);
        }
        map(mapping) {
            let from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1);
            let gapFrom = mapping.map(this.gapFrom, -1), gapTo = mapping.map(this.gapTo, 1);
            if ((from.deletedAcross && to.deletedAcross) || gapFrom < from.pos || gapTo > to.pos)
                return null;
            return new ReplaceAroundStep(from.pos, to.pos, gapFrom, gapTo, this.slice, this.insert, this.structure);
        }
        toJSON() {
            let json = { stepType: "replaceAround", from: this.from, to: this.to,
                gapFrom: this.gapFrom, gapTo: this.gapTo, insert: this.insert };
            if (this.slice.size)
                json.slice = this.slice.toJSON();
            if (this.structure)
                json.structure = true;
            return json;
        }
        /**
        @internal
        */
        static fromJSON(schema, json) {
            if (typeof json.from != "number" || typeof json.to != "number" ||
                typeof json.gapFrom != "number" || typeof json.gapTo != "number" || typeof json.insert != "number")
                throw new RangeError("Invalid input for ReplaceAroundStep.fromJSON");
            return new ReplaceAroundStep(json.from, json.to, json.gapFrom, json.gapTo, Slice.fromJSON(schema, json.slice), json.insert, !!json.structure);
        }
    }
    Step.jsonID("replaceAround", ReplaceAroundStep);
    function contentBetween(doc, from, to) {
        let $from = doc.resolve(from), dist = to - from, depth = $from.depth;
        while (dist > 0 && depth > 0 && $from.indexAfter(depth) == $from.node(depth).childCount) {
            depth--;
            dist--;
        }
        if (dist > 0) {
            let next = $from.node(depth).maybeChild($from.indexAfter(depth));
            while (dist > 0) {
                if (!next || next.isLeaf)
                    return true;
                next = next.firstChild;
                dist--;
            }
        }
        return false;
    }

    function addMark(tr, from, to, mark) {
        let removed = [], added = [];
        let removing, adding;
        tr.doc.nodesBetween(from, to, (node, pos, parent) => {
            if (!node.isInline)
                return;
            let marks = node.marks;
            if (!mark.isInSet(marks) && parent.type.allowsMarkType(mark.type)) {
                let start = Math.max(pos, from), end = Math.min(pos + node.nodeSize, to);
                let newSet = mark.addToSet(marks);
                for (let i = 0; i < marks.length; i++) {
                    if (!marks[i].isInSet(newSet)) {
                        if (removing && removing.to == start && removing.mark.eq(marks[i]))
                            removing.to = end;
                        else
                            removed.push(removing = new RemoveMarkStep(start, end, marks[i]));
                    }
                }
                if (adding && adding.to == start)
                    adding.to = end;
                else
                    added.push(adding = new AddMarkStep(start, end, mark));
            }
        });
        removed.forEach(s => tr.step(s));
        added.forEach(s => tr.step(s));
    }
    function removeMark(tr, from, to, mark) {
        let matched = [], step = 0;
        tr.doc.nodesBetween(from, to, (node, pos) => {
            if (!node.isInline)
                return;
            step++;
            let toRemove = null;
            if (mark instanceof MarkType) {
                let set = node.marks, found;
                while (found = mark.isInSet(set)) {
                    (toRemove || (toRemove = [])).push(found);
                    set = found.removeFromSet(set);
                }
            }
            else if (mark) {
                if (mark.isInSet(node.marks))
                    toRemove = [mark];
            }
            else {
                toRemove = node.marks;
            }
            if (toRemove && toRemove.length) {
                let end = Math.min(pos + node.nodeSize, to);
                for (let i = 0; i < toRemove.length; i++) {
                    let style = toRemove[i], found;
                    for (let j = 0; j < matched.length; j++) {
                        let m = matched[j];
                        if (m.step == step - 1 && style.eq(matched[j].style))
                            found = m;
                    }
                    if (found) {
                        found.to = end;
                        found.step = step;
                    }
                    else {
                        matched.push({ style, from: Math.max(pos, from), to: end, step });
                    }
                }
            }
        });
        matched.forEach(m => tr.step(new RemoveMarkStep(m.from, m.to, m.style)));
    }
    function clearIncompatible(tr, pos, parentType, match = parentType.contentMatch) {
        let node = tr.doc.nodeAt(pos);
        let delSteps = [], cur = pos + 1;
        for (let i = 0; i < node.childCount; i++) {
            let child = node.child(i), end = cur + child.nodeSize;
            let allowed = match.matchType(child.type);
            if (!allowed) {
                delSteps.push(new ReplaceStep(cur, end, Slice.empty));
            }
            else {
                match = allowed;
                for (let j = 0; j < child.marks.length; j++)
                    if (!parentType.allowsMarkType(child.marks[j].type))
                        tr.step(new RemoveMarkStep(cur, end, child.marks[j]));
            }
            cur = end;
        }
        if (!match.validEnd) {
            let fill = match.fillBefore(Fragment.empty, true);
            tr.replace(cur, cur, new Slice(fill, 0, 0));
        }
        for (let i = delSteps.length - 1; i >= 0; i--)
            tr.step(delSteps[i]);
    }

    function canCut(node, start, end) {
        return (start == 0 || node.canReplace(start, node.childCount)) &&
            (end == node.childCount || node.canReplace(0, end));
    }
    /**
    Try to find a target depth to which the content in the given range
    can be lifted. Will not go across
    [isolating](https://prosemirror.net/docs/ref/#model.NodeSpec.isolating) parent nodes.
    */
    function liftTarget(range) {
        let parent = range.parent;
        let content = parent.content.cutByIndex(range.startIndex, range.endIndex);
        for (let depth = range.depth;; --depth) {
            let node = range.$from.node(depth);
            let index = range.$from.index(depth), endIndex = range.$to.indexAfter(depth);
            if (depth < range.depth && node.canReplace(index, endIndex, content))
                return depth;
            if (depth == 0 || node.type.spec.isolating || !canCut(node, index, endIndex))
                break;
        }
        return null;
    }
    function lift(tr, range, target) {
        let { $from, $to, depth } = range;
        let gapStart = $from.before(depth + 1), gapEnd = $to.after(depth + 1);
        let start = gapStart, end = gapEnd;
        let before = Fragment.empty, openStart = 0;
        for (let d = depth, splitting = false; d > target; d--)
            if (splitting || $from.index(d) > 0) {
                splitting = true;
                before = Fragment.from($from.node(d).copy(before));
                openStart++;
            }
            else {
                start--;
            }
        let after = Fragment.empty, openEnd = 0;
        for (let d = depth, splitting = false; d > target; d--)
            if (splitting || $to.after(d + 1) < $to.end(d)) {
                splitting = true;
                after = Fragment.from($to.node(d).copy(after));
                openEnd++;
            }
            else {
                end++;
            }
        tr.step(new ReplaceAroundStep(start, end, gapStart, gapEnd, new Slice(before.append(after), openStart, openEnd), before.size - openStart, true));
    }
    /**
    Try to find a valid way to wrap the content in the given range in a
    node of the given type. May introduce extra nodes around and inside
    the wrapper node, if necessary. Returns null if no valid wrapping
    could be found. When `innerRange` is given, that range's content is
    used as the content to fit into the wrapping, instead of the
    content of `range`.
    */
    function findWrapping(range, nodeType, attrs = null, innerRange = range) {
        let around = findWrappingOutside(range, nodeType);
        let inner = around && findWrappingInside(innerRange, nodeType);
        if (!inner)
            return null;
        return around.map(withAttrs)
            .concat({ type: nodeType, attrs }).concat(inner.map(withAttrs));
    }
    function withAttrs(type) { return { type, attrs: null }; }
    function findWrappingOutside(range, type) {
        let { parent, startIndex, endIndex } = range;
        let around = parent.contentMatchAt(startIndex).findWrapping(type);
        if (!around)
            return null;
        let outer = around.length ? around[0] : type;
        return parent.canReplaceWith(startIndex, endIndex, outer) ? around : null;
    }
    function findWrappingInside(range, type) {
        let { parent, startIndex, endIndex } = range;
        let inner = parent.child(startIndex);
        let inside = type.contentMatch.findWrapping(inner.type);
        if (!inside)
            return null;
        let lastType = inside.length ? inside[inside.length - 1] : type;
        let innerMatch = lastType.contentMatch;
        for (let i = startIndex; innerMatch && i < endIndex; i++)
            innerMatch = innerMatch.matchType(parent.child(i).type);
        if (!innerMatch || !innerMatch.validEnd)
            return null;
        return inside;
    }
    function wrap(tr, range, wrappers) {
        let content = Fragment.empty;
        for (let i = wrappers.length - 1; i >= 0; i--) {
            if (content.size) {
                let match = wrappers[i].type.contentMatch.matchFragment(content);
                if (!match || !match.validEnd)
                    throw new RangeError("Wrapper type given to Transform.wrap does not form valid content of its parent wrapper");
            }
            content = Fragment.from(wrappers[i].type.create(wrappers[i].attrs, content));
        }
        let start = range.start, end = range.end;
        tr.step(new ReplaceAroundStep(start, end, start, end, new Slice(content, 0, 0), wrappers.length, true));
    }
    function setBlockType(tr, from, to, type, attrs) {
        if (!type.isTextblock)
            throw new RangeError("Type given to setBlockType should be a textblock");
        let mapFrom = tr.steps.length;
        tr.doc.nodesBetween(from, to, (node, pos) => {
            if (node.isTextblock && !node.hasMarkup(type, attrs) && canChangeType(tr.doc, tr.mapping.slice(mapFrom).map(pos), type)) {
                // Ensure all markup that isn't allowed in the new node type is cleared
                tr.clearIncompatible(tr.mapping.slice(mapFrom).map(pos, 1), type);
                let mapping = tr.mapping.slice(mapFrom);
                let startM = mapping.map(pos, 1), endM = mapping.map(pos + node.nodeSize, 1);
                tr.step(new ReplaceAroundStep(startM, endM, startM + 1, endM - 1, new Slice(Fragment.from(type.create(attrs, null, node.marks)), 0, 0), 1, true));
                return false;
            }
        });
    }
    function canChangeType(doc, pos, type) {
        let $pos = doc.resolve(pos), index = $pos.index();
        return $pos.parent.canReplaceWith(index, index + 1, type);
    }
    /**
    Change the type, attributes, and/or marks of the node at `pos`.
    When `type` isn't given, the existing node type is preserved,
    */
    function setNodeMarkup(tr, pos, type, attrs, marks) {
        let node = tr.doc.nodeAt(pos);
        if (!node)
            throw new RangeError("No node at given position");
        if (!type)
            type = node.type;
        let newNode = type.create(attrs, null, marks || node.marks);
        if (node.isLeaf)
            return tr.replaceWith(pos, pos + node.nodeSize, newNode);
        if (!type.validContent(node.content))
            throw new RangeError("Invalid content for node type " + type.name);
        tr.step(new ReplaceAroundStep(pos, pos + node.nodeSize, pos + 1, pos + node.nodeSize - 1, new Slice(Fragment.from(newNode), 0, 0), 1, true));
    }
    /**
    Check whether splitting at the given position is allowed.
    */
    function canSplit(doc, pos, depth = 1, typesAfter) {
        let $pos = doc.resolve(pos), base = $pos.depth - depth;
        let innerType = (typesAfter && typesAfter[typesAfter.length - 1]) || $pos.parent;
        if (base < 0 || $pos.parent.type.spec.isolating ||
            !$pos.parent.canReplace($pos.index(), $pos.parent.childCount) ||
            !innerType.type.validContent($pos.parent.content.cutByIndex($pos.index(), $pos.parent.childCount)))
            return false;
        for (let d = $pos.depth - 1, i = depth - 2; d > base; d--, i--) {
            let node = $pos.node(d), index = $pos.index(d);
            if (node.type.spec.isolating)
                return false;
            let rest = node.content.cutByIndex(index, node.childCount);
            let after = (typesAfter && typesAfter[i]) || node;
            if (after != node)
                rest = rest.replaceChild(0, after.type.create(after.attrs));
            if (!node.canReplace(index + 1, node.childCount) || !after.type.validContent(rest))
                return false;
        }
        let index = $pos.indexAfter(base);
        let baseType = typesAfter && typesAfter[0];
        return $pos.node(base).canReplaceWith(index, index, baseType ? baseType.type : $pos.node(base + 1).type);
    }
    function split(tr, pos, depth = 1, typesAfter) {
        let $pos = tr.doc.resolve(pos), before = Fragment.empty, after = Fragment.empty;
        for (let d = $pos.depth, e = $pos.depth - depth, i = depth - 1; d > e; d--, i--) {
            before = Fragment.from($pos.node(d).copy(before));
            let typeAfter = typesAfter && typesAfter[i];
            after = Fragment.from(typeAfter ? typeAfter.type.create(typeAfter.attrs, after) : $pos.node(d).copy(after));
        }
        tr.step(new ReplaceStep(pos, pos, new Slice(before.append(after), depth, depth), true));
    }
    /**
    Test whether the blocks before and after a given position can be
    joined.
    */
    function canJoin(doc, pos) {
        let $pos = doc.resolve(pos), index = $pos.index();
        return joinable$1($pos.nodeBefore, $pos.nodeAfter) &&
            $pos.parent.canReplace(index, index + 1);
    }
    function joinable$1(a, b) {
        return !!(a && b && !a.isLeaf && a.canAppend(b));
    }
    function join(tr, pos, depth) {
        let step = new ReplaceStep(pos - depth, pos + depth, Slice.empty, true);
        tr.step(step);
    }
    /**
    Try to find a point where a node of the given type can be inserted
    near `pos`, by searching up the node hierarchy when `pos` itself
    isn't a valid place but is at the start or end of a node. Return
    null if no position was found.
    */
    function insertPoint(doc, pos, nodeType) {
        let $pos = doc.resolve(pos);
        if ($pos.parent.canReplaceWith($pos.index(), $pos.index(), nodeType))
            return pos;
        if ($pos.parentOffset == 0)
            for (let d = $pos.depth - 1; d >= 0; d--) {
                let index = $pos.index(d);
                if ($pos.node(d).canReplaceWith(index, index, nodeType))
                    return $pos.before(d + 1);
                if (index > 0)
                    return null;
            }
        if ($pos.parentOffset == $pos.parent.content.size)
            for (let d = $pos.depth - 1; d >= 0; d--) {
                let index = $pos.indexAfter(d);
                if ($pos.node(d).canReplaceWith(index, index, nodeType))
                    return $pos.after(d + 1);
                if (index < $pos.node(d).childCount)
                    return null;
            }
        return null;
    }
    /**
    Finds a position at or around the given position where the given
    slice can be inserted. Will look at parent nodes' nearest boundary
    and try there, even if the original position wasn't directly at the
    start or end of that node. Returns null when no position was found.
    */
    function dropPoint(doc, pos, slice) {
        let $pos = doc.resolve(pos);
        if (!slice.content.size)
            return pos;
        let content = slice.content;
        for (let i = 0; i < slice.openStart; i++)
            content = content.firstChild.content;
        for (let pass = 1; pass <= (slice.openStart == 0 && slice.size ? 2 : 1); pass++) {
            for (let d = $pos.depth; d >= 0; d--) {
                let bias = d == $pos.depth ? 0 : $pos.pos <= ($pos.start(d + 1) + $pos.end(d + 1)) / 2 ? -1 : 1;
                let insertPos = $pos.index(d) + (bias > 0 ? 1 : 0);
                let parent = $pos.node(d), fits = false;
                if (pass == 1) {
                    fits = parent.canReplace(insertPos, insertPos, content);
                }
                else {
                    let wrapping = parent.contentMatchAt(insertPos).findWrapping(content.firstChild.type);
                    fits = wrapping && parent.canReplaceWith(insertPos, insertPos, wrapping[0]);
                }
                if (fits)
                    return bias == 0 ? $pos.pos : bias < 0 ? $pos.before(d + 1) : $pos.after(d + 1);
            }
        }
        return null;
    }

    /**
    ‘Fit’ a slice into a given position in the document, producing a
    [step](https://prosemirror.net/docs/ref/#transform.Step) that inserts it. Will return null if
    there's no meaningful way to insert the slice here, or inserting it
    would be a no-op (an empty slice over an empty range).
    */
    function replaceStep(doc, from, to = from, slice = Slice.empty) {
        if (from == to && !slice.size)
            return null;
        let $from = doc.resolve(from), $to = doc.resolve(to);
        // Optimization -- avoid work if it's obvious that it's not needed.
        if (fitsTrivially($from, $to, slice))
            return new ReplaceStep(from, to, slice);
        return new Fitter($from, $to, slice).fit();
    }
    function fitsTrivially($from, $to, slice) {
        return !slice.openStart && !slice.openEnd && $from.start() == $to.start() &&
            $from.parent.canReplace($from.index(), $to.index(), slice.content);
    }
    // Algorithm for 'placing' the elements of a slice into a gap:
    //
    // We consider the content of each node that is open to the left to be
    // independently placeable. I.e. in <p("foo"), p("bar")>, when the
    // paragraph on the left is open, "foo" can be placed (somewhere on
    // the left side of the replacement gap) independently from p("bar").
    //
    // This class tracks the state of the placement progress in the
    // following properties:
    //
    //  - `frontier` holds a stack of `{type, match}` objects that
    //    represent the open side of the replacement. It starts at
    //    `$from`, then moves forward as content is placed, and is finally
    //    reconciled with `$to`.
    //
    //  - `unplaced` is a slice that represents the content that hasn't
    //    been placed yet.
    //
    //  - `placed` is a fragment of placed content. Its open-start value
    //    is implicit in `$from`, and its open-end value in `frontier`.
    class Fitter {
        constructor($from, $to, unplaced) {
            this.$from = $from;
            this.$to = $to;
            this.unplaced = unplaced;
            this.frontier = [];
            this.placed = Fragment.empty;
            for (let i = 0; i <= $from.depth; i++) {
                let node = $from.node(i);
                this.frontier.push({
                    type: node.type,
                    match: node.contentMatchAt($from.indexAfter(i))
                });
            }
            for (let i = $from.depth; i > 0; i--)
                this.placed = Fragment.from($from.node(i).copy(this.placed));
        }
        get depth() { return this.frontier.length - 1; }
        fit() {
            // As long as there's unplaced content, try to place some of it.
            // If that fails, either increase the open score of the unplaced
            // slice, or drop nodes from it, and then try again.
            while (this.unplaced.size) {
                let fit = this.findFittable();
                if (fit)
                    this.placeNodes(fit);
                else
                    this.openMore() || this.dropNode();
            }
            // When there's inline content directly after the frontier _and_
            // directly after `this.$to`, we must generate a `ReplaceAround`
            // step that pulls that content into the node after the frontier.
            // That means the fitting must be done to the end of the textblock
            // node after `this.$to`, not `this.$to` itself.
            let moveInline = this.mustMoveInline(), placedSize = this.placed.size - this.depth - this.$from.depth;
            let $from = this.$from, $to = this.close(moveInline < 0 ? this.$to : $from.doc.resolve(moveInline));
            if (!$to)
                return null;
            // If closing to `$to` succeeded, create a step
            let content = this.placed, openStart = $from.depth, openEnd = $to.depth;
            while (openStart && openEnd && content.childCount == 1) { // Normalize by dropping open parent nodes
                content = content.firstChild.content;
                openStart--;
                openEnd--;
            }
            let slice = new Slice(content, openStart, openEnd);
            if (moveInline > -1)
                return new ReplaceAroundStep($from.pos, moveInline, this.$to.pos, this.$to.end(), slice, placedSize);
            if (slice.size || $from.pos != this.$to.pos) // Don't generate no-op steps
                return new ReplaceStep($from.pos, $to.pos, slice);
            return null;
        }
        // Find a position on the start spine of `this.unplaced` that has
        // content that can be moved somewhere on the frontier. Returns two
        // depths, one for the slice and one for the frontier.
        findFittable() {
            // Only try wrapping nodes (pass 2) after finding a place without
            // wrapping failed.
            for (let pass = 1; pass <= 2; pass++) {
                for (let sliceDepth = this.unplaced.openStart; sliceDepth >= 0; sliceDepth--) {
                    let fragment, parent = null;
                    if (sliceDepth) {
                        parent = contentAt(this.unplaced.content, sliceDepth - 1).firstChild;
                        fragment = parent.content;
                    }
                    else {
                        fragment = this.unplaced.content;
                    }
                    let first = fragment.firstChild;
                    for (let frontierDepth = this.depth; frontierDepth >= 0; frontierDepth--) {
                        let { type, match } = this.frontier[frontierDepth], wrap, inject = null;
                        // In pass 1, if the next node matches, or there is no next
                        // node but the parents look compatible, we've found a
                        // place.
                        if (pass == 1 && (first ? match.matchType(first.type) || (inject = match.fillBefore(Fragment.from(first), false))
                            : parent && type.compatibleContent(parent.type)))
                            return { sliceDepth, frontierDepth, parent, inject };
                        // In pass 2, look for a set of wrapping nodes that make
                        // `first` fit here.
                        else if (pass == 2 && first && (wrap = match.findWrapping(first.type)))
                            return { sliceDepth, frontierDepth, parent, wrap };
                        // Don't continue looking further up if the parent node
                        // would fit here.
                        if (parent && match.matchType(parent.type))
                            break;
                    }
                }
            }
        }
        openMore() {
            let { content, openStart, openEnd } = this.unplaced;
            let inner = contentAt(content, openStart);
            if (!inner.childCount || inner.firstChild.isLeaf)
                return false;
            this.unplaced = new Slice(content, openStart + 1, Math.max(openEnd, inner.size + openStart >= content.size - openEnd ? openStart + 1 : 0));
            return true;
        }
        dropNode() {
            let { content, openStart, openEnd } = this.unplaced;
            let inner = contentAt(content, openStart);
            if (inner.childCount <= 1 && openStart > 0) {
                let openAtEnd = content.size - openStart <= openStart + inner.size;
                this.unplaced = new Slice(dropFromFragment(content, openStart - 1, 1), openStart - 1, openAtEnd ? openStart - 1 : openEnd);
            }
            else {
                this.unplaced = new Slice(dropFromFragment(content, openStart, 1), openStart, openEnd);
            }
        }
        // Move content from the unplaced slice at `sliceDepth` to the
        // frontier node at `frontierDepth`. Close that frontier node when
        // applicable.
        placeNodes({ sliceDepth, frontierDepth, parent, inject, wrap }) {
            while (this.depth > frontierDepth)
                this.closeFrontierNode();
            if (wrap)
                for (let i = 0; i < wrap.length; i++)
                    this.openFrontierNode(wrap[i]);
            let slice = this.unplaced, fragment = parent ? parent.content : slice.content;
            let openStart = slice.openStart - sliceDepth;
            let taken = 0, add = [];
            let { match, type } = this.frontier[frontierDepth];
            if (inject) {
                for (let i = 0; i < inject.childCount; i++)
                    add.push(inject.child(i));
                match = match.matchFragment(inject);
            }
            // Computes the amount of (end) open nodes at the end of the
            // fragment. When 0, the parent is open, but no more. When
            // negative, nothing is open.
            let openEndCount = (fragment.size + sliceDepth) - (slice.content.size - slice.openEnd);
            // Scan over the fragment, fitting as many child nodes as
            // possible.
            while (taken < fragment.childCount) {
                let next = fragment.child(taken), matches = match.matchType(next.type);
                if (!matches)
                    break;
                taken++;
                if (taken > 1 || openStart == 0 || next.content.size) { // Drop empty open nodes
                    match = matches;
                    add.push(closeNodeStart(next.mark(type.allowedMarks(next.marks)), taken == 1 ? openStart : 0, taken == fragment.childCount ? openEndCount : -1));
                }
            }
            let toEnd = taken == fragment.childCount;
            if (!toEnd)
                openEndCount = -1;
            this.placed = addToFragment(this.placed, frontierDepth, Fragment.from(add));
            this.frontier[frontierDepth].match = match;
            // If the parent types match, and the entire node was moved, and
            // it's not open, close this frontier node right away.
            if (toEnd && openEndCount < 0 && parent && parent.type == this.frontier[this.depth].type && this.frontier.length > 1)
                this.closeFrontierNode();
            // Add new frontier nodes for any open nodes at the end.
            for (let i = 0, cur = fragment; i < openEndCount; i++) {
                let node = cur.lastChild;
                this.frontier.push({ type: node.type, match: node.contentMatchAt(node.childCount) });
                cur = node.content;
            }
            // Update `this.unplaced`. Drop the entire node from which we
            // placed it we got to its end, otherwise just drop the placed
            // nodes.
            this.unplaced = !toEnd ? new Slice(dropFromFragment(slice.content, sliceDepth, taken), slice.openStart, slice.openEnd)
                : sliceDepth == 0 ? Slice.empty
                    : new Slice(dropFromFragment(slice.content, sliceDepth - 1, 1), sliceDepth - 1, openEndCount < 0 ? slice.openEnd : sliceDepth - 1);
        }
        mustMoveInline() {
            if (!this.$to.parent.isTextblock)
                return -1;
            let top = this.frontier[this.depth], level;
            if (!top.type.isTextblock || !contentAfterFits(this.$to, this.$to.depth, top.type, top.match, false) ||
                (this.$to.depth == this.depth && (level = this.findCloseLevel(this.$to)) && level.depth == this.depth))
                return -1;
            let { depth } = this.$to, after = this.$to.after(depth);
            while (depth > 1 && after == this.$to.end(--depth))
                ++after;
            return after;
        }
        findCloseLevel($to) {
            scan: for (let i = Math.min(this.depth, $to.depth); i >= 0; i--) {
                let { match, type } = this.frontier[i];
                let dropInner = i < $to.depth && $to.end(i + 1) == $to.pos + ($to.depth - (i + 1));
                let fit = contentAfterFits($to, i, type, match, dropInner);
                if (!fit)
                    continue;
                for (let d = i - 1; d >= 0; d--) {
                    let { match, type } = this.frontier[d];
                    let matches = contentAfterFits($to, d, type, match, true);
                    if (!matches || matches.childCount)
                        continue scan;
                }
                return { depth: i, fit, move: dropInner ? $to.doc.resolve($to.after(i + 1)) : $to };
            }
        }
        close($to) {
            let close = this.findCloseLevel($to);
            if (!close)
                return null;
            while (this.depth > close.depth)
                this.closeFrontierNode();
            if (close.fit.childCount)
                this.placed = addToFragment(this.placed, close.depth, close.fit);
            $to = close.move;
            for (let d = close.depth + 1; d <= $to.depth; d++) {
                let node = $to.node(d), add = node.type.contentMatch.fillBefore(node.content, true, $to.index(d));
                this.openFrontierNode(node.type, node.attrs, add);
            }
            return $to;
        }
        openFrontierNode(type, attrs = null, content) {
            let top = this.frontier[this.depth];
            top.match = top.match.matchType(type);
            this.placed = addToFragment(this.placed, this.depth, Fragment.from(type.create(attrs, content)));
            this.frontier.push({ type, match: type.contentMatch });
        }
        closeFrontierNode() {
            let open = this.frontier.pop();
            let add = open.match.fillBefore(Fragment.empty, true);
            if (add.childCount)
                this.placed = addToFragment(this.placed, this.frontier.length, add);
        }
    }
    function dropFromFragment(fragment, depth, count) {
        if (depth == 0)
            return fragment.cutByIndex(count, fragment.childCount);
        return fragment.replaceChild(0, fragment.firstChild.copy(dropFromFragment(fragment.firstChild.content, depth - 1, count)));
    }
    function addToFragment(fragment, depth, content) {
        if (depth == 0)
            return fragment.append(content);
        return fragment.replaceChild(fragment.childCount - 1, fragment.lastChild.copy(addToFragment(fragment.lastChild.content, depth - 1, content)));
    }
    function contentAt(fragment, depth) {
        for (let i = 0; i < depth; i++)
            fragment = fragment.firstChild.content;
        return fragment;
    }
    function closeNodeStart(node, openStart, openEnd) {
        if (openStart <= 0)
            return node;
        let frag = node.content;
        if (openStart > 1)
            frag = frag.replaceChild(0, closeNodeStart(frag.firstChild, openStart - 1, frag.childCount == 1 ? openEnd - 1 : 0));
        if (openStart > 0) {
            frag = node.type.contentMatch.fillBefore(frag).append(frag);
            if (openEnd <= 0)
                frag = frag.append(node.type.contentMatch.matchFragment(frag).fillBefore(Fragment.empty, true));
        }
        return node.copy(frag);
    }
    function contentAfterFits($to, depth, type, match, open) {
        let node = $to.node(depth), index = open ? $to.indexAfter(depth) : $to.index(depth);
        if (index == node.childCount && !type.compatibleContent(node.type))
            return null;
        let fit = match.fillBefore(node.content, true, index);
        return fit && !invalidMarks(type, node.content, index) ? fit : null;
    }
    function invalidMarks(type, fragment, start) {
        for (let i = start; i < fragment.childCount; i++)
            if (!type.allowsMarks(fragment.child(i).marks))
                return true;
        return false;
    }
    function definesContent(type) {
        return type.spec.defining || type.spec.definingForContent;
    }
    function replaceRange(tr, from, to, slice) {
        if (!slice.size)
            return tr.deleteRange(from, to);
        let $from = tr.doc.resolve(from), $to = tr.doc.resolve(to);
        if (fitsTrivially($from, $to, slice))
            return tr.step(new ReplaceStep(from, to, slice));
        let targetDepths = coveredDepths($from, tr.doc.resolve(to));
        // Can't replace the whole document, so remove 0 if it's present
        if (targetDepths[targetDepths.length - 1] == 0)
            targetDepths.pop();
        // Negative numbers represent not expansion over the whole node at
        // that depth, but replacing from $from.before(-D) to $to.pos.
        let preferredTarget = -($from.depth + 1);
        targetDepths.unshift(preferredTarget);
        // This loop picks a preferred target depth, if one of the covering
        // depths is not outside of a defining node, and adds negative
        // depths for any depth that has $from at its start and does not
        // cross a defining node.
        for (let d = $from.depth, pos = $from.pos - 1; d > 0; d--, pos--) {
            let spec = $from.node(d).type.spec;
            if (spec.defining || spec.definingAsContext || spec.isolating)
                break;
            if (targetDepths.indexOf(d) > -1)
                preferredTarget = d;
            else if ($from.before(d) == pos)
                targetDepths.splice(1, 0, -d);
        }
        // Try to fit each possible depth of the slice into each possible
        // target depth, starting with the preferred depths.
        let preferredTargetIndex = targetDepths.indexOf(preferredTarget);
        let leftNodes = [], preferredDepth = slice.openStart;
        for (let content = slice.content, i = 0;; i++) {
            let node = content.firstChild;
            leftNodes.push(node);
            if (i == slice.openStart)
                break;
            content = node.content;
        }
        // Back up preferredDepth to cover defining textblocks directly
        // above it, possibly skipping a non-defining textblock.
        for (let d = preferredDepth - 1; d >= 0; d--) {
            let type = leftNodes[d].type, def = definesContent(type);
            if (def && $from.node(preferredTargetIndex).type != type)
                preferredDepth = d;
            else if (def || !type.isTextblock)
                break;
        }
        for (let j = slice.openStart; j >= 0; j--) {
            let openDepth = (j + preferredDepth + 1) % (slice.openStart + 1);
            let insert = leftNodes[openDepth];
            if (!insert)
                continue;
            for (let i = 0; i < targetDepths.length; i++) {
                // Loop over possible expansion levels, starting with the
                // preferred one
                let targetDepth = targetDepths[(i + preferredTargetIndex) % targetDepths.length], expand = true;
                if (targetDepth < 0) {
                    expand = false;
                    targetDepth = -targetDepth;
                }
                let parent = $from.node(targetDepth - 1), index = $from.index(targetDepth - 1);
                if (parent.canReplaceWith(index, index, insert.type, insert.marks))
                    return tr.replace($from.before(targetDepth), expand ? $to.after(targetDepth) : to, new Slice(closeFragment(slice.content, 0, slice.openStart, openDepth), openDepth, slice.openEnd));
            }
        }
        let startSteps = tr.steps.length;
        for (let i = targetDepths.length - 1; i >= 0; i--) {
            tr.replace(from, to, slice);
            if (tr.steps.length > startSteps)
                break;
            let depth = targetDepths[i];
            if (depth < 0)
                continue;
            from = $from.before(depth);
            to = $to.after(depth);
        }
    }
    function closeFragment(fragment, depth, oldOpen, newOpen, parent) {
        if (depth < oldOpen) {
            let first = fragment.firstChild;
            fragment = fragment.replaceChild(0, first.copy(closeFragment(first.content, depth + 1, oldOpen, newOpen, first)));
        }
        if (depth > newOpen) {
            let match = parent.contentMatchAt(0);
            let start = match.fillBefore(fragment).append(fragment);
            fragment = start.append(match.matchFragment(start).fillBefore(Fragment.empty, true));
        }
        return fragment;
    }
    function replaceRangeWith(tr, from, to, node) {
        if (!node.isInline && from == to && tr.doc.resolve(from).parent.content.size) {
            let point = insertPoint(tr.doc, from, node.type);
            if (point != null)
                from = to = point;
        }
        tr.replaceRange(from, to, new Slice(Fragment.from(node), 0, 0));
    }
    function deleteRange(tr, from, to) {
        let $from = tr.doc.resolve(from), $to = tr.doc.resolve(to);
        let covered = coveredDepths($from, $to);
        for (let i = 0; i < covered.length; i++) {
            let depth = covered[i], last = i == covered.length - 1;
            if ((last && depth == 0) || $from.node(depth).type.contentMatch.validEnd)
                return tr.delete($from.start(depth), $to.end(depth));
            if (depth > 0 && (last || $from.node(depth - 1).canReplace($from.index(depth - 1), $to.indexAfter(depth - 1))))
                return tr.delete($from.before(depth), $to.after(depth));
        }
        for (let d = 1; d <= $from.depth && d <= $to.depth; d++) {
            if (from - $from.start(d) == $from.depth - d && to > $from.end(d) && $to.end(d) - to != $to.depth - d)
                return tr.delete($from.before(d), to);
        }
        tr.delete(from, to);
    }
    // Returns an array of all depths for which $from - $to spans the
    // whole content of the nodes at that depth.
    function coveredDepths($from, $to) {
        let result = [], minDepth = Math.min($from.depth, $to.depth);
        for (let d = minDepth; d >= 0; d--) {
            let start = $from.start(d);
            if (start < $from.pos - ($from.depth - d) ||
                $to.end(d) > $to.pos + ($to.depth - d) ||
                $from.node(d).type.spec.isolating ||
                $to.node(d).type.spec.isolating)
                break;
            if (start == $to.start(d) ||
                (d == $from.depth && d == $to.depth && $from.parent.inlineContent && $to.parent.inlineContent &&
                    d && $to.start(d - 1) == start - 1))
                result.push(d);
        }
        return result;
    }

    /**
    Update an attribute in a specific node.
    */
    class AttrStep extends Step {
        /**
        Construct an attribute step.
        */
        constructor(
        /**
        The position of the target node.
        */
        pos, 
        /**
        The attribute to set.
        */
        attr, 
        // The attribute's new value.
        value) {
            super();
            this.pos = pos;
            this.attr = attr;
            this.value = value;
        }
        apply(doc) {
            let node = doc.nodeAt(this.pos);
            if (!node)
                return StepResult.fail("No node at attribute step's position");
            let attrs = Object.create(null);
            for (let name in node.attrs)
                attrs[name] = node.attrs[name];
            attrs[this.attr] = this.value;
            let updated = node.type.create(attrs, null, node.marks);
            return StepResult.fromReplace(doc, this.pos, this.pos + 1, new Slice(Fragment.from(updated), 0, node.isLeaf ? 0 : 1));
        }
        getMap() {
            return StepMap.empty;
        }
        invert(doc) {
            return new AttrStep(this.pos, this.attr, doc.nodeAt(this.pos).attrs[this.attr]);
        }
        map(mapping) {
            let pos = mapping.mapResult(this.pos, 1);
            return pos.deletedAfter ? null : new AttrStep(pos.pos, this.attr, this.value);
        }
        toJSON() {
            return { stepType: "attr", pos: this.pos, attr: this.attr, value: this.value };
        }
        static fromJSON(schema, json) {
            if (typeof json.pos != "number" || typeof json.attr != "string")
                throw new RangeError("Invalid input for AttrStep.fromJSON");
            return new AttrStep(json.pos, json.attr, json.value);
        }
    }
    Step.jsonID("attr", AttrStep);

    /**
    @internal
    */
    let TransformError = class extends Error {
    };
    TransformError = function TransformError(message) {
        let err = Error.call(this, message);
        err.__proto__ = TransformError.prototype;
        return err;
    };
    TransformError.prototype = Object.create(Error.prototype);
    TransformError.prototype.constructor = TransformError;
    TransformError.prototype.name = "TransformError";
    /**
    Abstraction to build up and track an array of
    [steps](https://prosemirror.net/docs/ref/#transform.Step) representing a document transformation.

    Most transforming methods return the `Transform` object itself, so
    that they can be chained.
    */
    class Transform {
        /**
        Create a transform that starts with the given document.
        */
        constructor(
        /**
        The current document (the result of applying the steps in the
        transform).
        */
        doc) {
            this.doc = doc;
            /**
            The steps in this transform.
            */
            this.steps = [];
            /**
            The documents before each of the steps.
            */
            this.docs = [];
            /**
            A mapping with the maps for each of the steps in this transform.
            */
            this.mapping = new Mapping;
        }
        /**
        The starting document.
        */
        get before() { return this.docs.length ? this.docs[0] : this.doc; }
        /**
        Apply a new step in this transform, saving the result. Throws an
        error when the step fails.
        */
        step(step) {
            let result = this.maybeStep(step);
            if (result.failed)
                throw new TransformError(result.failed);
            return this;
        }
        /**
        Try to apply a step in this transformation, ignoring it if it
        fails. Returns the step result.
        */
        maybeStep(step) {
            let result = step.apply(this.doc);
            if (!result.failed)
                this.addStep(step, result.doc);
            return result;
        }
        /**
        True when the document has been changed (when there are any
        steps).
        */
        get docChanged() {
            return this.steps.length > 0;
        }
        /**
        @internal
        */
        addStep(step, doc) {
            this.docs.push(this.doc);
            this.steps.push(step);
            this.mapping.appendMap(step.getMap());
            this.doc = doc;
        }
        /**
        Replace the part of the document between `from` and `to` with the
        given `slice`.
        */
        replace(from, to = from, slice = Slice.empty) {
            let step = replaceStep(this.doc, from, to, slice);
            if (step)
                this.step(step);
            return this;
        }
        /**
        Replace the given range with the given content, which may be a
        fragment, node, or array of nodes.
        */
        replaceWith(from, to, content) {
            return this.replace(from, to, new Slice(Fragment.from(content), 0, 0));
        }
        /**
        Delete the content between the given positions.
        */
        delete(from, to) {
            return this.replace(from, to, Slice.empty);
        }
        /**
        Insert the given content at the given position.
        */
        insert(pos, content) {
            return this.replaceWith(pos, pos, content);
        }
        /**
        Replace a range of the document with a given slice, using
        `from`, `to`, and the slice's
        [`openStart`](https://prosemirror.net/docs/ref/#model.Slice.openStart) property as hints, rather
        than fixed start and end points. This method may grow the
        replaced area or close open nodes in the slice in order to get a
        fit that is more in line with WYSIWYG expectations, by dropping
        fully covered parent nodes of the replaced region when they are
        marked [non-defining as
        context](https://prosemirror.net/docs/ref/#model.NodeSpec.definingAsContext), or including an
        open parent node from the slice that _is_ marked as [defining
        its content](https://prosemirror.net/docs/ref/#model.NodeSpec.definingForContent).
        
        This is the method, for example, to handle paste. The similar
        [`replace`](https://prosemirror.net/docs/ref/#transform.Transform.replace) method is a more
        primitive tool which will _not_ move the start and end of its given
        range, and is useful in situations where you need more precise
        control over what happens.
        */
        replaceRange(from, to, slice) {
            replaceRange(this, from, to, slice);
            return this;
        }
        /**
        Replace the given range with a node, but use `from` and `to` as
        hints, rather than precise positions. When from and to are the same
        and are at the start or end of a parent node in which the given
        node doesn't fit, this method may _move_ them out towards a parent
        that does allow the given node to be placed. When the given range
        completely covers a parent node, this method may completely replace
        that parent node.
        */
        replaceRangeWith(from, to, node) {
            replaceRangeWith(this, from, to, node);
            return this;
        }
        /**
        Delete the given range, expanding it to cover fully covered
        parent nodes until a valid replace is found.
        */
        deleteRange(from, to) {
            deleteRange(this, from, to);
            return this;
        }
        /**
        Split the content in the given range off from its parent, if there
        is sibling content before or after it, and move it up the tree to
        the depth specified by `target`. You'll probably want to use
        [`liftTarget`](https://prosemirror.net/docs/ref/#transform.liftTarget) to compute `target`, to make
        sure the lift is valid.
        */
        lift(range, target) {
            lift(this, range, target);
            return this;
        }
        /**
        Join the blocks around the given position. If depth is 2, their
        last and first siblings are also joined, and so on.
        */
        join(pos, depth = 1) {
            join(this, pos, depth);
            return this;
        }
        /**
        Wrap the given [range](https://prosemirror.net/docs/ref/#model.NodeRange) in the given set of wrappers.
        The wrappers are assumed to be valid in this position, and should
        probably be computed with [`findWrapping`](https://prosemirror.net/docs/ref/#transform.findWrapping).
        */
        wrap(range, wrappers) {
            wrap(this, range, wrappers);
            return this;
        }
        /**
        Set the type of all textblocks (partly) between `from` and `to` to
        the given node type with the given attributes.
        */
        setBlockType(from, to = from, type, attrs = null) {
            setBlockType(this, from, to, type, attrs);
            return this;
        }
        /**
        Change the type, attributes, and/or marks of the node at `pos`.
        When `type` isn't given, the existing node type is preserved,
        */
        setNodeMarkup(pos, type, attrs = null, marks = []) {
            setNodeMarkup(this, pos, type, attrs, marks);
            return this;
        }
        /**
        Set a single attribute on a given node to a new value.
        */
        setNodeAttribute(pos, attr, value) {
            this.step(new AttrStep(pos, attr, value));
            return this;
        }
        /**
        Add a mark to the node at position `pos`.
        */
        addNodeMark(pos, mark) {
            this.step(new AddNodeMarkStep(pos, mark));
            return this;
        }
        /**
        Remove a mark (or a mark of the given type) from the node at
        position `pos`.
        */
        removeNodeMark(pos, mark) {
            if (!(mark instanceof Mark)) {
                let node = this.doc.nodeAt(pos);
                if (!node)
                    throw new RangeError("No node at position " + pos);
                mark = mark.isInSet(node.marks);
                if (!mark)
                    return this;
            }
            this.step(new RemoveNodeMarkStep(pos, mark));
            return this;
        }
        /**
        Split the node at the given position, and optionally, if `depth` is
        greater than one, any number of nodes above that. By default, the
        parts split off will inherit the node type of the original node.
        This can be changed by passing an array of types and attributes to
        use after the split.
        */
        split(pos, depth = 1, typesAfter) {
            split(this, pos, depth, typesAfter);
            return this;
        }
        /**
        Add the given mark to the inline content between `from` and `to`.
        */
        addMark(from, to, mark) {
            addMark(this, from, to, mark);
            return this;
        }
        /**
        Remove marks from inline nodes between `from` and `to`. When
        `mark` is a single mark, remove precisely that mark. When it is
        a mark type, remove all marks of that type. When it is null,
        remove all marks of any type.
        */
        removeMark(from, to, mark) {
            removeMark(this, from, to, mark);
            return this;
        }
        /**
        Removes all marks and nodes from the content of the node at
        `pos` that don't match the given new parent node type. Accepts
        an optional starting [content match](https://prosemirror.net/docs/ref/#model.ContentMatch) as
        third argument.
        */
        clearIncompatible(pos, parentType, match) {
            clearIncompatible(this, pos, parentType, match);
            return this;
        }
    }

    const classesById = Object.create(null);
    /**
    Superclass for editor selections. Every selection type should
    extend this. Should not be instantiated directly.
    */
    class Selection {
        /**
        Initialize a selection with the head and anchor and ranges. If no
        ranges are given, constructs a single range across `$anchor` and
        `$head`.
        */
        constructor(
        /**
        The resolved anchor of the selection (the side that stays in
        place when the selection is modified).
        */
        $anchor, 
        /**
        The resolved head of the selection (the side that moves when
        the selection is modified).
        */
        $head, ranges) {
            this.$anchor = $anchor;
            this.$head = $head;
            this.ranges = ranges || [new SelectionRange($anchor.min($head), $anchor.max($head))];
        }
        /**
        The selection's anchor, as an unresolved position.
        */
        get anchor() { return this.$anchor.pos; }
        /**
        The selection's head.
        */
        get head() { return this.$head.pos; }
        /**
        The lower bound of the selection's main range.
        */
        get from() { return this.$from.pos; }
        /**
        The upper bound of the selection's main range.
        */
        get to() { return this.$to.pos; }
        /**
        The resolved lower  bound of the selection's main range.
        */
        get $from() {
            return this.ranges[0].$from;
        }
        /**
        The resolved upper bound of the selection's main range.
        */
        get $to() {
            return this.ranges[0].$to;
        }
        /**
        Indicates whether the selection contains any content.
        */
        get empty() {
            let ranges = this.ranges;
            for (let i = 0; i < ranges.length; i++)
                if (ranges[i].$from.pos != ranges[i].$to.pos)
                    return false;
            return true;
        }
        /**
        Get the content of this selection as a slice.
        */
        content() {
            return this.$from.doc.slice(this.from, this.to, true);
        }
        /**
        Replace the selection with a slice or, if no slice is given,
        delete the selection. Will append to the given transaction.
        */
        replace(tr, content = Slice.empty) {
            // Put the new selection at the position after the inserted
            // content. When that ended in an inline node, search backwards,
            // to get the position after that node. If not, search forward.
            let lastNode = content.content.lastChild, lastParent = null;
            for (let i = 0; i < content.openEnd; i++) {
                lastParent = lastNode;
                lastNode = lastNode.lastChild;
            }
            let mapFrom = tr.steps.length, ranges = this.ranges;
            for (let i = 0; i < ranges.length; i++) {
                let { $from, $to } = ranges[i], mapping = tr.mapping.slice(mapFrom);
                tr.replaceRange(mapping.map($from.pos), mapping.map($to.pos), i ? Slice.empty : content);
                if (i == 0)
                    selectionToInsertionEnd(tr, mapFrom, (lastNode ? lastNode.isInline : lastParent && lastParent.isTextblock) ? -1 : 1);
            }
        }
        /**
        Replace the selection with the given node, appending the changes
        to the given transaction.
        */
        replaceWith(tr, node) {
            let mapFrom = tr.steps.length, ranges = this.ranges;
            for (let i = 0; i < ranges.length; i++) {
                let { $from, $to } = ranges[i], mapping = tr.mapping.slice(mapFrom);
                let from = mapping.map($from.pos), to = mapping.map($to.pos);
                if (i) {
                    tr.deleteRange(from, to);
                }
                else {
                    tr.replaceRangeWith(from, to, node);
                    selectionToInsertionEnd(tr, mapFrom, node.isInline ? -1 : 1);
                }
            }
        }
        /**
        Find a valid cursor or leaf node selection starting at the given
        position and searching back if `dir` is negative, and forward if
        positive. When `textOnly` is true, only consider cursor
        selections. Will return null when no valid selection position is
        found.
        */
        static findFrom($pos, dir, textOnly = false) {
            let inner = $pos.parent.inlineContent ? new TextSelection($pos)
                : findSelectionIn($pos.node(0), $pos.parent, $pos.pos, $pos.index(), dir, textOnly);
            if (inner)
                return inner;
            for (let depth = $pos.depth - 1; depth >= 0; depth--) {
                let found = dir < 0
                    ? findSelectionIn($pos.node(0), $pos.node(depth), $pos.before(depth + 1), $pos.index(depth), dir, textOnly)
                    : findSelectionIn($pos.node(0), $pos.node(depth), $pos.after(depth + 1), $pos.index(depth) + 1, dir, textOnly);
                if (found)
                    return found;
            }
            return null;
        }
        /**
        Find a valid cursor or leaf node selection near the given
        position. Searches forward first by default, but if `bias` is
        negative, it will search backwards first.
        */
        static near($pos, bias = 1) {
            return this.findFrom($pos, bias) || this.findFrom($pos, -bias) || new AllSelection($pos.node(0));
        }
        /**
        Find the cursor or leaf node selection closest to the start of
        the given document. Will return an
        [`AllSelection`](https://prosemirror.net/docs/ref/#state.AllSelection) if no valid position
        exists.
        */
        static atStart(doc) {
            return findSelectionIn(doc, doc, 0, 0, 1) || new AllSelection(doc);
        }
        /**
        Find the cursor or leaf node selection closest to the end of the
        given document.
        */
        static atEnd(doc) {
            return findSelectionIn(doc, doc, doc.content.size, doc.childCount, -1) || new AllSelection(doc);
        }
        /**
        Deserialize the JSON representation of a selection. Must be
        implemented for custom classes (as a static class method).
        */
        static fromJSON(doc, json) {
            if (!json || !json.type)
                throw new RangeError("Invalid input for Selection.fromJSON");
            let cls = classesById[json.type];
            if (!cls)
                throw new RangeError(`No selection type ${json.type} defined`);
            return cls.fromJSON(doc, json);
        }
        /**
        To be able to deserialize selections from JSON, custom selection
        classes must register themselves with an ID string, so that they
        can be disambiguated. Try to pick something that's unlikely to
        clash with classes from other modules.
        */
        static jsonID(id, selectionClass) {
            if (id in classesById)
                throw new RangeError("Duplicate use of selection JSON ID " + id);
            classesById[id] = selectionClass;
            selectionClass.prototype.jsonID = id;
            return selectionClass;
        }
        /**
        Get a [bookmark](https://prosemirror.net/docs/ref/#state.SelectionBookmark) for this selection,
        which is a value that can be mapped without having access to a
        current document, and later resolved to a real selection for a
        given document again. (This is used mostly by the history to
        track and restore old selections.) The default implementation of
        this method just converts the selection to a text selection and
        returns the bookmark for that.
        */
        getBookmark() {
            return TextSelection.between(this.$anchor, this.$head).getBookmark();
        }
    }
    Selection.prototype.visible = true;
    /**
    Represents a selected range in a document.
    */
    class SelectionRange {
        /**
        Create a range.
        */
        constructor(
        /**
        The lower bound of the range.
        */
        $from, 
        /**
        The upper bound of the range.
        */
        $to) {
            this.$from = $from;
            this.$to = $to;
        }
    }
    let warnedAboutTextSelection = false;
    function checkTextSelection($pos) {
        if (!warnedAboutTextSelection && !$pos.parent.inlineContent) {
            warnedAboutTextSelection = true;
            console["warn"]("TextSelection endpoint not pointing into a node with inline content (" + $pos.parent.type.name + ")");
        }
    }
    /**
    A text selection represents a classical editor selection, with a
    head (the moving side) and anchor (immobile side), both of which
    point into textblock nodes. It can be empty (a regular cursor
    position).
    */
    class TextSelection extends Selection {
        /**
        Construct a text selection between the given points.
        */
        constructor($anchor, $head = $anchor) {
            checkTextSelection($anchor);
            checkTextSelection($head);
            super($anchor, $head);
        }
        /**
        Returns a resolved position if this is a cursor selection (an
        empty text selection), and null otherwise.
        */
        get $cursor() { return this.$anchor.pos == this.$head.pos ? this.$head : null; }
        map(doc, mapping) {
            let $head = doc.resolve(mapping.map(this.head));
            if (!$head.parent.inlineContent)
                return Selection.near($head);
            let $anchor = doc.resolve(mapping.map(this.anchor));
            return new TextSelection($anchor.parent.inlineContent ? $anchor : $head, $head);
        }
        replace(tr, content = Slice.empty) {
            super.replace(tr, content);
            if (content == Slice.empty) {
                let marks = this.$from.marksAcross(this.$to);
                if (marks)
                    tr.ensureMarks(marks);
            }
        }
        eq(other) {
            return other instanceof TextSelection && other.anchor == this.anchor && other.head == this.head;
        }
        getBookmark() {
            return new TextBookmark(this.anchor, this.head);
        }
        toJSON() {
            return { type: "text", anchor: this.anchor, head: this.head };
        }
        /**
        @internal
        */
        static fromJSON(doc, json) {
            if (typeof json.anchor != "number" || typeof json.head != "number")
                throw new RangeError("Invalid input for TextSelection.fromJSON");
            return new TextSelection(doc.resolve(json.anchor), doc.resolve(json.head));
        }
        /**
        Create a text selection from non-resolved positions.
        */
        static create(doc, anchor, head = anchor) {
            let $anchor = doc.resolve(anchor);
            return new this($anchor, head == anchor ? $anchor : doc.resolve(head));
        }
        /**
        Return a text selection that spans the given positions or, if
        they aren't text positions, find a text selection near them.
        `bias` determines whether the method searches forward (default)
        or backwards (negative number) first. Will fall back to calling
        [`Selection.near`](https://prosemirror.net/docs/ref/#state.Selection^near) when the document
        doesn't contain a valid text position.
        */
        static between($anchor, $head, bias) {
            let dPos = $anchor.pos - $head.pos;
            if (!bias || dPos)
                bias = dPos >= 0 ? 1 : -1;
            if (!$head.parent.inlineContent) {
                let found = Selection.findFrom($head, bias, true) || Selection.findFrom($head, -bias, true);
                if (found)
                    $head = found.$head;
                else
                    return Selection.near($head, bias);
            }
            if (!$anchor.parent.inlineContent) {
                if (dPos == 0) {
                    $anchor = $head;
                }
                else {
                    $anchor = (Selection.findFrom($anchor, -bias, true) || Selection.findFrom($anchor, bias, true)).$anchor;
                    if (($anchor.pos < $head.pos) != (dPos < 0))
                        $anchor = $head;
                }
            }
            return new TextSelection($anchor, $head);
        }
    }
    Selection.jsonID("text", TextSelection);
    class TextBookmark {
        constructor(anchor, head) {
            this.anchor = anchor;
            this.head = head;
        }
        map(mapping) {
            return new TextBookmark(mapping.map(this.anchor), mapping.map(this.head));
        }
        resolve(doc) {
            return TextSelection.between(doc.resolve(this.anchor), doc.resolve(this.head));
        }
    }
    /**
    A node selection is a selection that points at a single node. All
    nodes marked [selectable](https://prosemirror.net/docs/ref/#model.NodeSpec.selectable) can be the
    target of a node selection. In such a selection, `from` and `to`
    point directly before and after the selected node, `anchor` equals
    `from`, and `head` equals `to`..
    */
    class NodeSelection extends Selection {
        /**
        Create a node selection. Does not verify the validity of its
        argument.
        */
        constructor($pos) {
            let node = $pos.nodeAfter;
            let $end = $pos.node(0).resolve($pos.pos + node.nodeSize);
            super($pos, $end);
            this.node = node;
        }
        map(doc, mapping) {
            let { deleted, pos } = mapping.mapResult(this.anchor);
            let $pos = doc.resolve(pos);
            if (deleted)
                return Selection.near($pos);
            return new NodeSelection($pos);
        }
        content() {
            return new Slice(Fragment.from(this.node), 0, 0);
        }
        eq(other) {
            return other instanceof NodeSelection && other.anchor == this.anchor;
        }
        toJSON() {
            return { type: "node", anchor: this.anchor };
        }
        getBookmark() { return new NodeBookmark(this.anchor); }
        /**
        @internal
        */
        static fromJSON(doc, json) {
            if (typeof json.anchor != "number")
                throw new RangeError("Invalid input for NodeSelection.fromJSON");
            return new NodeSelection(doc.resolve(json.anchor));
        }
        /**
        Create a node selection from non-resolved positions.
        */
        static create(doc, from) {
            return new NodeSelection(doc.resolve(from));
        }
        /**
        Determines whether the given node may be selected as a node
        selection.
        */
        static isSelectable(node) {
            return !node.isText && node.type.spec.selectable !== false;
        }
    }
    NodeSelection.prototype.visible = false;
    Selection.jsonID("node", NodeSelection);
    class NodeBookmark {
        constructor(anchor) {
            this.anchor = anchor;
        }
        map(mapping) {
            let { deleted, pos } = mapping.mapResult(this.anchor);
            return deleted ? new TextBookmark(pos, pos) : new NodeBookmark(pos);
        }
        resolve(doc) {
            let $pos = doc.resolve(this.anchor), node = $pos.nodeAfter;
            if (node && NodeSelection.isSelectable(node))
                return new NodeSelection($pos);
            return Selection.near($pos);
        }
    }
    /**
    A selection type that represents selecting the whole document
    (which can not necessarily be expressed with a text selection, when
    there are for example leaf block nodes at the start or end of the
    document).
    */
    class AllSelection extends Selection {
        /**
        Create an all-selection over the given document.
        */
        constructor(doc) {
            super(doc.resolve(0), doc.resolve(doc.content.size));
        }
        replace(tr, content = Slice.empty) {
            if (content == Slice.empty) {
                tr.delete(0, tr.doc.content.size);
                let sel = Selection.atStart(tr.doc);
                if (!sel.eq(tr.selection))
                    tr.setSelection(sel);
            }
            else {
                super.replace(tr, content);
            }
        }
        toJSON() { return { type: "all" }; }
        /**
        @internal
        */
        static fromJSON(doc) { return new AllSelection(doc); }
        map(doc) { return new AllSelection(doc); }
        eq(other) { return other instanceof AllSelection; }
        getBookmark() { return AllBookmark; }
    }
    Selection.jsonID("all", AllSelection);
    const AllBookmark = {
        map() { return this; },
        resolve(doc) { return new AllSelection(doc); }
    };
    // FIXME we'll need some awareness of text direction when scanning for selections
    // Try to find a selection inside the given node. `pos` points at the
    // position where the search starts. When `text` is true, only return
    // text selections.
    function findSelectionIn(doc, node, pos, index, dir, text = false) {
        if (node.inlineContent)
            return TextSelection.create(doc, pos);
        for (let i = index - (dir > 0 ? 0 : 1); dir > 0 ? i < node.childCount : i >= 0; i += dir) {
            let child = node.child(i);
            if (!child.isAtom) {
                let inner = findSelectionIn(doc, child, pos + dir, dir < 0 ? child.childCount : 0, dir, text);
                if (inner)
                    return inner;
            }
            else if (!text && NodeSelection.isSelectable(child)) {
                return NodeSelection.create(doc, pos - (dir < 0 ? child.nodeSize : 0));
            }
            pos += child.nodeSize * dir;
        }
        return null;
    }
    function selectionToInsertionEnd(tr, startLen, bias) {
        let last = tr.steps.length - 1;
        if (last < startLen)
            return;
        let step = tr.steps[last];
        if (!(step instanceof ReplaceStep || step instanceof ReplaceAroundStep))
            return;
        let map = tr.mapping.maps[last], end;
        map.forEach((_from, _to, _newFrom, newTo) => { if (end == null)
            end = newTo; });
        tr.setSelection(Selection.near(tr.doc.resolve(end), bias));
    }

    const UPDATED_SEL = 1, UPDATED_MARKS = 2, UPDATED_SCROLL = 4;
    /**
    An editor state transaction, which can be applied to a state to
    create an updated state. Use
    [`EditorState.tr`](https://prosemirror.net/docs/ref/#state.EditorState.tr) to create an instance.

    Transactions track changes to the document (they are a subclass of
    [`Transform`](https://prosemirror.net/docs/ref/#transform.Transform)), but also other state changes,
    like selection updates and adjustments of the set of [stored
    marks](https://prosemirror.net/docs/ref/#state.EditorState.storedMarks). In addition, you can store
    metadata properties in a transaction, which are extra pieces of
    information that client code or plugins can use to describe what a
    transaction represents, so that they can update their [own
    state](https://prosemirror.net/docs/ref/#state.StateField) accordingly.

    The [editor view](https://prosemirror.net/docs/ref/#view.EditorView) uses a few metadata properties:
    it will attach a property `"pointer"` with the value `true` to
    selection transactions directly caused by mouse or touch input, and
    a `"uiEvent"` property of that may be `"paste"`, `"cut"`, or `"drop"`.
    */
    class Transaction extends Transform {
        /**
        @internal
        */
        constructor(state) {
            super(state.doc);
            // The step count for which the current selection is valid.
            this.curSelectionFor = 0;
            // Bitfield to track which aspects of the state were updated by
            // this transaction.
            this.updated = 0;
            // Object used to store metadata properties for the transaction.
            this.meta = Object.create(null);
            this.time = Date.now();
            this.curSelection = state.selection;
            this.storedMarks = state.storedMarks;
        }
        /**
        The transaction's current selection. This defaults to the editor
        selection [mapped](https://prosemirror.net/docs/ref/#state.Selection.map) through the steps in the
        transaction, but can be overwritten with
        [`setSelection`](https://prosemirror.net/docs/ref/#state.Transaction.setSelection).
        */
        get selection() {
            if (this.curSelectionFor < this.steps.length) {
                this.curSelection = this.curSelection.map(this.doc, this.mapping.slice(this.curSelectionFor));
                this.curSelectionFor = this.steps.length;
            }
            return this.curSelection;
        }
        /**
        Update the transaction's current selection. Will determine the
        selection that the editor gets when the transaction is applied.
        */
        setSelection(selection) {
            if (selection.$from.doc != this.doc)
                throw new RangeError("Selection passed to setSelection must point at the current document");
            this.curSelection = selection;
            this.curSelectionFor = this.steps.length;
            this.updated = (this.updated | UPDATED_SEL) & ~UPDATED_MARKS;
            this.storedMarks = null;
            return this;
        }
        /**
        Whether the selection was explicitly updated by this transaction.
        */
        get selectionSet() {
            return (this.updated & UPDATED_SEL) > 0;
        }
        /**
        Set the current stored marks.
        */
        setStoredMarks(marks) {
            this.storedMarks = marks;
            this.updated |= UPDATED_MARKS;
            return this;
        }
        /**
        Make sure the current stored marks or, if that is null, the marks
        at the selection, match the given set of marks. Does nothing if
        this is already the case.
        */
        ensureMarks(marks) {
            if (!Mark.sameSet(this.storedMarks || this.selection.$from.marks(), marks))
                this.setStoredMarks(marks);
            return this;
        }
        /**
        Add a mark to the set of stored marks.
        */
        addStoredMark(mark) {
            return this.ensureMarks(mark.addToSet(this.storedMarks || this.selection.$head.marks()));
        }
        /**
        Remove a mark or mark type from the set of stored marks.
        */
        removeStoredMark(mark) {
            return this.ensureMarks(mark.removeFromSet(this.storedMarks || this.selection.$head.marks()));
        }
        /**
        Whether the stored marks were explicitly set for this transaction.
        */
        get storedMarksSet() {
            return (this.updated & UPDATED_MARKS) > 0;
        }
        /**
        @internal
        */
        addStep(step, doc) {
            super.addStep(step, doc);
            this.updated = this.updated & ~UPDATED_MARKS;
            this.storedMarks = null;
        }
        /**
        Update the timestamp for the transaction.
        */
        setTime(time) {
            this.time = time;
            return this;
        }
        /**
        Replace the current selection with the given slice.
        */
        replaceSelection(slice) {
            this.selection.replace(this, slice);
            return this;
        }
        /**
        Replace the selection with the given node. When `inheritMarks` is
        true and the content is inline, it inherits the marks from the
        place where it is inserted.
        */
        replaceSelectionWith(node, inheritMarks = true) {
            let selection = this.selection;
            if (inheritMarks)
                node = node.mark(this.storedMarks || (selection.empty ? selection.$from.marks() : (selection.$from.marksAcross(selection.$to) || Mark.none)));
            selection.replaceWith(this, node);
            return this;
        }
        /**
        Delete the selection.
        */
        deleteSelection() {
            this.selection.replace(this);
            return this;
        }
        /**
        Replace the given range, or the selection if no range is given,
        with a text node containing the given string.
        */
        insertText(text, from, to) {
            let schema = this.doc.type.schema;
            if (from == null) {
                if (!text)
                    return this.deleteSelection();
                return this.replaceSelectionWith(schema.text(text), true);
            }
            else {
                if (to == null)
                    to = from;
                to = to == null ? from : to;
                if (!text)
                    return this.deleteRange(from, to);
                let marks = this.storedMarks;
                if (!marks) {
                    let $from = this.doc.resolve(from);
                    marks = to == from ? $from.marks() : $from.marksAcross(this.doc.resolve(to));
                }
                this.replaceRangeWith(from, to, schema.text(text, marks));
                if (!this.selection.empty)
                    this.setSelection(Selection.near(this.selection.$to));
                return this;
            }
        }
        /**
        Store a metadata property in this transaction, keyed either by
        name or by plugin.
        */
        setMeta(key, value) {
            this.meta[typeof key == "string" ? key : key.key] = value;
            return this;
        }
        /**
        Retrieve a metadata property for a given name or plugin.
        */
        getMeta(key) {
            return this.meta[typeof key == "string" ? key : key.key];
        }
        /**
        Returns true if this transaction doesn't contain any metadata,
        and can thus safely be extended.
        */
        get isGeneric() {
            for (let _ in this.meta)
                return false;
            return true;
        }
        /**
        Indicate that the editor should scroll the selection into view
        when updated to the state produced by this transaction.
        */
        scrollIntoView() {
            this.updated |= UPDATED_SCROLL;
            return this;
        }
        /**
        True when this transaction has had `scrollIntoView` called on it.
        */
        get scrolledIntoView() {
            return (this.updated & UPDATED_SCROLL) > 0;
        }
    }

    function bind$1(f, self) {
        return !self || !f ? f : f.bind(self);
    }
    class FieldDesc {
        constructor(name, desc, self) {
            this.name = name;
            this.init = bind$1(desc.init, self);
            this.apply = bind$1(desc.apply, self);
        }
    }
    const baseFields = [
        new FieldDesc("doc", {
            init(config) { return config.doc || config.schema.topNodeType.createAndFill(); },
            apply(tr) { return tr.doc; }
        }),
        new FieldDesc("selection", {
            init(config, instance) { return config.selection || Selection.atStart(instance.doc); },
            apply(tr) { return tr.selection; }
        }),
        new FieldDesc("storedMarks", {
            init(config) { return config.storedMarks || null; },
            apply(tr, _marks, _old, state) { return state.selection.$cursor ? tr.storedMarks : null; }
        }),
        new FieldDesc("scrollToSelection", {
            init() { return 0; },
            apply(tr, prev) { return tr.scrolledIntoView ? prev + 1 : prev; }
        })
    ];
    // Object wrapping the part of a state object that stays the same
    // across transactions. Stored in the state's `config` property.
    class Configuration {
        constructor(schema, plugins) {
            this.schema = schema;
            this.plugins = [];
            this.pluginsByKey = Object.create(null);
            this.fields = baseFields.slice();
            if (plugins)
                plugins.forEach(plugin => {
                    if (this.pluginsByKey[plugin.key])
                        throw new RangeError("Adding different instances of a keyed plugin (" + plugin.key + ")");
                    this.plugins.push(plugin);
                    this.pluginsByKey[plugin.key] = plugin;
                    if (plugin.spec.state)
                        this.fields.push(new FieldDesc(plugin.key, plugin.spec.state, plugin));
                });
        }
    }
    /**
    The state of a ProseMirror editor is represented by an object of
    this type. A state is a persistent data structure—it isn't
    updated, but rather a new state value is computed from an old one
    using the [`apply`](https://prosemirror.net/docs/ref/#state.EditorState.apply) method.

    A state holds a number of built-in fields, and plugins can
    [define](https://prosemirror.net/docs/ref/#state.PluginSpec.state) additional fields.
    */
    class EditorState {
        /**
        @internal
        */
        constructor(
        /**
        @internal
        */
        config) {
            this.config = config;
        }
        /**
        The schema of the state's document.
        */
        get schema() {
            return this.config.schema;
        }
        /**
        The plugins that are active in this state.
        */
        get plugins() {
            return this.config.plugins;
        }
        /**
        Apply the given transaction to produce a new state.
        */
        apply(tr) {
            return this.applyTransaction(tr).state;
        }
        /**
        @ignore
        */
        filterTransaction(tr, ignore = -1) {
            for (let i = 0; i < this.config.plugins.length; i++)
                if (i != ignore) {
                    let plugin = this.config.plugins[i];
                    if (plugin.spec.filterTransaction && !plugin.spec.filterTransaction.call(plugin, tr, this))
                        return false;
                }
            return true;
        }
        /**
        Verbose variant of [`apply`](https://prosemirror.net/docs/ref/#state.EditorState.apply) that
        returns the precise transactions that were applied (which might
        be influenced by the [transaction
        hooks](https://prosemirror.net/docs/ref/#state.PluginSpec.filterTransaction) of
        plugins) along with the new state.
        */
        applyTransaction(rootTr) {
            if (!this.filterTransaction(rootTr))
                return { state: this, transactions: [] };
            let trs = [rootTr], newState = this.applyInner(rootTr), seen = null;
            // This loop repeatedly gives plugins a chance to respond to
            // transactions as new transactions are added, making sure to only
            // pass the transactions the plugin did not see before.
            for (;;) {
                let haveNew = false;
                for (let i = 0; i < this.config.plugins.length; i++) {
                    let plugin = this.config.plugins[i];
                    if (plugin.spec.appendTransaction) {
                        let n = seen ? seen[i].n : 0, oldState = seen ? seen[i].state : this;
                        let tr = n < trs.length &&
                            plugin.spec.appendTransaction.call(plugin, n ? trs.slice(n) : trs, oldState, newState);
                        if (tr && newState.filterTransaction(tr, i)) {
                            tr.setMeta("appendedTransaction", rootTr);
                            if (!seen) {
                                seen = [];
                                for (let j = 0; j < this.config.plugins.length; j++)
                                    seen.push(j < i ? { state: newState, n: trs.length } : { state: this, n: 0 });
                            }
                            trs.push(tr);
                            newState = newState.applyInner(tr);
                            haveNew = true;
                        }
                        if (seen)
                            seen[i] = { state: newState, n: trs.length };
                    }
                }
                if (!haveNew)
                    return { state: newState, transactions: trs };
            }
        }
        /**
        @internal
        */
        applyInner(tr) {
            if (!tr.before.eq(this.doc))
                throw new RangeError("Applying a mismatched transaction");
            let newInstance = new EditorState(this.config), fields = this.config.fields;
            for (let i = 0; i < fields.length; i++) {
                let field = fields[i];
                newInstance[field.name] = field.apply(tr, this[field.name], this, newInstance);
            }
            return newInstance;
        }
        /**
        Start a [transaction](https://prosemirror.net/docs/ref/#state.Transaction) from this state.
        */
        get tr() { return new Transaction(this); }
        /**
        Create a new state.
        */
        static create(config) {
            let $config = new Configuration(config.doc ? config.doc.type.schema : config.schema, config.plugins);
            let instance = new EditorState($config);
            for (let i = 0; i < $config.fields.length; i++)
                instance[$config.fields[i].name] = $config.fields[i].init(config, instance);
            return instance;
        }
        /**
        Create a new state based on this one, but with an adjusted set
        of active plugins. State fields that exist in both sets of
        plugins are kept unchanged. Those that no longer exist are
        dropped, and those that are new are initialized using their
        [`init`](https://prosemirror.net/docs/ref/#state.StateField.init) method, passing in the new
        configuration object..
        */
        reconfigure(config) {
            let $config = new Configuration(this.schema, config.plugins);
            let fields = $config.fields, instance = new EditorState($config);
            for (let i = 0; i < fields.length; i++) {
                let name = fields[i].name;
                instance[name] = this.hasOwnProperty(name) ? this[name] : fields[i].init(config, instance);
            }
            return instance;
        }
        /**
        Serialize this state to JSON. If you want to serialize the state
        of plugins, pass an object mapping property names to use in the
        resulting JSON object to plugin objects. The argument may also be
        a string or number, in which case it is ignored, to support the
        way `JSON.stringify` calls `toString` methods.
        */
        toJSON(pluginFields) {
            let result = { doc: this.doc.toJSON(), selection: this.selection.toJSON() };
            if (this.storedMarks)
                result.storedMarks = this.storedMarks.map(m => m.toJSON());
            if (pluginFields && typeof pluginFields == 'object')
                for (let prop in pluginFields) {
                    if (prop == "doc" || prop == "selection")
                        throw new RangeError("The JSON fields `doc` and `selection` are reserved");
                    let plugin = pluginFields[prop], state = plugin.spec.state;
                    if (state && state.toJSON)
                        result[prop] = state.toJSON.call(plugin, this[plugin.key]);
                }
            return result;
        }
        /**
        Deserialize a JSON representation of a state. `config` should
        have at least a `schema` field, and should contain array of
        plugins to initialize the state with. `pluginFields` can be used
        to deserialize the state of plugins, by associating plugin
        instances with the property names they use in the JSON object.
        */
        static fromJSON(config, json, pluginFields) {
            if (!json)
                throw new RangeError("Invalid input for EditorState.fromJSON");
            if (!config.schema)
                throw new RangeError("Required config field 'schema' missing");
            let $config = new Configuration(config.schema, config.plugins);
            let instance = new EditorState($config);
            $config.fields.forEach(field => {
                if (field.name == "doc") {
                    instance.doc = Node.fromJSON(config.schema, json.doc);
                }
                else if (field.name == "selection") {
                    instance.selection = Selection.fromJSON(instance.doc, json.selection);
                }
                else if (field.name == "storedMarks") {
                    if (json.storedMarks)
                        instance.storedMarks = json.storedMarks.map(config.schema.markFromJSON);
                }
                else {
                    if (pluginFields)
                        for (let prop in pluginFields) {
                            let plugin = pluginFields[prop], state = plugin.spec.state;
                            if (plugin.key == field.name && state && state.fromJSON &&
                                Object.prototype.hasOwnProperty.call(json, prop)) {
                                instance[field.name] = state.fromJSON.call(plugin, config, json[prop], instance);
                                return;
                            }
                        }
                    instance[field.name] = field.init(config, instance);
                }
            });
            return instance;
        }
    }

    function bindProps(obj, self, target) {
        for (let prop in obj) {
            let val = obj[prop];
            if (val instanceof Function)
                val = val.bind(self);
            else if (prop == "handleDOMEvents")
                val = bindProps(val, self, {});
            target[prop] = val;
        }
        return target;
    }
    /**
    Plugins bundle functionality that can be added to an editor.
    They are part of the [editor state](https://prosemirror.net/docs/ref/#state.EditorState) and
    may influence that state and the view that contains it.
    */
    class Plugin {
        /**
        Create a plugin.
        */
        constructor(
        /**
        The plugin's [spec object](https://prosemirror.net/docs/ref/#state.PluginSpec).
        */
        spec) {
            this.spec = spec;
            /**
            The [props](https://prosemirror.net/docs/ref/#view.EditorProps) exported by this plugin.
            */
            this.props = {};
            if (spec.props)
                bindProps(spec.props, this, this.props);
            this.key = spec.key ? spec.key.key : createKey("plugin");
        }
        /**
        Extract the plugin's state field from an editor state.
        */
        getState(state) { return state[this.key]; }
    }
    const keys = Object.create(null);
    function createKey(name) {
        if (name in keys)
            return name + "$" + ++keys[name];
        keys[name] = 0;
        return name + "$";
    }
    /**
    A key is used to [tag](https://prosemirror.net/docs/ref/#state.PluginSpec.key) plugins in a way
    that makes it possible to find them, given an editor state.
    Assigning a key does mean only one plugin of that type can be
    active in a state.
    */
    class PluginKey {
        /**
        Create a plugin key.
        */
        constructor(name = "key") { this.key = createKey(name); }
        /**
        Get the active plugin with this key, if any, from an editor
        state.
        */
        get(state) { return state.config.pluginsByKey[this.key]; }
        /**
        Get the plugin's state from an editor state.
        */
        getState(state) { return state[this.key]; }
    }

    const nav = typeof navigator != "undefined" ? navigator : null;
    const doc$1 = typeof document != "undefined" ? document : null;
    const agent = (nav && nav.userAgent) || "";
    const ie_edge = /Edge\/(\d+)/.exec(agent);
    const ie_upto10 = /MSIE \d/.exec(agent);
    const ie_11up = /Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(agent);
    const ie = !!(ie_upto10 || ie_11up || ie_edge);
    const ie_version = ie_upto10 ? document.documentMode : ie_11up ? +ie_11up[1] : ie_edge ? +ie_edge[1] : 0;
    const gecko = !ie && /gecko\/(\d+)/i.test(agent);
    gecko && +(/Firefox\/(\d+)/.exec(agent) || [0, 0])[1];
    const _chrome = !ie && /Chrome\/(\d+)/.exec(agent);
    const chrome = !!_chrome;
    const chrome_version = _chrome ? +_chrome[1] : 0;
    const safari = !ie && !!nav && /Apple Computer/.test(nav.vendor);
    // Is true for both iOS and iPadOS for convenience
    const ios = safari && (/Mobile\/\w+/.test(agent) || !!nav && nav.maxTouchPoints > 2);
    const mac = ios || (nav ? /Mac/.test(nav.platform) : false);
    const android = /Android \d/.test(agent);
    const webkit = !!doc$1 && "webkitFontSmoothing" in doc$1.documentElement.style;
    const webkit_version = webkit ? +(/\bAppleWebKit\/(\d+)/.exec(navigator.userAgent) || [0, 0])[1] : 0;

    const domIndex = function (node) {
        for (var index = 0;; index++) {
            node = node.previousSibling;
            if (!node)
                return index;
        }
    };
    const parentNode = function (node) {
        let parent = node.assignedSlot || node.parentNode;
        return parent && parent.nodeType == 11 ? parent.host : parent;
    };
    let reusedRange = null;
    // Note that this will always return the same range, because DOM range
    // objects are every expensive, and keep slowing down subsequent DOM
    // updates, for some reason.
    const textRange = function (node, from, to) {
        let range = reusedRange || (reusedRange = document.createRange());
        range.setEnd(node, to == null ? node.nodeValue.length : to);
        range.setStart(node, from || 0);
        return range;
    };
    // Scans forward and backward through DOM positions equivalent to the
    // given one to see if the two are in the same place (i.e. after a
    // text node vs at the end of that text node)
    const isEquivalentPosition = function (node, off, targetNode, targetOff) {
        return targetNode && (scanFor(node, off, targetNode, targetOff, -1) ||
            scanFor(node, off, targetNode, targetOff, 1));
    };
    const atomElements = /^(img|br|input|textarea|hr)$/i;
    function scanFor(node, off, targetNode, targetOff, dir) {
        for (;;) {
            if (node == targetNode && off == targetOff)
                return true;
            if (off == (dir < 0 ? 0 : nodeSize(node))) {
                let parent = node.parentNode;
                if (!parent || parent.nodeType != 1 || hasBlockDesc(node) || atomElements.test(node.nodeName) ||
                    node.contentEditable == "false")
                    return false;
                off = domIndex(node) + (dir < 0 ? 0 : 1);
                node = parent;
            }
            else if (node.nodeType == 1) {
                node = node.childNodes[off + (dir < 0 ? -1 : 0)];
                if (node.contentEditable == "false")
                    return false;
                off = dir < 0 ? nodeSize(node) : 0;
            }
            else {
                return false;
            }
        }
    }
    function nodeSize(node) {
        return node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length;
    }
    function isOnEdge(node, offset, parent) {
        for (let atStart = offset == 0, atEnd = offset == nodeSize(node); atStart || atEnd;) {
            if (node == parent)
                return true;
            let index = domIndex(node);
            node = node.parentNode;
            if (!node)
                return false;
            atStart = atStart && index == 0;
            atEnd = atEnd && index == nodeSize(node);
        }
    }
    function hasBlockDesc(dom) {
        let desc;
        for (let cur = dom; cur; cur = cur.parentNode)
            if (desc = cur.pmViewDesc)
                break;
        return desc && desc.node && desc.node.isBlock && (desc.dom == dom || desc.contentDOM == dom);
    }
    // Work around Chrome issue https://bugs.chromium.org/p/chromium/issues/detail?id=447523
    // (isCollapsed inappropriately returns true in shadow dom)
    const selectionCollapsed = function (domSel) {
        let collapsed = domSel.isCollapsed;
        if (collapsed && chrome && domSel.rangeCount && !domSel.getRangeAt(0).collapsed)
            collapsed = false;
        return collapsed;
    };
    function keyEvent(keyCode, key) {
        let event = document.createEvent("Event");
        event.initEvent("keydown", true, true);
        event.keyCode = keyCode;
        event.key = event.code = key;
        return event;
    }

    function windowRect(doc) {
        return { left: 0, right: doc.documentElement.clientWidth,
            top: 0, bottom: doc.documentElement.clientHeight };
    }
    function getSide(value, side) {
        return typeof value == "number" ? value : value[side];
    }
    function clientRect(node) {
        let rect = node.getBoundingClientRect();
        // Adjust for elements with style "transform: scale()"
        let scaleX = (rect.width / node.offsetWidth) || 1;
        let scaleY = (rect.height / node.offsetHeight) || 1;
        // Make sure scrollbar width isn't included in the rectangle
        return { left: rect.left, right: rect.left + node.clientWidth * scaleX,
            top: rect.top, bottom: rect.top + node.clientHeight * scaleY };
    }
    function scrollRectIntoView(view, rect, startDOM) {
        let scrollThreshold = view.someProp("scrollThreshold") || 0, scrollMargin = view.someProp("scrollMargin") || 5;
        let doc = view.dom.ownerDocument;
        for (let parent = startDOM || view.dom;; parent = parentNode(parent)) {
            if (!parent)
                break;
            if (parent.nodeType != 1)
                continue;
            let elt = parent;
            let atTop = elt == doc.body;
            let bounding = atTop ? windowRect(doc) : clientRect(elt);
            let moveX = 0, moveY = 0;
            if (rect.top < bounding.top + getSide(scrollThreshold, "top"))
                moveY = -(bounding.top - rect.top + getSide(scrollMargin, "top"));
            else if (rect.bottom > bounding.bottom - getSide(scrollThreshold, "bottom"))
                moveY = rect.bottom - bounding.bottom + getSide(scrollMargin, "bottom");
            if (rect.left < bounding.left + getSide(scrollThreshold, "left"))
                moveX = -(bounding.left - rect.left + getSide(scrollMargin, "left"));
            else if (rect.right > bounding.right - getSide(scrollThreshold, "right"))
                moveX = rect.right - bounding.right + getSide(scrollMargin, "right");
            if (moveX || moveY) {
                if (atTop) {
                    doc.defaultView.scrollBy(moveX, moveY);
                }
                else {
                    let startX = elt.scrollLeft, startY = elt.scrollTop;
                    if (moveY)
                        elt.scrollTop += moveY;
                    if (moveX)
                        elt.scrollLeft += moveX;
                    let dX = elt.scrollLeft - startX, dY = elt.scrollTop - startY;
                    rect = { left: rect.left - dX, top: rect.top - dY, right: rect.right - dX, bottom: rect.bottom - dY };
                }
            }
            if (atTop)
                break;
        }
    }
    // Store the scroll position of the editor's parent nodes, along with
    // the top position of an element near the top of the editor, which
    // will be used to make sure the visible viewport remains stable even
    // when the size of the content above changes.
    function storeScrollPos(view) {
        let rect = view.dom.getBoundingClientRect(), startY = Math.max(0, rect.top);
        let refDOM, refTop;
        for (let x = (rect.left + rect.right) / 2, y = startY + 1; y < Math.min(innerHeight, rect.bottom); y += 5) {
            let dom = view.root.elementFromPoint(x, y);
            if (!dom || dom == view.dom || !view.dom.contains(dom))
                continue;
            let localRect = dom.getBoundingClientRect();
            if (localRect.top >= startY - 20) {
                refDOM = dom;
                refTop = localRect.top;
                break;
            }
        }
        return { refDOM: refDOM, refTop: refTop, stack: scrollStack(view.dom) };
    }
    function scrollStack(dom) {
        let stack = [], doc = dom.ownerDocument;
        for (let cur = dom; cur; cur = parentNode(cur)) {
            stack.push({ dom: cur, top: cur.scrollTop, left: cur.scrollLeft });
            if (dom == doc)
                break;
        }
        return stack;
    }
    // Reset the scroll position of the editor's parent nodes to that what
    // it was before, when storeScrollPos was called.
    function resetScrollPos({ refDOM, refTop, stack }) {
        let newRefTop = refDOM ? refDOM.getBoundingClientRect().top : 0;
        restoreScrollStack(stack, newRefTop == 0 ? 0 : newRefTop - refTop);
    }
    function restoreScrollStack(stack, dTop) {
        for (let i = 0; i < stack.length; i++) {
            let { dom, top, left } = stack[i];
            if (dom.scrollTop != top + dTop)
                dom.scrollTop = top + dTop;
            if (dom.scrollLeft != left)
                dom.scrollLeft = left;
        }
    }
    let preventScrollSupported = null;
    // Feature-detects support for .focus({preventScroll: true}), and uses
    // a fallback kludge when not supported.
    function focusPreventScroll(dom) {
        if (dom.setActive)
            return dom.setActive(); // in IE
        if (preventScrollSupported)
            return dom.focus(preventScrollSupported);
        let stored = scrollStack(dom);
        dom.focus(preventScrollSupported == null ? {
            get preventScroll() {
                preventScrollSupported = { preventScroll: true };
                return true;
            }
        } : undefined);
        if (!preventScrollSupported) {
            preventScrollSupported = false;
            restoreScrollStack(stored, 0);
        }
    }
    function findOffsetInNode(node, coords) {
        let closest, dxClosest = 2e8, coordsClosest, offset = 0;
        let rowBot = coords.top, rowTop = coords.top;
        for (let child = node.firstChild, childIndex = 0; child; child = child.nextSibling, childIndex++) {
            let rects;
            if (child.nodeType == 1)
                rects = child.getClientRects();
            else if (child.nodeType == 3)
                rects = textRange(child).getClientRects();
            else
                continue;
            for (let i = 0; i < rects.length; i++) {
                let rect = rects[i];
                if (rect.top <= rowBot && rect.bottom >= rowTop) {
                    rowBot = Math.max(rect.bottom, rowBot);
                    rowTop = Math.min(rect.top, rowTop);
                    let dx = rect.left > coords.left ? rect.left - coords.left
                        : rect.right < coords.left ? coords.left - rect.right : 0;
                    if (dx < dxClosest) {
                        closest = child;
                        dxClosest = dx;
                        coordsClosest = dx && closest.nodeType == 3 ? {
                            left: rect.right < coords.left ? rect.right : rect.left,
                            top: coords.top
                        } : coords;
                        if (child.nodeType == 1 && dx)
                            offset = childIndex + (coords.left >= (rect.left + rect.right) / 2 ? 1 : 0);
                        continue;
                    }
                }
                if (!closest && (coords.left >= rect.right && coords.top >= rect.top ||
                    coords.left >= rect.left && coords.top >= rect.bottom))
                    offset = childIndex + 1;
            }
        }
        if (closest && closest.nodeType == 3)
            return findOffsetInText(closest, coordsClosest);
        if (!closest || (dxClosest && closest.nodeType == 1))
            return { node, offset };
        return findOffsetInNode(closest, coordsClosest);
    }
    function findOffsetInText(node, coords) {
        let len = node.nodeValue.length;
        let range = document.createRange();
        for (let i = 0; i < len; i++) {
            range.setEnd(node, i + 1);
            range.setStart(node, i);
            let rect = singleRect(range, 1);
            if (rect.top == rect.bottom)
                continue;
            if (inRect(coords, rect))
                return { node, offset: i + (coords.left >= (rect.left + rect.right) / 2 ? 1 : 0) };
        }
        return { node, offset: 0 };
    }
    function inRect(coords, rect) {
        return coords.left >= rect.left - 1 && coords.left <= rect.right + 1 &&
            coords.top >= rect.top - 1 && coords.top <= rect.bottom + 1;
    }
    function targetKludge(dom, coords) {
        let parent = dom.parentNode;
        if (parent && /^li$/i.test(parent.nodeName) && coords.left < dom.getBoundingClientRect().left)
            return parent;
        return dom;
    }
    function posFromElement(view, elt, coords) {
        let { node, offset } = findOffsetInNode(elt, coords), bias = -1;
        if (node.nodeType == 1 && !node.firstChild) {
            let rect = node.getBoundingClientRect();
            bias = rect.left != rect.right && coords.left > (rect.left + rect.right) / 2 ? 1 : -1;
        }
        return view.docView.posFromDOM(node, offset, bias);
    }
    function posFromCaret(view, node, offset, coords) {
        // Browser (in caretPosition/RangeFromPoint) will agressively
        // normalize towards nearby inline nodes. Since we are interested in
        // positions between block nodes too, we first walk up the hierarchy
        // of nodes to see if there are block nodes that the coordinates
        // fall outside of. If so, we take the position before/after that
        // block. If not, we call `posFromDOM` on the raw node/offset.
        let outside = -1;
        for (let cur = node;;) {
            if (cur == view.dom)
                break;
            let desc = view.docView.nearestDesc(cur, true);
            if (!desc)
                return null;
            if (desc.node.isBlock && desc.parent) {
                let rect = desc.dom.getBoundingClientRect();
                if (rect.left > coords.left || rect.top > coords.top)
                    outside = desc.posBefore;
                else if (rect.right < coords.left || rect.bottom < coords.top)
                    outside = desc.posAfter;
                else
                    break;
            }
            cur = desc.dom.parentNode;
        }
        return outside > -1 ? outside : view.docView.posFromDOM(node, offset, 1);
    }
    function elementFromPoint(element, coords, box) {
        let len = element.childNodes.length;
        if (len && box.top < box.bottom) {
            for (let startI = Math.max(0, Math.min(len - 1, Math.floor(len * (coords.top - box.top) / (box.bottom - box.top)) - 2)), i = startI;;) {
                let child = element.childNodes[i];
                if (child.nodeType == 1) {
                    let rects = child.getClientRects();
                    for (let j = 0; j < rects.length; j++) {
                        let rect = rects[j];
                        if (inRect(coords, rect))
                            return elementFromPoint(child, coords, rect);
                    }
                }
                if ((i = (i + 1) % len) == startI)
                    break;
            }
        }
        return element;
    }
    // Given an x,y position on the editor, get the position in the document.
    function posAtCoords(view, coords) {
        let doc = view.dom.ownerDocument, node, offset = 0;
        if (doc.caretPositionFromPoint) {
            try { // Firefox throws for this call in hard-to-predict circumstances (#994)
                let pos = doc.caretPositionFromPoint(coords.left, coords.top);
                if (pos)
                    ({ offsetNode: node, offset } = pos);
            }
            catch (_) { }
        }
        if (!node && doc.caretRangeFromPoint) {
            let range = doc.caretRangeFromPoint(coords.left, coords.top);
            if (range)
                ({ startContainer: node, startOffset: offset } = range);
        }
        let elt = (view.root.elementFromPoint ? view.root : doc)
            .elementFromPoint(coords.left, coords.top);
        let pos;
        if (!elt || !view.dom.contains(elt.nodeType != 1 ? elt.parentNode : elt)) {
            let box = view.dom.getBoundingClientRect();
            if (!inRect(coords, box))
                return null;
            elt = elementFromPoint(view.dom, coords, box);
            if (!elt)
                return null;
        }
        // Safari's caretRangeFromPoint returns nonsense when on a draggable element
        if (safari) {
            for (let p = elt; node && p; p = parentNode(p))
                if (p.draggable)
                    node = undefined;
        }
        elt = targetKludge(elt, coords);
        if (node) {
            if (gecko && node.nodeType == 1) {
                // Firefox will sometimes return offsets into <input> nodes, which
                // have no actual children, from caretPositionFromPoint (#953)
                offset = Math.min(offset, node.childNodes.length);
                // It'll also move the returned position before image nodes,
                // even if those are behind it.
                if (offset < node.childNodes.length) {
                    let next = node.childNodes[offset], box;
                    if (next.nodeName == "IMG" && (box = next.getBoundingClientRect()).right <= coords.left &&
                        box.bottom > coords.top)
                        offset++;
                }
            }
            // Suspiciously specific kludge to work around caret*FromPoint
            // never returning a position at the end of the document
            if (node == view.dom && offset == node.childNodes.length - 1 && node.lastChild.nodeType == 1 &&
                coords.top > node.lastChild.getBoundingClientRect().bottom)
                pos = view.state.doc.content.size;
            // Ignore positions directly after a BR, since caret*FromPoint
            // 'round up' positions that would be more accurately placed
            // before the BR node.
            else if (offset == 0 || node.nodeType != 1 || node.childNodes[offset - 1].nodeName != "BR")
                pos = posFromCaret(view, node, offset, coords);
        }
        if (pos == null)
            pos = posFromElement(view, elt, coords);
        let desc = view.docView.nearestDesc(elt, true);
        return { pos, inside: desc ? desc.posAtStart - desc.border : -1 };
    }
    function singleRect(target, bias) {
        let rects = target.getClientRects();
        return !rects.length ? target.getBoundingClientRect() : rects[bias < 0 ? 0 : rects.length - 1];
    }
    const BIDI = /[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac]/;
    // Given a position in the document model, get a bounding box of the
    // character at that position, relative to the window.
    function coordsAtPos(view, pos, side) {
        let { node, offset, atom } = view.docView.domFromPos(pos, side < 0 ? -1 : 1);
        let supportEmptyRange = webkit || gecko;
        if (node.nodeType == 3) {
            // These browsers support querying empty text ranges. Prefer that in
            // bidi context or when at the end of a node.
            if (supportEmptyRange && (BIDI.test(node.nodeValue) || (side < 0 ? !offset : offset == node.nodeValue.length))) {
                let rect = singleRect(textRange(node, offset, offset), side);
                // Firefox returns bad results (the position before the space)
                // when querying a position directly after line-broken
                // whitespace. Detect this situation and and kludge around it
                if (gecko && offset && /\s/.test(node.nodeValue[offset - 1]) && offset < node.nodeValue.length) {
                    let rectBefore = singleRect(textRange(node, offset - 1, offset - 1), -1);
                    if (rectBefore.top == rect.top) {
                        let rectAfter = singleRect(textRange(node, offset, offset + 1), -1);
                        if (rectAfter.top != rect.top)
                            return flattenV(rectAfter, rectAfter.left < rectBefore.left);
                    }
                }
                return rect;
            }
            else {
                let from = offset, to = offset, takeSide = side < 0 ? 1 : -1;
                if (side < 0 && !offset) {
                    to++;
                    takeSide = -1;
                }
                else if (side >= 0 && offset == node.nodeValue.length) {
                    from--;
                    takeSide = 1;
                }
                else if (side < 0) {
                    from--;
                }
                else {
                    to++;
                }
                return flattenV(singleRect(textRange(node, from, to), 1), takeSide < 0);
            }
        }
        let $dom = view.state.doc.resolve(pos - (atom || 0));
        // Return a horizontal line in block context
        if (!$dom.parent.inlineContent) {
            if (atom == null && offset && (side < 0 || offset == nodeSize(node))) {
                let before = node.childNodes[offset - 1];
                if (before.nodeType == 1)
                    return flattenH(before.getBoundingClientRect(), false);
            }
            if (atom == null && offset < nodeSize(node)) {
                let after = node.childNodes[offset];
                if (after.nodeType == 1)
                    return flattenH(after.getBoundingClientRect(), true);
            }
            return flattenH(node.getBoundingClientRect(), side >= 0);
        }
        // Inline, not in text node (this is not Bidi-safe)
        if (atom == null && offset && (side < 0 || offset == nodeSize(node))) {
            let before = node.childNodes[offset - 1];
            let target = before.nodeType == 3 ? textRange(before, nodeSize(before) - (supportEmptyRange ? 0 : 1))
                // BR nodes tend to only return the rectangle before them.
                // Only use them if they are the last element in their parent
                : before.nodeType == 1 && (before.nodeName != "BR" || !before.nextSibling) ? before : null;
            if (target)
                return flattenV(singleRect(target, 1), false);
        }
        if (atom == null && offset < nodeSize(node)) {
            let after = node.childNodes[offset];
            while (after.pmViewDesc && after.pmViewDesc.ignoreForCoords)
                after = after.nextSibling;
            let target = !after ? null : after.nodeType == 3 ? textRange(after, 0, (supportEmptyRange ? 0 : 1))
                : after.nodeType == 1 ? after : null;
            if (target)
                return flattenV(singleRect(target, -1), true);
        }
        // All else failed, just try to get a rectangle for the target node
        return flattenV(singleRect(node.nodeType == 3 ? textRange(node) : node, -side), side >= 0);
    }
    function flattenV(rect, left) {
        if (rect.width == 0)
            return rect;
        let x = left ? rect.left : rect.right;
        return { top: rect.top, bottom: rect.bottom, left: x, right: x };
    }
    function flattenH(rect, top) {
        if (rect.height == 0)
            return rect;
        let y = top ? rect.top : rect.bottom;
        return { top: y, bottom: y, left: rect.left, right: rect.right };
    }
    function withFlushedState(view, state, f) {
        let viewState = view.state, active = view.root.activeElement;
        if (viewState != state)
            view.updateState(state);
        if (active != view.dom)
            view.focus();
        try {
            return f();
        }
        finally {
            if (viewState != state)
                view.updateState(viewState);
            if (active != view.dom && active)
                active.focus();
        }
    }
    // Whether vertical position motion in a given direction
    // from a position would leave a text block.
    function endOfTextblockVertical(view, state, dir) {
        let sel = state.selection;
        let $pos = dir == "up" ? sel.$from : sel.$to;
        return withFlushedState(view, state, () => {
            let { node: dom } = view.docView.domFromPos($pos.pos, dir == "up" ? -1 : 1);
            for (;;) {
                let nearest = view.docView.nearestDesc(dom, true);
                if (!nearest)
                    break;
                if (nearest.node.isBlock) {
                    dom = nearest.dom;
                    break;
                }
                dom = nearest.dom.parentNode;
            }
            let coords = coordsAtPos(view, $pos.pos, 1);
            for (let child = dom.firstChild; child; child = child.nextSibling) {
                let boxes;
                if (child.nodeType == 1)
                    boxes = child.getClientRects();
                else if (child.nodeType == 3)
                    boxes = textRange(child, 0, child.nodeValue.length).getClientRects();
                else
                    continue;
                for (let i = 0; i < boxes.length; i++) {
                    let box = boxes[i];
                    if (box.bottom > box.top + 1 &&
                        (dir == "up" ? coords.top - box.top > (box.bottom - coords.top) * 2
                            : box.bottom - coords.bottom > (coords.bottom - box.top) * 2))
                        return false;
                }
            }
            return true;
        });
    }
    const maybeRTL = /[\u0590-\u08ac]/;
    function endOfTextblockHorizontal(view, state, dir) {
        let { $head } = state.selection;
        if (!$head.parent.isTextblock)
            return false;
        let offset = $head.parentOffset, atStart = !offset, atEnd = offset == $head.parent.content.size;
        let sel = view.domSelection();
        // If the textblock is all LTR, or the browser doesn't support
        // Selection.modify (Edge), fall back to a primitive approach
        if (!maybeRTL.test($head.parent.textContent) || !sel.modify)
            return dir == "left" || dir == "backward" ? atStart : atEnd;
        return withFlushedState(view, state, () => {
            // This is a huge hack, but appears to be the best we can
            // currently do: use `Selection.modify` to move the selection by
            // one character, and see if that moves the cursor out of the
            // textblock (or doesn't move it at all, when at the start/end of
            // the document).
            let oldRange = sel.getRangeAt(0), oldNode = sel.focusNode, oldOff = sel.focusOffset;
            let oldBidiLevel = sel.caretBidiLevel // Only for Firefox
            ;
            sel.modify("move", dir, "character");
            let parentDOM = $head.depth ? view.docView.domAfterPos($head.before()) : view.dom;
            let result = !parentDOM.contains(sel.focusNode.nodeType == 1 ? sel.focusNode : sel.focusNode.parentNode) ||
                (oldNode == sel.focusNode && oldOff == sel.focusOffset);
            // Restore the previous selection
            sel.removeAllRanges();
            sel.addRange(oldRange);
            if (oldBidiLevel != null)
                sel.caretBidiLevel = oldBidiLevel;
            return result;
        });
    }
    let cachedState = null;
    let cachedDir = null;
    let cachedResult = false;
    function endOfTextblock(view, state, dir) {
        if (cachedState == state && cachedDir == dir)
            return cachedResult;
        cachedState = state;
        cachedDir = dir;
        return cachedResult = dir == "up" || dir == "down"
            ? endOfTextblockVertical(view, state, dir)
            : endOfTextblockHorizontal(view, state, dir);
    }

    // View descriptions are data structures that describe the DOM that is
    // used to represent the editor's content. They are used for:
    //
    // - Incremental redrawing when the document changes
    //
    // - Figuring out what part of the document a given DOM position
    //   corresponds to
    //
    // - Wiring in custom implementations of the editing interface for a
    //   given node
    //
    // They form a doubly-linked mutable tree, starting at `view.docView`.
    const NOT_DIRTY = 0, CHILD_DIRTY = 1, CONTENT_DIRTY = 2, NODE_DIRTY = 3;
    // Superclass for the various kinds of descriptions. Defines their
    // basic structure and shared methods.
    class ViewDesc {
        constructor(parent, children, dom, 
        // This is the node that holds the child views. It may be null for
        // descs that don't have children.
        contentDOM) {
            this.parent = parent;
            this.children = children;
            this.dom = dom;
            this.contentDOM = contentDOM;
            this.dirty = NOT_DIRTY;
            // An expando property on the DOM node provides a link back to its
            // description.
            dom.pmViewDesc = this;
        }
        // Used to check whether a given description corresponds to a
        // widget/mark/node.
        matchesWidget(widget) { return false; }
        matchesMark(mark) { return false; }
        matchesNode(node, outerDeco, innerDeco) { return false; }
        matchesHack(nodeName) { return false; }
        // When parsing in-editor content (in domchange.js), we allow
        // descriptions to determine the parse rules that should be used to
        // parse them.
        parseRule() { return null; }
        // Used by the editor's event handler to ignore events that come
        // from certain descs.
        stopEvent(event) { return false; }
        // The size of the content represented by this desc.
        get size() {
            let size = 0;
            for (let i = 0; i < this.children.length; i++)
                size += this.children[i].size;
            return size;
        }
        // For block nodes, this represents the space taken up by their
        // start/end tokens.
        get border() { return 0; }
        destroy() {
            this.parent = undefined;
            if (this.dom.pmViewDesc == this)
                this.dom.pmViewDesc = undefined;
            for (let i = 0; i < this.children.length; i++)
                this.children[i].destroy();
        }
        posBeforeChild(child) {
            for (let i = 0, pos = this.posAtStart;; i++) {
                let cur = this.children[i];
                if (cur == child)
                    return pos;
                pos += cur.size;
            }
        }
        get posBefore() {
            return this.parent.posBeforeChild(this);
        }
        get posAtStart() {
            return this.parent ? this.parent.posBeforeChild(this) + this.border : 0;
        }
        get posAfter() {
            return this.posBefore + this.size;
        }
        get posAtEnd() {
            return this.posAtStart + this.size - 2 * this.border;
        }
        localPosFromDOM(dom, offset, bias) {
            // If the DOM position is in the content, use the child desc after
            // it to figure out a position.
            if (this.contentDOM && this.contentDOM.contains(dom.nodeType == 1 ? dom : dom.parentNode)) {
                if (bias < 0) {
                    let domBefore, desc;
                    if (dom == this.contentDOM) {
                        domBefore = dom.childNodes[offset - 1];
                    }
                    else {
                        while (dom.parentNode != this.contentDOM)
                            dom = dom.parentNode;
                        domBefore = dom.previousSibling;
                    }
                    while (domBefore && !((desc = domBefore.pmViewDesc) && desc.parent == this))
                        domBefore = domBefore.previousSibling;
                    return domBefore ? this.posBeforeChild(desc) + desc.size : this.posAtStart;
                }
                else {
                    let domAfter, desc;
                    if (dom == this.contentDOM) {
                        domAfter = dom.childNodes[offset];
                    }
                    else {
                        while (dom.parentNode != this.contentDOM)
                            dom = dom.parentNode;
                        domAfter = dom.nextSibling;
                    }
                    while (domAfter && !((desc = domAfter.pmViewDesc) && desc.parent == this))
                        domAfter = domAfter.nextSibling;
                    return domAfter ? this.posBeforeChild(desc) : this.posAtEnd;
                }
            }
            // Otherwise, use various heuristics, falling back on the bias
            // parameter, to determine whether to return the position at the
            // start or at the end of this view desc.
            let atEnd;
            if (dom == this.dom && this.contentDOM) {
                atEnd = offset > domIndex(this.contentDOM);
            }
            else if (this.contentDOM && this.contentDOM != this.dom && this.dom.contains(this.contentDOM)) {
                atEnd = dom.compareDocumentPosition(this.contentDOM) & 2;
            }
            else if (this.dom.firstChild) {
                if (offset == 0)
                    for (let search = dom;; search = search.parentNode) {
                        if (search == this.dom) {
                            atEnd = false;
                            break;
                        }
                        if (search.previousSibling)
                            break;
                    }
                if (atEnd == null && offset == dom.childNodes.length)
                    for (let search = dom;; search = search.parentNode) {
                        if (search == this.dom) {
                            atEnd = true;
                            break;
                        }
                        if (search.nextSibling)
                            break;
                    }
            }
            return (atEnd == null ? bias > 0 : atEnd) ? this.posAtEnd : this.posAtStart;
        }
        // Scan up the dom finding the first desc that is a descendant of
        // this one.
        nearestDesc(dom, onlyNodes = false) {
            for (let first = true, cur = dom; cur; cur = cur.parentNode) {
                let desc = this.getDesc(cur), nodeDOM;
                if (desc && (!onlyNodes || desc.node)) {
                    // If dom is outside of this desc's nodeDOM, don't count it.
                    if (first && (nodeDOM = desc.nodeDOM) &&
                        !(nodeDOM.nodeType == 1 ? nodeDOM.contains(dom.nodeType == 1 ? dom : dom.parentNode) : nodeDOM == dom))
                        first = false;
                    else
                        return desc;
                }
            }
        }
        getDesc(dom) {
            let desc = dom.pmViewDesc;
            for (let cur = desc; cur; cur = cur.parent)
                if (cur == this)
                    return desc;
        }
        posFromDOM(dom, offset, bias) {
            for (let scan = dom; scan; scan = scan.parentNode) {
                let desc = this.getDesc(scan);
                if (desc)
                    return desc.localPosFromDOM(dom, offset, bias);
            }
            return -1;
        }
        // Find the desc for the node after the given pos, if any. (When a
        // parent node overrode rendering, there might not be one.)
        descAt(pos) {
            for (let i = 0, offset = 0; i < this.children.length; i++) {
                let child = this.children[i], end = offset + child.size;
                if (offset == pos && end != offset) {
                    while (!child.border && child.children.length)
                        child = child.children[0];
                    return child;
                }
                if (pos < end)
                    return child.descAt(pos - offset - child.border);
                offset = end;
            }
        }
        domFromPos(pos, side) {
            if (!this.contentDOM)
                return { node: this.dom, offset: 0, atom: pos + 1 };
            // First find the position in the child array
            let i = 0, offset = 0;
            for (let curPos = 0; i < this.children.length; i++) {
                let child = this.children[i], end = curPos + child.size;
                if (end > pos || child instanceof TrailingHackViewDesc) {
                    offset = pos - curPos;
                    break;
                }
                curPos = end;
            }
            // If this points into the middle of a child, call through
            if (offset)
                return this.children[i].domFromPos(offset - this.children[i].border, side);
            // Go back if there were any zero-length widgets with side >= 0 before this point
            for (let prev; i && !(prev = this.children[i - 1]).size && prev instanceof WidgetViewDesc && prev.side >= 0; i--) { }
            // Scan towards the first useable node
            if (side <= 0) {
                let prev, enter = true;
                for (;; i--, enter = false) {
                    prev = i ? this.children[i - 1] : null;
                    if (!prev || prev.dom.parentNode == this.contentDOM)
                        break;
                }
                if (prev && side && enter && !prev.border && !prev.domAtom)
                    return prev.domFromPos(prev.size, side);
                return { node: this.contentDOM, offset: prev ? domIndex(prev.dom) + 1 : 0 };
            }
            else {
                let next, enter = true;
                for (;; i++, enter = false) {
                    next = i < this.children.length ? this.children[i] : null;
                    if (!next || next.dom.parentNode == this.contentDOM)
                        break;
                }
                if (next && enter && !next.border && !next.domAtom)
                    return next.domFromPos(0, side);
                return { node: this.contentDOM, offset: next ? domIndex(next.dom) : this.contentDOM.childNodes.length };
            }
        }
        // Used to find a DOM range in a single parent for a given changed
        // range.
        parseRange(from, to, base = 0) {
            if (this.children.length == 0)
                return { node: this.contentDOM, from, to, fromOffset: 0, toOffset: this.contentDOM.childNodes.length };
            let fromOffset = -1, toOffset = -1;
            for (let offset = base, i = 0;; i++) {
                let child = this.children[i], end = offset + child.size;
                if (fromOffset == -1 && from <= end) {
                    let childBase = offset + child.border;
                    // FIXME maybe descend mark views to parse a narrower range?
                    if (from >= childBase && to <= end - child.border && child.node &&
                        child.contentDOM && this.contentDOM.contains(child.contentDOM))
                        return child.parseRange(from, to, childBase);
                    from = offset;
                    for (let j = i; j > 0; j--) {
                        let prev = this.children[j - 1];
                        if (prev.size && prev.dom.parentNode == this.contentDOM && !prev.emptyChildAt(1)) {
                            fromOffset = domIndex(prev.dom) + 1;
                            break;
                        }
                        from -= prev.size;
                    }
                    if (fromOffset == -1)
                        fromOffset = 0;
                }
                if (fromOffset > -1 && (end > to || i == this.children.length - 1)) {
                    to = end;
                    for (let j = i + 1; j < this.children.length; j++) {
                        let next = this.children[j];
                        if (next.size && next.dom.parentNode == this.contentDOM && !next.emptyChildAt(-1)) {
                            toOffset = domIndex(next.dom);
                            break;
                        }
                        to += next.size;
                    }
                    if (toOffset == -1)
                        toOffset = this.contentDOM.childNodes.length;
                    break;
                }
                offset = end;
            }
            return { node: this.contentDOM, from, to, fromOffset, toOffset };
        }
        emptyChildAt(side) {
            if (this.border || !this.contentDOM || !this.children.length)
                return false;
            let child = this.children[side < 0 ? 0 : this.children.length - 1];
            return child.size == 0 || child.emptyChildAt(side);
        }
        domAfterPos(pos) {
            let { node, offset } = this.domFromPos(pos, 0);
            if (node.nodeType != 1 || offset == node.childNodes.length)
                throw new RangeError("No node after pos " + pos);
            return node.childNodes[offset];
        }
        // View descs are responsible for setting any selection that falls
        // entirely inside of them, so that custom implementations can do
        // custom things with the selection. Note that this falls apart when
        // a selection starts in such a node and ends in another, in which
        // case we just use whatever domFromPos produces as a best effort.
        setSelection(anchor, head, root, force = false) {
            // If the selection falls entirely in a child, give it to that child
            let from = Math.min(anchor, head), to = Math.max(anchor, head);
            for (let i = 0, offset = 0; i < this.children.length; i++) {
                let child = this.children[i], end = offset + child.size;
                if (from > offset && to < end)
                    return child.setSelection(anchor - offset - child.border, head - offset - child.border, root, force);
                offset = end;
            }
            let anchorDOM = this.domFromPos(anchor, anchor ? -1 : 1);
            let headDOM = head == anchor ? anchorDOM : this.domFromPos(head, head ? -1 : 1);
            let domSel = root.getSelection();
            let brKludge = false;
            // On Firefox, using Selection.collapse to put the cursor after a
            // BR node for some reason doesn't always work (#1073). On Safari,
            // the cursor sometimes inexplicable visually lags behind its
            // reported position in such situations (#1092).
            if ((gecko || safari) && anchor == head) {
                let { node, offset } = anchorDOM;
                if (node.nodeType == 3) {
                    brKludge = !!(offset && node.nodeValue[offset - 1] == "\n");
                    // Issue #1128
                    if (brKludge && offset == node.nodeValue.length) {
                        for (let scan = node, after; scan; scan = scan.parentNode) {
                            if (after = scan.nextSibling) {
                                if (after.nodeName == "BR")
                                    anchorDOM = headDOM = { node: after.parentNode, offset: domIndex(after) + 1 };
                                break;
                            }
                            let desc = scan.pmViewDesc;
                            if (desc && desc.node && desc.node.isBlock)
                                break;
                        }
                    }
                }
                else {
                    let prev = node.childNodes[offset - 1];
                    brKludge = prev && (prev.nodeName == "BR" || prev.contentEditable == "false");
                }
            }
            // Firefox can act strangely when the selection is in front of an
            // uneditable node. See #1163 and https://bugzilla.mozilla.org/show_bug.cgi?id=1709536
            if (gecko && domSel.focusNode && domSel.focusNode != headDOM.node && domSel.focusNode.nodeType == 1) {
                let after = domSel.focusNode.childNodes[domSel.focusOffset];
                if (after && after.contentEditable == "false")
                    force = true;
            }
            if (!(force || brKludge && safari) &&
                isEquivalentPosition(anchorDOM.node, anchorDOM.offset, domSel.anchorNode, domSel.anchorOffset) &&
                isEquivalentPosition(headDOM.node, headDOM.offset, domSel.focusNode, domSel.focusOffset))
                return;
            // Selection.extend can be used to create an 'inverted' selection
            // (one where the focus is before the anchor), but not all
            // browsers support it yet.
            let domSelExtended = false;
            if ((domSel.extend || anchor == head) && !brKludge) {
                domSel.collapse(anchorDOM.node, anchorDOM.offset);
                try {
                    if (anchor != head) {
                        // This can crash on Safari if the editor is hidden, and
                        // there was no selection. (#1308)
                        try {
                            domSel.extend(headDOM.node, headDOM.offset);
                        }
                        catch (_) { }
                    }
                    domSelExtended = true;
                }
                catch (err) {
                    // In some cases with Chrome the selection is empty after calling
                    // collapse, even when it should be valid. This appears to be a bug, but
                    // it is difficult to isolate. If this happens fallback to the old path
                    // without using extend.
                    if (!(err instanceof DOMException))
                        throw err;
                    // declare global: DOMException
                }
            }
            if (!domSelExtended) {
                if (anchor > head) {
                    let tmp = anchorDOM;
                    anchorDOM = headDOM;
                    headDOM = tmp;
                }
                let range = document.createRange();
                range.setEnd(headDOM.node, headDOM.offset);
                range.setStart(anchorDOM.node, anchorDOM.offset);
                domSel.removeAllRanges();
                domSel.addRange(range);
            }
        }
        ignoreMutation(mutation) {
            return !this.contentDOM && mutation.type != "selection";
        }
        get contentLost() {
            return this.contentDOM && this.contentDOM != this.dom && !this.dom.contains(this.contentDOM);
        }
        // Remove a subtree of the element tree that has been touched
        // by a DOM change, so that the next update will redraw it.
        markDirty(from, to) {
            for (let offset = 0, i = 0; i < this.children.length; i++) {
                let child = this.children[i], end = offset + child.size;
                if (offset == end ? from <= end && to >= offset : from < end && to > offset) {
                    let startInside = offset + child.border, endInside = end - child.border;
                    if (from >= startInside && to <= endInside) {
                        this.dirty = from == offset || to == end ? CONTENT_DIRTY : CHILD_DIRTY;
                        if (from == startInside && to == endInside &&
                            (child.contentLost || child.dom.parentNode != this.contentDOM))
                            child.dirty = NODE_DIRTY;
                        else
                            child.markDirty(from - startInside, to - startInside);
                        return;
                    }
                    else {
                        child.dirty = child.dom == child.contentDOM && child.dom.parentNode == this.contentDOM && !child.children.length
                            ? CONTENT_DIRTY : NODE_DIRTY;
                    }
                }
                offset = end;
            }
            this.dirty = CONTENT_DIRTY;
        }
        markParentsDirty() {
            let level = 1;
            for (let node = this.parent; node; node = node.parent, level++) {
                let dirty = level == 1 ? CONTENT_DIRTY : CHILD_DIRTY;
                if (node.dirty < dirty)
                    node.dirty = dirty;
            }
        }
        get domAtom() { return false; }
        get ignoreForCoords() { return false; }
    }
    // A widget desc represents a widget decoration, which is a DOM node
    // drawn between the document nodes.
    class WidgetViewDesc extends ViewDesc {
        constructor(parent, widget, view, pos) {
            let self, dom = widget.type.toDOM;
            if (typeof dom == "function")
                dom = dom(view, () => {
                    if (!self)
                        return pos;
                    if (self.parent)
                        return self.parent.posBeforeChild(self);
                });
            if (!widget.type.spec.raw) {
                if (dom.nodeType != 1) {
                    let wrap = document.createElement("span");
                    wrap.appendChild(dom);
                    dom = wrap;
                }
                dom.contentEditable = "false";
                dom.classList.add("ProseMirror-widget");
            }
            super(parent, [], dom, null);
            this.widget = widget;
            this.widget = widget;
            self = this;
        }
        matchesWidget(widget) {
            return this.dirty == NOT_DIRTY && widget.type.eq(this.widget.type);
        }
        parseRule() { return { ignore: true }; }
        stopEvent(event) {
            let stop = this.widget.spec.stopEvent;
            return stop ? stop(event) : false;
        }
        ignoreMutation(mutation) {
            return mutation.type != "selection" || this.widget.spec.ignoreSelection;
        }
        destroy() {
            this.widget.type.destroy(this.dom);
            super.destroy();
        }
        get domAtom() { return true; }
        get side() { return this.widget.type.side; }
    }
    class CompositionViewDesc extends ViewDesc {
        constructor(parent, dom, textDOM, text) {
            super(parent, [], dom, null);
            this.textDOM = textDOM;
            this.text = text;
        }
        get size() { return this.text.length; }
        localPosFromDOM(dom, offset) {
            if (dom != this.textDOM)
                return this.posAtStart + (offset ? this.size : 0);
            return this.posAtStart + offset;
        }
        domFromPos(pos) {
            return { node: this.textDOM, offset: pos };
        }
        ignoreMutation(mut) {
            return mut.type === 'characterData' && mut.target.nodeValue == mut.oldValue;
        }
    }
    // A mark desc represents a mark. May have multiple children,
    // depending on how the mark is split. Note that marks are drawn using
    // a fixed nesting order, for simplicity and predictability, so in
    // some cases they will be split more often than would appear
    // necessary.
    class MarkViewDesc extends ViewDesc {
        constructor(parent, mark, dom, contentDOM) {
            super(parent, [], dom, contentDOM);
            this.mark = mark;
        }
        static create(parent, mark, inline, view) {
            let custom = view.nodeViews[mark.type.name];
            let spec = custom && custom(mark, view, inline);
            if (!spec || !spec.dom)
                spec = DOMSerializer.renderSpec(document, mark.type.spec.toDOM(mark, inline));
            return new MarkViewDesc(parent, mark, spec.dom, spec.contentDOM || spec.dom);
        }
        parseRule() {
            if ((this.dirty & NODE_DIRTY) || this.mark.type.spec.reparseInView)
                return null;
            return { mark: this.mark.type.name, attrs: this.mark.attrs, contentElement: this.contentDOM || undefined };
        }
        matchesMark(mark) { return this.dirty != NODE_DIRTY && this.mark.eq(mark); }
        markDirty(from, to) {
            super.markDirty(from, to);
            // Move dirty info to nearest node view
            if (this.dirty != NOT_DIRTY) {
                let parent = this.parent;
                while (!parent.node)
                    parent = parent.parent;
                if (parent.dirty < this.dirty)
                    parent.dirty = this.dirty;
                this.dirty = NOT_DIRTY;
            }
        }
        slice(from, to, view) {
            let copy = MarkViewDesc.create(this.parent, this.mark, true, view);
            let nodes = this.children, size = this.size;
            if (to < size)
                nodes = replaceNodes(nodes, to, size, view);
            if (from > 0)
                nodes = replaceNodes(nodes, 0, from, view);
            for (let i = 0; i < nodes.length; i++)
                nodes[i].parent = copy;
            copy.children = nodes;
            return copy;
        }
    }
    // Node view descs are the main, most common type of view desc, and
    // correspond to an actual node in the document. Unlike mark descs,
    // they populate their child array themselves.
    class NodeViewDesc extends ViewDesc {
        constructor(parent, node, outerDeco, innerDeco, dom, contentDOM, nodeDOM, view, pos) {
            super(parent, [], dom, contentDOM);
            this.node = node;
            this.outerDeco = outerDeco;
            this.innerDeco = innerDeco;
            this.nodeDOM = nodeDOM;
            if (contentDOM)
                this.updateChildren(view, pos);
        }
        // By default, a node is rendered using the `toDOM` method from the
        // node type spec. But client code can use the `nodeViews` spec to
        // supply a custom node view, which can influence various aspects of
        // the way the node works.
        //
        // (Using subclassing for this was intentionally decided against,
        // since it'd require exposing a whole slew of finicky
        // implementation details to the user code that they probably will
        // never need.)
        static create(parent, node, outerDeco, innerDeco, view, pos) {
            let custom = view.nodeViews[node.type.name], descObj;
            let spec = custom && custom(node, view, () => {
                // (This is a function that allows the custom view to find its
                // own position)
                if (!descObj)
                    return pos;
                if (descObj.parent)
                    return descObj.parent.posBeforeChild(descObj);
            }, outerDeco, innerDeco);
            let dom = spec && spec.dom, contentDOM = spec && spec.contentDOM;
            if (node.isText) {
                if (!dom)
                    dom = document.createTextNode(node.text);
                else if (dom.nodeType != 3)
                    throw new RangeError("Text must be rendered as a DOM text node");
            }
            else if (!dom) {
                ({ dom, contentDOM } = DOMSerializer.renderSpec(document, node.type.spec.toDOM(node)));
            }
            if (!contentDOM && !node.isText && dom.nodeName != "BR") { // Chrome gets confused by <br contenteditable=false>
                if (!dom.hasAttribute("contenteditable"))
                    dom.contentEditable = "false";
                if (node.type.spec.draggable)
                    dom.draggable = true;
            }
            let nodeDOM = dom;
            dom = applyOuterDeco(dom, outerDeco, node);
            if (spec)
                return descObj = new CustomNodeViewDesc(parent, node, outerDeco, innerDeco, dom, contentDOM || null, nodeDOM, spec, view, pos + 1);
            else if (node.isText)
                return new TextViewDesc(parent, node, outerDeco, innerDeco, dom, nodeDOM, view);
            else
                return new NodeViewDesc(parent, node, outerDeco, innerDeco, dom, contentDOM || null, nodeDOM, view, pos + 1);
        }
        parseRule() {
            // Experimental kludge to allow opt-in re-parsing of nodes
            if (this.node.type.spec.reparseInView)
                return null;
            // FIXME the assumption that this can always return the current
            // attrs means that if the user somehow manages to change the
            // attrs in the dom, that won't be picked up. Not entirely sure
            // whether this is a problem
            let rule = { node: this.node.type.name, attrs: this.node.attrs };
            if (this.node.type.whitespace == "pre")
                rule.preserveWhitespace = "full";
            if (!this.contentDOM) {
                rule.getContent = () => this.node.content;
            }
            else if (!this.contentLost) {
                rule.contentElement = this.contentDOM;
            }
            else {
                // Chrome likes to randomly recreate parent nodes when
                // backspacing things. When that happens, this tries to find the
                // new parent.
                for (let i = this.children.length - 1; i >= 0; i--) {
                    let child = this.children[i];
                    if (this.dom.contains(child.dom.parentNode)) {
                        rule.contentElement = child.dom.parentNode;
                        break;
                    }
                }
                if (!rule.contentElement)
                    rule.getContent = () => Fragment.empty;
            }
            return rule;
        }
        matchesNode(node, outerDeco, innerDeco) {
            return this.dirty == NOT_DIRTY && node.eq(this.node) &&
                sameOuterDeco(outerDeco, this.outerDeco) && innerDeco.eq(this.innerDeco);
        }
        get size() { return this.node.nodeSize; }
        get border() { return this.node.isLeaf ? 0 : 1; }
        // Syncs `this.children` to match `this.node.content` and the local
        // decorations, possibly introducing nesting for marks. Then, in a
        // separate step, syncs the DOM inside `this.contentDOM` to
        // `this.children`.
        updateChildren(view, pos) {
            let inline = this.node.inlineContent, off = pos;
            let composition = view.composing ? this.localCompositionInfo(view, pos) : null;
            let localComposition = composition && composition.pos > -1 ? composition : null;
            let compositionInChild = composition && composition.pos < 0;
            let updater = new ViewTreeUpdater(this, localComposition && localComposition.node, view);
            iterDeco(this.node, this.innerDeco, (widget, i, insideNode) => {
                if (widget.spec.marks)
                    updater.syncToMarks(widget.spec.marks, inline, view);
                else if (widget.type.side >= 0 && !insideNode)
                    updater.syncToMarks(i == this.node.childCount ? Mark.none : this.node.child(i).marks, inline, view);
                // If the next node is a desc matching this widget, reuse it,
                // otherwise insert the widget as a new view desc.
                updater.placeWidget(widget, view, off);
            }, (child, outerDeco, innerDeco, i) => {
                // Make sure the wrapping mark descs match the node's marks.
                updater.syncToMarks(child.marks, inline, view);
                // Try several strategies for drawing this node
                let compIndex;
                if (updater.findNodeMatch(child, outerDeco, innerDeco, i)) ;
                else if (compositionInChild && view.state.selection.from > off &&
                    view.state.selection.to < off + child.nodeSize &&
                    (compIndex = updater.findIndexWithChild(composition.node)) > -1 &&
                    updater.updateNodeAt(child, outerDeco, innerDeco, compIndex, view)) ;
                else if (updater.updateNextNode(child, outerDeco, innerDeco, view, i)) ;
                else {
                    // Add it as a new view
                    updater.addNode(child, outerDeco, innerDeco, view, off);
                }
                off += child.nodeSize;
            });
            // Drop all remaining descs after the current position.
            updater.syncToMarks([], inline, view);
            if (this.node.isTextblock)
                updater.addTextblockHacks();
            updater.destroyRest();
            // Sync the DOM if anything changed
            if (updater.changed || this.dirty == CONTENT_DIRTY) {
                // May have to protect focused DOM from being changed if a composition is active
                if (localComposition)
                    this.protectLocalComposition(view, localComposition);
                renderDescs(this.contentDOM, this.children, view);
                if (ios)
                    iosHacks(this.dom);
            }
        }
        localCompositionInfo(view, pos) {
            // Only do something if both the selection and a focused text node
            // are inside of this node
            let { from, to } = view.state.selection;
            if (!(view.state.selection instanceof TextSelection) || from < pos || to > pos + this.node.content.size)
                return null;
            let sel = view.domSelection();
            let textNode = nearbyTextNode(sel.focusNode, sel.focusOffset);
            if (!textNode || !this.dom.contains(textNode.parentNode))
                return null;
            if (this.node.inlineContent) {
                // Find the text in the focused node in the node, stop if it's not
                // there (may have been modified through other means, in which
                // case it should overwritten)
                let text = textNode.nodeValue;
                let textPos = findTextInFragment(this.node.content, text, from - pos, to - pos);
                return textPos < 0 ? null : { node: textNode, pos: textPos, text };
            }
            else {
                return { node: textNode, pos: -1, text: "" };
            }
        }
        protectLocalComposition(view, { node, pos, text }) {
            // The node is already part of a local view desc, leave it there
            if (this.getDesc(node))
                return;
            // Create a composition view for the orphaned nodes
            let topNode = node;
            for (;; topNode = topNode.parentNode) {
                if (topNode.parentNode == this.contentDOM)
                    break;
                while (topNode.previousSibling)
                    topNode.parentNode.removeChild(topNode.previousSibling);
                while (topNode.nextSibling)
                    topNode.parentNode.removeChild(topNode.nextSibling);
                if (topNode.pmViewDesc)
                    topNode.pmViewDesc = undefined;
            }
            let desc = new CompositionViewDesc(this, topNode, node, text);
            view.input.compositionNodes.push(desc);
            // Patch up this.children to contain the composition view
            this.children = replaceNodes(this.children, pos, pos + text.length, view, desc);
        }
        // If this desc must be updated to match the given node decoration,
        // do so and return true.
        update(node, outerDeco, innerDeco, view) {
            if (this.dirty == NODE_DIRTY ||
                !node.sameMarkup(this.node))
                return false;
            this.updateInner(node, outerDeco, innerDeco, view);
            return true;
        }
        updateInner(node, outerDeco, innerDeco, view) {
            this.updateOuterDeco(outerDeco);
            this.node = node;
            this.innerDeco = innerDeco;
            if (this.contentDOM)
                this.updateChildren(view, this.posAtStart);
            this.dirty = NOT_DIRTY;
        }
        updateOuterDeco(outerDeco) {
            if (sameOuterDeco(outerDeco, this.outerDeco))
                return;
            let needsWrap = this.nodeDOM.nodeType != 1;
            let oldDOM = this.dom;
            this.dom = patchOuterDeco(this.dom, this.nodeDOM, computeOuterDeco(this.outerDeco, this.node, needsWrap), computeOuterDeco(outerDeco, this.node, needsWrap));
            if (this.dom != oldDOM) {
                oldDOM.pmViewDesc = undefined;
                this.dom.pmViewDesc = this;
            }
            this.outerDeco = outerDeco;
        }
        // Mark this node as being the selected node.
        selectNode() {
            if (this.nodeDOM.nodeType == 1)
                this.nodeDOM.classList.add("ProseMirror-selectednode");
            if (this.contentDOM || !this.node.type.spec.draggable)
                this.dom.draggable = true;
        }
        // Remove selected node marking from this node.
        deselectNode() {
            if (this.nodeDOM.nodeType == 1)
                this.nodeDOM.classList.remove("ProseMirror-selectednode");
            if (this.contentDOM || !this.node.type.spec.draggable)
                this.dom.removeAttribute("draggable");
        }
        get domAtom() { return this.node.isAtom; }
    }
    // Create a view desc for the top-level document node, to be exported
    // and used by the view class.
    function docViewDesc(doc, outerDeco, innerDeco, dom, view) {
        applyOuterDeco(dom, outerDeco, doc);
        return new NodeViewDesc(undefined, doc, outerDeco, innerDeco, dom, dom, dom, view, 0);
    }
    class TextViewDesc extends NodeViewDesc {
        constructor(parent, node, outerDeco, innerDeco, dom, nodeDOM, view) {
            super(parent, node, outerDeco, innerDeco, dom, null, nodeDOM, view, 0);
        }
        parseRule() {
            let skip = this.nodeDOM.parentNode;
            while (skip && skip != this.dom && !skip.pmIsDeco)
                skip = skip.parentNode;
            return { skip: (skip || true) };
        }
        update(node, outerDeco, innerDeco, view) {
            if (this.dirty == NODE_DIRTY || (this.dirty != NOT_DIRTY && !this.inParent()) ||
                !node.sameMarkup(this.node))
                return false;
            this.updateOuterDeco(outerDeco);
            if ((this.dirty != NOT_DIRTY || node.text != this.node.text) && node.text != this.nodeDOM.nodeValue) {
                this.nodeDOM.nodeValue = node.text;
                if (view.trackWrites == this.nodeDOM)
                    view.trackWrites = null;
            }
            this.node = node;
            this.dirty = NOT_DIRTY;
            return true;
        }
        inParent() {
            let parentDOM = this.parent.contentDOM;
            for (let n = this.nodeDOM; n; n = n.parentNode)
                if (n == parentDOM)
                    return true;
            return false;
        }
        domFromPos(pos) {
            return { node: this.nodeDOM, offset: pos };
        }
        localPosFromDOM(dom, offset, bias) {
            if (dom == this.nodeDOM)
                return this.posAtStart + Math.min(offset, this.node.text.length);
            return super.localPosFromDOM(dom, offset, bias);
        }
        ignoreMutation(mutation) {
            return mutation.type != "characterData" && mutation.type != "selection";
        }
        slice(from, to, view) {
            let node = this.node.cut(from, to), dom = document.createTextNode(node.text);
            return new TextViewDesc(this.parent, node, this.outerDeco, this.innerDeco, dom, dom, view);
        }
        markDirty(from, to) {
            super.markDirty(from, to);
            if (this.dom != this.nodeDOM && (from == 0 || to == this.nodeDOM.nodeValue.length))
                this.dirty = NODE_DIRTY;
        }
        get domAtom() { return false; }
    }
    // A dummy desc used to tag trailing BR or IMG nodes created to work
    // around contentEditable terribleness.
    class TrailingHackViewDesc extends ViewDesc {
        parseRule() { return { ignore: true }; }
        matchesHack(nodeName) { return this.dirty == NOT_DIRTY && this.dom.nodeName == nodeName; }
        get domAtom() { return true; }
        get ignoreForCoords() { return this.dom.nodeName == "IMG"; }
    }
    // A separate subclass is used for customized node views, so that the
    // extra checks only have to be made for nodes that are actually
    // customized.
    class CustomNodeViewDesc extends NodeViewDesc {
        constructor(parent, node, outerDeco, innerDeco, dom, contentDOM, nodeDOM, spec, view, pos) {
            super(parent, node, outerDeco, innerDeco, dom, contentDOM, nodeDOM, view, pos);
            this.spec = spec;
        }
        // A custom `update` method gets to decide whether the update goes
        // through. If it does, and there's a `contentDOM` node, our logic
        // updates the children.
        update(node, outerDeco, innerDeco, view) {
            if (this.dirty == NODE_DIRTY)
                return false;
            if (this.spec.update) {
                let result = this.spec.update(node, outerDeco, innerDeco);
                if (result)
                    this.updateInner(node, outerDeco, innerDeco, view);
                return result;
            }
            else if (!this.contentDOM && !node.isLeaf) {
                return false;
            }
            else {
                return super.update(node, outerDeco, innerDeco, view);
            }
        }
        selectNode() {
            this.spec.selectNode ? this.spec.selectNode() : super.selectNode();
        }
        deselectNode() {
            this.spec.deselectNode ? this.spec.deselectNode() : super.deselectNode();
        }
        setSelection(anchor, head, root, force) {
            this.spec.setSelection ? this.spec.setSelection(anchor, head, root)
                : super.setSelection(anchor, head, root, force);
        }
        destroy() {
            if (this.spec.destroy)
                this.spec.destroy();
            super.destroy();
        }
        stopEvent(event) {
            return this.spec.stopEvent ? this.spec.stopEvent(event) : false;
        }
        ignoreMutation(mutation) {
            return this.spec.ignoreMutation ? this.spec.ignoreMutation(mutation) : super.ignoreMutation(mutation);
        }
    }
    // Sync the content of the given DOM node with the nodes associated
    // with the given array of view descs, recursing into mark descs
    // because this should sync the subtree for a whole node at a time.
    function renderDescs(parentDOM, descs, view) {
        let dom = parentDOM.firstChild, written = false;
        for (let i = 0; i < descs.length; i++) {
            let desc = descs[i], childDOM = desc.dom;
            if (childDOM.parentNode == parentDOM) {
                while (childDOM != dom) {
                    dom = rm(dom);
                    written = true;
                }
                dom = dom.nextSibling;
            }
            else {
                written = true;
                parentDOM.insertBefore(childDOM, dom);
            }
            if (desc instanceof MarkViewDesc) {
                let pos = dom ? dom.previousSibling : parentDOM.lastChild;
                renderDescs(desc.contentDOM, desc.children, view);
                dom = pos ? pos.nextSibling : parentDOM.firstChild;
            }
        }
        while (dom) {
            dom = rm(dom);
            written = true;
        }
        if (written && view.trackWrites == parentDOM)
            view.trackWrites = null;
    }
    const OuterDecoLevel = function (nodeName) {
        if (nodeName)
            this.nodeName = nodeName;
    };
    OuterDecoLevel.prototype = Object.create(null);
    const noDeco = [new OuterDecoLevel];
    function computeOuterDeco(outerDeco, node, needsWrap) {
        if (outerDeco.length == 0)
            return noDeco;
        let top = needsWrap ? noDeco[0] : new OuterDecoLevel, result = [top];
        for (let i = 0; i < outerDeco.length; i++) {
            let attrs = outerDeco[i].type.attrs;
            if (!attrs)
                continue;
            if (attrs.nodeName)
                result.push(top = new OuterDecoLevel(attrs.nodeName));
            for (let name in attrs) {
                let val = attrs[name];
                if (val == null)
                    continue;
                if (needsWrap && result.length == 1)
                    result.push(top = new OuterDecoLevel(node.isInline ? "span" : "div"));
                if (name == "class")
                    top.class = (top.class ? top.class + " " : "") + val;
                else if (name == "style")
                    top.style = (top.style ? top.style + ";" : "") + val;
                else if (name != "nodeName")
                    top[name] = val;
            }
        }
        return result;
    }
    function patchOuterDeco(outerDOM, nodeDOM, prevComputed, curComputed) {
        // Shortcut for trivial case
        if (prevComputed == noDeco && curComputed == noDeco)
            return nodeDOM;
        let curDOM = nodeDOM;
        for (let i = 0; i < curComputed.length; i++) {
            let deco = curComputed[i], prev = prevComputed[i];
            if (i) {
                let parent;
                if (prev && prev.nodeName == deco.nodeName && curDOM != outerDOM &&
                    (parent = curDOM.parentNode) && parent.nodeName.toLowerCase() == deco.nodeName) {
                    curDOM = parent;
                }
                else {
                    parent = document.createElement(deco.nodeName);
                    parent.pmIsDeco = true;
                    parent.appendChild(curDOM);
                    prev = noDeco[0];
                    curDOM = parent;
                }
            }
            patchAttributes(curDOM, prev || noDeco[0], deco);
        }
        return curDOM;
    }
    function patchAttributes(dom, prev, cur) {
        for (let name in prev)
            if (name != "class" && name != "style" && name != "nodeName" && !(name in cur))
                dom.removeAttribute(name);
        for (let name in cur)
            if (name != "class" && name != "style" && name != "nodeName" && cur[name] != prev[name])
                dom.setAttribute(name, cur[name]);
        if (prev.class != cur.class) {
            let prevList = prev.class ? prev.class.split(" ").filter(Boolean) : [];
            let curList = cur.class ? cur.class.split(" ").filter(Boolean) : [];
            for (let i = 0; i < prevList.length; i++)
                if (curList.indexOf(prevList[i]) == -1)
                    dom.classList.remove(prevList[i]);
            for (let i = 0; i < curList.length; i++)
                if (prevList.indexOf(curList[i]) == -1)
                    dom.classList.add(curList[i]);
            if (dom.classList.length == 0)
                dom.removeAttribute("class");
        }
        if (prev.style != cur.style) {
            if (prev.style) {
                let prop = /\s*([\w\-\xa1-\uffff]+)\s*:(?:"(?:\\.|[^"])*"|'(?:\\.|[^'])*'|\(.*?\)|[^;])*/g, m;
                while (m = prop.exec(prev.style))
                    dom.style.removeProperty(m[1]);
            }
            if (cur.style)
                dom.style.cssText += cur.style;
        }
    }
    function applyOuterDeco(dom, deco, node) {
        return patchOuterDeco(dom, dom, noDeco, computeOuterDeco(deco, node, dom.nodeType != 1));
    }
    function sameOuterDeco(a, b) {
        if (a.length != b.length)
            return false;
        for (let i = 0; i < a.length; i++)
            if (!a[i].type.eq(b[i].type))
                return false;
        return true;
    }
    // Remove a DOM node and return its next sibling.
    function rm(dom) {
        let next = dom.nextSibling;
        dom.parentNode.removeChild(dom);
        return next;
    }
    // Helper class for incrementally updating a tree of mark descs and
    // the widget and node descs inside of them.
    class ViewTreeUpdater {
        constructor(top, lock, view) {
            this.lock = lock;
            this.view = view;
            // Index into `this.top`'s child array, represents the current
            // update position.
            this.index = 0;
            // When entering a mark, the current top and index are pushed
            // onto this.
            this.stack = [];
            // Tracks whether anything was changed
            this.changed = false;
            this.top = top;
            this.preMatch = preMatch(top.node.content, top);
        }
        // Destroy and remove the children between the given indices in
        // `this.top`.
        destroyBetween(start, end) {
            if (start == end)
                return;
            for (let i = start; i < end; i++)
                this.top.children[i].destroy();
            this.top.children.splice(start, end - start);
            this.changed = true;
        }
        // Destroy all remaining children in `this.top`.
        destroyRest() {
            this.destroyBetween(this.index, this.top.children.length);
        }
        // Sync the current stack of mark descs with the given array of
        // marks, reusing existing mark descs when possible.
        syncToMarks(marks, inline, view) {
            let keep = 0, depth = this.stack.length >> 1;
            let maxKeep = Math.min(depth, marks.length);
            while (keep < maxKeep &&
                (keep == depth - 1 ? this.top : this.stack[(keep + 1) << 1])
                    .matchesMark(marks[keep]) && marks[keep].type.spec.spanning !== false)
                keep++;
            while (keep < depth) {
                this.destroyRest();
                this.top.dirty = NOT_DIRTY;
                this.index = this.stack.pop();
                this.top = this.stack.pop();
                depth--;
            }
            while (depth < marks.length) {
                this.stack.push(this.top, this.index + 1);
                let found = -1;
                for (let i = this.index; i < Math.min(this.index + 3, this.top.children.length); i++) {
                    if (this.top.children[i].matchesMark(marks[depth])) {
                        found = i;
                        break;
                    }
                }
                if (found > -1) {
                    if (found > this.index) {
                        this.changed = true;
                        this.destroyBetween(this.index, found);
                    }
                    this.top = this.top.children[this.index];
                }
                else {
                    let markDesc = MarkViewDesc.create(this.top, marks[depth], inline, view);
                    this.top.children.splice(this.index, 0, markDesc);
                    this.top = markDesc;
                    this.changed = true;
                }
                this.index = 0;
                depth++;
            }
        }
        // Try to find a node desc matching the given data. Skip over it and
        // return true when successful.
        findNodeMatch(node, outerDeco, innerDeco, index) {
            let found = -1, targetDesc;
            if (index >= this.preMatch.index &&
                (targetDesc = this.preMatch.matches[index - this.preMatch.index]).parent == this.top &&
                targetDesc.matchesNode(node, outerDeco, innerDeco)) {
                found = this.top.children.indexOf(targetDesc, this.index);
            }
            else {
                for (let i = this.index, e = Math.min(this.top.children.length, i + 5); i < e; i++) {
                    let child = this.top.children[i];
                    if (child.matchesNode(node, outerDeco, innerDeco) && !this.preMatch.matched.has(child)) {
                        found = i;
                        break;
                    }
                }
            }
            if (found < 0)
                return false;
            this.destroyBetween(this.index, found);
            this.index++;
            return true;
        }
        updateNodeAt(node, outerDeco, innerDeco, index, view) {
            let child = this.top.children[index];
            if (child.dirty == NODE_DIRTY && child.dom == child.contentDOM)
                child.dirty = CONTENT_DIRTY;
            if (!child.update(node, outerDeco, innerDeco, view))
                return false;
            this.destroyBetween(this.index, index);
            this.index++;
            return true;
        }
        findIndexWithChild(domNode) {
            for (;;) {
                let parent = domNode.parentNode;
                if (!parent)
                    return -1;
                if (parent == this.top.contentDOM) {
                    let desc = domNode.pmViewDesc;
                    if (desc)
                        for (let i = this.index; i < this.top.children.length; i++) {
                            if (this.top.children[i] == desc)
                                return i;
                        }
                    return -1;
                }
                domNode = parent;
            }
        }
        // Try to update the next node, if any, to the given data. Checks
        // pre-matches to avoid overwriting nodes that could still be used.
        updateNextNode(node, outerDeco, innerDeco, view, index) {
            for (let i = this.index; i < this.top.children.length; i++) {
                let next = this.top.children[i];
                if (next instanceof NodeViewDesc) {
                    let preMatch = this.preMatch.matched.get(next);
                    if (preMatch != null && preMatch != index)
                        return false;
                    let nextDOM = next.dom;
                    // Can't update if nextDOM is or contains this.lock, except if
                    // it's a text node whose content already matches the new text
                    // and whose decorations match the new ones.
                    let locked = this.lock && (nextDOM == this.lock || nextDOM.nodeType == 1 && nextDOM.contains(this.lock.parentNode)) &&
                        !(node.isText && next.node && next.node.isText && next.nodeDOM.nodeValue == node.text &&
                            next.dirty != NODE_DIRTY && sameOuterDeco(outerDeco, next.outerDeco));
                    if (!locked && next.update(node, outerDeco, innerDeco, view)) {
                        this.destroyBetween(this.index, i);
                        if (next.dom != nextDOM)
                            this.changed = true;
                        this.index++;
                        return true;
                    }
                    break;
                }
            }
            return false;
        }
        // Insert the node as a newly created node desc.
        addNode(node, outerDeco, innerDeco, view, pos) {
            this.top.children.splice(this.index++, 0, NodeViewDesc.create(this.top, node, outerDeco, innerDeco, view, pos));
            this.changed = true;
        }
        placeWidget(widget, view, pos) {
            let next = this.index < this.top.children.length ? this.top.children[this.index] : null;
            if (next && next.matchesWidget(widget) &&
                (widget == next.widget || !next.widget.type.toDOM.parentNode)) {
                this.index++;
            }
            else {
                let desc = new WidgetViewDesc(this.top, widget, view, pos);
                this.top.children.splice(this.index++, 0, desc);
                this.changed = true;
            }
        }
        // Make sure a textblock looks and behaves correctly in
        // contentEditable.
        addTextblockHacks() {
            let lastChild = this.top.children[this.index - 1], parent = this.top;
            while (lastChild instanceof MarkViewDesc) {
                parent = lastChild;
                lastChild = parent.children[parent.children.length - 1];
            }
            if (!lastChild || // Empty textblock
                !(lastChild instanceof TextViewDesc) ||
                /\n$/.test(lastChild.node.text) ||
                (this.view.requiresGeckoHackNode && /\s$/.test(lastChild.node.text))) {
                // Avoid bugs in Safari's cursor drawing (#1165) and Chrome's mouse selection (#1152)
                if ((safari || chrome) && lastChild && lastChild.dom.contentEditable == "false")
                    this.addHackNode("IMG", parent);
                this.addHackNode("BR", this.top);
            }
        }
        addHackNode(nodeName, parent) {
            if (parent == this.top && this.index < parent.children.length && parent.children[this.index].matchesHack(nodeName)) {
                this.index++;
            }
            else {
                let dom = document.createElement(nodeName);
                if (nodeName == "IMG") {
                    dom.className = "ProseMirror-separator";
                    dom.alt = "";
                }
                if (nodeName == "BR")
                    dom.className = "ProseMirror-trailingBreak";
                let hack = new TrailingHackViewDesc(this.top, [], dom, null);
                if (parent != this.top)
                    parent.children.push(hack);
                else
                    parent.children.splice(this.index++, 0, hack);
                this.changed = true;
            }
        }
    }
    // Iterate from the end of the fragment and array of descs to find
    // directly matching ones, in order to avoid overeagerly reusing those
    // for other nodes. Returns the fragment index of the first node that
    // is part of the sequence of matched nodes at the end of the
    // fragment.
    function preMatch(frag, parentDesc) {
        let curDesc = parentDesc, descI = curDesc.children.length;
        let fI = frag.childCount, matched = new Map, matches = [];
        outer: while (fI > 0) {
            let desc;
            for (;;) {
                if (descI) {
                    let next = curDesc.children[descI - 1];
                    if (next instanceof MarkViewDesc) {
                        curDesc = next;
                        descI = next.children.length;
                    }
                    else {
                        desc = next;
                        descI--;
                        break;
                    }
                }
                else if (curDesc == parentDesc) {
                    break outer;
                }
                else {
                    // FIXME
                    descI = curDesc.parent.children.indexOf(curDesc);
                    curDesc = curDesc.parent;
                }
            }
            let node = desc.node;
            if (!node)
                continue;
            if (node != frag.child(fI - 1))
                break;
            --fI;
            matched.set(desc, fI);
            matches.push(desc);
        }
        return { index: fI, matched, matches: matches.reverse() };
    }
    function compareSide(a, b) {
        return a.type.side - b.type.side;
    }
    // This function abstracts iterating over the nodes and decorations in
    // a fragment. Calls `onNode` for each node, with its local and child
    // decorations. Splits text nodes when there is a decoration starting
    // or ending inside of them. Calls `onWidget` for each widget.
    function iterDeco(parent, deco, onWidget, onNode) {
        let locals = deco.locals(parent), offset = 0;
        // Simple, cheap variant for when there are no local decorations
        if (locals.length == 0) {
            for (let i = 0; i < parent.childCount; i++) {
                let child = parent.child(i);
                onNode(child, locals, deco.forChild(offset, child), i);
                offset += child.nodeSize;
            }
            return;
        }
        let decoIndex = 0, active = [], restNode = null;
        for (let parentIndex = 0;;) {
            if (decoIndex < locals.length && locals[decoIndex].to == offset) {
                let widget = locals[decoIndex++], widgets;
                while (decoIndex < locals.length && locals[decoIndex].to == offset)
                    (widgets || (widgets = [widget])).push(locals[decoIndex++]);
                if (widgets) {
                    widgets.sort(compareSide);
                    for (let i = 0; i < widgets.length; i++)
                        onWidget(widgets[i], parentIndex, !!restNode);
                }
                else {
                    onWidget(widget, parentIndex, !!restNode);
                }
            }
            let child, index;
            if (restNode) {
                index = -1;
                child = restNode;
                restNode = null;
            }
            else if (parentIndex < parent.childCount) {
                index = parentIndex;
                child = parent.child(parentIndex++);
            }
            else {
                break;
            }
            for (let i = 0; i < active.length; i++)
                if (active[i].to <= offset)
                    active.splice(i--, 1);
            while (decoIndex < locals.length && locals[decoIndex].from <= offset && locals[decoIndex].to > offset)
                active.push(locals[decoIndex++]);
            let end = offset + child.nodeSize;
            if (child.isText) {
                let cutAt = end;
                if (decoIndex < locals.length && locals[decoIndex].from < cutAt)
                    cutAt = locals[decoIndex].from;
                for (let i = 0; i < active.length; i++)
                    if (active[i].to < cutAt)
                        cutAt = active[i].to;
                if (cutAt < end) {
                    restNode = child.cut(cutAt - offset);
                    child = child.cut(0, cutAt - offset);
                    end = cutAt;
                    index = -1;
                }
            }
            let outerDeco = child.isInline && !child.isLeaf ? active.filter(d => !d.inline) : active.slice();
            onNode(child, outerDeco, deco.forChild(offset, child), index);
            offset = end;
        }
    }
    // List markers in Mobile Safari will mysteriously disappear
    // sometimes. This works around that.
    function iosHacks(dom) {
        if (dom.nodeName == "UL" || dom.nodeName == "OL") {
            let oldCSS = dom.style.cssText;
            dom.style.cssText = oldCSS + "; list-style: square !important";
            window.getComputedStyle(dom).listStyle;
            dom.style.cssText = oldCSS;
        }
    }
    function nearbyTextNode(node, offset) {
        for (;;) {
            if (node.nodeType == 3)
                return node;
            if (node.nodeType == 1 && offset > 0) {
                if (node.childNodes.length > offset && node.childNodes[offset].nodeType == 3)
                    return node.childNodes[offset];
                node = node.childNodes[offset - 1];
                offset = nodeSize(node);
            }
            else if (node.nodeType == 1 && offset < node.childNodes.length) {
                node = node.childNodes[offset];
                offset = 0;
            }
            else {
                return null;
            }
        }
    }
    // Find a piece of text in an inline fragment, overlapping from-to
    function findTextInFragment(frag, text, from, to) {
        for (let i = 0, pos = 0; i < frag.childCount && pos <= to;) {
            let child = frag.child(i++), childStart = pos;
            pos += child.nodeSize;
            if (!child.isText)
                continue;
            let str = child.text;
            while (i < frag.childCount) {
                let next = frag.child(i++);
                pos += next.nodeSize;
                if (!next.isText)
                    break;
                str += next.text;
            }
            if (pos >= from) {
                let found = childStart < to ? str.lastIndexOf(text, to - childStart - 1) : -1;
                if (found >= 0 && found + text.length + childStart >= from)
                    return childStart + found;
                if (from == to && str.length >= (to + text.length) - childStart &&
                    str.slice(to - childStart, to - childStart + text.length) == text)
                    return to;
            }
        }
        return -1;
    }
    // Replace range from-to in an array of view descs with replacement
    // (may be null to just delete). This goes very much against the grain
    // of the rest of this code, which tends to create nodes with the
    // right shape in one go, rather than messing with them after
    // creation, but is necessary in the composition hack.
    function replaceNodes(nodes, from, to, view, replacement) {
        let result = [];
        for (let i = 0, off = 0; i < nodes.length; i++) {
            let child = nodes[i], start = off, end = off += child.size;
            if (start >= to || end <= from) {
                result.push(child);
            }
            else {
                if (start < from)
                    result.push(child.slice(0, from - start, view));
                if (replacement) {
                    result.push(replacement);
                    replacement = undefined;
                }
                if (end > to)
                    result.push(child.slice(to - start, child.size, view));
            }
        }
        return result;
    }

    function selectionFromDOM(view, origin = null) {
        let domSel = view.domSelection(), doc = view.state.doc;
        if (!domSel.focusNode)
            return null;
        let nearestDesc = view.docView.nearestDesc(domSel.focusNode), inWidget = nearestDesc && nearestDesc.size == 0;
        let head = view.docView.posFromDOM(domSel.focusNode, domSel.focusOffset, 1);
        if (head < 0)
            return null;
        let $head = doc.resolve(head), $anchor, selection;
        if (selectionCollapsed(domSel)) {
            $anchor = $head;
            while (nearestDesc && !nearestDesc.node)
                nearestDesc = nearestDesc.parent;
            let nearestDescNode = nearestDesc.node;
            if (nearestDesc && nearestDescNode.isAtom && NodeSelection.isSelectable(nearestDescNode) && nearestDesc.parent
                && !(nearestDescNode.isInline && isOnEdge(domSel.focusNode, domSel.focusOffset, nearestDesc.dom))) {
                let pos = nearestDesc.posBefore;
                selection = new NodeSelection(head == pos ? $head : doc.resolve(pos));
            }
        }
        else {
            let anchor = view.docView.posFromDOM(domSel.anchorNode, domSel.anchorOffset, 1);
            if (anchor < 0)
                return null;
            $anchor = doc.resolve(anchor);
        }
        if (!selection) {
            let bias = origin == "pointer" || (view.state.selection.head < $head.pos && !inWidget) ? 1 : -1;
            selection = selectionBetween(view, $anchor, $head, bias);
        }
        return selection;
    }
    function editorOwnsSelection(view) {
        return view.editable ? view.hasFocus() :
            hasSelection(view) && document.activeElement && document.activeElement.contains(view.dom);
    }
    function selectionToDOM(view, force = false) {
        let sel = view.state.selection;
        syncNodeSelection(view, sel);
        if (!editorOwnsSelection(view))
            return;
        // The delayed drag selection causes issues with Cell Selections
        // in Safari. And the drag selection delay is to workarond issues
        // which only present in Chrome.
        if (!force && view.input.mouseDown && view.input.mouseDown.allowDefault && chrome) {
            let domSel = view.domSelection(), curSel = view.domObserver.currentSelection;
            if (domSel.anchorNode && curSel.anchorNode &&
                isEquivalentPosition(domSel.anchorNode, domSel.anchorOffset, curSel.anchorNode, curSel.anchorOffset)) {
                view.input.mouseDown.delayedSelectionSync = true;
                view.domObserver.setCurSelection();
                return;
            }
        }
        view.domObserver.disconnectSelection();
        if (view.cursorWrapper) {
            selectCursorWrapper(view);
        }
        else {
            let { anchor, head } = sel, resetEditableFrom, resetEditableTo;
            if (brokenSelectBetweenUneditable && !(sel instanceof TextSelection)) {
                if (!sel.$from.parent.inlineContent)
                    resetEditableFrom = temporarilyEditableNear(view, sel.from);
                if (!sel.empty && !sel.$from.parent.inlineContent)
                    resetEditableTo = temporarilyEditableNear(view, sel.to);
            }
            view.docView.setSelection(anchor, head, view.root, force);
            if (brokenSelectBetweenUneditable) {
                if (resetEditableFrom)
                    resetEditable(resetEditableFrom);
                if (resetEditableTo)
                    resetEditable(resetEditableTo);
            }
            if (sel.visible) {
                view.dom.classList.remove("ProseMirror-hideselection");
            }
            else {
                view.dom.classList.add("ProseMirror-hideselection");
                if ("onselectionchange" in document)
                    removeClassOnSelectionChange(view);
            }
        }
        view.domObserver.setCurSelection();
        view.domObserver.connectSelection();
    }
    // Kludge to work around Webkit not allowing a selection to start/end
    // between non-editable block nodes. We briefly make something
    // editable, set the selection, then set it uneditable again.
    const brokenSelectBetweenUneditable = safari || chrome && chrome_version < 63;
    function temporarilyEditableNear(view, pos) {
        let { node, offset } = view.docView.domFromPos(pos, 0);
        let after = offset < node.childNodes.length ? node.childNodes[offset] : null;
        let before = offset ? node.childNodes[offset - 1] : null;
        if (safari && after && after.contentEditable == "false")
            return setEditable(after);
        if ((!after || after.contentEditable == "false") &&
            (!before || before.contentEditable == "false")) {
            if (after)
                return setEditable(after);
            else if (before)
                return setEditable(before);
        }
    }
    function setEditable(element) {
        element.contentEditable = "true";
        if (safari && element.draggable) {
            element.draggable = false;
            element.wasDraggable = true;
        }
        return element;
    }
    function resetEditable(element) {
        element.contentEditable = "false";
        if (element.wasDraggable) {
            element.draggable = true;
            element.wasDraggable = null;
        }
    }
    function removeClassOnSelectionChange(view) {
        let doc = view.dom.ownerDocument;
        doc.removeEventListener("selectionchange", view.input.hideSelectionGuard);
        let domSel = view.domSelection();
        let node = domSel.anchorNode, offset = domSel.anchorOffset;
        doc.addEventListener("selectionchange", view.input.hideSelectionGuard = () => {
            if (domSel.anchorNode != node || domSel.anchorOffset != offset) {
                doc.removeEventListener("selectionchange", view.input.hideSelectionGuard);
                setTimeout(() => {
                    if (!editorOwnsSelection(view) || view.state.selection.visible)
                        view.dom.classList.remove("ProseMirror-hideselection");
                }, 20);
            }
        });
    }
    function selectCursorWrapper(view) {
        let domSel = view.domSelection(), range = document.createRange();
        let node = view.cursorWrapper.dom, img = node.nodeName == "IMG";
        if (img)
            range.setEnd(node.parentNode, domIndex(node) + 1);
        else
            range.setEnd(node, 0);
        range.collapse(false);
        domSel.removeAllRanges();
        domSel.addRange(range);
        // Kludge to kill 'control selection' in IE11 when selecting an
        // invisible cursor wrapper, since that would result in those weird
        // resize handles and a selection that considers the absolutely
        // positioned wrapper, rather than the root editable node, the
        // focused element.
        if (!img && !view.state.selection.visible && ie && ie_version <= 11) {
            node.disabled = true;
            node.disabled = false;
        }
    }
    function syncNodeSelection(view, sel) {
        if (sel instanceof NodeSelection) {
            let desc = view.docView.descAt(sel.from);
            if (desc != view.lastSelectedViewDesc) {
                clearNodeSelection(view);
                if (desc)
                    desc.selectNode();
                view.lastSelectedViewDesc = desc;
            }
        }
        else {
            clearNodeSelection(view);
        }
    }
    // Clear all DOM statefulness of the last node selection.
    function clearNodeSelection(view) {
        if (view.lastSelectedViewDesc) {
            if (view.lastSelectedViewDesc.parent)
                view.lastSelectedViewDesc.deselectNode();
            view.lastSelectedViewDesc = undefined;
        }
    }
    function selectionBetween(view, $anchor, $head, bias) {
        return view.someProp("createSelectionBetween", f => f(view, $anchor, $head))
            || TextSelection.between($anchor, $head, bias);
    }
    function hasFocusAndSelection(view) {
        if (view.editable && !view.hasFocus())
            return false;
        return hasSelection(view);
    }
    function hasSelection(view) {
        let sel = view.domSelection();
        if (!sel.anchorNode)
            return false;
        try {
            // Firefox will raise 'permission denied' errors when accessing
            // properties of `sel.anchorNode` when it's in a generated CSS
            // element.
            return view.dom.contains(sel.anchorNode.nodeType == 3 ? sel.anchorNode.parentNode : sel.anchorNode) &&
                (view.editable || view.dom.contains(sel.focusNode.nodeType == 3 ? sel.focusNode.parentNode : sel.focusNode));
        }
        catch (_) {
            return false;
        }
    }
    function anchorInRightPlace(view) {
        let anchorDOM = view.docView.domFromPos(view.state.selection.anchor, 0);
        let domSel = view.domSelection();
        return isEquivalentPosition(anchorDOM.node, anchorDOM.offset, domSel.anchorNode, domSel.anchorOffset);
    }

    function moveSelectionBlock(state, dir) {
        let { $anchor, $head } = state.selection;
        let $side = dir > 0 ? $anchor.max($head) : $anchor.min($head);
        let $start = !$side.parent.inlineContent ? $side : $side.depth ? state.doc.resolve(dir > 0 ? $side.after() : $side.before()) : null;
        return $start && Selection.findFrom($start, dir);
    }
    function apply(view, sel) {
        view.dispatch(view.state.tr.setSelection(sel).scrollIntoView());
        return true;
    }
    function selectHorizontally(view, dir, mods) {
        let sel = view.state.selection;
        if (sel instanceof TextSelection) {
            if (!sel.empty || mods.indexOf("s") > -1) {
                return false;
            }
            else if (view.endOfTextblock(dir > 0 ? "right" : "left")) {
                let next = moveSelectionBlock(view.state, dir);
                if (next && (next instanceof NodeSelection))
                    return apply(view, next);
                return false;
            }
            else if (!(mac && mods.indexOf("m") > -1)) {
                let $head = sel.$head, node = $head.textOffset ? null : dir < 0 ? $head.nodeBefore : $head.nodeAfter, desc;
                if (!node || node.isText)
                    return false;
                let nodePos = dir < 0 ? $head.pos - node.nodeSize : $head.pos;
                if (!(node.isAtom || (desc = view.docView.descAt(nodePos)) && !desc.contentDOM))
                    return false;
                if (NodeSelection.isSelectable(node)) {
                    return apply(view, new NodeSelection(dir < 0 ? view.state.doc.resolve($head.pos - node.nodeSize) : $head));
                }
                else if (webkit) {
                    // Chrome and Safari will introduce extra pointless cursor
                    // positions around inline uneditable nodes, so we have to
                    // take over and move the cursor past them (#937)
                    return apply(view, new TextSelection(view.state.doc.resolve(dir < 0 ? nodePos : nodePos + node.nodeSize)));
                }
                else {
                    return false;
                }
            }
        }
        else if (sel instanceof NodeSelection && sel.node.isInline) {
            return apply(view, new TextSelection(dir > 0 ? sel.$to : sel.$from));
        }
        else {
            let next = moveSelectionBlock(view.state, dir);
            if (next)
                return apply(view, next);
            return false;
        }
    }
    function nodeLen(node) {
        return node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length;
    }
    function isIgnorable(dom) {
        let desc = dom.pmViewDesc;
        return desc && desc.size == 0 && (dom.nextSibling || dom.nodeName != "BR");
    }
    // Make sure the cursor isn't directly after one or more ignored
    // nodes, which will confuse the browser's cursor motion logic.
    function skipIgnoredNodesLeft(view) {
        let sel = view.domSelection();
        let node = sel.focusNode, offset = sel.focusOffset;
        if (!node)
            return;
        let moveNode, moveOffset, force = false;
        // Gecko will do odd things when the selection is directly in front
        // of a non-editable node, so in that case, move it into the next
        // node if possible. Issue prosemirror/prosemirror#832.
        if (gecko && node.nodeType == 1 && offset < nodeLen(node) && isIgnorable(node.childNodes[offset]))
            force = true;
        for (;;) {
            if (offset > 0) {
                if (node.nodeType != 1) {
                    break;
                }
                else {
                    let before = node.childNodes[offset - 1];
                    if (isIgnorable(before)) {
                        moveNode = node;
                        moveOffset = --offset;
                    }
                    else if (before.nodeType == 3) {
                        node = before;
                        offset = node.nodeValue.length;
                    }
                    else
                        break;
                }
            }
            else if (isBlockNode(node)) {
                break;
            }
            else {
                let prev = node.previousSibling;
                while (prev && isIgnorable(prev)) {
                    moveNode = node.parentNode;
                    moveOffset = domIndex(prev);
                    prev = prev.previousSibling;
                }
                if (!prev) {
                    node = node.parentNode;
                    if (node == view.dom)
                        break;
                    offset = 0;
                }
                else {
                    node = prev;
                    offset = nodeLen(node);
                }
            }
        }
        if (force)
            setSelFocus(view, sel, node, offset);
        else if (moveNode)
            setSelFocus(view, sel, moveNode, moveOffset);
    }
    // Make sure the cursor isn't directly before one or more ignored
    // nodes.
    function skipIgnoredNodesRight(view) {
        let sel = view.domSelection();
        let node = sel.focusNode, offset = sel.focusOffset;
        if (!node)
            return;
        let len = nodeLen(node);
        let moveNode, moveOffset;
        for (;;) {
            if (offset < len) {
                if (node.nodeType != 1)
                    break;
                let after = node.childNodes[offset];
                if (isIgnorable(after)) {
                    moveNode = node;
                    moveOffset = ++offset;
                }
                else
                    break;
            }
            else if (isBlockNode(node)) {
                break;
            }
            else {
                let next = node.nextSibling;
                while (next && isIgnorable(next)) {
                    moveNode = next.parentNode;
                    moveOffset = domIndex(next) + 1;
                    next = next.nextSibling;
                }
                if (!next) {
                    node = node.parentNode;
                    if (node == view.dom)
                        break;
                    offset = len = 0;
                }
                else {
                    node = next;
                    offset = 0;
                    len = nodeLen(node);
                }
            }
        }
        if (moveNode)
            setSelFocus(view, sel, moveNode, moveOffset);
    }
    function isBlockNode(dom) {
        let desc = dom.pmViewDesc;
        return desc && desc.node && desc.node.isBlock;
    }
    function setSelFocus(view, sel, node, offset) {
        if (selectionCollapsed(sel)) {
            let range = document.createRange();
            range.setEnd(node, offset);
            range.setStart(node, offset);
            sel.removeAllRanges();
            sel.addRange(range);
        }
        else if (sel.extend) {
            sel.extend(node, offset);
        }
        view.domObserver.setCurSelection();
        let { state } = view;
        // If no state update ends up happening, reset the selection.
        setTimeout(() => {
            if (view.state == state)
                selectionToDOM(view);
        }, 50);
    }
    // Check whether vertical selection motion would involve node
    // selections. If so, apply it (if not, the result is left to the
    // browser)
    function selectVertically(view, dir, mods) {
        let sel = view.state.selection;
        if (sel instanceof TextSelection && !sel.empty || mods.indexOf("s") > -1)
            return false;
        if (mac && mods.indexOf("m") > -1)
            return false;
        let { $from, $to } = sel;
        if (!$from.parent.inlineContent || view.endOfTextblock(dir < 0 ? "up" : "down")) {
            let next = moveSelectionBlock(view.state, dir);
            if (next && (next instanceof NodeSelection))
                return apply(view, next);
        }
        if (!$from.parent.inlineContent) {
            let side = dir < 0 ? $from : $to;
            let beyond = sel instanceof AllSelection ? Selection.near(side, dir) : Selection.findFrom(side, dir);
            return beyond ? apply(view, beyond) : false;
        }
        return false;
    }
    function stopNativeHorizontalDelete(view, dir) {
        if (!(view.state.selection instanceof TextSelection))
            return true;
        let { $head, $anchor, empty } = view.state.selection;
        if (!$head.sameParent($anchor))
            return true;
        if (!empty)
            return false;
        if (view.endOfTextblock(dir > 0 ? "forward" : "backward"))
            return true;
        let nextNode = !$head.textOffset && (dir < 0 ? $head.nodeBefore : $head.nodeAfter);
        if (nextNode && !nextNode.isText) {
            let tr = view.state.tr;
            if (dir < 0)
                tr.delete($head.pos - nextNode.nodeSize, $head.pos);
            else
                tr.delete($head.pos, $head.pos + nextNode.nodeSize);
            view.dispatch(tr);
            return true;
        }
        return false;
    }
    function switchEditable(view, node, state) {
        view.domObserver.stop();
        node.contentEditable = state;
        view.domObserver.start();
    }
    // Issue #867 / #1090 / https://bugs.chromium.org/p/chromium/issues/detail?id=903821
    // In which Safari (and at some point in the past, Chrome) does really
    // wrong things when the down arrow is pressed when the cursor is
    // directly at the start of a textblock and has an uneditable node
    // after it
    function safariDownArrowBug(view) {
        if (!safari || view.state.selection.$head.parentOffset > 0)
            return false;
        let { focusNode, focusOffset } = view.domSelection();
        if (focusNode && focusNode.nodeType == 1 && focusOffset == 0 &&
            focusNode.firstChild && focusNode.firstChild.contentEditable == "false") {
            let child = focusNode.firstChild;
            switchEditable(view, child, "true");
            setTimeout(() => switchEditable(view, child, "false"), 20);
        }
        return false;
    }
    // A backdrop key mapping used to make sure we always suppress keys
    // that have a dangerous default effect, even if the commands they are
    // bound to return false, and to make sure that cursor-motion keys
    // find a cursor (as opposed to a node selection) when pressed. For
    // cursor-motion keys, the code in the handlers also takes care of
    // block selections.
    function getMods(event) {
        let result = "";
        if (event.ctrlKey)
            result += "c";
        if (event.metaKey)
            result += "m";
        if (event.altKey)
            result += "a";
        if (event.shiftKey)
            result += "s";
        return result;
    }
    function captureKeyDown(view, event) {
        let code = event.keyCode, mods = getMods(event);
        if (code == 8 || (mac && code == 72 && mods == "c")) { // Backspace, Ctrl-h on Mac
            return stopNativeHorizontalDelete(view, -1) || skipIgnoredNodesLeft(view);
        }
        else if (code == 46 || (mac && code == 68 && mods == "c")) { // Delete, Ctrl-d on Mac
            return stopNativeHorizontalDelete(view, 1) || skipIgnoredNodesRight(view);
        }
        else if (code == 13 || code == 27) { // Enter, Esc
            return true;
        }
        else if (code == 37 || (mac && code == 66 && mods == "c")) { // Left arrow, Ctrl-b on Mac
            return selectHorizontally(view, -1, mods) || skipIgnoredNodesLeft(view);
        }
        else if (code == 39 || (mac && code == 70 && mods == "c")) { // Right arrow, Ctrl-f on Mac
            return selectHorizontally(view, 1, mods) || skipIgnoredNodesRight(view);
        }
        else if (code == 38 || (mac && code == 80 && mods == "c")) { // Up arrow, Ctrl-p on Mac
            return selectVertically(view, -1, mods) || skipIgnoredNodesLeft(view);
        }
        else if (code == 40 || (mac && code == 78 && mods == "c")) { // Down arrow, Ctrl-n on Mac
            return safariDownArrowBug(view) || selectVertically(view, 1, mods) || skipIgnoredNodesRight(view);
        }
        else if (mods == (mac ? "m" : "c") &&
            (code == 66 || code == 73 || code == 89 || code == 90)) { // Mod-[biyz]
            return true;
        }
        return false;
    }

    function serializeForClipboard(view, slice) {
        view.someProp("transformCopied", f => { slice = f(slice); });
        let context = [], { content, openStart, openEnd } = slice;
        while (openStart > 1 && openEnd > 1 && content.childCount == 1 && content.firstChild.childCount == 1) {
            openStart--;
            openEnd--;
            let node = content.firstChild;
            context.push(node.type.name, node.attrs != node.type.defaultAttrs ? node.attrs : null);
            content = node.content;
        }
        let serializer = view.someProp("clipboardSerializer") || DOMSerializer.fromSchema(view.state.schema);
        let doc = detachedDoc(), wrap = doc.createElement("div");
        wrap.appendChild(serializer.serializeFragment(content, { document: doc }));
        let firstChild = wrap.firstChild, needsWrap, wrappers = 0;
        while (firstChild && firstChild.nodeType == 1 && (needsWrap = wrapMap[firstChild.nodeName.toLowerCase()])) {
            for (let i = needsWrap.length - 1; i >= 0; i--) {
                let wrapper = doc.createElement(needsWrap[i]);
                while (wrap.firstChild)
                    wrapper.appendChild(wrap.firstChild);
                wrap.appendChild(wrapper);
                wrappers++;
            }
            firstChild = wrap.firstChild;
        }
        if (firstChild && firstChild.nodeType == 1)
            firstChild.setAttribute("data-pm-slice", `${openStart} ${openEnd}${wrappers ? ` -${wrappers}` : ""} ${JSON.stringify(context)}`);
        let text = view.someProp("clipboardTextSerializer", f => f(slice)) ||
            slice.content.textBetween(0, slice.content.size, "\n\n");
        return { dom: wrap, text };
    }
    // Read a slice of content from the clipboard (or drop data).
    function parseFromClipboard(view, text, html, plainText, $context) {
        let inCode = $context.parent.type.spec.code;
        let dom, slice;
        if (!html && !text)
            return null;
        let asText = text && (plainText || inCode || !html);
        if (asText) {
            view.someProp("transformPastedText", f => { text = f(text, inCode || plainText); });
            if (inCode)
                return text ? new Slice(Fragment.from(view.state.schema.text(text.replace(/\r\n?/g, "\n"))), 0, 0) : Slice.empty;
            let parsed = view.someProp("clipboardTextParser", f => f(text, $context, plainText));
            if (parsed) {
                slice = parsed;
            }
            else {
                let marks = $context.marks();
                let { schema } = view.state, serializer = DOMSerializer.fromSchema(schema);
                dom = document.createElement("div");
                text.split(/(?:\r\n?|\n)+/).forEach(block => {
                    let p = dom.appendChild(document.createElement("p"));
                    if (block)
                        p.appendChild(serializer.serializeNode(schema.text(block, marks)));
                });
            }
        }
        else {
            view.someProp("transformPastedHTML", f => { html = f(html); });
            dom = readHTML(html);
            if (webkit)
                restoreReplacedSpaces(dom);
        }
        let contextNode = dom && dom.querySelector("[data-pm-slice]");
        let sliceData = contextNode && /^(\d+) (\d+)(?: -(\d+))? (.*)/.exec(contextNode.getAttribute("data-pm-slice") || "");
        if (sliceData && sliceData[3])
            for (let i = +sliceData[3]; i > 0 && dom.firstChild; i--)
                dom = dom.firstChild;
        if (!slice) {
            let parser = view.someProp("clipboardParser") || view.someProp("domParser") || DOMParser.fromSchema(view.state.schema);
            slice = parser.parseSlice(dom, {
                preserveWhitespace: !!(asText || sliceData),
                context: $context,
                ruleFromNode(dom) {
                    if (dom.nodeName == "BR" && !dom.nextSibling &&
                        dom.parentNode && !inlineParents.test(dom.parentNode.nodeName))
                        return { ignore: true };
                    return null;
                }
            });
        }
        if (sliceData) {
            slice = addContext(closeSlice(slice, +sliceData[1], +sliceData[2]), sliceData[4]);
        }
        else { // HTML wasn't created by ProseMirror. Make sure top-level siblings are coherent
            slice = Slice.maxOpen(normalizeSiblings(slice.content, $context), true);
            if (slice.openStart || slice.openEnd) {
                let openStart = 0, openEnd = 0;
                for (let node = slice.content.firstChild; openStart < slice.openStart && !node.type.spec.isolating; openStart++, node = node.firstChild) { }
                for (let node = slice.content.lastChild; openEnd < slice.openEnd && !node.type.spec.isolating; openEnd++, node = node.lastChild) { }
                slice = closeSlice(slice, openStart, openEnd);
            }
        }
        view.someProp("transformPasted", f => { slice = f(slice); });
        return slice;
    }
    const inlineParents = /^(a|abbr|acronym|b|cite|code|del|em|i|ins|kbd|label|output|q|ruby|s|samp|span|strong|sub|sup|time|u|tt|var)$/i;
    // Takes a slice parsed with parseSlice, which means there hasn't been
    // any content-expression checking done on the top nodes, tries to
    // find a parent node in the current context that might fit the nodes,
    // and if successful, rebuilds the slice so that it fits into that parent.
    //
    // This addresses the problem that Transform.replace expects a
    // coherent slice, and will fail to place a set of siblings that don't
    // fit anywhere in the schema.
    function normalizeSiblings(fragment, $context) {
        if (fragment.childCount < 2)
            return fragment;
        for (let d = $context.depth; d >= 0; d--) {
            let parent = $context.node(d);
            let match = parent.contentMatchAt($context.index(d));
            let lastWrap, result = [];
            fragment.forEach(node => {
                if (!result)
                    return;
                let wrap = match.findWrapping(node.type), inLast;
                if (!wrap)
                    return result = null;
                if (inLast = result.length && lastWrap.length && addToSibling(wrap, lastWrap, node, result[result.length - 1], 0)) {
                    result[result.length - 1] = inLast;
                }
                else {
                    if (result.length)
                        result[result.length - 1] = closeRight(result[result.length - 1], lastWrap.length);
                    let wrapped = withWrappers(node, wrap);
                    result.push(wrapped);
                    match = match.matchType(wrapped.type);
                    lastWrap = wrap;
                }
            });
            if (result)
                return Fragment.from(result);
        }
        return fragment;
    }
    function withWrappers(node, wrap, from = 0) {
        for (let i = wrap.length - 1; i >= from; i--)
            node = wrap[i].create(null, Fragment.from(node));
        return node;
    }
    // Used to group adjacent nodes wrapped in similar parents by
    // normalizeSiblings into the same parent node
    function addToSibling(wrap, lastWrap, node, sibling, depth) {
        if (depth < wrap.length && depth < lastWrap.length && wrap[depth] == lastWrap[depth]) {
            let inner = addToSibling(wrap, lastWrap, node, sibling.lastChild, depth + 1);
            if (inner)
                return sibling.copy(sibling.content.replaceChild(sibling.childCount - 1, inner));
            let match = sibling.contentMatchAt(sibling.childCount);
            if (match.matchType(depth == wrap.length - 1 ? node.type : wrap[depth + 1]))
                return sibling.copy(sibling.content.append(Fragment.from(withWrappers(node, wrap, depth + 1))));
        }
    }
    function closeRight(node, depth) {
        if (depth == 0)
            return node;
        let fragment = node.content.replaceChild(node.childCount - 1, closeRight(node.lastChild, depth - 1));
        let fill = node.contentMatchAt(node.childCount).fillBefore(Fragment.empty, true);
        return node.copy(fragment.append(fill));
    }
    function closeRange(fragment, side, from, to, depth, openEnd) {
        let node = side < 0 ? fragment.firstChild : fragment.lastChild, inner = node.content;
        if (depth < to - 1)
            inner = closeRange(inner, side, from, to, depth + 1, openEnd);
        if (depth >= from)
            inner = side < 0 ? node.contentMatchAt(0).fillBefore(inner, fragment.childCount > 1 || openEnd <= depth).append(inner)
                : inner.append(node.contentMatchAt(node.childCount).fillBefore(Fragment.empty, true));
        return fragment.replaceChild(side < 0 ? 0 : fragment.childCount - 1, node.copy(inner));
    }
    function closeSlice(slice, openStart, openEnd) {
        if (openStart < slice.openStart)
            slice = new Slice(closeRange(slice.content, -1, openStart, slice.openStart, 0, slice.openEnd), openStart, slice.openEnd);
        if (openEnd < slice.openEnd)
            slice = new Slice(closeRange(slice.content, 1, openEnd, slice.openEnd, 0, 0), slice.openStart, openEnd);
        return slice;
    }
    // Trick from jQuery -- some elements must be wrapped in other
    // elements for innerHTML to work. I.e. if you do `div.innerHTML =
    // "<td>..</td>"` the table cells are ignored.
    const wrapMap = {
        thead: ["table"],
        tbody: ["table"],
        tfoot: ["table"],
        caption: ["table"],
        colgroup: ["table"],
        col: ["table", "colgroup"],
        tr: ["table", "tbody"],
        td: ["table", "tbody", "tr"],
        th: ["table", "tbody", "tr"]
    };
    let _detachedDoc = null;
    function detachedDoc() {
        return _detachedDoc || (_detachedDoc = document.implementation.createHTMLDocument("title"));
    }
    function readHTML(html) {
        let metas = /^(\s*<meta [^>]*>)*/.exec(html);
        if (metas)
            html = html.slice(metas[0].length);
        let elt = detachedDoc().createElement("div");
        let firstTag = /<([a-z][^>\s]+)/i.exec(html), wrap;
        if (wrap = firstTag && wrapMap[firstTag[1].toLowerCase()])
            html = wrap.map(n => "<" + n + ">").join("") + html + wrap.map(n => "</" + n + ">").reverse().join("");
        elt.innerHTML = html;
        if (wrap)
            for (let i = 0; i < wrap.length; i++)
                elt = elt.querySelector(wrap[i]) || elt;
        return elt;
    }
    // Webkit browsers do some hard-to-predict replacement of regular
    // spaces with non-breaking spaces when putting content on the
    // clipboard. This tries to convert such non-breaking spaces (which
    // will be wrapped in a plain span on Chrome, a span with class
    // Apple-converted-space on Safari) back to regular spaces.
    function restoreReplacedSpaces(dom) {
        let nodes = dom.querySelectorAll(chrome ? "span:not([class]):not([style])" : "span.Apple-converted-space");
        for (let i = 0; i < nodes.length; i++) {
            let node = nodes[i];
            if (node.childNodes.length == 1 && node.textContent == "\u00a0" && node.parentNode)
                node.parentNode.replaceChild(dom.ownerDocument.createTextNode(" "), node);
        }
    }
    function addContext(slice, context) {
        if (!slice.size)
            return slice;
        let schema = slice.content.firstChild.type.schema, array;
        try {
            array = JSON.parse(context);
        }
        catch (e) {
            return slice;
        }
        let { content, openStart, openEnd } = slice;
        for (let i = array.length - 2; i >= 0; i -= 2) {
            let type = schema.nodes[array[i]];
            if (!type || type.hasRequiredAttrs())
                break;
            content = Fragment.from(type.create(array[i + 1], content));
            openStart++;
            openEnd++;
        }
        return new Slice(content, openStart, openEnd);
    }

    // A collection of DOM events that occur within the editor, and callback functions
    // to invoke when the event fires.
    const handlers = {};
    const editHandlers = {};
    const passiveHandlers = { touchstart: true, touchmove: true };
    class InputState {
        constructor() {
            this.shiftKey = false;
            this.mouseDown = null;
            this.lastKeyCode = null;
            this.lastKeyCodeTime = 0;
            this.lastClick = { time: 0, x: 0, y: 0, type: "" };
            this.lastSelectionOrigin = null;
            this.lastSelectionTime = 0;
            this.lastIOSEnter = 0;
            this.lastIOSEnterFallbackTimeout = -1;
            this.lastFocus = 0;
            this.lastTouch = 0;
            this.lastAndroidDelete = 0;
            this.composing = false;
            this.composingTimeout = -1;
            this.compositionNodes = [];
            this.compositionEndedAt = -2e8;
            this.domChangeCount = 0;
            this.eventHandlers = Object.create(null);
            this.hideSelectionGuard = null;
        }
    }
    function initInput(view) {
        for (let event in handlers) {
            let handler = handlers[event];
            view.dom.addEventListener(event, view.input.eventHandlers[event] = (event) => {
                if (eventBelongsToView(view, event) && !runCustomHandler(view, event) &&
                    (view.editable || !(event.type in editHandlers)))
                    handler(view, event);
            }, passiveHandlers[event] ? { passive: true } : undefined);
        }
        // On Safari, for reasons beyond my understanding, adding an input
        // event handler makes an issue where the composition vanishes when
        // you press enter go away.
        if (safari)
            view.dom.addEventListener("input", () => null);
        ensureListeners(view);
    }
    function setSelectionOrigin(view, origin) {
        view.input.lastSelectionOrigin = origin;
        view.input.lastSelectionTime = Date.now();
    }
    function destroyInput(view) {
        view.domObserver.stop();
        for (let type in view.input.eventHandlers)
            view.dom.removeEventListener(type, view.input.eventHandlers[type]);
        clearTimeout(view.input.composingTimeout);
        clearTimeout(view.input.lastIOSEnterFallbackTimeout);
    }
    function ensureListeners(view) {
        view.someProp("handleDOMEvents", currentHandlers => {
            for (let type in currentHandlers)
                if (!view.input.eventHandlers[type])
                    view.dom.addEventListener(type, view.input.eventHandlers[type] = event => runCustomHandler(view, event));
        });
    }
    function runCustomHandler(view, event) {
        return view.someProp("handleDOMEvents", handlers => {
            let handler = handlers[event.type];
            return handler ? handler(view, event) || event.defaultPrevented : false;
        });
    }
    function eventBelongsToView(view, event) {
        if (!event.bubbles)
            return true;
        if (event.defaultPrevented)
            return false;
        for (let node = event.target; node != view.dom; node = node.parentNode)
            if (!node || node.nodeType == 11 ||
                (node.pmViewDesc && node.pmViewDesc.stopEvent(event)))
                return false;
        return true;
    }
    function dispatchEvent(view, event) {
        if (!runCustomHandler(view, event) && handlers[event.type] &&
            (view.editable || !(event.type in editHandlers)))
            handlers[event.type](view, event);
    }
    editHandlers.keydown = (view, _event) => {
        let event = _event;
        view.input.shiftKey = event.keyCode == 16 || event.shiftKey;
        if (inOrNearComposition(view, event))
            return;
        view.input.lastKeyCode = event.keyCode;
        view.input.lastKeyCodeTime = Date.now();
        // Suppress enter key events on Chrome Android, because those tend
        // to be part of a confused sequence of composition events fired,
        // and handling them eagerly tends to corrupt the input.
        if (android && chrome && event.keyCode == 13)
            return;
        if (event.keyCode != 229)
            view.domObserver.forceFlush();
        // On iOS, if we preventDefault enter key presses, the virtual
        // keyboard gets confused. So the hack here is to set a flag that
        // makes the DOM change code recognize that what just happens should
        // be replaced by whatever the Enter key handlers do.
        if (ios && event.keyCode == 13 && !event.ctrlKey && !event.altKey && !event.metaKey) {
            let now = Date.now();
            view.input.lastIOSEnter = now;
            view.input.lastIOSEnterFallbackTimeout = setTimeout(() => {
                if (view.input.lastIOSEnter == now) {
                    view.someProp("handleKeyDown", f => f(view, keyEvent(13, "Enter")));
                    view.input.lastIOSEnter = 0;
                }
            }, 200);
        }
        else if (view.someProp("handleKeyDown", f => f(view, event)) || captureKeyDown(view, event)) {
            event.preventDefault();
        }
        else {
            setSelectionOrigin(view, "key");
        }
    };
    editHandlers.keyup = (view, event) => {
        if (event.keyCode == 16)
            view.input.shiftKey = false;
    };
    editHandlers.keypress = (view, _event) => {
        let event = _event;
        if (inOrNearComposition(view, event) || !event.charCode ||
            event.ctrlKey && !event.altKey || mac && event.metaKey)
            return;
        if (view.someProp("handleKeyPress", f => f(view, event))) {
            event.preventDefault();
            return;
        }
        let sel = view.state.selection;
        if (!(sel instanceof TextSelection) || !sel.$from.sameParent(sel.$to)) {
            let text = String.fromCharCode(event.charCode);
            if (!view.someProp("handleTextInput", f => f(view, sel.$from.pos, sel.$to.pos, text)))
                view.dispatch(view.state.tr.insertText(text).scrollIntoView());
            event.preventDefault();
        }
    };
    function eventCoords(event) { return { left: event.clientX, top: event.clientY }; }
    function isNear(event, click) {
        let dx = click.x - event.clientX, dy = click.y - event.clientY;
        return dx * dx + dy * dy < 100;
    }
    function runHandlerOnContext(view, propName, pos, inside, event) {
        if (inside == -1)
            return false;
        let $pos = view.state.doc.resolve(inside);
        for (let i = $pos.depth + 1; i > 0; i--) {
            if (view.someProp(propName, f => i > $pos.depth ? f(view, pos, $pos.nodeAfter, $pos.before(i), event, true)
                : f(view, pos, $pos.node(i), $pos.before(i), event, false)))
                return true;
        }
        return false;
    }
    function updateSelection(view, selection, origin) {
        if (!view.focused)
            view.focus();
        let tr = view.state.tr.setSelection(selection);
        if (origin == "pointer")
            tr.setMeta("pointer", true);
        view.dispatch(tr);
    }
    function selectClickedLeaf(view, inside) {
        if (inside == -1)
            return false;
        let $pos = view.state.doc.resolve(inside), node = $pos.nodeAfter;
        if (node && node.isAtom && NodeSelection.isSelectable(node)) {
            updateSelection(view, new NodeSelection($pos), "pointer");
            return true;
        }
        return false;
    }
    function selectClickedNode(view, inside) {
        if (inside == -1)
            return false;
        let sel = view.state.selection, selectedNode, selectAt;
        if (sel instanceof NodeSelection)
            selectedNode = sel.node;
        let $pos = view.state.doc.resolve(inside);
        for (let i = $pos.depth + 1; i > 0; i--) {
            let node = i > $pos.depth ? $pos.nodeAfter : $pos.node(i);
            if (NodeSelection.isSelectable(node)) {
                if (selectedNode && sel.$from.depth > 0 &&
                    i >= sel.$from.depth && $pos.before(sel.$from.depth + 1) == sel.$from.pos)
                    selectAt = $pos.before(sel.$from.depth);
                else
                    selectAt = $pos.before(i);
                break;
            }
        }
        if (selectAt != null) {
            updateSelection(view, NodeSelection.create(view.state.doc, selectAt), "pointer");
            return true;
        }
        else {
            return false;
        }
    }
    function handleSingleClick(view, pos, inside, event, selectNode) {
        return runHandlerOnContext(view, "handleClickOn", pos, inside, event) ||
            view.someProp("handleClick", f => f(view, pos, event)) ||
            (selectNode ? selectClickedNode(view, inside) : selectClickedLeaf(view, inside));
    }
    function handleDoubleClick(view, pos, inside, event) {
        return runHandlerOnContext(view, "handleDoubleClickOn", pos, inside, event) ||
            view.someProp("handleDoubleClick", f => f(view, pos, event));
    }
    function handleTripleClick(view, pos, inside, event) {
        return runHandlerOnContext(view, "handleTripleClickOn", pos, inside, event) ||
            view.someProp("handleTripleClick", f => f(view, pos, event)) ||
            defaultTripleClick(view, inside, event);
    }
    function defaultTripleClick(view, inside, event) {
        if (event.button != 0)
            return false;
        let doc = view.state.doc;
        if (inside == -1) {
            if (doc.inlineContent) {
                updateSelection(view, TextSelection.create(doc, 0, doc.content.size), "pointer");
                return true;
            }
            return false;
        }
        let $pos = doc.resolve(inside);
        for (let i = $pos.depth + 1; i > 0; i--) {
            let node = i > $pos.depth ? $pos.nodeAfter : $pos.node(i);
            let nodePos = $pos.before(i);
            if (node.inlineContent)
                updateSelection(view, TextSelection.create(doc, nodePos + 1, nodePos + 1 + node.content.size), "pointer");
            else if (NodeSelection.isSelectable(node))
                updateSelection(view, NodeSelection.create(doc, nodePos), "pointer");
            else
                continue;
            return true;
        }
    }
    function forceDOMFlush(view) {
        return endComposition(view);
    }
    const selectNodeModifier = mac ? "metaKey" : "ctrlKey";
    handlers.mousedown = (view, _event) => {
        let event = _event;
        view.input.shiftKey = event.shiftKey;
        let flushed = forceDOMFlush(view);
        let now = Date.now(), type = "singleClick";
        if (now - view.input.lastClick.time < 500 && isNear(event, view.input.lastClick) && !event[selectNodeModifier]) {
            if (view.input.lastClick.type == "singleClick")
                type = "doubleClick";
            else if (view.input.lastClick.type == "doubleClick")
                type = "tripleClick";
        }
        view.input.lastClick = { time: now, x: event.clientX, y: event.clientY, type };
        let pos = view.posAtCoords(eventCoords(event));
        if (!pos)
            return;
        if (type == "singleClick") {
            if (view.input.mouseDown)
                view.input.mouseDown.done();
            view.input.mouseDown = new MouseDown(view, pos, event, !!flushed);
        }
        else if ((type == "doubleClick" ? handleDoubleClick : handleTripleClick)(view, pos.pos, pos.inside, event)) {
            event.preventDefault();
        }
        else {
            setSelectionOrigin(view, "pointer");
        }
    };
    class MouseDown {
        constructor(view, pos, event, flushed) {
            this.view = view;
            this.pos = pos;
            this.event = event;
            this.flushed = flushed;
            this.delayedSelectionSync = false;
            this.mightDrag = null;
            this.startDoc = view.state.doc;
            this.selectNode = !!event[selectNodeModifier];
            this.allowDefault = event.shiftKey;
            let targetNode, targetPos;
            if (pos.inside > -1) {
                targetNode = view.state.doc.nodeAt(pos.inside);
                targetPos = pos.inside;
            }
            else {
                let $pos = view.state.doc.resolve(pos.pos);
                targetNode = $pos.parent;
                targetPos = $pos.depth ? $pos.before() : 0;
            }
            const target = flushed ? null : event.target;
            const targetDesc = target ? view.docView.nearestDesc(target, true) : null;
            this.target = targetDesc ? targetDesc.dom : null;
            let { selection } = view.state;
            if (event.button == 0 &&
                targetNode.type.spec.draggable && targetNode.type.spec.selectable !== false ||
                selection instanceof NodeSelection && selection.from <= targetPos && selection.to > targetPos)
                this.mightDrag = {
                    node: targetNode,
                    pos: targetPos,
                    addAttr: !!(this.target && !this.target.draggable),
                    setUneditable: !!(this.target && gecko && !this.target.hasAttribute("contentEditable"))
                };
            if (this.target && this.mightDrag && (this.mightDrag.addAttr || this.mightDrag.setUneditable)) {
                this.view.domObserver.stop();
                if (this.mightDrag.addAttr)
                    this.target.draggable = true;
                if (this.mightDrag.setUneditable)
                    setTimeout(() => {
                        if (this.view.input.mouseDown == this)
                            this.target.setAttribute("contentEditable", "false");
                    }, 20);
                this.view.domObserver.start();
            }
            view.root.addEventListener("mouseup", this.up = this.up.bind(this));
            view.root.addEventListener("mousemove", this.move = this.move.bind(this));
            setSelectionOrigin(view, "pointer");
        }
        done() {
            this.view.root.removeEventListener("mouseup", this.up);
            this.view.root.removeEventListener("mousemove", this.move);
            if (this.mightDrag && this.target) {
                this.view.domObserver.stop();
                if (this.mightDrag.addAttr)
                    this.target.removeAttribute("draggable");
                if (this.mightDrag.setUneditable)
                    this.target.removeAttribute("contentEditable");
                this.view.domObserver.start();
            }
            if (this.delayedSelectionSync)
                setTimeout(() => selectionToDOM(this.view));
            this.view.input.mouseDown = null;
        }
        up(event) {
            this.done();
            if (!this.view.dom.contains(event.target))
                return;
            let pos = this.pos;
            if (this.view.state.doc != this.startDoc)
                pos = this.view.posAtCoords(eventCoords(event));
            this.updateAllowDefault(event);
            if (this.allowDefault || !pos) {
                setSelectionOrigin(this.view, "pointer");
            }
            else if (handleSingleClick(this.view, pos.pos, pos.inside, event, this.selectNode)) {
                event.preventDefault();
            }
            else if (event.button == 0 &&
                (this.flushed ||
                    // Safari ignores clicks on draggable elements
                    (safari && this.mightDrag && !this.mightDrag.node.isAtom) ||
                    // Chrome will sometimes treat a node selection as a
                    // cursor, but still report that the node is selected
                    // when asked through getSelection. You'll then get a
                    // situation where clicking at the point where that
                    // (hidden) cursor is doesn't change the selection, and
                    // thus doesn't get a reaction from ProseMirror. This
                    // works around that.
                    (chrome && !this.view.state.selection.visible &&
                        Math.min(Math.abs(pos.pos - this.view.state.selection.from), Math.abs(pos.pos - this.view.state.selection.to)) <= 2))) {
                updateSelection(this.view, Selection.near(this.view.state.doc.resolve(pos.pos)), "pointer");
                event.preventDefault();
            }
            else {
                setSelectionOrigin(this.view, "pointer");
            }
        }
        move(event) {
            this.updateAllowDefault(event);
            setSelectionOrigin(this.view, "pointer");
            if (event.buttons == 0)
                this.done();
        }
        updateAllowDefault(event) {
            if (!this.allowDefault && (Math.abs(this.event.x - event.clientX) > 4 ||
                Math.abs(this.event.y - event.clientY) > 4))
                this.allowDefault = true;
        }
    }
    handlers.touchstart = view => {
        view.input.lastTouch = Date.now();
        forceDOMFlush(view);
        setSelectionOrigin(view, "pointer");
    };
    handlers.touchmove = view => {
        view.input.lastTouch = Date.now();
        setSelectionOrigin(view, "pointer");
    };
    handlers.contextmenu = view => forceDOMFlush(view);
    function inOrNearComposition(view, event) {
        if (view.composing)
            return true;
        // See https://www.stum.de/2016/06/24/handling-ime-events-in-javascript/.
        // On Japanese input method editors (IMEs), the Enter key is used to confirm character
        // selection. On Safari, when Enter is pressed, compositionend and keydown events are
        // emitted. The keydown event triggers newline insertion, which we don't want.
        // This method returns true if the keydown event should be ignored.
        // We only ignore it once, as pressing Enter a second time *should* insert a newline.
        // Furthermore, the keydown event timestamp must be close to the compositionEndedAt timestamp.
        // This guards against the case where compositionend is triggered without the keyboard
        // (e.g. character confirmation may be done with the mouse), and keydown is triggered
        // afterwards- we wouldn't want to ignore the keydown event in this case.
        if (safari && Math.abs(event.timeStamp - view.input.compositionEndedAt) < 500) {
            view.input.compositionEndedAt = -2e8;
            return true;
        }
        return false;
    }
    // Drop active composition after 5 seconds of inactivity on Android
    const timeoutComposition = android ? 5000 : -1;
    editHandlers.compositionstart = editHandlers.compositionupdate = view => {
        if (!view.composing) {
            view.domObserver.flush();
            let { state } = view, $pos = state.selection.$from;
            if (state.selection.empty &&
                (state.storedMarks ||
                    (!$pos.textOffset && $pos.parentOffset && $pos.nodeBefore.marks.some(m => m.type.spec.inclusive === false)))) {
                // Need to wrap the cursor in mark nodes different from the ones in the DOM context
                view.markCursor = view.state.storedMarks || $pos.marks();
                endComposition(view, true);
                view.markCursor = null;
            }
            else {
                endComposition(view);
                // In firefox, if the cursor is after but outside a marked node,
                // the inserted text won't inherit the marks. So this moves it
                // inside if necessary.
                if (gecko && state.selection.empty && $pos.parentOffset && !$pos.textOffset && $pos.nodeBefore.marks.length) {
                    let sel = view.domSelection();
                    for (let node = sel.focusNode, offset = sel.focusOffset; node && node.nodeType == 1 && offset != 0;) {
                        let before = offset < 0 ? node.lastChild : node.childNodes[offset - 1];
                        if (!before)
                            break;
                        if (before.nodeType == 3) {
                            sel.collapse(before, before.nodeValue.length);
                            break;
                        }
                        else {
                            node = before;
                            offset = -1;
                        }
                    }
                }
            }
            view.input.composing = true;
        }
        scheduleComposeEnd(view, timeoutComposition);
    };
    editHandlers.compositionend = (view, event) => {
        if (view.composing) {
            view.input.composing = false;
            view.input.compositionEndedAt = event.timeStamp;
            scheduleComposeEnd(view, 20);
        }
    };
    function scheduleComposeEnd(view, delay) {
        clearTimeout(view.input.composingTimeout);
        if (delay > -1)
            view.input.composingTimeout = setTimeout(() => endComposition(view), delay);
    }
    function clearComposition(view) {
        if (view.composing) {
            view.input.composing = false;
            view.input.compositionEndedAt = timestampFromCustomEvent();
        }
        while (view.input.compositionNodes.length > 0)
            view.input.compositionNodes.pop().markParentsDirty();
    }
    function timestampFromCustomEvent() {
        let event = document.createEvent("Event");
        event.initEvent("event", true, true);
        return event.timeStamp;
    }
    /**
    @internal
    */
    function endComposition(view, forceUpdate = false) {
        if (android && view.domObserver.flushingSoon >= 0)
            return;
        view.domObserver.forceFlush();
        clearComposition(view);
        if (forceUpdate || view.docView && view.docView.dirty) {
            let sel = selectionFromDOM(view);
            if (sel && !sel.eq(view.state.selection))
                view.dispatch(view.state.tr.setSelection(sel));
            else
                view.updateState(view.state);
            return true;
        }
        return false;
    }
    function captureCopy(view, dom) {
        // The extra wrapper is somehow necessary on IE/Edge to prevent the
        // content from being mangled when it is put onto the clipboard
        if (!view.dom.parentNode)
            return;
        let wrap = view.dom.parentNode.appendChild(document.createElement("div"));
        wrap.appendChild(dom);
        wrap.style.cssText = "position: fixed; left: -10000px; top: 10px";
        let sel = getSelection(), range = document.createRange();
        range.selectNodeContents(dom);
        // Done because IE will fire a selectionchange moving the selection
        // to its start when removeAllRanges is called and the editor still
        // has focus (which will mess up the editor's selection state).
        view.dom.blur();
        sel.removeAllRanges();
        sel.addRange(range);
        setTimeout(() => {
            if (wrap.parentNode)
                wrap.parentNode.removeChild(wrap);
            view.focus();
        }, 50);
    }
    // This is very crude, but unfortunately both these browsers _pretend_
    // that they have a clipboard API—all the objects and methods are
    // there, they just don't work, and they are hard to test.
    const brokenClipboardAPI = (ie && ie_version < 15) ||
        (ios && webkit_version < 604);
    handlers.copy = editHandlers.cut = (view, _event) => {
        let event = _event;
        let sel = view.state.selection, cut = event.type == "cut";
        if (sel.empty)
            return;
        // IE and Edge's clipboard interface is completely broken
        let data = brokenClipboardAPI ? null : event.clipboardData;
        let slice = sel.content(), { dom, text } = serializeForClipboard(view, slice);
        if (data) {
            event.preventDefault();
            data.clearData();
            data.setData("text/html", dom.innerHTML);
            data.setData("text/plain", text);
        }
        else {
            captureCopy(view, dom);
        }
        if (cut)
            view.dispatch(view.state.tr.deleteSelection().scrollIntoView().setMeta("uiEvent", "cut"));
    };
    function sliceSingleNode(slice) {
        return slice.openStart == 0 && slice.openEnd == 0 && slice.content.childCount == 1 ? slice.content.firstChild : null;
    }
    function capturePaste(view, event) {
        if (!view.dom.parentNode)
            return;
        let plainText = view.input.shiftKey || view.state.selection.$from.parent.type.spec.code;
        let target = view.dom.parentNode.appendChild(document.createElement(plainText ? "textarea" : "div"));
        if (!plainText)
            target.contentEditable = "true";
        target.style.cssText = "position: fixed; left: -10000px; top: 10px";
        target.focus();
        setTimeout(() => {
            view.focus();
            if (target.parentNode)
                target.parentNode.removeChild(target);
            if (plainText)
                doPaste(view, target.value, null, event);
            else
                doPaste(view, target.textContent, target.innerHTML, event);
        }, 50);
    }
    function doPaste(view, text, html, event) {
        let slice = parseFromClipboard(view, text, html, view.input.shiftKey, view.state.selection.$from);
        if (view.someProp("handlePaste", f => f(view, event, slice || Slice.empty)))
            return true;
        if (!slice)
            return false;
        let singleNode = sliceSingleNode(slice);
        let tr = singleNode
            ? view.state.tr.replaceSelectionWith(singleNode, view.input.shiftKey)
            : view.state.tr.replaceSelection(slice);
        view.dispatch(tr.scrollIntoView().setMeta("paste", true).setMeta("uiEvent", "paste"));
        return true;
    }
    editHandlers.paste = (view, _event) => {
        let event = _event;
        // Handling paste from JavaScript during composition is very poorly
        // handled by browsers, so as a dodgy but preferable kludge, we just
        // let the browser do its native thing there, except on Android,
        // where the editor is almost always composing.
        if (view.composing && !android)
            return;
        let data = brokenClipboardAPI ? null : event.clipboardData;
        if (data && doPaste(view, data.getData("text/plain"), data.getData("text/html"), event))
            event.preventDefault();
        else
            capturePaste(view, event);
    };
    class Dragging {
        constructor(slice, move) {
            this.slice = slice;
            this.move = move;
        }
    }
    const dragCopyModifier = mac ? "altKey" : "ctrlKey";
    handlers.dragstart = (view, _event) => {
        let event = _event;
        let mouseDown = view.input.mouseDown;
        if (mouseDown)
            mouseDown.done();
        if (!event.dataTransfer)
            return;
        let sel = view.state.selection;
        let pos = sel.empty ? null : view.posAtCoords(eventCoords(event));
        if (pos && pos.pos >= sel.from && pos.pos <= (sel instanceof NodeSelection ? sel.to - 1 : sel.to)) ;
        else if (mouseDown && mouseDown.mightDrag) {
            view.dispatch(view.state.tr.setSelection(NodeSelection.create(view.state.doc, mouseDown.mightDrag.pos)));
        }
        else if (event.target && event.target.nodeType == 1) {
            let desc = view.docView.nearestDesc(event.target, true);
            if (desc && desc.node.type.spec.draggable && desc != view.docView)
                view.dispatch(view.state.tr.setSelection(NodeSelection.create(view.state.doc, desc.posBefore)));
        }
        let slice = view.state.selection.content(), { dom, text } = serializeForClipboard(view, slice);
        event.dataTransfer.clearData();
        event.dataTransfer.setData(brokenClipboardAPI ? "Text" : "text/html", dom.innerHTML);
        // See https://github.com/ProseMirror/prosemirror/issues/1156
        event.dataTransfer.effectAllowed = "copyMove";
        if (!brokenClipboardAPI)
            event.dataTransfer.setData("text/plain", text);
        view.dragging = new Dragging(slice, !event[dragCopyModifier]);
    };
    handlers.dragend = view => {
        let dragging = view.dragging;
        window.setTimeout(() => {
            if (view.dragging == dragging)
                view.dragging = null;
        }, 50);
    };
    editHandlers.dragover = editHandlers.dragenter = (_, e) => e.preventDefault();
    editHandlers.drop = (view, _event) => {
        let event = _event;
        let dragging = view.dragging;
        view.dragging = null;
        if (!event.dataTransfer)
            return;
        let eventPos = view.posAtCoords(eventCoords(event));
        if (!eventPos)
            return;
        let $mouse = view.state.doc.resolve(eventPos.pos);
        let slice = dragging && dragging.slice;
        if (slice) {
            view.someProp("transformPasted", f => { slice = f(slice); });
        }
        else {
            slice = parseFromClipboard(view, event.dataTransfer.getData(brokenClipboardAPI ? "Text" : "text/plain"), brokenClipboardAPI ? null : event.dataTransfer.getData("text/html"), false, $mouse);
        }
        let move = !!(dragging && !event[dragCopyModifier]);
        if (view.someProp("handleDrop", f => f(view, event, slice || Slice.empty, move))) {
            event.preventDefault();
            return;
        }
        if (!slice)
            return;
        event.preventDefault();
        let insertPos = slice ? dropPoint(view.state.doc, $mouse.pos, slice) : $mouse.pos;
        if (insertPos == null)
            insertPos = $mouse.pos;
        let tr = view.state.tr;
        if (move)
            tr.deleteSelection();
        let pos = tr.mapping.map(insertPos);
        let isNode = slice.openStart == 0 && slice.openEnd == 0 && slice.content.childCount == 1;
        let beforeInsert = tr.doc;
        if (isNode)
            tr.replaceRangeWith(pos, pos, slice.content.firstChild);
        else
            tr.replaceRange(pos, pos, slice);
        if (tr.doc.eq(beforeInsert))
            return;
        let $pos = tr.doc.resolve(pos);
        if (isNode && NodeSelection.isSelectable(slice.content.firstChild) &&
            $pos.nodeAfter && $pos.nodeAfter.sameMarkup(slice.content.firstChild)) {
            tr.setSelection(new NodeSelection($pos));
        }
        else {
            let end = tr.mapping.map(insertPos);
            tr.mapping.maps[tr.mapping.maps.length - 1].forEach((_from, _to, _newFrom, newTo) => end = newTo);
            tr.setSelection(selectionBetween(view, $pos, tr.doc.resolve(end)));
        }
        view.focus();
        view.dispatch(tr.setMeta("uiEvent", "drop"));
    };
    handlers.focus = view => {
        view.input.lastFocus = Date.now();
        if (!view.focused) {
            view.domObserver.stop();
            view.dom.classList.add("ProseMirror-focused");
            view.domObserver.start();
            view.focused = true;
            setTimeout(() => {
                if (view.docView && view.hasFocus() && !view.domObserver.currentSelection.eq(view.domSelection()))
                    selectionToDOM(view);
            }, 20);
        }
    };
    handlers.blur = (view, _event) => {
        let event = _event;
        if (view.focused) {
            view.domObserver.stop();
            view.dom.classList.remove("ProseMirror-focused");
            view.domObserver.start();
            if (event.relatedTarget && view.dom.contains(event.relatedTarget))
                view.domObserver.currentSelection.clear();
            view.focused = false;
        }
    };
    handlers.beforeinput = (view, _event) => {
        let event = _event;
        // We should probably do more with beforeinput events, but support
        // is so spotty that I'm still waiting to see where they are going.
        // Very specific hack to deal with backspace sometimes failing on
        // Chrome Android when after an uneditable node.
        if (chrome && android && event.inputType == "deleteContentBackward") {
            view.domObserver.flushSoon();
            let { domChangeCount } = view.input;
            setTimeout(() => {
                if (view.input.domChangeCount != domChangeCount)
                    return; // Event already had some effect
                // This bug tends to close the virtual keyboard, so we refocus
                view.dom.blur();
                view.focus();
                if (view.someProp("handleKeyDown", f => f(view, keyEvent(8, "Backspace"))))
                    return;
                let { $cursor } = view.state.selection;
                // Crude approximation of backspace behavior when no command handled it
                if ($cursor && $cursor.pos > 0)
                    view.dispatch(view.state.tr.delete($cursor.pos - 1, $cursor.pos).scrollIntoView());
            }, 50);
        }
    };
    // Make sure all handlers get registered
    for (let prop in editHandlers)
        handlers[prop] = editHandlers[prop];

    function compareObjs(a, b) {
        if (a == b)
            return true;
        for (let p in a)
            if (a[p] !== b[p])
                return false;
        for (let p in b)
            if (!(p in a))
                return false;
        return true;
    }
    class WidgetType {
        constructor(toDOM, spec) {
            this.toDOM = toDOM;
            this.spec = spec || noSpec;
            this.side = this.spec.side || 0;
        }
        map(mapping, span, offset, oldOffset) {
            let { pos, deleted } = mapping.mapResult(span.from + oldOffset, this.side < 0 ? -1 : 1);
            return deleted ? null : new Decoration(pos - offset, pos - offset, this);
        }
        valid() { return true; }
        eq(other) {
            return this == other ||
                (other instanceof WidgetType &&
                    (this.spec.key && this.spec.key == other.spec.key ||
                        this.toDOM == other.toDOM && compareObjs(this.spec, other.spec)));
        }
        destroy(node) {
            if (this.spec.destroy)
                this.spec.destroy(node);
        }
    }
    class InlineType {
        constructor(attrs, spec) {
            this.attrs = attrs;
            this.spec = spec || noSpec;
        }
        map(mapping, span, offset, oldOffset) {
            let from = mapping.map(span.from + oldOffset, this.spec.inclusiveStart ? -1 : 1) - offset;
            let to = mapping.map(span.to + oldOffset, this.spec.inclusiveEnd ? 1 : -1) - offset;
            return from >= to ? null : new Decoration(from, to, this);
        }
        valid(_, span) { return span.from < span.to; }
        eq(other) {
            return this == other ||
                (other instanceof InlineType && compareObjs(this.attrs, other.attrs) &&
                    compareObjs(this.spec, other.spec));
        }
        static is(span) { return span.type instanceof InlineType; }
        destroy() { }
    }
    class NodeType$1 {
        constructor(attrs, spec) {
            this.attrs = attrs;
            this.spec = spec || noSpec;
        }
        map(mapping, span, offset, oldOffset) {
            let from = mapping.mapResult(span.from + oldOffset, 1);
            if (from.deleted)
                return null;
            let to = mapping.mapResult(span.to + oldOffset, -1);
            if (to.deleted || to.pos <= from.pos)
                return null;
            return new Decoration(from.pos - offset, to.pos - offset, this);
        }
        valid(node, span) {
            let { index, offset } = node.content.findIndex(span.from), child;
            return offset == span.from && !(child = node.child(index)).isText && offset + child.nodeSize == span.to;
        }
        eq(other) {
            return this == other ||
                (other instanceof NodeType$1 && compareObjs(this.attrs, other.attrs) &&
                    compareObjs(this.spec, other.spec));
        }
        destroy() { }
    }
    /**
    Decoration objects can be provided to the view through the
    [`decorations` prop](https://prosemirror.net/docs/ref/#view.EditorProps.decorations). They come in
    several variants—see the static members of this class for details.
    */
    class Decoration {
        /**
        @internal
        */
        constructor(
        /**
        The start position of the decoration.
        */
        from, 
        /**
        The end position. Will be the same as `from` for [widget
        decorations](https://prosemirror.net/docs/ref/#view.Decoration^widget).
        */
        to, 
        /**
        @internal
        */
        type) {
            this.from = from;
            this.to = to;
            this.type = type;
        }
        /**
        @internal
        */
        copy(from, to) {
            return new Decoration(from, to, this.type);
        }
        /**
        @internal
        */
        eq(other, offset = 0) {
            return this.type.eq(other.type) && this.from + offset == other.from && this.to + offset == other.to;
        }
        /**
        @internal
        */
        map(mapping, offset, oldOffset) {
            return this.type.map(mapping, this, offset, oldOffset);
        }
        /**
        Creates a widget decoration, which is a DOM node that's shown in
        the document at the given position. It is recommended that you
        delay rendering the widget by passing a function that will be
        called when the widget is actually drawn in a view, but you can
        also directly pass a DOM node. `getPos` can be used to find the
        widget's current document position.
        */
        static widget(pos, toDOM, spec) {
            return new Decoration(pos, pos, new WidgetType(toDOM, spec));
        }
        /**
        Creates an inline decoration, which adds the given attributes to
        each inline node between `from` and `to`.
        */
        static inline(from, to, attrs, spec) {
            return new Decoration(from, to, new InlineType(attrs, spec));
        }
        /**
        Creates a node decoration. `from` and `to` should point precisely
        before and after a node in the document. That node, and only that
        node, will receive the given attributes.
        */
        static node(from, to, attrs, spec) {
            return new Decoration(from, to, new NodeType$1(attrs, spec));
        }
        /**
        The spec provided when creating this decoration. Can be useful
        if you've stored extra information in that object.
        */
        get spec() { return this.type.spec; }
        /**
        @internal
        */
        get inline() { return this.type instanceof InlineType; }
    }
    const none = [], noSpec = {};
    /**
    A collection of [decorations](https://prosemirror.net/docs/ref/#view.Decoration), organized in such
    a way that the drawing algorithm can efficiently use and compare
    them. This is a persistent data structure—it is not modified,
    updates create a new value.
    */
    class DecorationSet {
        /**
        @internal
        */
        constructor(local, children) {
            this.local = local.length ? local : none;
            this.children = children.length ? children : none;
        }
        /**
        Create a set of decorations, using the structure of the given
        document.
        */
        static create(doc, decorations) {
            return decorations.length ? buildTree(decorations, doc, 0, noSpec) : empty$1;
        }
        /**
        Find all decorations in this set which touch the given range
        (including decorations that start or end directly at the
        boundaries) and match the given predicate on their spec. When
        `start` and `end` are omitted, all decorations in the set are
        considered. When `predicate` isn't given, all decorations are
        assumed to match.
        */
        find(start, end, predicate) {
            let result = [];
            this.findInner(start == null ? 0 : start, end == null ? 1e9 : end, result, 0, predicate);
            return result;
        }
        findInner(start, end, result, offset, predicate) {
            for (let i = 0; i < this.local.length; i++) {
                let span = this.local[i];
                if (span.from <= end && span.to >= start && (!predicate || predicate(span.spec)))
                    result.push(span.copy(span.from + offset, span.to + offset));
            }
            for (let i = 0; i < this.children.length; i += 3) {
                if (this.children[i] < end && this.children[i + 1] > start) {
                    let childOff = this.children[i] + 1;
                    this.children[i + 2].findInner(start - childOff, end - childOff, result, offset + childOff, predicate);
                }
            }
        }
        /**
        Map the set of decorations in response to a change in the
        document.
        */
        map(mapping, doc, options) {
            if (this == empty$1 || mapping.maps.length == 0)
                return this;
            return this.mapInner(mapping, doc, 0, 0, options || noSpec);
        }
        /**
        @internal
        */
        mapInner(mapping, node, offset, oldOffset, options) {
            let newLocal;
            for (let i = 0; i < this.local.length; i++) {
                let mapped = this.local[i].map(mapping, offset, oldOffset);
                if (mapped && mapped.type.valid(node, mapped))
                    (newLocal || (newLocal = [])).push(mapped);
                else if (options.onRemove)
                    options.onRemove(this.local[i].spec);
            }
            if (this.children.length)
                return mapChildren(this.children, newLocal || [], mapping, node, offset, oldOffset, options);
            else
                return newLocal ? new DecorationSet(newLocal.sort(byPos), none) : empty$1;
        }
        /**
        Add the given array of decorations to the ones in the set,
        producing a new set. Needs access to the current document to
        create the appropriate tree structure.
        */
        add(doc, decorations) {
            if (!decorations.length)
                return this;
            if (this == empty$1)
                return DecorationSet.create(doc, decorations);
            return this.addInner(doc, decorations, 0);
        }
        addInner(doc, decorations, offset) {
            let children, childIndex = 0;
            doc.forEach((childNode, childOffset) => {
                let baseOffset = childOffset + offset, found;
                if (!(found = takeSpansForNode(decorations, childNode, baseOffset)))
                    return;
                if (!children)
                    children = this.children.slice();
                while (childIndex < children.length && children[childIndex] < childOffset)
                    childIndex += 3;
                if (children[childIndex] == childOffset)
                    children[childIndex + 2] = children[childIndex + 2].addInner(childNode, found, baseOffset + 1);
                else
                    children.splice(childIndex, 0, childOffset, childOffset + childNode.nodeSize, buildTree(found, childNode, baseOffset + 1, noSpec));
                childIndex += 3;
            });
            let local = moveSpans(childIndex ? withoutNulls(decorations) : decorations, -offset);
            for (let i = 0; i < local.length; i++)
                if (!local[i].type.valid(doc, local[i]))
                    local.splice(i--, 1);
            return new DecorationSet(local.length ? this.local.concat(local).sort(byPos) : this.local, children || this.children);
        }
        /**
        Create a new set that contains the decorations in this set, minus
        the ones in the given array.
        */
        remove(decorations) {
            if (decorations.length == 0 || this == empty$1)
                return this;
            return this.removeInner(decorations, 0);
        }
        removeInner(decorations, offset) {
            let children = this.children, local = this.local;
            for (let i = 0; i < children.length; i += 3) {
                let found;
                let from = children[i] + offset, to = children[i + 1] + offset;
                for (let j = 0, span; j < decorations.length; j++)
                    if (span = decorations[j]) {
                        if (span.from > from && span.to < to) {
                            decorations[j] = null;
                            (found || (found = [])).push(span);
                        }
                    }
                if (!found)
                    continue;
                if (children == this.children)
                    children = this.children.slice();
                let removed = children[i + 2].removeInner(found, from + 1);
                if (removed != empty$1) {
                    children[i + 2] = removed;
                }
                else {
                    children.splice(i, 3);
                    i -= 3;
                }
            }
            if (local.length)
                for (let i = 0, span; i < decorations.length; i++)
                    if (span = decorations[i]) {
                        for (let j = 0; j < local.length; j++)
                            if (local[j].eq(span, offset)) {
                                if (local == this.local)
                                    local = this.local.slice();
                                local.splice(j--, 1);
                            }
                    }
            if (children == this.children && local == this.local)
                return this;
            return local.length || children.length ? new DecorationSet(local, children) : empty$1;
        }
        /**
        @internal
        */
        forChild(offset, node) {
            if (this == empty$1)
                return this;
            if (node.isLeaf)
                return DecorationSet.empty;
            let child, local;
            for (let i = 0; i < this.children.length; i += 3)
                if (this.children[i] >= offset) {
                    if (this.children[i] == offset)
                        child = this.children[i + 2];
                    break;
                }
            let start = offset + 1, end = start + node.content.size;
            for (let i = 0; i < this.local.length; i++) {
                let dec = this.local[i];
                if (dec.from < end && dec.to > start && (dec.type instanceof InlineType)) {
                    let from = Math.max(start, dec.from) - start, to = Math.min(end, dec.to) - start;
                    if (from < to)
                        (local || (local = [])).push(dec.copy(from, to));
                }
            }
            if (local) {
                let localSet = new DecorationSet(local.sort(byPos), none);
                return child ? new DecorationGroup([localSet, child]) : localSet;
            }
            return child || empty$1;
        }
        /**
        @internal
        */
        eq(other) {
            if (this == other)
                return true;
            if (!(other instanceof DecorationSet) ||
                this.local.length != other.local.length ||
                this.children.length != other.children.length)
                return false;
            for (let i = 0; i < this.local.length; i++)
                if (!this.local[i].eq(other.local[i]))
                    return false;
            for (let i = 0; i < this.children.length; i += 3)
                if (this.children[i] != other.children[i] ||
                    this.children[i + 1] != other.children[i + 1] ||
                    !this.children[i + 2].eq(other.children[i + 2]))
                    return false;
            return true;
        }
        /**
        @internal
        */
        locals(node) {
            return removeOverlap(this.localsInner(node));
        }
        /**
        @internal
        */
        localsInner(node) {
            if (this == empty$1)
                return none;
            if (node.inlineContent || !this.local.some(InlineType.is))
                return this.local;
            let result = [];
            for (let i = 0; i < this.local.length; i++) {
                if (!(this.local[i].type instanceof InlineType))
                    result.push(this.local[i]);
            }
            return result;
        }
    }
    /**
    The empty set of decorations.
    */
    DecorationSet.empty = new DecorationSet([], []);
    /**
    @internal
    */
    DecorationSet.removeOverlap = removeOverlap;
    const empty$1 = DecorationSet.empty;
    // An abstraction that allows the code dealing with decorations to
    // treat multiple DecorationSet objects as if it were a single object
    // with (a subset of) the same interface.
    class DecorationGroup {
        constructor(members) {
            this.members = members;
        }
        map(mapping, doc) {
            const mappedDecos = this.members.map(member => member.map(mapping, doc, noSpec));
            return DecorationGroup.from(mappedDecos);
        }
        forChild(offset, child) {
            if (child.isLeaf)
                return DecorationSet.empty;
            let found = [];
            for (let i = 0; i < this.members.length; i++) {
                let result = this.members[i].forChild(offset, child);
                if (result == empty$1)
                    continue;
                if (result instanceof DecorationGroup)
                    found = found.concat(result.members);
                else
                    found.push(result);
            }
            return DecorationGroup.from(found);
        }
        eq(other) {
            if (!(other instanceof DecorationGroup) ||
                other.members.length != this.members.length)
                return false;
            for (let i = 0; i < this.members.length; i++)
                if (!this.members[i].eq(other.members[i]))
                    return false;
            return true;
        }
        locals(node) {
            let result, sorted = true;
            for (let i = 0; i < this.members.length; i++) {
                let locals = this.members[i].localsInner(node);
                if (!locals.length)
                    continue;
                if (!result) {
                    result = locals;
                }
                else {
                    if (sorted) {
                        result = result.slice();
                        sorted = false;
                    }
                    for (let j = 0; j < locals.length; j++)
                        result.push(locals[j]);
                }
            }
            return result ? removeOverlap(sorted ? result : result.sort(byPos)) : none;
        }
        // Create a group for the given array of decoration sets, or return
        // a single set when possible.
        static from(members) {
            switch (members.length) {
                case 0: return empty$1;
                case 1: return members[0];
                default: return new DecorationGroup(members);
            }
        }
    }
    function mapChildren(oldChildren, newLocal, mapping, node, offset, oldOffset, options) {
        let children = oldChildren.slice();
        // Mark the children that are directly touched by changes, and
        // move those that are after the changes.
        for (let i = 0, baseOffset = oldOffset; i < mapping.maps.length; i++) {
            let moved = 0;
            mapping.maps[i].forEach((oldStart, oldEnd, newStart, newEnd) => {
                let dSize = (newEnd - newStart) - (oldEnd - oldStart);
                for (let i = 0; i < children.length; i += 3) {
                    let end = children[i + 1];
                    if (end < 0 || oldStart > end + baseOffset - moved)
                        continue;
                    let start = children[i] + baseOffset - moved;
                    if (oldEnd >= start) {
                        children[i + 1] = oldStart <= start ? -2 : -1;
                    }
                    else if (newStart >= offset && dSize) {
                        children[i] += dSize;
                        children[i + 1] += dSize;
                    }
                }
                moved += dSize;
            });
            baseOffset = mapping.maps[i].map(baseOffset, -1);
        }
        // Find the child nodes that still correspond to a single node,
        // recursively call mapInner on them and update their positions.
        let mustRebuild = false;
        for (let i = 0; i < children.length; i += 3)
            if (children[i + 1] < 0) { // Touched nodes
                if (children[i + 1] == -2) {
                    mustRebuild = true;
                    children[i + 1] = -1;
                    continue;
                }
                let from = mapping.map(oldChildren[i] + oldOffset), fromLocal = from - offset;
                if (fromLocal < 0 || fromLocal >= node.content.size) {
                    mustRebuild = true;
                    continue;
                }
                // Must read oldChildren because children was tagged with -1
                let to = mapping.map(oldChildren[i + 1] + oldOffset, -1), toLocal = to - offset;
                let { index, offset: childOffset } = node.content.findIndex(fromLocal);
                let childNode = node.maybeChild(index);
                if (childNode && childOffset == fromLocal && childOffset + childNode.nodeSize == toLocal) {
                    let mapped = children[i + 2]
                        .mapInner(mapping, childNode, from + 1, oldChildren[i] + oldOffset + 1, options);
                    if (mapped != empty$1) {
                        children[i] = fromLocal;
                        children[i + 1] = toLocal;
                        children[i + 2] = mapped;
                    }
                    else {
                        children[i + 1] = -2;
                        mustRebuild = true;
                    }
                }
                else {
                    mustRebuild = true;
                }
            }
        // Remaining children must be collected and rebuilt into the appropriate structure
        if (mustRebuild) {
            let decorations = mapAndGatherRemainingDecorations(children, oldChildren, newLocal, mapping, offset, oldOffset, options);
            let built = buildTree(decorations, node, 0, options);
            newLocal = built.local;
            for (let i = 0; i < children.length; i += 3)
                if (children[i + 1] < 0) {
                    children.splice(i, 3);
                    i -= 3;
                }
            for (let i = 0, j = 0; i < built.children.length; i += 3) {
                let from = built.children[i];
                while (j < children.length && children[j] < from)
                    j += 3;
                children.splice(j, 0, built.children[i], built.children[i + 1], built.children[i + 2]);
            }
        }
        return new DecorationSet(newLocal.sort(byPos), children);
    }
    function moveSpans(spans, offset) {
        if (!offset || !spans.length)
            return spans;
        let result = [];
        for (let i = 0; i < spans.length; i++) {
            let span = spans[i];
            result.push(new Decoration(span.from + offset, span.to + offset, span.type));
        }
        return result;
    }
    function mapAndGatherRemainingDecorations(children, oldChildren, decorations, mapping, offset, oldOffset, options) {
        // Gather all decorations from the remaining marked children
        function gather(set, oldOffset) {
            for (let i = 0; i < set.local.length; i++) {
                let mapped = set.local[i].map(mapping, offset, oldOffset);
                if (mapped)
                    decorations.push(mapped);
                else if (options.onRemove)
                    options.onRemove(set.local[i].spec);
            }
            for (let i = 0; i < set.children.length; i += 3)
                gather(set.children[i + 2], set.children[i] + oldOffset + 1);
        }
        for (let i = 0; i < children.length; i += 3)
            if (children[i + 1] == -1)
                gather(children[i + 2], oldChildren[i] + oldOffset + 1);
        return decorations;
    }
    function takeSpansForNode(spans, node, offset) {
        if (node.isLeaf)
            return null;
        let end = offset + node.nodeSize, found = null;
        for (let i = 0, span; i < spans.length; i++) {
            if ((span = spans[i]) && span.from > offset && span.to < end) {
                (found || (found = [])).push(span);
                spans[i] = null;
            }
        }
        return found;
    }
    function withoutNulls(array) {
        let result = [];
        for (let i = 0; i < array.length; i++)
            if (array[i] != null)
                result.push(array[i]);
        return result;
    }
    // Build up a tree that corresponds to a set of decorations. `offset`
    // is a base offset that should be subtracted from the `from` and `to`
    // positions in the spans (so that we don't have to allocate new spans
    // for recursive calls).
    function buildTree(spans, node, offset, options) {
        let children = [], hasNulls = false;
        node.forEach((childNode, localStart) => {
            let found = takeSpansForNode(spans, childNode, localStart + offset);
            if (found) {
                hasNulls = true;
                let subtree = buildTree(found, childNode, offset + localStart + 1, options);
                if (subtree != empty$1)
                    children.push(localStart, localStart + childNode.nodeSize, subtree);
            }
        });
        let locals = moveSpans(hasNulls ? withoutNulls(spans) : spans, -offset).sort(byPos);
        for (let i = 0; i < locals.length; i++)
            if (!locals[i].type.valid(node, locals[i])) {
                if (options.onRemove)
                    options.onRemove(locals[i].spec);
                locals.splice(i--, 1);
            }
        return locals.length || children.length ? new DecorationSet(locals, children) : empty$1;
    }
    // Used to sort decorations so that ones with a low start position
    // come first, and within a set with the same start position, those
    // with an smaller end position come first.
    function byPos(a, b) {
        return a.from - b.from || a.to - b.to;
    }
    // Scan a sorted array of decorations for partially overlapping spans,
    // and split those so that only fully overlapping spans are left (to
    // make subsequent rendering easier). Will return the input array if
    // no partially overlapping spans are found (the common case).
    function removeOverlap(spans) {
        let working = spans;
        for (let i = 0; i < working.length - 1; i++) {
            let span = working[i];
            if (span.from != span.to)
                for (let j = i + 1; j < working.length; j++) {
                    let next = working[j];
                    if (next.from == span.from) {
                        if (next.to != span.to) {
                            if (working == spans)
                                working = spans.slice();
                            // Followed by a partially overlapping larger span. Split that
                            // span.
                            working[j] = next.copy(next.from, span.to);
                            insertAhead(working, j + 1, next.copy(span.to, next.to));
                        }
                        continue;
                    }
                    else {
                        if (next.from < span.to) {
                            if (working == spans)
                                working = spans.slice();
                            // The end of this one overlaps with a subsequent span. Split
                            // this one.
                            working[i] = span.copy(span.from, next.from);
                            insertAhead(working, j, span.copy(next.from, span.to));
                        }
                        break;
                    }
                }
        }
        return working;
    }
    function insertAhead(array, i, deco) {
        while (i < array.length && byPos(deco, array[i]) > 0)
            i++;
        array.splice(i, 0, deco);
    }
    // Get the decorations associated with the current props of a view.
    function viewDecorations(view) {
        let found = [];
        view.someProp("decorations", f => {
            let result = f(view.state);
            if (result && result != empty$1)
                found.push(result);
        });
        if (view.cursorWrapper)
            found.push(DecorationSet.create(view.state.doc, [view.cursorWrapper.deco]));
        return DecorationGroup.from(found);
    }

    const observeOptions = {
        childList: true,
        characterData: true,
        characterDataOldValue: true,
        attributes: true,
        attributeOldValue: true,
        subtree: true
    };
    // IE11 has very broken mutation observers, so we also listen to DOMCharacterDataModified
    const useCharData = ie && ie_version <= 11;
    class SelectionState {
        constructor() {
            this.anchorNode = null;
            this.anchorOffset = 0;
            this.focusNode = null;
            this.focusOffset = 0;
        }
        set(sel) {
            this.anchorNode = sel.anchorNode;
            this.anchorOffset = sel.anchorOffset;
            this.focusNode = sel.focusNode;
            this.focusOffset = sel.focusOffset;
        }
        clear() {
            this.anchorNode = this.focusNode = null;
        }
        eq(sel) {
            return sel.anchorNode == this.anchorNode && sel.anchorOffset == this.anchorOffset &&
                sel.focusNode == this.focusNode && sel.focusOffset == this.focusOffset;
        }
    }
    class DOMObserver {
        constructor(view, handleDOMChange) {
            this.view = view;
            this.handleDOMChange = handleDOMChange;
            this.queue = [];
            this.flushingSoon = -1;
            this.observer = null;
            this.currentSelection = new SelectionState;
            this.onCharData = null;
            this.suppressingSelectionUpdates = false;
            this.observer = window.MutationObserver &&
                new window.MutationObserver(mutations => {
                    for (let i = 0; i < mutations.length; i++)
                        this.queue.push(mutations[i]);
                    // IE11 will sometimes (on backspacing out a single character
                    // text node after a BR node) call the observer callback
                    // before actually updating the DOM, which will cause
                    // ProseMirror to miss the change (see #930)
                    if (ie && ie_version <= 11 && mutations.some(m => m.type == "childList" && m.removedNodes.length ||
                        m.type == "characterData" && m.oldValue.length > m.target.nodeValue.length))
                        this.flushSoon();
                    else
                        this.flush();
                });
            if (useCharData) {
                this.onCharData = e => {
                    this.queue.push({ target: e.target, type: "characterData", oldValue: e.prevValue });
                    this.flushSoon();
                };
            }
            this.onSelectionChange = this.onSelectionChange.bind(this);
        }
        flushSoon() {
            if (this.flushingSoon < 0)
                this.flushingSoon = window.setTimeout(() => { this.flushingSoon = -1; this.flush(); }, 20);
        }
        forceFlush() {
            if (this.flushingSoon > -1) {
                window.clearTimeout(this.flushingSoon);
                this.flushingSoon = -1;
                this.flush();
            }
        }
        start() {
            if (this.observer) {
                this.observer.takeRecords();
                this.observer.observe(this.view.dom, observeOptions);
            }
            if (this.onCharData)
                this.view.dom.addEventListener("DOMCharacterDataModified", this.onCharData);
            this.connectSelection();
        }
        stop() {
            if (this.observer) {
                let take = this.observer.takeRecords();
                if (take.length) {
                    for (let i = 0; i < take.length; i++)
                        this.queue.push(take[i]);
                    window.setTimeout(() => this.flush(), 20);
                }
                this.observer.disconnect();
            }
            if (this.onCharData)
                this.view.dom.removeEventListener("DOMCharacterDataModified", this.onCharData);
            this.disconnectSelection();
        }
        connectSelection() {
            this.view.dom.ownerDocument.addEventListener("selectionchange", this.onSelectionChange);
        }
        disconnectSelection() {
            this.view.dom.ownerDocument.removeEventListener("selectionchange", this.onSelectionChange);
        }
        suppressSelectionUpdates() {
            this.suppressingSelectionUpdates = true;
            setTimeout(() => this.suppressingSelectionUpdates = false, 50);
        }
        onSelectionChange() {
            if (!hasFocusAndSelection(this.view))
                return;
            if (this.suppressingSelectionUpdates)
                return selectionToDOM(this.view);
            // Deletions on IE11 fire their events in the wrong order, giving
            // us a selection change event before the DOM changes are
            // reported.
            if (ie && ie_version <= 11 && !this.view.state.selection.empty) {
                let sel = this.view.domSelection();
                // Selection.isCollapsed isn't reliable on IE
                if (sel.focusNode && isEquivalentPosition(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset))
                    return this.flushSoon();
            }
            this.flush();
        }
        setCurSelection() {
            this.currentSelection.set(this.view.domSelection());
        }
        ignoreSelectionChange(sel) {
            if (sel.rangeCount == 0)
                return true;
            let container = sel.getRangeAt(0).commonAncestorContainer;
            let desc = this.view.docView.nearestDesc(container);
            if (desc && desc.ignoreMutation({
                type: "selection",
                target: container.nodeType == 3 ? container.parentNode : container
            })) {
                this.setCurSelection();
                return true;
            }
        }
        flush() {
            let { view } = this;
            if (!view.docView || this.flushingSoon > -1)
                return;
            let mutations = this.observer ? this.observer.takeRecords() : [];
            if (this.queue.length) {
                mutations = this.queue.concat(mutations);
                this.queue.length = 0;
            }
            let sel = view.domSelection();
            let newSel = !this.suppressingSelectionUpdates && !this.currentSelection.eq(sel) && hasFocusAndSelection(view) && !this.ignoreSelectionChange(sel);
            let from = -1, to = -1, typeOver = false, added = [];
            if (view.editable) {
                for (let i = 0; i < mutations.length; i++) {
                    let result = this.registerMutation(mutations[i], added);
                    if (result) {
                        from = from < 0 ? result.from : Math.min(result.from, from);
                        to = to < 0 ? result.to : Math.max(result.to, to);
                        if (result.typeOver)
                            typeOver = true;
                    }
                }
            }
            if (gecko && added.length > 1) {
                let brs = added.filter(n => n.nodeName == "BR");
                if (brs.length == 2) {
                    let a = brs[0], b = brs[1];
                    if (a.parentNode && a.parentNode.parentNode == b.parentNode)
                        b.remove();
                    else
                        a.remove();
                }
            }
            let readSel = null;
            // If it looks like the browser has reset the selection to the
            // start of the document after focus, restore the selection from
            // the state
            if (from < 0 && newSel && view.input.lastFocus > Date.now() - 200 &&
                view.input.lastTouch < Date.now() - 300 &&
                selectionCollapsed(sel) && (readSel = selectionFromDOM(view)) &&
                readSel.eq(Selection.near(view.state.doc.resolve(0), 1))) {
                view.input.lastFocus = 0;
                selectionToDOM(view);
                this.currentSelection.set(sel);
                view.scrollToSelection();
            }
            else if (from > -1 || newSel) {
                if (from > -1) {
                    view.docView.markDirty(from, to);
                    checkCSS(view);
                }
                this.handleDOMChange(from, to, typeOver, added);
                if (view.docView && view.docView.dirty)
                    view.updateState(view.state);
                else if (!this.currentSelection.eq(sel))
                    selectionToDOM(view);
                this.currentSelection.set(sel);
            }
        }
        registerMutation(mut, added) {
            // Ignore mutations inside nodes that were already noted as inserted
            if (added.indexOf(mut.target) > -1)
                return null;
            let desc = this.view.docView.nearestDesc(mut.target);
            if (mut.type == "attributes" &&
                (desc == this.view.docView || mut.attributeName == "contenteditable" ||
                    // Firefox sometimes fires spurious events for null/empty styles
                    (mut.attributeName == "style" && !mut.oldValue && !mut.target.getAttribute("style"))))
                return null;
            if (!desc || desc.ignoreMutation(mut))
                return null;
            if (mut.type == "childList") {
                for (let i = 0; i < mut.addedNodes.length; i++)
                    added.push(mut.addedNodes[i]);
                if (desc.contentDOM && desc.contentDOM != desc.dom && !desc.contentDOM.contains(mut.target))
                    return { from: desc.posBefore, to: desc.posAfter };
                let prev = mut.previousSibling, next = mut.nextSibling;
                if (ie && ie_version <= 11 && mut.addedNodes.length) {
                    // IE11 gives us incorrect next/prev siblings for some
                    // insertions, so if there are added nodes, recompute those
                    for (let i = 0; i < mut.addedNodes.length; i++) {
                        let { previousSibling, nextSibling } = mut.addedNodes[i];
                        if (!previousSibling || Array.prototype.indexOf.call(mut.addedNodes, previousSibling) < 0)
                            prev = previousSibling;
                        if (!nextSibling || Array.prototype.indexOf.call(mut.addedNodes, nextSibling) < 0)
                            next = nextSibling;
                    }
                }
                let fromOffset = prev && prev.parentNode == mut.target
                    ? domIndex(prev) + 1 : 0;
                let from = desc.localPosFromDOM(mut.target, fromOffset, -1);
                let toOffset = next && next.parentNode == mut.target
                    ? domIndex(next) : mut.target.childNodes.length;
                let to = desc.localPosFromDOM(mut.target, toOffset, 1);
                return { from, to };
            }
            else if (mut.type == "attributes") {
                return { from: desc.posAtStart - desc.border, to: desc.posAtEnd + desc.border };
            }
            else { // "characterData"
                return {
                    from: desc.posAtStart,
                    to: desc.posAtEnd,
                    // An event was generated for a text change that didn't change
                    // any text. Mark the dom change to fall back to assuming the
                    // selection was typed over with an identical value if it can't
                    // find another change.
                    typeOver: mut.target.nodeValue == mut.oldValue
                };
            }
        }
    }
    let cssChecked = new WeakMap();
    let cssCheckWarned = false;
    function checkCSS(view) {
        if (cssChecked.has(view))
            return;
        cssChecked.set(view, null);
        if (['normal', 'nowrap', 'pre-line'].indexOf(getComputedStyle(view.dom).whiteSpace) !== -1) {
            view.requiresGeckoHackNode = gecko;
            if (cssCheckWarned)
                return;
            console["warn"]("ProseMirror expects the CSS white-space property to be set, preferably to 'pre-wrap'. It is recommended to load style/prosemirror.css from the prosemirror-view package.");
            cssCheckWarned = true;
        }
    }

    // Note that all referencing and parsing is done with the
    // start-of-operation selection and document, since that's the one
    // that the DOM represents. If any changes came in in the meantime,
    // the modification is mapped over those before it is applied, in
    // readDOMChange.
    function parseBetween(view, from_, to_) {
        let { node: parent, fromOffset, toOffset, from, to } = view.docView.parseRange(from_, to_);
        let domSel = view.domSelection();
        let find;
        let anchor = domSel.anchorNode;
        if (anchor && view.dom.contains(anchor.nodeType == 1 ? anchor : anchor.parentNode)) {
            find = [{ node: anchor, offset: domSel.anchorOffset }];
            if (!selectionCollapsed(domSel))
                find.push({ node: domSel.focusNode, offset: domSel.focusOffset });
        }
        // Work around issue in Chrome where backspacing sometimes replaces
        // the deleted content with a random BR node (issues #799, #831)
        if (chrome && view.input.lastKeyCode === 8) {
            for (let off = toOffset; off > fromOffset; off--) {
                let node = parent.childNodes[off - 1], desc = node.pmViewDesc;
                if (node.nodeName == "BR" && !desc) {
                    toOffset = off;
                    break;
                }
                if (!desc || desc.size)
                    break;
            }
        }
        let startDoc = view.state.doc;
        let parser = view.someProp("domParser") || DOMParser.fromSchema(view.state.schema);
        let $from = startDoc.resolve(from);
        let sel = null, doc = parser.parse(parent, {
            topNode: $from.parent,
            topMatch: $from.parent.contentMatchAt($from.index()),
            topOpen: true,
            from: fromOffset,
            to: toOffset,
            preserveWhitespace: $from.parent.type.whitespace == "pre" ? "full" : true,
            findPositions: find,
            ruleFromNode,
            context: $from
        });
        if (find && find[0].pos != null) {
            let anchor = find[0].pos, head = find[1] && find[1].pos;
            if (head == null)
                head = anchor;
            sel = { anchor: anchor + from, head: head + from };
        }
        return { doc, sel, from, to };
    }
    function ruleFromNode(dom) {
        let desc = dom.pmViewDesc;
        if (desc) {
            return desc.parseRule();
        }
        else if (dom.nodeName == "BR" && dom.parentNode) {
            // Safari replaces the list item or table cell with a BR
            // directly in the list node (?!) if you delete the last
            // character in a list item or table cell (#708, #862)
            if (safari && /^(ul|ol)$/i.test(dom.parentNode.nodeName)) {
                let skip = document.createElement("div");
                skip.appendChild(document.createElement("li"));
                return { skip };
            }
            else if (dom.parentNode.lastChild == dom || safari && /^(tr|table)$/i.test(dom.parentNode.nodeName)) {
                return { ignore: true };
            }
        }
        else if (dom.nodeName == "IMG" && dom.getAttribute("mark-placeholder")) {
            return { ignore: true };
        }
        return null;
    }
    function readDOMChange(view, from, to, typeOver, addedNodes) {
        if (from < 0) {
            let origin = view.input.lastSelectionTime > Date.now() - 50 ? view.input.lastSelectionOrigin : null;
            let newSel = selectionFromDOM(view, origin);
            if (newSel && !view.state.selection.eq(newSel)) {
                let tr = view.state.tr.setSelection(newSel);
                if (origin == "pointer")
                    tr.setMeta("pointer", true);
                else if (origin == "key")
                    tr.scrollIntoView();
                view.dispatch(tr);
            }
            return;
        }
        let $before = view.state.doc.resolve(from);
        let shared = $before.sharedDepth(to);
        from = $before.before(shared + 1);
        to = view.state.doc.resolve(to).after(shared + 1);
        let sel = view.state.selection;
        let parse = parseBetween(view, from, to);
        let doc = view.state.doc, compare = doc.slice(parse.from, parse.to);
        let preferredPos, preferredSide;
        // Prefer anchoring to end when Backspace is pressed
        if (view.input.lastKeyCode === 8 && Date.now() - 100 < view.input.lastKeyCodeTime) {
            preferredPos = view.state.selection.to;
            preferredSide = "end";
        }
        else {
            preferredPos = view.state.selection.from;
            preferredSide = "start";
        }
        view.input.lastKeyCode = null;
        let change = findDiff(compare.content, parse.doc.content, parse.from, preferredPos, preferredSide);
        if ((ios && view.input.lastIOSEnter > Date.now() - 225 || android) &&
            addedNodes.some(n => n.nodeName == "DIV" || n.nodeName == "P") &&
            (!change || change.endA >= change.endB) &&
            view.someProp("handleKeyDown", f => f(view, keyEvent(13, "Enter")))) {
            view.input.lastIOSEnter = 0;
            return;
        }
        if (!change) {
            if (typeOver && sel instanceof TextSelection && !sel.empty && sel.$head.sameParent(sel.$anchor) &&
                !view.composing && !(parse.sel && parse.sel.anchor != parse.sel.head)) {
                change = { start: sel.from, endA: sel.to, endB: sel.to };
            }
            else {
                if (parse.sel) {
                    let sel = resolveSelection(view, view.state.doc, parse.sel);
                    if (sel && !sel.eq(view.state.selection))
                        view.dispatch(view.state.tr.setSelection(sel));
                }
                return;
            }
        }
        // Chrome sometimes leaves the cursor before the inserted text when
        // composing after a cursor wrapper. This moves it forward.
        if (chrome && view.cursorWrapper && parse.sel && parse.sel.anchor == view.cursorWrapper.deco.from &&
            parse.sel.head == parse.sel.anchor) {
            let size = change.endB - change.start;
            parse.sel = { anchor: parse.sel.anchor + size, head: parse.sel.anchor + size };
        }
        view.input.domChangeCount++;
        // Handle the case where overwriting a selection by typing matches
        // the start or end of the selected content, creating a change
        // that's smaller than what was actually overwritten.
        if (view.state.selection.from < view.state.selection.to &&
            change.start == change.endB &&
            view.state.selection instanceof TextSelection) {
            if (change.start > view.state.selection.from && change.start <= view.state.selection.from + 2 &&
                view.state.selection.from >= parse.from) {
                change.start = view.state.selection.from;
            }
            else if (change.endA < view.state.selection.to && change.endA >= view.state.selection.to - 2 &&
                view.state.selection.to <= parse.to) {
                change.endB += (view.state.selection.to - change.endA);
                change.endA = view.state.selection.to;
            }
        }
        // IE11 will insert a non-breaking space _ahead_ of the space after
        // the cursor space when adding a space before another space. When
        // that happened, adjust the change to cover the space instead.
        if (ie && ie_version <= 11 && change.endB == change.start + 1 &&
            change.endA == change.start && change.start > parse.from &&
            parse.doc.textBetween(change.start - parse.from - 1, change.start - parse.from + 1) == " \u00a0") {
            change.start--;
            change.endA--;
            change.endB--;
        }
        let $from = parse.doc.resolveNoCache(change.start - parse.from);
        let $to = parse.doc.resolveNoCache(change.endB - parse.from);
        let $fromA = doc.resolve(change.start);
        let inlineChange = $from.sameParent($to) && $from.parent.inlineContent && $fromA.end() >= change.endA;
        let nextSel;
        // If this looks like the effect of pressing Enter (or was recorded
        // as being an iOS enter press), just dispatch an Enter key instead.
        if (((ios && view.input.lastIOSEnter > Date.now() - 225 &&
            (!inlineChange || addedNodes.some(n => n.nodeName == "DIV" || n.nodeName == "P"))) ||
            (!inlineChange && $from.pos < parse.doc.content.size &&
                (nextSel = Selection.findFrom(parse.doc.resolve($from.pos + 1), 1, true)) &&
                nextSel.head == $to.pos)) &&
            view.someProp("handleKeyDown", f => f(view, keyEvent(13, "Enter")))) {
            view.input.lastIOSEnter = 0;
            return;
        }
        // Same for backspace
        if (view.state.selection.anchor > change.start &&
            looksLikeJoin(doc, change.start, change.endA, $from, $to) &&
            view.someProp("handleKeyDown", f => f(view, keyEvent(8, "Backspace")))) {
            if (android && chrome)
                view.domObserver.suppressSelectionUpdates(); // #820
            return;
        }
        // Chrome Android will occasionally, during composition, delete the
        // entire composition and then immediately insert it again. This is
        // used to detect that situation.
        if (chrome && android && change.endB == change.start)
            view.input.lastAndroidDelete = Date.now();
        // This tries to detect Android virtual keyboard
        // enter-and-pick-suggestion action. That sometimes (see issue
        // #1059) first fires a DOM mutation, before moving the selection to
        // the newly created block. And then, because ProseMirror cleans up
        // the DOM selection, it gives up moving the selection entirely,
        // leaving the cursor in the wrong place. When that happens, we drop
        // the new paragraph from the initial change, and fire a simulated
        // enter key afterwards.
        if (android && !inlineChange && $from.start() != $to.start() && $to.parentOffset == 0 && $from.depth == $to.depth &&
            parse.sel && parse.sel.anchor == parse.sel.head && parse.sel.head == change.endA) {
            change.endB -= 2;
            $to = parse.doc.resolveNoCache(change.endB - parse.from);
            setTimeout(() => {
                view.someProp("handleKeyDown", function (f) { return f(view, keyEvent(13, "Enter")); });
            }, 20);
        }
        let chFrom = change.start, chTo = change.endA;
        let tr, storedMarks, markChange;
        if (inlineChange) {
            if ($from.pos == $to.pos) { // Deletion
                // IE11 sometimes weirdly moves the DOM selection around after
                // backspacing out the first element in a textblock
                if (ie && ie_version <= 11 && $from.parentOffset == 0) {
                    view.domObserver.suppressSelectionUpdates();
                    setTimeout(() => selectionToDOM(view), 20);
                }
                tr = view.state.tr.delete(chFrom, chTo);
                storedMarks = doc.resolve(change.start).marksAcross(doc.resolve(change.endA));
            }
            else if ( // Adding or removing a mark
            change.endA == change.endB &&
                (markChange = isMarkChange($from.parent.content.cut($from.parentOffset, $to.parentOffset), $fromA.parent.content.cut($fromA.parentOffset, change.endA - $fromA.start())))) {
                tr = view.state.tr;
                if (markChange.type == "add")
                    tr.addMark(chFrom, chTo, markChange.mark);
                else
                    tr.removeMark(chFrom, chTo, markChange.mark);
            }
            else if ($from.parent.child($from.index()).isText && $from.index() == $to.index() - ($to.textOffset ? 0 : 1)) {
                // Both positions in the same text node -- simply insert text
                let text = $from.parent.textBetween($from.parentOffset, $to.parentOffset);
                if (view.someProp("handleTextInput", f => f(view, chFrom, chTo, text)))
                    return;
                tr = view.state.tr.insertText(text, chFrom, chTo);
            }
        }
        if (!tr)
            tr = view.state.tr.replace(chFrom, chTo, parse.doc.slice(change.start - parse.from, change.endB - parse.from));
        if (parse.sel) {
            let sel = resolveSelection(view, tr.doc, parse.sel);
            // Chrome Android will sometimes, during composition, report the
            // selection in the wrong place. If it looks like that is
            // happening, don't update the selection.
            // Edge just doesn't move the cursor forward when you start typing
            // in an empty block or between br nodes.
            if (sel && !(chrome && android && view.composing && sel.empty &&
                (change.start != change.endB || view.input.lastAndroidDelete < Date.now() - 100) &&
                (sel.head == chFrom || sel.head == tr.mapping.map(chTo) - 1) ||
                ie && sel.empty && sel.head == chFrom))
                tr.setSelection(sel);
        }
        if (storedMarks)
            tr.ensureMarks(storedMarks);
        view.dispatch(tr.scrollIntoView());
    }
    function resolveSelection(view, doc, parsedSel) {
        if (Math.max(parsedSel.anchor, parsedSel.head) > doc.content.size)
            return null;
        return selectionBetween(view, doc.resolve(parsedSel.anchor), doc.resolve(parsedSel.head));
    }
    // Given two same-length, non-empty fragments of inline content,
    // determine whether the first could be created from the second by
    // removing or adding a single mark type.
    function isMarkChange(cur, prev) {
        let curMarks = cur.firstChild.marks, prevMarks = prev.firstChild.marks;
        let added = curMarks, removed = prevMarks, type, mark, update;
        for (let i = 0; i < prevMarks.length; i++)
            added = prevMarks[i].removeFromSet(added);
        for (let i = 0; i < curMarks.length; i++)
            removed = curMarks[i].removeFromSet(removed);
        if (added.length == 1 && removed.length == 0) {
            mark = added[0];
            type = "add";
            update = (node) => node.mark(mark.addToSet(node.marks));
        }
        else if (added.length == 0 && removed.length == 1) {
            mark = removed[0];
            type = "remove";
            update = (node) => node.mark(mark.removeFromSet(node.marks));
        }
        else {
            return null;
        }
        let updated = [];
        for (let i = 0; i < prev.childCount; i++)
            updated.push(update(prev.child(i)));
        if (Fragment.from(updated).eq(cur))
            return { mark, type };
    }
    function looksLikeJoin(old, start, end, $newStart, $newEnd) {
        if (!$newStart.parent.isTextblock ||
            // The content must have shrunk
            end - start <= $newEnd.pos - $newStart.pos ||
            // newEnd must point directly at or after the end of the block that newStart points into
            skipClosingAndOpening($newStart, true, false) < $newEnd.pos)
            return false;
        let $start = old.resolve(start);
        // Start must be at the end of a block
        if ($start.parentOffset < $start.parent.content.size || !$start.parent.isTextblock)
            return false;
        let $next = old.resolve(skipClosingAndOpening($start, true, true));
        // The next textblock must start before end and end near it
        if (!$next.parent.isTextblock || $next.pos > end ||
            skipClosingAndOpening($next, true, false) < end)
            return false;
        // The fragments after the join point must match
        return $newStart.parent.content.cut($newStart.parentOffset).eq($next.parent.content);
    }
    function skipClosingAndOpening($pos, fromEnd, mayOpen) {
        let depth = $pos.depth, end = fromEnd ? $pos.end() : $pos.pos;
        while (depth > 0 && (fromEnd || $pos.indexAfter(depth) == $pos.node(depth).childCount)) {
            depth--;
            end++;
            fromEnd = false;
        }
        if (mayOpen) {
            let next = $pos.node(depth).maybeChild($pos.indexAfter(depth));
            while (next && !next.isLeaf) {
                next = next.firstChild;
                end++;
            }
        }
        return end;
    }
    function findDiff(a, b, pos, preferredPos, preferredSide) {
        let start = a.findDiffStart(b, pos);
        if (start == null)
            return null;
        let { a: endA, b: endB } = a.findDiffEnd(b, pos + a.size, pos + b.size);
        if (preferredSide == "end") {
            let adjust = Math.max(0, start - Math.min(endA, endB));
            preferredPos -= endA + adjust - start;
        }
        if (endA < start && a.size < b.size) {
            let move = preferredPos <= start && preferredPos >= endA ? start - preferredPos : 0;
            start -= move;
            endB = start + (endB - endA);
            endA = start;
        }
        else if (endB < start) {
            let move = preferredPos <= start && preferredPos >= endB ? start - preferredPos : 0;
            start -= move;
            endA = start + (endA - endB);
            endB = start;
        }
        return { start, endA, endB };
    }
    /**
    An editor view manages the DOM structure that represents an
    editable document. Its state and behavior are determined by its
    [props](https://prosemirror.net/docs/ref/#view.DirectEditorProps).
    */
    class EditorView {
        /**
        Create a view. `place` may be a DOM node that the editor should
        be appended to, a function that will place it into the document,
        or an object whose `mount` property holds the node to use as the
        document container. If it is `null`, the editor will not be
        added to the document.
        */
        constructor(place, props) {
            this._root = null;
            /**
            @internal
            */
            this.focused = false;
            /**
            Kludge used to work around a Chrome bug @internal
            */
            this.trackWrites = null;
            this.mounted = false;
            /**
            @internal
            */
            this.markCursor = null;
            /**
            @internal
            */
            this.cursorWrapper = null;
            /**
            @internal
            */
            this.lastSelectedViewDesc = undefined;
            /**
            @internal
            */
            this.input = new InputState;
            this.prevDirectPlugins = [];
            this.pluginViews = [];
            /**
            Holds `true` when a hack node is needed in Firefox to prevent the
            [space is eaten issue](https://github.com/ProseMirror/prosemirror/issues/651)
            @internal
            */
            this.requiresGeckoHackNode = false;
            /**
            When editor content is being dragged, this object contains
            information about the dragged slice and whether it is being
            copied or moved. At any other time, it is null.
            */
            this.dragging = null;
            this._props = props;
            this.state = props.state;
            this.directPlugins = props.plugins || [];
            this.directPlugins.forEach(checkStateComponent);
            this.dispatch = this.dispatch.bind(this);
            this.dom = (place && place.mount) || document.createElement("div");
            if (place) {
                if (place.appendChild)
                    place.appendChild(this.dom);
                else if (typeof place == "function")
                    place(this.dom);
                else if (place.mount)
                    this.mounted = true;
            }
            this.editable = getEditable(this);
            updateCursorWrapper(this);
            this.nodeViews = buildNodeViews(this);
            this.docView = docViewDesc(this.state.doc, computeDocDeco(this), viewDecorations(this), this.dom, this);
            this.domObserver = new DOMObserver(this, (from, to, typeOver, added) => readDOMChange(this, from, to, typeOver, added));
            this.domObserver.start();
            initInput(this);
            this.updatePluginViews();
        }
        /**
        Holds `true` when a
        [composition](https://w3c.github.io/uievents/#events-compositionevents)
        is active.
        */
        get composing() { return this.input.composing; }
        /**
        The view's current [props](https://prosemirror.net/docs/ref/#view.EditorProps).
        */
        get props() {
            if (this._props.state != this.state) {
                let prev = this._props;
                this._props = {};
                for (let name in prev)
                    this._props[name] = prev[name];
                this._props.state = this.state;
            }
            return this._props;
        }
        /**
        Update the view's props. Will immediately cause an update to
        the DOM.
        */
        update(props) {
            if (props.handleDOMEvents != this._props.handleDOMEvents)
                ensureListeners(this);
            let prevProps = this._props;
            this._props = props;
            if (props.plugins) {
                props.plugins.forEach(checkStateComponent);
                this.directPlugins = props.plugins;
            }
            this.updateStateInner(props.state, prevProps);
        }
        /**
        Update the view by updating existing props object with the object
        given as argument. Equivalent to `view.update(Object.assign({},
        view.props, props))`.
        */
        setProps(props) {
            let updated = {};
            for (let name in this._props)
                updated[name] = this._props[name];
            updated.state = this.state;
            for (let name in props)
                updated[name] = props[name];
            this.update(updated);
        }
        /**
        Update the editor's `state` prop, without touching any of the
        other props.
        */
        updateState(state) {
            this.updateStateInner(state, this._props);
        }
        updateStateInner(state, prevProps) {
            let prev = this.state, redraw = false, updateSel = false;
            // When stored marks are added, stop composition, so that they can
            // be displayed.
            if (state.storedMarks && this.composing) {
                clearComposition(this);
                updateSel = true;
            }
            this.state = state;
            let pluginsChanged = prev.plugins != state.plugins || this._props.plugins != prevProps.plugins;
            if (pluginsChanged || this._props.plugins != prevProps.plugins || this._props.nodeViews != prevProps.nodeViews) {
                let nodeViews = buildNodeViews(this);
                if (changedNodeViews(nodeViews, this.nodeViews)) {
                    this.nodeViews = nodeViews;
                    redraw = true;
                }
            }
            if (pluginsChanged || prevProps.handleDOMEvents != this._props.handleDOMEvents) {
                ensureListeners(this);
            }
            this.editable = getEditable(this);
            updateCursorWrapper(this);
            let innerDeco = viewDecorations(this), outerDeco = computeDocDeco(this);
            let scroll = prev.plugins != state.plugins && !prev.doc.eq(state.doc) ? "reset"
                : state.scrollToSelection > prev.scrollToSelection ? "to selection" : "preserve";
            let updateDoc = redraw || !this.docView.matchesNode(state.doc, outerDeco, innerDeco);
            if (updateDoc || !state.selection.eq(prev.selection))
                updateSel = true;
            let oldScrollPos = scroll == "preserve" && updateSel && this.dom.style.overflowAnchor == null && storeScrollPos(this);
            if (updateSel) {
                this.domObserver.stop();
                // Work around an issue in Chrome, IE, and Edge where changing
                // the DOM around an active selection puts it into a broken
                // state where the thing the user sees differs from the
                // selection reported by the Selection object (#710, #973,
                // #1011, #1013, #1035).
                let forceSelUpdate = updateDoc && (ie || chrome) && !this.composing &&
                    !prev.selection.empty && !state.selection.empty && selectionContextChanged(prev.selection, state.selection);
                if (updateDoc) {
                    // If the node that the selection points into is written to,
                    // Chrome sometimes starts misreporting the selection, so this
                    // tracks that and forces a selection reset when our update
                    // did write to the node.
                    let chromeKludge = chrome ? (this.trackWrites = this.domSelection().focusNode) : null;
                    if (redraw || !this.docView.update(state.doc, outerDeco, innerDeco, this)) {
                        this.docView.updateOuterDeco([]);
                        this.docView.destroy();
                        this.docView = docViewDesc(state.doc, outerDeco, innerDeco, this.dom, this);
                    }
                    if (chromeKludge && !this.trackWrites)
                        forceSelUpdate = true;
                }
                // Work around for an issue where an update arriving right between
                // a DOM selection change and the "selectionchange" event for it
                // can cause a spurious DOM selection update, disrupting mouse
                // drag selection.
                if (forceSelUpdate ||
                    !(this.input.mouseDown && this.domObserver.currentSelection.eq(this.domSelection()) && anchorInRightPlace(this))) {
                    selectionToDOM(this, forceSelUpdate);
                }
                else {
                    syncNodeSelection(this, state.selection);
                    this.domObserver.setCurSelection();
                }
                this.domObserver.start();
            }
            this.updatePluginViews(prev);
            if (scroll == "reset") {
                this.dom.scrollTop = 0;
            }
            else if (scroll == "to selection") {
                this.scrollToSelection();
            }
            else if (oldScrollPos) {
                resetScrollPos(oldScrollPos);
            }
        }
        /**
        @internal
        */
        scrollToSelection() {
            let startDOM = this.domSelection().focusNode;
            if (this.someProp("handleScrollToSelection", f => f(this))) ;
            else if (this.state.selection instanceof NodeSelection) {
                let target = this.docView.domAfterPos(this.state.selection.from);
                if (target.nodeType == 1)
                    scrollRectIntoView(this, target.getBoundingClientRect(), startDOM);
            }
            else {
                scrollRectIntoView(this, this.coordsAtPos(this.state.selection.head, 1), startDOM);
            }
        }
        destroyPluginViews() {
            let view;
            while (view = this.pluginViews.pop())
                if (view.destroy)
                    view.destroy();
        }
        updatePluginViews(prevState) {
            if (!prevState || prevState.plugins != this.state.plugins || this.directPlugins != this.prevDirectPlugins) {
                this.prevDirectPlugins = this.directPlugins;
                this.destroyPluginViews();
                for (let i = 0; i < this.directPlugins.length; i++) {
                    let plugin = this.directPlugins[i];
                    if (plugin.spec.view)
                        this.pluginViews.push(plugin.spec.view(this));
                }
                for (let i = 0; i < this.state.plugins.length; i++) {
                    let plugin = this.state.plugins[i];
                    if (plugin.spec.view)
                        this.pluginViews.push(plugin.spec.view(this));
                }
            }
            else {
                for (let i = 0; i < this.pluginViews.length; i++) {
                    let pluginView = this.pluginViews[i];
                    if (pluginView.update)
                        pluginView.update(this, prevState);
                }
            }
        }
        someProp(propName, f) {
            let prop = this._props && this._props[propName], value;
            if (prop != null && (value = f ? f(prop) : prop))
                return value;
            for (let i = 0; i < this.directPlugins.length; i++) {
                let prop = this.directPlugins[i].props[propName];
                if (prop != null && (value = f ? f(prop) : prop))
                    return value;
            }
            let plugins = this.state.plugins;
            if (plugins)
                for (let i = 0; i < plugins.length; i++) {
                    let prop = plugins[i].props[propName];
                    if (prop != null && (value = f ? f(prop) : prop))
                        return value;
                }
        }
        /**
        Query whether the view has focus.
        */
        hasFocus() {
            // Work around IE not handling focus correctly if resize handles are shown.
            // If the cursor is inside an element with resize handles, activeElement
            // will be that element instead of this.dom.
            if (ie) {
                // If activeElement is within this.dom, and there are no other elements
                // setting `contenteditable` to false in between, treat it as focused.
                let node = this.root.activeElement;
                if (node == this.dom)
                    return true;
                if (!node || !this.dom.contains(node))
                    return false;
                while (node && this.dom != node && this.dom.contains(node)) {
                    if (node.contentEditable == 'false')
                        return false;
                    node = node.parentElement;
                }
                return true;
            }
            return this.root.activeElement == this.dom;
        }
        /**
        Focus the editor.
        */
        focus() {
            this.domObserver.stop();
            if (this.editable)
                focusPreventScroll(this.dom);
            selectionToDOM(this);
            this.domObserver.start();
        }
        /**
        Get the document root in which the editor exists. This will
        usually be the top-level `document`, but might be a [shadow
        DOM](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Shadow_DOM)
        root if the editor is inside one.
        */
        get root() {
            let cached = this._root;
            if (cached == null)
                for (let search = this.dom.parentNode; search; search = search.parentNode) {
                    if (search.nodeType == 9 || (search.nodeType == 11 && search.host)) {
                        if (!search.getSelection)
                            Object.getPrototypeOf(search).getSelection = () => search.ownerDocument.getSelection();
                        return this._root = search;
                    }
                }
            return cached || document;
        }
        /**
        Given a pair of viewport coordinates, return the document
        position that corresponds to them. May return null if the given
        coordinates aren't inside of the editor. When an object is
        returned, its `pos` property is the position nearest to the
        coordinates, and its `inside` property holds the position of the
        inner node that the position falls inside of, or -1 if it is at
        the top level, not in any node.
        */
        posAtCoords(coords) {
            return posAtCoords(this, coords);
        }
        /**
        Returns the viewport rectangle at a given document position.
        `left` and `right` will be the same number, as this returns a
        flat cursor-ish rectangle. If the position is between two things
        that aren't directly adjacent, `side` determines which element
        is used. When < 0, the element before the position is used,
        otherwise the element after.
        */
        coordsAtPos(pos, side = 1) {
            return coordsAtPos(this, pos, side);
        }
        /**
        Find the DOM position that corresponds to the given document
        position. When `side` is negative, find the position as close as
        possible to the content before the position. When positive,
        prefer positions close to the content after the position. When
        zero, prefer as shallow a position as possible.
        
        Note that you should **not** mutate the editor's internal DOM,
        only inspect it (and even that is usually not necessary).
        */
        domAtPos(pos, side = 0) {
            return this.docView.domFromPos(pos, side);
        }
        /**
        Find the DOM node that represents the document node after the
        given position. May return `null` when the position doesn't point
        in front of a node or if the node is inside an opaque node view.
        
        This is intended to be able to call things like
        `getBoundingClientRect` on that DOM node. Do **not** mutate the
        editor DOM directly, or add styling this way, since that will be
        immediately overriden by the editor as it redraws the node.
        */
        nodeDOM(pos) {
            let desc = this.docView.descAt(pos);
            return desc ? desc.nodeDOM : null;
        }
        /**
        Find the document position that corresponds to a given DOM
        position. (Whenever possible, it is preferable to inspect the
        document structure directly, rather than poking around in the
        DOM, but sometimes—for example when interpreting an event
        target—you don't have a choice.)
        
        The `bias` parameter can be used to influence which side of a DOM
        node to use when the position is inside a leaf node.
        */
        posAtDOM(node, offset, bias = -1) {
            let pos = this.docView.posFromDOM(node, offset, bias);
            if (pos == null)
                throw new RangeError("DOM position not inside the editor");
            return pos;
        }
        /**
        Find out whether the selection is at the end of a textblock when
        moving in a given direction. When, for example, given `"left"`,
        it will return true if moving left from the current cursor
        position would leave that position's parent textblock. Will apply
        to the view's current state by default, but it is possible to
        pass a different state.
        */
        endOfTextblock(dir, state) {
            return endOfTextblock(this, state || this.state, dir);
        }
        /**
        Removes the editor from the DOM and destroys all [node
        views](https://prosemirror.net/docs/ref/#view.NodeView).
        */
        destroy() {
            if (!this.docView)
                return;
            destroyInput(this);
            this.destroyPluginViews();
            if (this.mounted) {
                this.docView.update(this.state.doc, [], viewDecorations(this), this);
                this.dom.textContent = "";
            }
            else if (this.dom.parentNode) {
                this.dom.parentNode.removeChild(this.dom);
            }
            this.docView.destroy();
            this.docView = null;
        }
        /**
        This is true when the view has been
        [destroyed](https://prosemirror.net/docs/ref/#view.EditorView.destroy) (and thus should not be
        used anymore).
        */
        get isDestroyed() {
            return this.docView == null;
        }
        /**
        Used for testing.
        */
        dispatchEvent(event) {
            return dispatchEvent(this, event);
        }
        /**
        Dispatch a transaction. Will call
        [`dispatchTransaction`](https://prosemirror.net/docs/ref/#view.DirectEditorProps.dispatchTransaction)
        when given, and otherwise defaults to applying the transaction to
        the current state and calling
        [`updateState`](https://prosemirror.net/docs/ref/#view.EditorView.updateState) with the result.
        This method is bound to the view instance, so that it can be
        easily passed around.
        */
        dispatch(tr) {
            let dispatchTransaction = this._props.dispatchTransaction;
            if (dispatchTransaction)
                dispatchTransaction.call(this, tr);
            else
                this.updateState(this.state.apply(tr));
        }
        /**
        @internal
        */
        domSelection() {
            return this.root.getSelection();
        }
    }
    function computeDocDeco(view) {
        let attrs = Object.create(null);
        attrs.class = "ProseMirror";
        attrs.contenteditable = String(view.editable);
        attrs.translate = "no";
        view.someProp("attributes", value => {
            if (typeof value == "function")
                value = value(view.state);
            if (value)
                for (let attr in value) {
                    if (attr == "class")
                        attrs.class += " " + value[attr];
                    if (attr == "style") {
                        attrs.style = (attrs.style ? attrs.style + ";" : "") + value[attr];
                    }
                    else if (!attrs[attr] && attr != "contenteditable" && attr != "nodeName")
                        attrs[attr] = String(value[attr]);
                }
        });
        return [Decoration.node(0, view.state.doc.content.size, attrs)];
    }
    function updateCursorWrapper(view) {
        if (view.markCursor) {
            let dom = document.createElement("img");
            dom.className = "ProseMirror-separator";
            dom.setAttribute("mark-placeholder", "true");
            dom.setAttribute("alt", "");
            view.cursorWrapper = { dom, deco: Decoration.widget(view.state.selection.head, dom, { raw: true, marks: view.markCursor }) };
        }
        else {
            view.cursorWrapper = null;
        }
    }
    function getEditable(view) {
        return !view.someProp("editable", value => value(view.state) === false);
    }
    function selectionContextChanged(sel1, sel2) {
        let depth = Math.min(sel1.$anchor.sharedDepth(sel1.head), sel2.$anchor.sharedDepth(sel2.head));
        return sel1.$anchor.start(depth) != sel2.$anchor.start(depth);
    }
    function buildNodeViews(view) {
        let result = Object.create(null);
        function add(obj) {
            for (let prop in obj)
                if (!Object.prototype.hasOwnProperty.call(result, prop))
                    result[prop] = obj[prop];
        }
        view.someProp("nodeViews", add);
        view.someProp("markViews", add);
        return result;
    }
    function changedNodeViews(a, b) {
        let nA = 0, nB = 0;
        for (let prop in a) {
            if (a[prop] != b[prop])
                return true;
            nA++;
        }
        for (let _ in b)
            nB++;
        return nA != nB;
    }
    function checkStateComponent(plugin) {
        if (plugin.spec.state || plugin.spec.filterTransaction || plugin.spec.appendTransaction)
            throw new RangeError("Plugins passed directly to the view must not have a state component");
    }

    var base = {
      8: "Backspace",
      9: "Tab",
      10: "Enter",
      12: "NumLock",
      13: "Enter",
      16: "Shift",
      17: "Control",
      18: "Alt",
      20: "CapsLock",
      27: "Escape",
      32: " ",
      33: "PageUp",
      34: "PageDown",
      35: "End",
      36: "Home",
      37: "ArrowLeft",
      38: "ArrowUp",
      39: "ArrowRight",
      40: "ArrowDown",
      44: "PrintScreen",
      45: "Insert",
      46: "Delete",
      59: ";",
      61: "=",
      91: "Meta",
      92: "Meta",
      106: "*",
      107: "+",
      108: ",",
      109: "-",
      110: ".",
      111: "/",
      144: "NumLock",
      145: "ScrollLock",
      160: "Shift",
      161: "Shift",
      162: "Control",
      163: "Control",
      164: "Alt",
      165: "Alt",
      173: "-",
      186: ";",
      187: "=",
      188: ",",
      189: "-",
      190: ".",
      191: "/",
      192: "`",
      219: "[",
      220: "\\",
      221: "]",
      222: "'"
    };

    var shift = {
      48: ")",
      49: "!",
      50: "@",
      51: "#",
      52: "$",
      53: "%",
      54: "^",
      55: "&",
      56: "*",
      57: "(",
      59: ":",
      61: "+",
      173: "_",
      186: ":",
      187: "+",
      188: "<",
      189: "_",
      190: ">",
      191: "?",
      192: "~",
      219: "{",
      220: "|",
      221: "}",
      222: "\""
    };

    var chrome$1 = typeof navigator != "undefined" && /Chrome\/(\d+)/.exec(navigator.userAgent);
    var gecko$1 = typeof navigator != "undefined" && /Gecko\/\d+/.test(navigator.userAgent);
    var mac$1 = typeof navigator != "undefined" && /Mac/.test(navigator.platform);
    var ie$1 = typeof navigator != "undefined" && /MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent);
    var brokenModifierNames = mac$1 || chrome$1 && +chrome$1[1] < 57;

    // Fill in the digit keys
    for (var i$1 = 0; i$1 < 10; i$1++) base[48 + i$1] = base[96 + i$1] = String(i$1);

    // The function keys
    for (var i$1 = 1; i$1 <= 24; i$1++) base[i$1 + 111] = "F" + i$1;

    // And the alphabetic keys
    for (var i$1 = 65; i$1 <= 90; i$1++) {
      base[i$1] = String.fromCharCode(i$1 + 32);
      shift[i$1] = String.fromCharCode(i$1);
    }

    // For each code that doesn't have a shift-equivalent, copy the base name
    for (var code in base) if (!shift.hasOwnProperty(code)) shift[code] = base[code];

    function keyName(event) {
      var ignoreKey = brokenModifierNames && (event.ctrlKey || event.altKey || event.metaKey) ||
        ie$1 && event.shiftKey && event.key && event.key.length == 1 ||
        event.key == "Unidentified";
      var name = (!ignoreKey && event.key) ||
        (event.shiftKey ? shift : base)[event.keyCode] ||
        event.key || "Unidentified";
      // Edge sometimes produces wrong names (Issue #3)
      if (name == "Esc") name = "Escape";
      if (name == "Del") name = "Delete";
      // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/8860571/
      if (name == "Left") name = "ArrowLeft";
      if (name == "Up") name = "ArrowUp";
      if (name == "Right") name = "ArrowRight";
      if (name == "Down") name = "ArrowDown";
      return name
    }

    const mac$2 = typeof navigator != "undefined" ? /Mac|iP(hone|[oa]d)/.test(navigator.platform) : false;
    function normalizeKeyName(name) {
        let parts = name.split(/-(?!$)/), result = parts[parts.length - 1];
        if (result == "Space")
            result = " ";
        let alt, ctrl, shift, meta;
        for (let i = 0; i < parts.length - 1; i++) {
            let mod = parts[i];
            if (/^(cmd|meta|m)$/i.test(mod))
                meta = true;
            else if (/^a(lt)?$/i.test(mod))
                alt = true;
            else if (/^(c|ctrl|control)$/i.test(mod))
                ctrl = true;
            else if (/^s(hift)?$/i.test(mod))
                shift = true;
            else if (/^mod$/i.test(mod)) {
                if (mac$2)
                    meta = true;
                else
                    ctrl = true;
            }
            else
                throw new Error("Unrecognized modifier name: " + mod);
        }
        if (alt)
            result = "Alt-" + result;
        if (ctrl)
            result = "Ctrl-" + result;
        if (meta)
            result = "Meta-" + result;
        if (shift)
            result = "Shift-" + result;
        return result;
    }
    function normalize(map) {
        let copy = Object.create(null);
        for (let prop in map)
            copy[normalizeKeyName(prop)] = map[prop];
        return copy;
    }
    function modifiers(name, event, shift) {
        if (event.altKey)
            name = "Alt-" + name;
        if (event.ctrlKey)
            name = "Ctrl-" + name;
        if (event.metaKey)
            name = "Meta-" + name;
        if (shift !== false && event.shiftKey)
            name = "Shift-" + name;
        return name;
    }
    /**
    Create a keymap plugin for the given set of bindings.

    Bindings should map key names to [command](https://prosemirror.net/docs/ref/#commands)-style
    functions, which will be called with `(EditorState, dispatch,
    EditorView)` arguments, and should return true when they've handled
    the key. Note that the view argument isn't part of the command
    protocol, but can be used as an escape hatch if a binding needs to
    directly interact with the UI.

    Key names may be strings like `"Shift-Ctrl-Enter"`—a key
    identifier prefixed with zero or more modifiers. Key identifiers
    are based on the strings that can appear in
    [`KeyEvent.key`](https:developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key).
    Use lowercase letters to refer to letter keys (or uppercase letters
    if you want shift to be held). You may use `"Space"` as an alias
    for the `" "` name.

    Modifiers can be given in any order. `Shift-` (or `s-`), `Alt-` (or
    `a-`), `Ctrl-` (or `c-` or `Control-`) and `Cmd-` (or `m-` or
    `Meta-`) are recognized. For characters that are created by holding
    shift, the `Shift-` prefix is implied, and should not be added
    explicitly.

    You can use `Mod-` as a shorthand for `Cmd-` on Mac and `Ctrl-` on
    other platforms.

    You can add multiple keymap plugins to an editor. The order in
    which they appear determines their precedence (the ones early in
    the array get to dispatch first).
    */
    function keymap(bindings) {
        return new Plugin({ props: { handleKeyDown: keydownHandler(bindings) } });
    }
    /**
    Given a set of bindings (using the same format as
    [`keymap`](https://prosemirror.net/docs/ref/#keymap.keymap)), return a [keydown
    handler](https://prosemirror.net/docs/ref/#view.EditorProps.handleKeyDown) that handles them.
    */
    function keydownHandler(bindings) {
        let map = normalize(bindings);
        return function (view, event) {
            let name = keyName(event), isChar = name.length == 1 && name != " ", baseName;
            let direct = map[modifiers(name, event, !isChar)];
            if (direct && direct(view.state, view.dispatch, view))
                return true;
            if (isChar && (event.shiftKey || event.altKey || event.metaKey || name.charCodeAt(0) > 127) &&
                (baseName = base[event.keyCode]) && baseName != name) {
                // Try falling back to the keyCode when there's a modifier
                // active or the character produced isn't ASCII, and our table
                // produces a different name from the the keyCode. See #668,
                // #1060
                let fromCode = map[modifiers(baseName, event, true)];
                if (fromCode && fromCode(view.state, view.dispatch, view))
                    return true;
            }
            else if (isChar && event.shiftKey) {
                // Otherwise, if shift is active, also try the binding with the
                // Shift- prefix enabled. See #997
                let withShift = map[modifiers(name, event, true)];
                if (withShift && withShift(view.state, view.dispatch, view))
                    return true;
            }
            return false;
        };
    }

    /**
    Delete the selection, if there is one.
    */
    const deleteSelection = (state, dispatch) => {
        if (state.selection.empty)
            return false;
        if (dispatch)
            dispatch(state.tr.deleteSelection().scrollIntoView());
        return true;
    };
    /**
    If the selection is empty and at the start of a textblock, try to
    reduce the distance between that block and the one before it—if
    there's a block directly before it that can be joined, join them.
    If not, try to move the selected block closer to the next one in
    the document structure by lifting it out of its parent or moving it
    into a parent of the previous block. Will use the view for accurate
    (bidi-aware) start-of-textblock detection if given.
    */
    const joinBackward = (state, dispatch, view) => {
        let { $cursor } = state.selection;
        if (!$cursor || (view ? !view.endOfTextblock("backward", state)
            : $cursor.parentOffset > 0))
            return false;
        let $cut = findCutBefore($cursor);
        // If there is no node before this, try to lift
        if (!$cut) {
            let range = $cursor.blockRange(), target = range && liftTarget(range);
            if (target == null)
                return false;
            if (dispatch)
                dispatch(state.tr.lift(range, target).scrollIntoView());
            return true;
        }
        let before = $cut.nodeBefore;
        // Apply the joining algorithm
        if (!before.type.spec.isolating && deleteBarrier(state, $cut, dispatch))
            return true;
        // If the node below has no content and the node above is
        // selectable, delete the node below and select the one above.
        if ($cursor.parent.content.size == 0 &&
            (textblockAt(before, "end") || NodeSelection.isSelectable(before))) {
            let delStep = replaceStep(state.doc, $cursor.before(), $cursor.after(), Slice.empty);
            if (delStep && delStep.slice.size < delStep.to - delStep.from) {
                if (dispatch) {
                    let tr = state.tr.step(delStep);
                    tr.setSelection(textblockAt(before, "end") ? Selection.findFrom(tr.doc.resolve(tr.mapping.map($cut.pos, -1)), -1)
                        : NodeSelection.create(tr.doc, $cut.pos - before.nodeSize));
                    dispatch(tr.scrollIntoView());
                }
                return true;
            }
        }
        // If the node before is an atom, delete it
        if (before.isAtom && $cut.depth == $cursor.depth - 1) {
            if (dispatch)
                dispatch(state.tr.delete($cut.pos - before.nodeSize, $cut.pos).scrollIntoView());
            return true;
        }
        return false;
    };
    function textblockAt(node, side, only = false) {
        for (let scan = node; scan; scan = (side == "start" ? scan.firstChild : scan.lastChild)) {
            if (scan.isTextblock)
                return true;
            if (only && scan.childCount != 1)
                return false;
        }
        return false;
    }
    /**
    When the selection is empty and at the start of a textblock, select
    the node before that textblock, if possible. This is intended to be
    bound to keys like backspace, after
    [`joinBackward`](https://prosemirror.net/docs/ref/#commands.joinBackward) or other deleting
    commands, as a fall-back behavior when the schema doesn't allow
    deletion at the selected point.
    */
    const selectNodeBackward = (state, dispatch, view) => {
        let { $head, empty } = state.selection, $cut = $head;
        if (!empty)
            return false;
        if ($head.parent.isTextblock) {
            if (view ? !view.endOfTextblock("backward", state) : $head.parentOffset > 0)
                return false;
            $cut = findCutBefore($head);
        }
        let node = $cut && $cut.nodeBefore;
        if (!node || !NodeSelection.isSelectable(node))
            return false;
        if (dispatch)
            dispatch(state.tr.setSelection(NodeSelection.create(state.doc, $cut.pos - node.nodeSize)).scrollIntoView());
        return true;
    };
    function findCutBefore($pos) {
        if (!$pos.parent.type.spec.isolating)
            for (let i = $pos.depth - 1; i >= 0; i--) {
                if ($pos.index(i) > 0)
                    return $pos.doc.resolve($pos.before(i + 1));
                if ($pos.node(i).type.spec.isolating)
                    break;
            }
        return null;
    }
    /**
    If the selection is empty and the cursor is at the end of a
    textblock, try to reduce or remove the boundary between that block
    and the one after it, either by joining them or by moving the other
    block closer to this one in the tree structure. Will use the view
    for accurate start-of-textblock detection if given.
    */
    const joinForward = (state, dispatch, view) => {
        let { $cursor } = state.selection;
        if (!$cursor || (view ? !view.endOfTextblock("forward", state)
            : $cursor.parentOffset < $cursor.parent.content.size))
            return false;
        let $cut = findCutAfter($cursor);
        // If there is no node after this, there's nothing to do
        if (!$cut)
            return false;
        let after = $cut.nodeAfter;
        // Try the joining algorithm
        if (deleteBarrier(state, $cut, dispatch))
            return true;
        // If the node above has no content and the node below is
        // selectable, delete the node above and select the one below.
        if ($cursor.parent.content.size == 0 &&
            (textblockAt(after, "start") || NodeSelection.isSelectable(after))) {
            let delStep = replaceStep(state.doc, $cursor.before(), $cursor.after(), Slice.empty);
            if (delStep && delStep.slice.size < delStep.to - delStep.from) {
                if (dispatch) {
                    let tr = state.tr.step(delStep);
                    tr.setSelection(textblockAt(after, "start") ? Selection.findFrom(tr.doc.resolve(tr.mapping.map($cut.pos)), 1)
                        : NodeSelection.create(tr.doc, tr.mapping.map($cut.pos)));
                    dispatch(tr.scrollIntoView());
                }
                return true;
            }
        }
        // If the next node is an atom, delete it
        if (after.isAtom && $cut.depth == $cursor.depth - 1) {
            if (dispatch)
                dispatch(state.tr.delete($cut.pos, $cut.pos + after.nodeSize).scrollIntoView());
            return true;
        }
        return false;
    };
    /**
    When the selection is empty and at the end of a textblock, select
    the node coming after that textblock, if possible. This is intended
    to be bound to keys like delete, after
    [`joinForward`](https://prosemirror.net/docs/ref/#commands.joinForward) and similar deleting
    commands, to provide a fall-back behavior when the schema doesn't
    allow deletion at the selected point.
    */
    const selectNodeForward = (state, dispatch, view) => {
        let { $head, empty } = state.selection, $cut = $head;
        if (!empty)
            return false;
        if ($head.parent.isTextblock) {
            if (view ? !view.endOfTextblock("forward", state) : $head.parentOffset < $head.parent.content.size)
                return false;
            $cut = findCutAfter($head);
        }
        let node = $cut && $cut.nodeAfter;
        if (!node || !NodeSelection.isSelectable(node))
            return false;
        if (dispatch)
            dispatch(state.tr.setSelection(NodeSelection.create(state.doc, $cut.pos)).scrollIntoView());
        return true;
    };
    function findCutAfter($pos) {
        if (!$pos.parent.type.spec.isolating)
            for (let i = $pos.depth - 1; i >= 0; i--) {
                let parent = $pos.node(i);
                if ($pos.index(i) + 1 < parent.childCount)
                    return $pos.doc.resolve($pos.after(i + 1));
                if (parent.type.spec.isolating)
                    break;
            }
        return null;
    }
    /**
    Lift the selected block, or the closest ancestor block of the
    selection that can be lifted, out of its parent node.
    */
    const lift$1 = (state, dispatch) => {
        let { $from, $to } = state.selection;
        let range = $from.blockRange($to), target = range && liftTarget(range);
        if (target == null)
            return false;
        if (dispatch)
            dispatch(state.tr.lift(range, target).scrollIntoView());
        return true;
    };
    /**
    If the selection is in a node whose type has a truthy
    [`code`](https://prosemirror.net/docs/ref/#model.NodeSpec.code) property in its spec, replace the
    selection with a newline character.
    */
    const newlineInCode = (state, dispatch) => {
        let { $head, $anchor } = state.selection;
        if (!$head.parent.type.spec.code || !$head.sameParent($anchor))
            return false;
        if (dispatch)
            dispatch(state.tr.insertText("\n").scrollIntoView());
        return true;
    };
    function defaultBlockAt(match) {
        for (let i = 0; i < match.edgeCount; i++) {
            let { type } = match.edge(i);
            if (type.isTextblock && !type.hasRequiredAttrs())
                return type;
        }
        return null;
    }
    /**
    When the selection is in a node with a truthy
    [`code`](https://prosemirror.net/docs/ref/#model.NodeSpec.code) property in its spec, create a
    default block after the code block, and move the cursor there.
    */
    const exitCode = (state, dispatch) => {
        let { $head, $anchor } = state.selection;
        if (!$head.parent.type.spec.code || !$head.sameParent($anchor))
            return false;
        let above = $head.node(-1), after = $head.indexAfter(-1), type = defaultBlockAt(above.contentMatchAt(after));
        if (!type || !above.canReplaceWith(after, after, type))
            return false;
        if (dispatch) {
            let pos = $head.after(), tr = state.tr.replaceWith(pos, pos, type.createAndFill());
            tr.setSelection(Selection.near(tr.doc.resolve(pos), 1));
            dispatch(tr.scrollIntoView());
        }
        return true;
    };
    /**
    If a block node is selected, create an empty paragraph before (if
    it is its parent's first child) or after it.
    */
    const createParagraphNear = (state, dispatch) => {
        let sel = state.selection, { $from, $to } = sel;
        if (sel instanceof AllSelection || $from.parent.inlineContent || $to.parent.inlineContent)
            return false;
        let type = defaultBlockAt($to.parent.contentMatchAt($to.indexAfter()));
        if (!type || !type.isTextblock)
            return false;
        if (dispatch) {
            let side = (!$from.parentOffset && $to.index() < $to.parent.childCount ? $from : $to).pos;
            let tr = state.tr.insert(side, type.createAndFill());
            tr.setSelection(TextSelection.create(tr.doc, side + 1));
            dispatch(tr.scrollIntoView());
        }
        return true;
    };
    /**
    If the cursor is in an empty textblock that can be lifted, lift the
    block.
    */
    const liftEmptyBlock = (state, dispatch) => {
        let { $cursor } = state.selection;
        if (!$cursor || $cursor.parent.content.size)
            return false;
        if ($cursor.depth > 1 && $cursor.after() != $cursor.end(-1)) {
            let before = $cursor.before();
            if (canSplit(state.doc, before)) {
                if (dispatch)
                    dispatch(state.tr.split(before).scrollIntoView());
                return true;
            }
        }
        let range = $cursor.blockRange(), target = range && liftTarget(range);
        if (target == null)
            return false;
        if (dispatch)
            dispatch(state.tr.lift(range, target).scrollIntoView());
        return true;
    };
    /**
    Split the parent block of the selection. If the selection is a text
    selection, also delete its content.
    */
    const splitBlock = (state, dispatch) => {
        let { $from, $to } = state.selection;
        if (state.selection instanceof NodeSelection && state.selection.node.isBlock) {
            if (!$from.parentOffset || !canSplit(state.doc, $from.pos))
                return false;
            if (dispatch)
                dispatch(state.tr.split($from.pos).scrollIntoView());
            return true;
        }
        if (!$from.parent.isBlock)
            return false;
        if (dispatch) {
            let atEnd = $to.parentOffset == $to.parent.content.size;
            let tr = state.tr;
            if (state.selection instanceof TextSelection || state.selection instanceof AllSelection)
                tr.deleteSelection();
            let deflt = $from.depth == 0 ? null : defaultBlockAt($from.node(-1).contentMatchAt($from.indexAfter(-1)));
            let types = atEnd && deflt ? [{ type: deflt }] : undefined;
            let can = canSplit(tr.doc, tr.mapping.map($from.pos), 1, types);
            if (!types && !can && canSplit(tr.doc, tr.mapping.map($from.pos), 1, deflt ? [{ type: deflt }] : undefined)) {
                if (deflt)
                    types = [{ type: deflt }];
                can = true;
            }
            if (can) {
                tr.split(tr.mapping.map($from.pos), 1, types);
                if (!atEnd && !$from.parentOffset && $from.parent.type != deflt) {
                    let first = tr.mapping.map($from.before()), $first = tr.doc.resolve(first);
                    if (deflt && $from.node(-1).canReplaceWith($first.index(), $first.index() + 1, deflt))
                        tr.setNodeMarkup(tr.mapping.map($from.before()), deflt);
                }
            }
            dispatch(tr.scrollIntoView());
        }
        return true;
    };
    /**
    Move the selection to the node wrapping the current selection, if
    any. (Will not select the document node.)
    */
    const selectParentNode = (state, dispatch) => {
        let { $from, to } = state.selection, pos;
        let same = $from.sharedDepth(to);
        if (same == 0)
            return false;
        pos = $from.before(same);
        if (dispatch)
            dispatch(state.tr.setSelection(NodeSelection.create(state.doc, pos)));
        return true;
    };
    /**
    Select the whole document.
    */
    const selectAll = (state, dispatch) => {
        if (dispatch)
            dispatch(state.tr.setSelection(new AllSelection(state.doc)));
        return true;
    };
    function joinMaybeClear(state, $pos, dispatch) {
        let before = $pos.nodeBefore, after = $pos.nodeAfter, index = $pos.index();
        if (!before || !after || !before.type.compatibleContent(after.type))
            return false;
        if (!before.content.size && $pos.parent.canReplace(index - 1, index)) {
            if (dispatch)
                dispatch(state.tr.delete($pos.pos - before.nodeSize, $pos.pos).scrollIntoView());
            return true;
        }
        if (!$pos.parent.canReplace(index, index + 1) || !(after.isTextblock || canJoin(state.doc, $pos.pos)))
            return false;
        if (dispatch)
            dispatch(state.tr
                .clearIncompatible($pos.pos, before.type, before.contentMatchAt(before.childCount))
                .join($pos.pos)
                .scrollIntoView());
        return true;
    }
    function deleteBarrier(state, $cut, dispatch) {
        let before = $cut.nodeBefore, after = $cut.nodeAfter, conn, match;
        if (before.type.spec.isolating || after.type.spec.isolating)
            return false;
        if (joinMaybeClear(state, $cut, dispatch))
            return true;
        let canDelAfter = $cut.parent.canReplace($cut.index(), $cut.index() + 1);
        if (canDelAfter &&
            (conn = (match = before.contentMatchAt(before.childCount)).findWrapping(after.type)) &&
            match.matchType(conn[0] || after.type).validEnd) {
            if (dispatch) {
                let end = $cut.pos + after.nodeSize, wrap = Fragment.empty;
                for (let i = conn.length - 1; i >= 0; i--)
                    wrap = Fragment.from(conn[i].create(null, wrap));
                wrap = Fragment.from(before.copy(wrap));
                let tr = state.tr.step(new ReplaceAroundStep($cut.pos - 1, end, $cut.pos, end, new Slice(wrap, 1, 0), conn.length, true));
                let joinAt = end + 2 * conn.length;
                if (canJoin(tr.doc, joinAt))
                    tr.join(joinAt);
                dispatch(tr.scrollIntoView());
            }
            return true;
        }
        let selAfter = Selection.findFrom($cut, 1);
        let range = selAfter && selAfter.$from.blockRange(selAfter.$to), target = range && liftTarget(range);
        if (target != null && target >= $cut.depth) {
            if (dispatch)
                dispatch(state.tr.lift(range, target).scrollIntoView());
            return true;
        }
        if (canDelAfter && textblockAt(after, "start", true) && textblockAt(before, "end")) {
            let at = before, wrap = [];
            for (;;) {
                wrap.push(at);
                if (at.isTextblock)
                    break;
                at = at.lastChild;
            }
            let afterText = after, afterDepth = 1;
            for (; !afterText.isTextblock; afterText = afterText.firstChild)
                afterDepth++;
            if (at.canReplace(at.childCount, at.childCount, afterText.content)) {
                if (dispatch) {
                    let end = Fragment.empty;
                    for (let i = wrap.length - 1; i >= 0; i--)
                        end = Fragment.from(wrap[i].copy(end));
                    let tr = state.tr.step(new ReplaceAroundStep($cut.pos - wrap.length, $cut.pos + after.nodeSize, $cut.pos + afterDepth, $cut.pos + after.nodeSize - afterDepth, new Slice(end, wrap.length, 0), 0, true));
                    dispatch(tr.scrollIntoView());
                }
                return true;
            }
        }
        return false;
    }
    function selectTextblockSide(side) {
        return function (state, dispatch) {
            let sel = state.selection, $pos = side < 0 ? sel.$from : sel.$to;
            let depth = $pos.depth;
            while ($pos.node(depth).isInline) {
                if (!depth)
                    return false;
                depth--;
            }
            if (!$pos.node(depth).isTextblock)
                return false;
            if (dispatch)
                dispatch(state.tr.setSelection(TextSelection.create(state.doc, side < 0 ? $pos.start(depth) : $pos.end(depth))));
            return true;
        };
    }
    /**
    Moves the cursor to the start of current text block.
    */
    const selectTextblockStart = selectTextblockSide(-1);
    /**
    Moves the cursor to the end of current text block.
    */
    const selectTextblockEnd = selectTextblockSide(1);
    // Parameterized commands
    /**
    Wrap the selection in a node of the given type with the given
    attributes.
    */
    function wrapIn(nodeType, attrs = null) {
        return function (state, dispatch) {
            let { $from, $to } = state.selection;
            let range = $from.blockRange($to), wrapping = range && findWrapping(range, nodeType, attrs);
            if (!wrapping)
                return false;
            if (dispatch)
                dispatch(state.tr.wrap(range, wrapping).scrollIntoView());
            return true;
        };
    }
    /**
    Returns a command that tries to set the selected textblocks to the
    given node type with the given attributes.
    */
    function setBlockType$1(nodeType, attrs = null) {
        return function (state, dispatch) {
            let { from, to } = state.selection;
            let applicable = false;
            state.doc.nodesBetween(from, to, (node, pos) => {
                if (applicable)
                    return false;
                if (!node.isTextblock || node.hasMarkup(nodeType, attrs))
                    return;
                if (node.type == nodeType) {
                    applicable = true;
                }
                else {
                    let $pos = state.doc.resolve(pos), index = $pos.index();
                    applicable = $pos.parent.canReplaceWith(index, index + 1, nodeType);
                }
            });
            if (!applicable)
                return false;
            if (dispatch)
                dispatch(state.tr.setBlockType(from, to, nodeType, attrs).scrollIntoView());
            return true;
        };
    }
    /**
    Combine a number of command functions into a single function (which
    calls them one by one until one returns true).
    */
    function chainCommands(...commands) {
        return function (state, dispatch, view) {
            for (let i = 0; i < commands.length; i++)
                if (commands[i](state, dispatch, view))
                    return true;
            return false;
        };
    }
    let backspace = chainCommands(deleteSelection, joinBackward, selectNodeBackward);
    let del = chainCommands(deleteSelection, joinForward, selectNodeForward);
    /**
    A basic keymap containing bindings not specific to any schema.
    Binds the following keys (when multiple commands are listed, they
    are chained with [`chainCommands`](https://prosemirror.net/docs/ref/#commands.chainCommands)):

    * **Enter** to `newlineInCode`, `createParagraphNear`, `liftEmptyBlock`, `splitBlock`
    * **Mod-Enter** to `exitCode`
    * **Backspace** and **Mod-Backspace** to `deleteSelection`, `joinBackward`, `selectNodeBackward`
    * **Delete** and **Mod-Delete** to `deleteSelection`, `joinForward`, `selectNodeForward`
    * **Mod-Delete** to `deleteSelection`, `joinForward`, `selectNodeForward`
    * **Mod-a** to `selectAll`
    */
    const pcBaseKeymap = {
        "Enter": chainCommands(newlineInCode, createParagraphNear, liftEmptyBlock, splitBlock),
        "Mod-Enter": exitCode,
        "Backspace": backspace,
        "Mod-Backspace": backspace,
        "Shift-Backspace": backspace,
        "Delete": del,
        "Mod-Delete": del,
        "Mod-a": selectAll
    };
    /**
    A copy of `pcBaseKeymap` that also binds **Ctrl-h** like Backspace,
    **Ctrl-d** like Delete, **Alt-Backspace** like Ctrl-Backspace, and
    **Ctrl-Alt-Backspace**, **Alt-Delete**, and **Alt-d** like
    Ctrl-Delete.
    */
    const macBaseKeymap = {
        "Ctrl-h": pcBaseKeymap["Backspace"],
        "Alt-Backspace": pcBaseKeymap["Mod-Backspace"],
        "Ctrl-d": pcBaseKeymap["Delete"],
        "Ctrl-Alt-Backspace": pcBaseKeymap["Mod-Delete"],
        "Alt-Delete": pcBaseKeymap["Mod-Delete"],
        "Alt-d": pcBaseKeymap["Mod-Delete"],
        "Ctrl-a": selectTextblockStart,
        "Ctrl-e": selectTextblockEnd
    };
    for (let key in pcBaseKeymap)
        macBaseKeymap[key] = pcBaseKeymap[key];
    const mac$3 = typeof navigator != "undefined" ? /Mac|iP(hone|[oa]d)/.test(navigator.platform)
        // @ts-ignore
        : typeof os != "undefined" && os.platform ? os.platform() == "darwin" : false;

    /**
    Returns a command function that wraps the selection in a list with
    the given type an attributes. If `dispatch` is null, only return a
    value to indicate whether this is possible, but don't actually
    perform the change.
    */
    function wrapInList(listType, attrs = null) {
        return function (state, dispatch) {
            let { $from, $to } = state.selection;
            let range = $from.blockRange($to), doJoin = false, outerRange = range;
            if (!range)
                return false;
            // This is at the top of an existing list item
            if (range.depth >= 2 && $from.node(range.depth - 1).type.compatibleContent(listType) && range.startIndex == 0) {
                // Don't do anything if this is the top of the list
                if ($from.index(range.depth - 1) == 0)
                    return false;
                let $insert = state.doc.resolve(range.start - 2);
                outerRange = new NodeRange($insert, $insert, range.depth);
                if (range.endIndex < range.parent.childCount)
                    range = new NodeRange($from, state.doc.resolve($to.end(range.depth)), range.depth);
                doJoin = true;
            }
            let wrap = findWrapping(outerRange, listType, attrs, range);
            if (!wrap)
                return false;
            if (dispatch)
                dispatch(doWrapInList(state.tr, range, wrap, doJoin, listType).scrollIntoView());
            return true;
        };
    }
    function doWrapInList(tr, range, wrappers, joinBefore, listType) {
        let content = Fragment.empty;
        for (let i = wrappers.length - 1; i >= 0; i--)
            content = Fragment.from(wrappers[i].type.create(wrappers[i].attrs, content));
        tr.step(new ReplaceAroundStep(range.start - (joinBefore ? 2 : 0), range.end, range.start, range.end, new Slice(content, 0, 0), wrappers.length, true));
        let found = 0;
        for (let i = 0; i < wrappers.length; i++)
            if (wrappers[i].type == listType)
                found = i + 1;
        let splitDepth = wrappers.length - found;
        let splitPos = range.start + wrappers.length - (joinBefore ? 2 : 0), parent = range.parent;
        for (let i = range.startIndex, e = range.endIndex, first = true; i < e; i++, first = false) {
            if (!first && canSplit(tr.doc, splitPos, splitDepth)) {
                tr.split(splitPos, splitDepth);
                splitPos += 2 * splitDepth;
            }
            splitPos += parent.child(i).nodeSize;
        }
        return tr;
    }
    /**
    Create a command to lift the list item around the selection up into
    a wrapping list.
    */
    function liftListItem(itemType) {
        return function (state, dispatch) {
            let { $from, $to } = state.selection;
            let range = $from.blockRange($to, node => node.childCount > 0 && node.firstChild.type == itemType);
            if (!range)
                return false;
            if (!dispatch)
                return true;
            if ($from.node(range.depth - 1).type == itemType) // Inside a parent list
                return liftToOuterList(state, dispatch, itemType, range);
            else // Outer list node
                return liftOutOfList(state, dispatch, range);
        };
    }
    function liftToOuterList(state, dispatch, itemType, range) {
        let tr = state.tr, end = range.end, endOfList = range.$to.end(range.depth);
        if (end < endOfList) {
            // There are siblings after the lifted items, which must become
            // children of the last item
            tr.step(new ReplaceAroundStep(end - 1, endOfList, end, endOfList, new Slice(Fragment.from(itemType.create(null, range.parent.copy())), 1, 0), 1, true));
            range = new NodeRange(tr.doc.resolve(range.$from.pos), tr.doc.resolve(endOfList), range.depth);
        }
        const target = liftTarget(range);
        if (target == null)
            return false;
        tr.lift(range, target);
        let after = tr.mapping.map(end, -1) - 1;
        if (canJoin(tr.doc, after))
            tr.join(after);
        dispatch(tr.scrollIntoView());
        return true;
    }
    function liftOutOfList(state, dispatch, range) {
        let tr = state.tr, list = range.parent;
        // Merge the list items into a single big item
        for (let pos = range.end, i = range.endIndex - 1, e = range.startIndex; i > e; i--) {
            pos -= list.child(i).nodeSize;
            tr.delete(pos - 1, pos + 1);
        }
        let $start = tr.doc.resolve(range.start), item = $start.nodeAfter;
        if (tr.mapping.map(range.end) != range.start + $start.nodeAfter.nodeSize)
            return false;
        let atStart = range.startIndex == 0, atEnd = range.endIndex == list.childCount;
        let parent = $start.node(-1), indexBefore = $start.index(-1);
        if (!parent.canReplace(indexBefore + (atStart ? 0 : 1), indexBefore + 1, item.content.append(atEnd ? Fragment.empty : Fragment.from(list))))
            return false;
        let start = $start.pos, end = start + item.nodeSize;
        // Strip off the surrounding list. At the sides where we're not at
        // the end of the list, the existing list is closed. At sides where
        // this is the end, it is overwritten to its end.
        tr.step(new ReplaceAroundStep(start - (atStart ? 1 : 0), end + (atEnd ? 1 : 0), start + 1, end - 1, new Slice((atStart ? Fragment.empty : Fragment.from(list.copy(Fragment.empty)))
            .append(atEnd ? Fragment.empty : Fragment.from(list.copy(Fragment.empty))), atStart ? 0 : 1, atEnd ? 0 : 1), atStart ? 0 : 1));
        dispatch(tr.scrollIntoView());
        return true;
    }
    /**
    Create a command to sink the list item around the selection down
    into an inner list.
    */
    function sinkListItem(itemType) {
        return function (state, dispatch) {
            let { $from, $to } = state.selection;
            let range = $from.blockRange($to, node => node.childCount > 0 && node.firstChild.type == itemType);
            if (!range)
                return false;
            let startIndex = range.startIndex;
            if (startIndex == 0)
                return false;
            let parent = range.parent, nodeBefore = parent.child(startIndex - 1);
            if (nodeBefore.type != itemType)
                return false;
            if (dispatch) {
                let nestedBefore = nodeBefore.lastChild && nodeBefore.lastChild.type == parent.type;
                let inner = Fragment.from(nestedBefore ? itemType.create() : null);
                let slice = new Slice(Fragment.from(itemType.create(null, Fragment.from(parent.type.create(null, inner)))), nestedBefore ? 3 : 1, 0);
                let before = range.start, after = range.end;
                dispatch(state.tr.step(new ReplaceAroundStep(before - (nestedBefore ? 3 : 1), after, before, after, slice, 1, true))
                    .scrollIntoView());
            }
            return true;
        };
    }

    function createChainableState(config) {
        const { state, transaction } = config;
        let { selection } = transaction;
        let { doc } = transaction;
        let { storedMarks } = transaction;
        return {
            ...state,
            apply: state.apply.bind(state),
            applyTransaction: state.applyTransaction.bind(state),
            filterTransaction: state.filterTransaction,
            plugins: state.plugins,
            schema: state.schema,
            reconfigure: state.reconfigure.bind(state),
            toJSON: state.toJSON.bind(state),
            get storedMarks() {
                return storedMarks;
            },
            get selection() {
                return selection;
            },
            get doc() {
                return doc;
            },
            get tr() {
                selection = transaction.selection;
                doc = transaction.doc;
                storedMarks = transaction.storedMarks;
                return transaction;
            },
        };
    }

    class CommandManager {
        constructor(props) {
            this.editor = props.editor;
            this.rawCommands = this.editor.extensionManager.commands;
            this.customState = props.state;
        }
        get hasCustomState() {
            return !!this.customState;
        }
        get state() {
            return this.customState || this.editor.state;
        }
        get commands() {
            const { rawCommands, editor, state } = this;
            const { view } = editor;
            const { tr } = state;
            const props = this.buildProps(tr);
            return Object.fromEntries(Object
                .entries(rawCommands)
                .map(([name, command]) => {
                const method = (...args) => {
                    const callback = command(...args)(props);
                    if (!tr.getMeta('preventDispatch') && !this.hasCustomState) {
                        view.dispatch(tr);
                    }
                    return callback;
                };
                return [name, method];
            }));
        }
        get chain() {
            return () => this.createChain();
        }
        get can() {
            return () => this.createCan();
        }
        createChain(startTr, shouldDispatch = true) {
            const { rawCommands, editor, state } = this;
            const { view } = editor;
            const callbacks = [];
            const hasStartTransaction = !!startTr;
            const tr = startTr || state.tr;
            const run = () => {
                if (!hasStartTransaction
                    && shouldDispatch
                    && !tr.getMeta('preventDispatch')
                    && !this.hasCustomState) {
                    view.dispatch(tr);
                }
                return callbacks.every(callback => callback === true);
            };
            const chain = {
                ...Object.fromEntries(Object.entries(rawCommands).map(([name, command]) => {
                    const chainedCommand = (...args) => {
                        const props = this.buildProps(tr, shouldDispatch);
                        const callback = command(...args)(props);
                        callbacks.push(callback);
                        return chain;
                    };
                    return [name, chainedCommand];
                })),
                run,
            };
            return chain;
        }
        createCan(startTr) {
            const { rawCommands, state } = this;
            const dispatch = false;
            const tr = startTr || state.tr;
            const props = this.buildProps(tr, dispatch);
            const formattedCommands = Object.fromEntries(Object
                .entries(rawCommands)
                .map(([name, command]) => {
                return [name, (...args) => command(...args)({ ...props, dispatch: undefined })];
            }));
            return {
                ...formattedCommands,
                chain: () => this.createChain(tr, dispatch),
            };
        }
        buildProps(tr, shouldDispatch = true) {
            const { rawCommands, editor, state } = this;
            const { view } = editor;
            if (state.storedMarks) {
                tr.setStoredMarks(state.storedMarks);
            }
            const props = {
                tr,
                editor,
                view,
                state: createChainableState({
                    state,
                    transaction: tr,
                }),
                dispatch: shouldDispatch
                    ? () => undefined
                    : undefined,
                chain: () => this.createChain(tr),
                can: () => this.createCan(tr),
                get commands() {
                    return Object.fromEntries(Object
                        .entries(rawCommands)
                        .map(([name, command]) => {
                        return [name, (...args) => command(...args)(props)];
                    }));
                },
            };
            return props;
        }
    }

    class EventEmitter {
        constructor() {
            this.callbacks = {};
        }
        on(event, fn) {
            if (!this.callbacks[event]) {
                this.callbacks[event] = [];
            }
            this.callbacks[event].push(fn);
            return this;
        }
        emit(event, ...args) {
            const callbacks = this.callbacks[event];
            if (callbacks) {
                callbacks.forEach(callback => callback.apply(this, args));
            }
            return this;
        }
        off(event, fn) {
            const callbacks = this.callbacks[event];
            if (callbacks) {
                if (fn) {
                    this.callbacks[event] = callbacks.filter(callback => callback !== fn);
                }
                else {
                    delete this.callbacks[event];
                }
            }
            return this;
        }
        removeAllListeners() {
            this.callbacks = {};
        }
    }

    function getExtensionField(extension, field, context) {
        if (extension.config[field] === undefined && extension.parent) {
            return getExtensionField(extension.parent, field, context);
        }
        if (typeof extension.config[field] === 'function') {
            const value = extension.config[field].bind({
                ...context,
                parent: extension.parent
                    ? getExtensionField(extension.parent, field, context)
                    : null,
            });
            return value;
        }
        return extension.config[field];
    }

    function splitExtensions(extensions) {
        const baseExtensions = extensions.filter(extension => extension.type === 'extension');
        const nodeExtensions = extensions.filter(extension => extension.type === 'node');
        const markExtensions = extensions.filter(extension => extension.type === 'mark');
        return {
            baseExtensions,
            nodeExtensions,
            markExtensions,
        };
    }

    /**
     * Get a list of all extension attributes defined in `addAttribute` and `addGlobalAttribute`.
     * @param extensions List of extensions
     */
    function getAttributesFromExtensions(extensions) {
        const extensionAttributes = [];
        const { nodeExtensions, markExtensions } = splitExtensions(extensions);
        const nodeAndMarkExtensions = [...nodeExtensions, ...markExtensions];
        const defaultAttribute = {
            default: null,
            rendered: true,
            renderHTML: null,
            parseHTML: null,
            keepOnSplit: true,
            isRequired: false,
        };
        extensions.forEach(extension => {
            const context = {
                name: extension.name,
                options: extension.options,
                storage: extension.storage,
            };
            const addGlobalAttributes = getExtensionField(extension, 'addGlobalAttributes', context);
            if (!addGlobalAttributes) {
                return;
            }
            // TODO: remove `as GlobalAttributes`
            const globalAttributes = addGlobalAttributes();
            globalAttributes.forEach(globalAttribute => {
                globalAttribute.types.forEach(type => {
                    Object
                        .entries(globalAttribute.attributes)
                        .forEach(([name, attribute]) => {
                        extensionAttributes.push({
                            type,
                            name,
                            attribute: {
                                ...defaultAttribute,
                                ...attribute,
                            },
                        });
                    });
                });
            });
        });
        nodeAndMarkExtensions.forEach(extension => {
            const context = {
                name: extension.name,
                options: extension.options,
                storage: extension.storage,
            };
            const addAttributes = getExtensionField(extension, 'addAttributes', context);
            if (!addAttributes) {
                return;
            }
            // TODO: remove `as Attributes`
            const attributes = addAttributes();
            Object
                .entries(attributes)
                .forEach(([name, attribute]) => {
                const mergedAttr = {
                    ...defaultAttribute,
                    ...attribute,
                };
                if ((attribute === null || attribute === void 0 ? void 0 : attribute.isRequired) && (attribute === null || attribute === void 0 ? void 0 : attribute.default) === undefined) {
                    delete mergedAttr.default;
                }
                extensionAttributes.push({
                    type: extension.name,
                    name,
                    attribute: mergedAttr,
                });
            });
        });
        return extensionAttributes;
    }

    function getNodeType(nameOrType, schema) {
        if (typeof nameOrType === 'string') {
            if (!schema.nodes[nameOrType]) {
                throw Error(`There is no node type named '${nameOrType}'. Maybe you forgot to add the extension?`);
            }
            return schema.nodes[nameOrType];
        }
        return nameOrType;
    }

    function mergeAttributes(...objects) {
        return objects
            .filter(item => !!item)
            .reduce((items, item) => {
            const mergedAttributes = { ...items };
            Object.entries(item).forEach(([key, value]) => {
                const exists = mergedAttributes[key];
                if (!exists) {
                    mergedAttributes[key] = value;
                    return;
                }
                if (key === 'class') {
                    mergedAttributes[key] = [mergedAttributes[key], value].join(' ');
                }
                else if (key === 'style') {
                    mergedAttributes[key] = [mergedAttributes[key], value].join('; ');
                }
                else {
                    mergedAttributes[key] = value;
                }
            });
            return mergedAttributes;
        }, {});
    }

    function getRenderedAttributes(nodeOrMark, extensionAttributes) {
        return extensionAttributes
            .filter(item => item.attribute.rendered)
            .map(item => {
            if (!item.attribute.renderHTML) {
                return {
                    [item.name]: nodeOrMark.attrs[item.name],
                };
            }
            return item.attribute.renderHTML(nodeOrMark.attrs) || {};
        })
            .reduce((attributes, attribute) => mergeAttributes(attributes, attribute), {});
    }

    function isFunction$1(value) {
        return typeof value === 'function';
    }

    /**
     * Optionally calls `value` as a function.
     * Otherwise it is returned directly.
     * @param value Function or any value.
     * @param context Optional context to bind to function.
     * @param props Optional props to pass to function.
     */
    function callOrReturn(value, context = undefined, ...props) {
        if (isFunction$1(value)) {
            if (context) {
                return value.bind(context)(...props);
            }
            return value(...props);
        }
        return value;
    }

    function isEmptyObject(value = {}) {
        return Object.keys(value).length === 0 && value.constructor === Object;
    }

    function fromString(value) {
        if (typeof value !== 'string') {
            return value;
        }
        if (value.match(/^[+-]?(?:\d*\.)?\d+$/)) {
            return Number(value);
        }
        if (value === 'true') {
            return true;
        }
        if (value === 'false') {
            return false;
        }
        return value;
    }

    /**
     * This function merges extension attributes into parserule attributes (`attrs` or `getAttrs`).
     * Cancels when `getAttrs` returned `false`.
     * @param parseRule ProseMirror ParseRule
     * @param extensionAttributes List of attributes to inject
     */
    function injectExtensionAttributesToParseRule(parseRule, extensionAttributes) {
        if (parseRule.style) {
            return parseRule;
        }
        return {
            ...parseRule,
            getAttrs: node => {
                const oldAttributes = parseRule.getAttrs
                    ? parseRule.getAttrs(node)
                    : parseRule.attrs;
                if (oldAttributes === false) {
                    return false;
                }
                const newAttributes = extensionAttributes.reduce((items, item) => {
                    const value = item.attribute.parseHTML
                        ? item.attribute.parseHTML(node)
                        : fromString(node.getAttribute(item.name));
                    if (value === null || value === undefined) {
                        return items;
                    }
                    return {
                        ...items,
                        [item.name]: value,
                    };
                }, {});
                return { ...oldAttributes, ...newAttributes };
            },
        };
    }

    function cleanUpSchemaItem(data) {
        return Object.fromEntries(Object.entries(data).filter(([key, value]) => {
            if (key === 'attrs' && isEmptyObject(value)) {
                return false;
            }
            return value !== null && value !== undefined;
        }));
    }
    function getSchemaByResolvedExtensions(extensions) {
        var _a;
        const allAttributes = getAttributesFromExtensions(extensions);
        const { nodeExtensions, markExtensions } = splitExtensions(extensions);
        const topNode = (_a = nodeExtensions.find(extension => getExtensionField(extension, 'topNode'))) === null || _a === void 0 ? void 0 : _a.name;
        const nodes = Object.fromEntries(nodeExtensions.map(extension => {
            const extensionAttributes = allAttributes.filter(attribute => attribute.type === extension.name);
            const context = {
                name: extension.name,
                options: extension.options,
                storage: extension.storage,
            };
            const extraNodeFields = extensions.reduce((fields, e) => {
                const extendNodeSchema = getExtensionField(e, 'extendNodeSchema', context);
                return {
                    ...fields,
                    ...(extendNodeSchema ? extendNodeSchema(extension) : {}),
                };
            }, {});
            const schema = cleanUpSchemaItem({
                ...extraNodeFields,
                content: callOrReturn(getExtensionField(extension, 'content', context)),
                marks: callOrReturn(getExtensionField(extension, 'marks', context)),
                group: callOrReturn(getExtensionField(extension, 'group', context)),
                inline: callOrReturn(getExtensionField(extension, 'inline', context)),
                atom: callOrReturn(getExtensionField(extension, 'atom', context)),
                selectable: callOrReturn(getExtensionField(extension, 'selectable', context)),
                draggable: callOrReturn(getExtensionField(extension, 'draggable', context)),
                code: callOrReturn(getExtensionField(extension, 'code', context)),
                defining: callOrReturn(getExtensionField(extension, 'defining', context)),
                isolating: callOrReturn(getExtensionField(extension, 'isolating', context)),
                attrs: Object.fromEntries(extensionAttributes.map(extensionAttribute => {
                    var _a;
                    return [extensionAttribute.name, { default: (_a = extensionAttribute === null || extensionAttribute === void 0 ? void 0 : extensionAttribute.attribute) === null || _a === void 0 ? void 0 : _a.default }];
                })),
            });
            const parseHTML = callOrReturn(getExtensionField(extension, 'parseHTML', context));
            if (parseHTML) {
                schema.parseDOM = parseHTML
                    .map(parseRule => injectExtensionAttributesToParseRule(parseRule, extensionAttributes));
            }
            const renderHTML = getExtensionField(extension, 'renderHTML', context);
            if (renderHTML) {
                schema.toDOM = node => renderHTML({
                    node,
                    HTMLAttributes: getRenderedAttributes(node, extensionAttributes),
                });
            }
            const renderText = getExtensionField(extension, 'renderText', context);
            if (renderText) {
                schema.toText = renderText;
            }
            return [extension.name, schema];
        }));
        const marks = Object.fromEntries(markExtensions.map(extension => {
            const extensionAttributes = allAttributes.filter(attribute => attribute.type === extension.name);
            const context = {
                name: extension.name,
                options: extension.options,
                storage: extension.storage,
            };
            const extraMarkFields = extensions.reduce((fields, e) => {
                const extendMarkSchema = getExtensionField(e, 'extendMarkSchema', context);
                return {
                    ...fields,
                    ...(extendMarkSchema ? extendMarkSchema(extension) : {}),
                };
            }, {});
            const schema = cleanUpSchemaItem({
                ...extraMarkFields,
                inclusive: callOrReturn(getExtensionField(extension, 'inclusive', context)),
                excludes: callOrReturn(getExtensionField(extension, 'excludes', context)),
                group: callOrReturn(getExtensionField(extension, 'group', context)),
                spanning: callOrReturn(getExtensionField(extension, 'spanning', context)),
                code: callOrReturn(getExtensionField(extension, 'code', context)),
                attrs: Object.fromEntries(extensionAttributes.map(extensionAttribute => {
                    var _a;
                    return [extensionAttribute.name, { default: (_a = extensionAttribute === null || extensionAttribute === void 0 ? void 0 : extensionAttribute.attribute) === null || _a === void 0 ? void 0 : _a.default }];
                })),
            });
            const parseHTML = callOrReturn(getExtensionField(extension, 'parseHTML', context));
            if (parseHTML) {
                schema.parseDOM = parseHTML
                    .map(parseRule => injectExtensionAttributesToParseRule(parseRule, extensionAttributes));
            }
            const renderHTML = getExtensionField(extension, 'renderHTML', context);
            if (renderHTML) {
                schema.toDOM = mark => renderHTML({
                    mark,
                    HTMLAttributes: getRenderedAttributes(mark, extensionAttributes),
                });
            }
            return [extension.name, schema];
        }));
        return new Schema({
            topNode,
            nodes,
            marks,
        });
    }

    function getSchemaTypeByName(name, schema) {
        return schema.nodes[name] || schema.marks[name] || null;
    }

    function isExtensionRulesEnabled(extension, enabled) {
        if (Array.isArray(enabled)) {
            return enabled.some(enabledExtension => {
                const name = typeof enabledExtension === 'string'
                    ? enabledExtension
                    : enabledExtension.name;
                return name === extension.name;
            });
        }
        return enabled;
    }

    const getTextContentFromNodes = ($from, maxMatch = 500) => {
        let textBefore = '';
        const sliceEndPos = $from.parentOffset;
        $from.parent.nodesBetween(Math.max(0, sliceEndPos - maxMatch), sliceEndPos, (node, pos, parent, index) => {
            var _a, _b;
            const chunk = ((_b = (_a = node.type.spec).toText) === null || _b === void 0 ? void 0 : _b.call(_a, {
                node, pos, parent, index,
            })) || node.textContent || '%leaf%';
            textBefore += chunk.slice(0, Math.max(0, sliceEndPos - pos));
        });
        return textBefore;
    };

    function isRegExp(value) {
        return Object.prototype.toString.call(value) === '[object RegExp]';
    }

    class InputRule {
        constructor(config) {
            this.find = config.find;
            this.handler = config.handler;
        }
    }
    const inputRuleMatcherHandler = (text, find) => {
        if (isRegExp(find)) {
            return find.exec(text);
        }
        const inputRuleMatch = find(text);
        if (!inputRuleMatch) {
            return null;
        }
        const result = [];
        result.push(inputRuleMatch.text);
        result.index = inputRuleMatch.index;
        result.input = text;
        result.data = inputRuleMatch.data;
        if (inputRuleMatch.replaceWith) {
            if (!inputRuleMatch.text.includes(inputRuleMatch.replaceWith)) {
                console.warn('[tiptap warn]: "inputRuleMatch.replaceWith" must be part of "inputRuleMatch.text".');
            }
            result.push(inputRuleMatch.replaceWith);
        }
        return result;
    };
    function run$1(config) {
        var _a;
        const { editor, from, to, text, rules, plugin, } = config;
        const { view } = editor;
        if (view.composing) {
            return false;
        }
        const $from = view.state.doc.resolve(from);
        if (
        // check for code node
        $from.parent.type.spec.code
            // check for code mark
            || !!((_a = ($from.nodeBefore || $from.nodeAfter)) === null || _a === void 0 ? void 0 : _a.marks.find(mark => mark.type.spec.code))) {
            return false;
        }
        let matched = false;
        const textBefore = getTextContentFromNodes($from) + text;
        rules.forEach(rule => {
            if (matched) {
                return;
            }
            const match = inputRuleMatcherHandler(textBefore, rule.find);
            if (!match) {
                return;
            }
            const tr = view.state.tr;
            const state = createChainableState({
                state: view.state,
                transaction: tr,
            });
            const range = {
                from: from - (match[0].length - text.length),
                to,
            };
            const { commands, chain, can } = new CommandManager({
                editor,
                state,
            });
            const handler = rule.handler({
                state,
                range,
                match,
                commands,
                chain,
                can,
            });
            // stop if there are no changes
            if (handler === null || !tr.steps.length) {
                return;
            }
            // store transform as meta data
            // so we can undo input rules within the `undoInputRules` command
            tr.setMeta(plugin, {
                transform: tr,
                from,
                to,
                text,
            });
            view.dispatch(tr);
            matched = true;
        });
        return matched;
    }
    /**
     * Create an input rules plugin. When enabled, it will cause text
     * input that matches any of the given rules to trigger the rule’s
     * action.
     */
    function inputRulesPlugin(props) {
        const { editor, rules } = props;
        const plugin = new Plugin({
            state: {
                init() {
                    return null;
                },
                apply(tr, prev) {
                    const stored = tr.getMeta(plugin);
                    if (stored) {
                        return stored;
                    }
                    return tr.selectionSet || tr.docChanged
                        ? null
                        : prev;
                },
            },
            props: {
                handleTextInput(view, from, to, text) {
                    return run$1({
                        editor,
                        from,
                        to,
                        text,
                        rules,
                        plugin,
                    });
                },
                handleDOMEvents: {
                    compositionend: view => {
                        setTimeout(() => {
                            const { $cursor } = view.state.selection;
                            if ($cursor) {
                                run$1({
                                    editor,
                                    from: $cursor.pos,
                                    to: $cursor.pos,
                                    text: '',
                                    rules,
                                    plugin,
                                });
                            }
                        });
                        return false;
                    },
                },
                // add support for input rules to trigger on enter
                // this is useful for example for code blocks
                handleKeyDown(view, event) {
                    if (event.key !== 'Enter') {
                        return false;
                    }
                    const { $cursor } = view.state.selection;
                    if ($cursor) {
                        return run$1({
                            editor,
                            from: $cursor.pos,
                            to: $cursor.pos,
                            text: '\n',
                            rules,
                            plugin,
                        });
                    }
                    return false;
                },
            },
            // @ts-ignore
            isInputRules: true,
        });
        return plugin;
    }

    function isNumber$1(value) {
        return typeof value === 'number';
    }

    class PasteRule {
        constructor(config) {
            this.find = config.find;
            this.handler = config.handler;
        }
    }
    const pasteRuleMatcherHandler = (text, find) => {
        if (isRegExp(find)) {
            return [...text.matchAll(find)];
        }
        const matches = find(text);
        if (!matches) {
            return [];
        }
        return matches.map(pasteRuleMatch => {
            const result = [];
            result.push(pasteRuleMatch.text);
            result.index = pasteRuleMatch.index;
            result.input = text;
            result.data = pasteRuleMatch.data;
            if (pasteRuleMatch.replaceWith) {
                if (!pasteRuleMatch.text.includes(pasteRuleMatch.replaceWith)) {
                    console.warn('[tiptap warn]: "pasteRuleMatch.replaceWith" must be part of "pasteRuleMatch.text".');
                }
                result.push(pasteRuleMatch.replaceWith);
            }
            return result;
        });
    };
    function run$2(config) {
        const { editor, state, from, to, rule, } = config;
        const { commands, chain, can } = new CommandManager({
            editor,
            state,
        });
        const handlers = [];
        state.doc.nodesBetween(from, to, (node, pos) => {
            if (!node.isTextblock || node.type.spec.code) {
                return;
            }
            const resolvedFrom = Math.max(from, pos);
            const resolvedTo = Math.min(to, pos + node.content.size);
            const textToMatch = node.textBetween(resolvedFrom - pos, resolvedTo - pos, undefined, '\ufffc');
            const matches = pasteRuleMatcherHandler(textToMatch, rule.find);
            matches.forEach(match => {
                if (match.index === undefined) {
                    return;
                }
                const start = resolvedFrom + match.index + 1;
                const end = start + match[0].length;
                const range = {
                    from: state.tr.mapping.map(start),
                    to: state.tr.mapping.map(end),
                };
                const handler = rule.handler({
                    state,
                    range,
                    match,
                    commands,
                    chain,
                    can,
                });
                handlers.push(handler);
            });
        });
        const success = handlers.every(handler => handler !== null);
        return success;
    }
    /**
     * Create an paste rules plugin. When enabled, it will cause pasted
     * text that matches any of the given rules to trigger the rule’s
     * action.
     */
    function pasteRulesPlugin(props) {
        const { editor, rules } = props;
        let dragSourceElement = null;
        let isPastedFromProseMirror = false;
        let isDroppedFromProseMirror = false;
        const plugins = rules.map(rule => {
            return new Plugin({
                // we register a global drag handler to track the current drag source element
                view(view) {
                    const handleDragstart = (event) => {
                        var _a;
                        dragSourceElement = ((_a = view.dom.parentElement) === null || _a === void 0 ? void 0 : _a.contains(event.target))
                            ? view.dom.parentElement
                            : null;
                    };
                    window.addEventListener('dragstart', handleDragstart);
                    return {
                        destroy() {
                            window.removeEventListener('dragstart', handleDragstart);
                        },
                    };
                },
                props: {
                    handleDOMEvents: {
                        drop: view => {
                            isDroppedFromProseMirror = dragSourceElement === view.dom.parentElement;
                            return false;
                        },
                        paste: (view, event) => {
                            var _a;
                            const html = (_a = event.clipboardData) === null || _a === void 0 ? void 0 : _a.getData('text/html');
                            isPastedFromProseMirror = !!(html === null || html === void 0 ? void 0 : html.includes('data-pm-slice'));
                            return false;
                        },
                    },
                },
                appendTransaction: (transactions, oldState, state) => {
                    const transaction = transactions[0];
                    const isPaste = transaction.getMeta('uiEvent') === 'paste' && !isPastedFromProseMirror;
                    const isDrop = transaction.getMeta('uiEvent') === 'drop' && !isDroppedFromProseMirror;
                    if (!isPaste && !isDrop) {
                        return;
                    }
                    // stop if there is no changed range
                    const from = oldState.doc.content.findDiffStart(state.doc.content);
                    const to = oldState.doc.content.findDiffEnd(state.doc.content);
                    if (!isNumber$1(from) || !to || from === to.b) {
                        return;
                    }
                    // build a chainable state
                    // so we can use a single transaction for all paste rules
                    const tr = state.tr;
                    const chainableState = createChainableState({
                        state,
                        transaction: tr,
                    });
                    const handler = run$2({
                        editor,
                        state: chainableState,
                        from: Math.max(from - 1, 0),
                        to: to.b - 1,
                        rule,
                    });
                    // stop if there are no changes
                    if (!handler || !tr.steps.length) {
                        return;
                    }
                    return tr;
                },
            });
        });
        return plugins;
    }

    function findDuplicates(items) {
        const filtered = items.filter((el, index) => items.indexOf(el) !== index);
        return [...new Set(filtered)];
    }

    class ExtensionManager {
        constructor(extensions, editor) {
            this.splittableMarks = [];
            this.editor = editor;
            this.extensions = ExtensionManager.resolve(extensions);
            this.schema = getSchemaByResolvedExtensions(this.extensions);
            this.extensions.forEach(extension => {
                var _a;
                // store extension storage in editor
                this.editor.extensionStorage[extension.name] = extension.storage;
                const context = {
                    name: extension.name,
                    options: extension.options,
                    storage: extension.storage,
                    editor: this.editor,
                    type: getSchemaTypeByName(extension.name, this.schema),
                };
                if (extension.type === 'mark') {
                    const keepOnSplit = (_a = callOrReturn(getExtensionField(extension, 'keepOnSplit', context))) !== null && _a !== void 0 ? _a : true;
                    if (keepOnSplit) {
                        this.splittableMarks.push(extension.name);
                    }
                }
                const onBeforeCreate = getExtensionField(extension, 'onBeforeCreate', context);
                if (onBeforeCreate) {
                    this.editor.on('beforeCreate', onBeforeCreate);
                }
                const onCreate = getExtensionField(extension, 'onCreate', context);
                if (onCreate) {
                    this.editor.on('create', onCreate);
                }
                const onUpdate = getExtensionField(extension, 'onUpdate', context);
                if (onUpdate) {
                    this.editor.on('update', onUpdate);
                }
                const onSelectionUpdate = getExtensionField(extension, 'onSelectionUpdate', context);
                if (onSelectionUpdate) {
                    this.editor.on('selectionUpdate', onSelectionUpdate);
                }
                const onTransaction = getExtensionField(extension, 'onTransaction', context);
                if (onTransaction) {
                    this.editor.on('transaction', onTransaction);
                }
                const onFocus = getExtensionField(extension, 'onFocus', context);
                if (onFocus) {
                    this.editor.on('focus', onFocus);
                }
                const onBlur = getExtensionField(extension, 'onBlur', context);
                if (onBlur) {
                    this.editor.on('blur', onBlur);
                }
                const onDestroy = getExtensionField(extension, 'onDestroy', context);
                if (onDestroy) {
                    this.editor.on('destroy', onDestroy);
                }
            });
        }
        static resolve(extensions) {
            const resolvedExtensions = ExtensionManager.sort(ExtensionManager.flatten(extensions));
            const duplicatedNames = findDuplicates(resolvedExtensions.map(extension => extension.name));
            if (duplicatedNames.length) {
                console.warn(`[tiptap warn]: Duplicate extension names found: [${duplicatedNames.map(item => `'${item}'`).join(', ')}]. This can lead to issues.`);
            }
            return resolvedExtensions;
        }
        static flatten(extensions) {
            return extensions
                .map(extension => {
                const context = {
                    name: extension.name,
                    options: extension.options,
                    storage: extension.storage,
                };
                const addExtensions = getExtensionField(extension, 'addExtensions', context);
                if (addExtensions) {
                    return [
                        extension,
                        ...this.flatten(addExtensions()),
                    ];
                }
                return extension;
            })
                // `Infinity` will break TypeScript so we set a number that is probably high enough
                .flat(10);
        }
        static sort(extensions) {
            const defaultPriority = 100;
            return extensions.sort((a, b) => {
                const priorityA = getExtensionField(a, 'priority') || defaultPriority;
                const priorityB = getExtensionField(b, 'priority') || defaultPriority;
                if (priorityA > priorityB) {
                    return -1;
                }
                if (priorityA < priorityB) {
                    return 1;
                }
                return 0;
            });
        }
        get commands() {
            return this.extensions.reduce((commands, extension) => {
                const context = {
                    name: extension.name,
                    options: extension.options,
                    storage: extension.storage,
                    editor: this.editor,
                    type: getSchemaTypeByName(extension.name, this.schema),
                };
                const addCommands = getExtensionField(extension, 'addCommands', context);
                if (!addCommands) {
                    return commands;
                }
                return {
                    ...commands,
                    ...addCommands(),
                };
            }, {});
        }
        get plugins() {
            const { editor } = this;
            // With ProseMirror, first plugins within an array are executed first.
            // In tiptap, we provide the ability to override plugins,
            // so it feels more natural to run plugins at the end of an array first.
            // That’s why we have to reverse the `extensions` array and sort again
            // based on the `priority` option.
            const extensions = ExtensionManager.sort([...this.extensions].reverse());
            const inputRules = [];
            const pasteRules = [];
            const allPlugins = extensions
                .map(extension => {
                const context = {
                    name: extension.name,
                    options: extension.options,
                    storage: extension.storage,
                    editor,
                    type: getSchemaTypeByName(extension.name, this.schema),
                };
                const plugins = [];
                const addKeyboardShortcuts = getExtensionField(extension, 'addKeyboardShortcuts', context);
                let defaultBindings = {};
                // bind exit handling
                if (extension.type === 'mark' && extension.config.exitable) {
                    defaultBindings.ArrowRight = () => Mark$1.handleExit({ editor, mark: extension });
                }
                if (addKeyboardShortcuts) {
                    const bindings = Object.fromEntries(Object
                        .entries(addKeyboardShortcuts())
                        .map(([shortcut, method]) => {
                        return [shortcut, () => method({ editor })];
                    }));
                    defaultBindings = { ...defaultBindings, ...bindings };
                }
                const keyMapPlugin = keymap(defaultBindings);
                plugins.push(keyMapPlugin);
                const addInputRules = getExtensionField(extension, 'addInputRules', context);
                if (isExtensionRulesEnabled(extension, editor.options.enableInputRules) && addInputRules) {
                    inputRules.push(...addInputRules());
                }
                const addPasteRules = getExtensionField(extension, 'addPasteRules', context);
                if (isExtensionRulesEnabled(extension, editor.options.enablePasteRules) && addPasteRules) {
                    pasteRules.push(...addPasteRules());
                }
                const addProseMirrorPlugins = getExtensionField(extension, 'addProseMirrorPlugins', context);
                if (addProseMirrorPlugins) {
                    const proseMirrorPlugins = addProseMirrorPlugins();
                    plugins.push(...proseMirrorPlugins);
                }
                return plugins;
            })
                .flat();
            return [
                inputRulesPlugin({
                    editor,
                    rules: inputRules,
                }),
                ...pasteRulesPlugin({
                    editor,
                    rules: pasteRules,
                }),
                ...allPlugins,
            ];
        }
        get attributes() {
            return getAttributesFromExtensions(this.extensions);
        }
        get nodeViews() {
            const { editor } = this;
            const { nodeExtensions } = splitExtensions(this.extensions);
            return Object.fromEntries(nodeExtensions
                .filter(extension => !!getExtensionField(extension, 'addNodeView'))
                .map(extension => {
                const extensionAttributes = this.attributes.filter(attribute => attribute.type === extension.name);
                const context = {
                    name: extension.name,
                    options: extension.options,
                    storage: extension.storage,
                    editor,
                    type: getNodeType(extension.name, this.schema),
                };
                const addNodeView = getExtensionField(extension, 'addNodeView', context);
                if (!addNodeView) {
                    return [];
                }
                const nodeview = (node, view, getPos, decorations) => {
                    const HTMLAttributes = getRenderedAttributes(node, extensionAttributes);
                    return addNodeView()({
                        editor,
                        node,
                        getPos,
                        decorations,
                        HTMLAttributes,
                        extension,
                    });
                };
                return [extension.name, nodeview];
            }));
        }
    }

    // see: https://github.com/mesqueeb/is-what/blob/88d6e4ca92fb2baab6003c54e02eedf4e729e5ab/src/index.ts
    function getType(value) {
        return Object.prototype.toString.call(value).slice(8, -1);
    }
    function isPlainObject$1(value) {
        if (getType(value) !== 'Object') {
            return false;
        }
        return value.constructor === Object && Object.getPrototypeOf(value) === Object.prototype;
    }

    function mergeDeep(target, source) {
        const output = { ...target };
        if (isPlainObject$1(target) && isPlainObject$1(source)) {
            Object.keys(source).forEach(key => {
                if (isPlainObject$1(source[key])) {
                    if (!(key in target)) {
                        Object.assign(output, { [key]: source[key] });
                    }
                    else {
                        output[key] = mergeDeep(target[key], source[key]);
                    }
                }
                else {
                    Object.assign(output, { [key]: source[key] });
                }
            });
        }
        return output;
    }

    class Extension {
        constructor(config = {}) {
            this.type = 'extension';
            this.name = 'extension';
            this.parent = null;
            this.child = null;
            this.config = {
                name: this.name,
                defaultOptions: {},
            };
            this.config = {
                ...this.config,
                ...config,
            };
            this.name = this.config.name;
            if (config.defaultOptions) {
                console.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${this.name}".`);
            }
            // TODO: remove `addOptions` fallback
            this.options = this.config.defaultOptions;
            if (this.config.addOptions) {
                this.options = callOrReturn(getExtensionField(this, 'addOptions', {
                    name: this.name,
                }));
            }
            this.storage = callOrReturn(getExtensionField(this, 'addStorage', {
                name: this.name,
                options: this.options,
            })) || {};
        }
        static create(config = {}) {
            return new Extension(config);
        }
        configure(options = {}) {
            // return a new instance so we can use the same extension
            // with different calls of `configure`
            const extension = this.extend();
            extension.options = mergeDeep(this.options, options);
            extension.storage = callOrReturn(getExtensionField(extension, 'addStorage', {
                name: extension.name,
                options: extension.options,
            }));
            return extension;
        }
        extend(extendedConfig = {}) {
            const extension = new Extension(extendedConfig);
            extension.parent = this;
            this.child = extension;
            extension.name = extendedConfig.name
                ? extendedConfig.name
                : extension.parent.name;
            if (extendedConfig.defaultOptions) {
                console.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${extension.name}".`);
            }
            extension.options = callOrReturn(getExtensionField(extension, 'addOptions', {
                name: extension.name,
            }));
            extension.storage = callOrReturn(getExtensionField(extension, 'addStorage', {
                name: extension.name,
                options: extension.options,
            }));
            return extension;
        }
    }

    function getTextBetween(startNode, range, options) {
        const { from, to } = range;
        const { blockSeparator = '\n\n', textSerializers = {}, } = options || {};
        let text = '';
        let separated = true;
        startNode.nodesBetween(from, to, (node, pos, parent, index) => {
            var _a;
            const textSerializer = textSerializers === null || textSerializers === void 0 ? void 0 : textSerializers[node.type.name];
            if (textSerializer) {
                if (node.isBlock && !separated) {
                    text += blockSeparator;
                    separated = true;
                }
                if (parent) {
                    text += textSerializer({
                        node,
                        pos,
                        parent,
                        index,
                        range,
                    });
                }
            }
            else if (node.isText) {
                text += (_a = node === null || node === void 0 ? void 0 : node.text) === null || _a === void 0 ? void 0 : _a.slice(Math.max(from, pos) - pos, to - pos); // eslint-disable-line
                separated = false;
            }
            else if (node.isBlock && !separated) {
                text += blockSeparator;
                separated = true;
            }
        });
        return text;
    }

    function getTextSerializersFromSchema(schema) {
        return Object.fromEntries(Object
            .entries(schema.nodes)
            .filter(([, node]) => node.spec.toText)
            .map(([name, node]) => [name, node.spec.toText]));
    }

    const ClipboardTextSerializer = Extension.create({
        name: 'clipboardTextSerializer',
        addProseMirrorPlugins() {
            return [
                new Plugin({
                    key: new PluginKey('clipboardTextSerializer'),
                    props: {
                        clipboardTextSerializer: () => {
                            const { editor } = this;
                            const { state, schema } = editor;
                            const { doc, selection } = state;
                            const { ranges } = selection;
                            const from = Math.min(...ranges.map(range => range.$from.pos));
                            const to = Math.max(...ranges.map(range => range.$to.pos));
                            const textSerializers = getTextSerializersFromSchema(schema);
                            const range = { from, to };
                            return getTextBetween(doc, range, {
                                textSerializers,
                            });
                        },
                    },
                }),
            ];
        },
    });

    const blur = () => ({ editor, view }) => {
        requestAnimationFrame(() => {
            var _a;
            if (!editor.isDestroyed) {
                view.dom.blur();
                // Browsers should remove the caret on blur but safari does not.
                // See: https://github.com/ueberdosis/tiptap/issues/2405
                (_a = window === null || window === void 0 ? void 0 : window.getSelection()) === null || _a === void 0 ? void 0 : _a.removeAllRanges();
            }
        });
        return true;
    };

    const clearContent = (emitUpdate = false) => ({ commands }) => {
        return commands.setContent('', emitUpdate);
    };

    const clearNodes = () => ({ state, tr, dispatch }) => {
        const { selection } = tr;
        const { ranges } = selection;
        if (!dispatch) {
            return true;
        }
        ranges.forEach(({ $from, $to }) => {
            state.doc.nodesBetween($from.pos, $to.pos, (node, pos) => {
                if (node.type.isText) {
                    return;
                }
                const { doc, mapping } = tr;
                const $mappedFrom = doc.resolve(mapping.map(pos));
                const $mappedTo = doc.resolve(mapping.map(pos + node.nodeSize));
                const nodeRange = $mappedFrom.blockRange($mappedTo);
                if (!nodeRange) {
                    return;
                }
                const targetLiftDepth = liftTarget(nodeRange);
                if (node.type.isTextblock) {
                    const { defaultType } = $mappedFrom.parent.contentMatchAt($mappedFrom.index());
                    tr.setNodeMarkup(nodeRange.start, defaultType);
                }
                if (targetLiftDepth || targetLiftDepth === 0) {
                    tr.lift(nodeRange, targetLiftDepth);
                }
            });
        });
        return true;
    };

    const command = fn => props => {
        return fn(props);
    };

    const createParagraphNear$1 = () => ({ state, dispatch }) => {
        return createParagraphNear(state, dispatch);
    };

    const deleteNode = typeOrName => ({ tr, state, dispatch }) => {
        const type = getNodeType(typeOrName, state.schema);
        const $pos = tr.selection.$anchor;
        for (let depth = $pos.depth; depth > 0; depth -= 1) {
            const node = $pos.node(depth);
            if (node.type === type) {
                if (dispatch) {
                    const from = $pos.before(depth);
                    const to = $pos.after(depth);
                    tr.delete(from, to).scrollIntoView();
                }
                return true;
            }
        }
        return false;
    };

    const deleteRange$1 = range => ({ tr, dispatch }) => {
        const { from, to } = range;
        if (dispatch) {
            tr.delete(from, to);
        }
        return true;
    };

    const deleteSelection$1 = () => ({ state, dispatch }) => {
        return deleteSelection(state, dispatch);
    };

    const enter = () => ({ commands }) => {
        return commands.keyboardShortcut('Enter');
    };

    const exitCode$1 = () => ({ state, dispatch }) => {
        return exitCode(state, dispatch);
    };

    /**
     * Check if object1 includes object2
     * @param object1 Object
     * @param object2 Object
     */
    function objectIncludes(object1, object2, options = { strict: true }) {
        const keys = Object.keys(object2);
        if (!keys.length) {
            return true;
        }
        return keys.every(key => {
            if (options.strict) {
                return object2[key] === object1[key];
            }
            if (isRegExp(object2[key])) {
                return object2[key].test(object1[key]);
            }
            return object2[key] === object1[key];
        });
    }

    function findMarkInSet(marks, type, attributes = {}) {
        return marks.find(item => {
            return item.type === type && objectIncludes(item.attrs, attributes);
        });
    }
    function isMarkInSet(marks, type, attributes = {}) {
        return !!findMarkInSet(marks, type, attributes);
    }
    function getMarkRange($pos, type, attributes = {}) {
        if (!$pos || !type) {
            return;
        }
        let start = $pos.parent.childAfter($pos.parentOffset);
        if ($pos.parentOffset === start.offset && start.offset !== 0) {
            start = $pos.parent.childBefore($pos.parentOffset);
        }
        if (!start.node) {
            return;
        }
        const mark = findMarkInSet([...start.node.marks], type, attributes);
        if (!mark) {
            return;
        }
        let startIndex = start.index;
        let startPos = $pos.start() + start.offset;
        let endIndex = startIndex + 1;
        let endPos = startPos + start.node.nodeSize;
        findMarkInSet([...start.node.marks], type, attributes);
        while (startIndex > 0 && mark.isInSet($pos.parent.child(startIndex - 1).marks)) {
            startIndex -= 1;
            startPos -= $pos.parent.child(startIndex).nodeSize;
        }
        while (endIndex < $pos.parent.childCount
            && isMarkInSet([...$pos.parent.child(endIndex).marks], type, attributes)) {
            endPos += $pos.parent.child(endIndex).nodeSize;
            endIndex += 1;
        }
        return {
            from: startPos,
            to: endPos,
        };
    }

    function getMarkType(nameOrType, schema) {
        if (typeof nameOrType === 'string') {
            if (!schema.marks[nameOrType]) {
                throw Error(`There is no mark type named '${nameOrType}'. Maybe you forgot to add the extension?`);
            }
            return schema.marks[nameOrType];
        }
        return nameOrType;
    }

    const extendMarkRange = (typeOrName, attributes = {}) => ({ tr, state, dispatch }) => {
        const type = getMarkType(typeOrName, state.schema);
        const { doc, selection } = tr;
        const { $from, from, to } = selection;
        if (dispatch) {
            const range = getMarkRange($from, type, attributes);
            if (range && range.from <= from && range.to >= to) {
                const newSelection = TextSelection.create(doc, range.from, range.to);
                tr.setSelection(newSelection);
            }
        }
        return true;
    };

    const first = commands => props => {
        const items = typeof commands === 'function'
            ? commands(props)
            : commands;
        for (let i = 0; i < items.length; i += 1) {
            if (items[i](props)) {
                return true;
            }
        }
        return false;
    };

    function isTextSelection(value) {
        return value instanceof TextSelection;
    }

    function minMax(value = 0, min = 0, max = 0) {
        return Math.min(Math.max(value, min), max);
    }

    function resolveFocusPosition(doc, position = null) {
        if (!position) {
            return null;
        }
        const selectionAtStart = Selection.atStart(doc);
        const selectionAtEnd = Selection.atEnd(doc);
        if (position === 'start' || position === true) {
            return selectionAtStart;
        }
        if (position === 'end') {
            return selectionAtEnd;
        }
        const minPos = selectionAtStart.from;
        const maxPos = selectionAtEnd.to;
        if (position === 'all') {
            return TextSelection.create(doc, minMax(0, minPos, maxPos), minMax(doc.content.size, minPos, maxPos));
        }
        return TextSelection.create(doc, minMax(position, minPos, maxPos), minMax(position, minPos, maxPos));
    }

    function isiOS() {
        return [
            'iPad Simulator',
            'iPhone Simulator',
            'iPod Simulator',
            'iPad',
            'iPhone',
            'iPod',
        ].includes(navigator.platform)
            // iPad on iOS 13 detection
            || (navigator.userAgent.includes('Mac') && 'ontouchend' in document);
    }

    const focus = (position = null, options = {}) => ({ editor, view, tr, dispatch, }) => {
        options = {
            scrollIntoView: true,
            ...options,
        };
        const delayedFocus = () => {
            // focus within `requestAnimationFrame` breaks focus on iOS
            // so we have to call this
            if (isiOS()) {
                view.dom.focus();
            }
            // For React we have to focus asynchronously. Otherwise wild things happen.
            // see: https://github.com/ueberdosis/tiptap/issues/1520
            requestAnimationFrame(() => {
                if (!editor.isDestroyed) {
                    view.focus();
                    if (options === null || options === void 0 ? void 0 : options.scrollIntoView) {
                        editor.commands.scrollIntoView();
                    }
                }
            });
        };
        if ((view.hasFocus() && position === null) || position === false) {
            return true;
        }
        // we don’t try to resolve a NodeSelection or CellSelection
        if (dispatch && position === null && !isTextSelection(editor.state.selection)) {
            delayedFocus();
            return true;
        }
        // pass through tr.doc instead of editor.state.doc
        // since transactions could change the editors state before this command has been run
        const selection = resolveFocusPosition(tr.doc, position) || editor.state.selection;
        const isSameSelection = editor.state.selection.eq(selection);
        if (dispatch) {
            if (!isSameSelection) {
                tr.setSelection(selection);
            }
            // `tr.setSelection` resets the stored marks
            // so we’ll restore them if the selection is the same as before
            if (isSameSelection && tr.storedMarks) {
                tr.setStoredMarks(tr.storedMarks);
            }
            delayedFocus();
        }
        return true;
    };

    const forEach$1 = (items, fn) => props => {
        return items.every((item, index) => fn(item, { ...props, index }));
    };

    const insertContent = (value, options) => ({ tr, commands }) => {
        return commands.insertContentAt({ from: tr.selection.from, to: tr.selection.to }, value, options);
    };

    function elementFromString(value) {
        // add a wrapper to preserve leading and trailing whitespace
        const wrappedValue = `<body>${value}</body>`;
        return new window.DOMParser().parseFromString(wrappedValue, 'text/html').body;
    }

    function createNodeFromContent(content, schema, options) {
        options = {
            slice: true,
            parseOptions: {},
            ...options,
        };
        if (typeof content === 'object' && content !== null) {
            try {
                if (Array.isArray(content)) {
                    return Fragment.fromArray(content.map(item => schema.nodeFromJSON(item)));
                }
                return schema.nodeFromJSON(content);
            }
            catch (error) {
                console.warn('[tiptap warn]: Invalid content.', 'Passed value:', content, 'Error:', error);
                return createNodeFromContent('', schema, options);
            }
        }
        if (typeof content === 'string') {
            const parser = DOMParser.fromSchema(schema);
            return options.slice
                ? parser.parseSlice(elementFromString(content), options.parseOptions).content
                : parser.parse(elementFromString(content), options.parseOptions);
        }
        return createNodeFromContent('', schema, options);
    }

    // source: https://github.com/ProseMirror/prosemirror-state/blob/master/src/selection.js#L466
    function selectionToInsertionEnd$1(tr, startLen, bias) {
        const last = tr.steps.length - 1;
        if (last < startLen) {
            return;
        }
        const step = tr.steps[last];
        if (!(step instanceof ReplaceStep || step instanceof ReplaceAroundStep)) {
            return;
        }
        const map = tr.mapping.maps[last];
        let end = 0;
        map.forEach((_from, _to, _newFrom, newTo) => {
            if (end === 0) {
                end = newTo;
            }
        });
        tr.setSelection(Selection.near(tr.doc.resolve(end), bias));
    }

    const isFragment = (nodeOrFragment) => {
        return nodeOrFragment.toString().startsWith('<');
    };
    const insertContentAt = (position, value, options) => ({ tr, dispatch, editor }) => {
        if (dispatch) {
            options = {
                parseOptions: {},
                updateSelection: true,
                ...options,
            };
            const content = createNodeFromContent(value, editor.schema, {
                parseOptions: {
                    preserveWhitespace: 'full',
                    ...options.parseOptions,
                },
            });
            // don’t dispatch an empty fragment because this can lead to strange errors
            if (content.toString() === '<>') {
                return true;
            }
            let { from, to } = typeof position === 'number'
                ? { from: position, to: position }
                : position;
            let isOnlyTextContent = true;
            let isOnlyBlockContent = true;
            const nodes = isFragment(content)
                ? content
                : [content];
            nodes.forEach(node => {
                // check if added node is valid
                node.check();
                isOnlyTextContent = isOnlyTextContent
                    ? node.isText && node.marks.length === 0
                    : false;
                isOnlyBlockContent = isOnlyBlockContent
                    ? node.isBlock
                    : false;
            });
            // check if we can replace the wrapping node by
            // the newly inserted content
            // example:
            // replace an empty paragraph by an inserted image
            // instead of inserting the image below the paragraph
            if (from === to && isOnlyBlockContent) {
                const { parent } = tr.doc.resolve(from);
                const isEmptyTextBlock = parent.isTextblock
                    && !parent.type.spec.code
                    && !parent.childCount;
                if (isEmptyTextBlock) {
                    from -= 1;
                    to += 1;
                }
            }
            // if there is only plain text we have to use `insertText`
            // because this will keep the current marks
            if (isOnlyTextContent) {
                tr.insertText(value, from, to);
            }
            else {
                tr.replaceWith(from, to, content);
            }
            // set cursor at end of inserted content
            if (options.updateSelection) {
                selectionToInsertionEnd$1(tr, tr.steps.length - 1, -1);
            }
        }
        return true;
    };

    const joinBackward$1 = () => ({ state, dispatch }) => {
        return joinBackward(state, dispatch);
    };

    const joinForward$1 = () => ({ state, dispatch }) => {
        return joinForward(state, dispatch);
    };

    function isMacOS() {
        return typeof navigator !== 'undefined'
            ? /Mac/.test(navigator.platform)
            : false;
    }

    function normalizeKeyName$1(name) {
        const parts = name.split(/-(?!$)/);
        let result = parts[parts.length - 1];
        if (result === 'Space') {
            result = ' ';
        }
        let alt;
        let ctrl;
        let shift;
        let meta;
        for (let i = 0; i < parts.length - 1; i += 1) {
            const mod = parts[i];
            if (/^(cmd|meta|m)$/i.test(mod)) {
                meta = true;
            }
            else if (/^a(lt)?$/i.test(mod)) {
                alt = true;
            }
            else if (/^(c|ctrl|control)$/i.test(mod)) {
                ctrl = true;
            }
            else if (/^s(hift)?$/i.test(mod)) {
                shift = true;
            }
            else if (/^mod$/i.test(mod)) {
                if (isiOS() || isMacOS()) {
                    meta = true;
                }
                else {
                    ctrl = true;
                }
            }
            else {
                throw new Error(`Unrecognized modifier name: ${mod}`);
            }
        }
        if (alt) {
            result = `Alt-${result}`;
        }
        if (ctrl) {
            result = `Ctrl-${result}`;
        }
        if (meta) {
            result = `Meta-${result}`;
        }
        if (shift) {
            result = `Shift-${result}`;
        }
        return result;
    }
    const keyboardShortcut = name => ({ editor, view, tr, dispatch, }) => {
        const keys = normalizeKeyName$1(name).split(/-(?!$)/);
        const key = keys.find(item => !['Alt', 'Ctrl', 'Meta', 'Shift'].includes(item));
        const event = new KeyboardEvent('keydown', {
            key: key === 'Space'
                ? ' '
                : key,
            altKey: keys.includes('Alt'),
            ctrlKey: keys.includes('Ctrl'),
            metaKey: keys.includes('Meta'),
            shiftKey: keys.includes('Shift'),
            bubbles: true,
            cancelable: true,
        });
        const capturedTransaction = editor.captureTransaction(() => {
            view.someProp('handleKeyDown', f => f(view, event));
        });
        capturedTransaction === null || capturedTransaction === void 0 ? void 0 : capturedTransaction.steps.forEach(step => {
            const newStep = step.map(tr.mapping);
            if (newStep && dispatch) {
                tr.maybeStep(newStep);
            }
        });
        return true;
    };

    function isNodeActive(state, typeOrName, attributes = {}) {
        const { from, to, empty } = state.selection;
        const type = typeOrName
            ? getNodeType(typeOrName, state.schema)
            : null;
        const nodeRanges = [];
        state.doc.nodesBetween(from, to, (node, pos) => {
            if (node.isText) {
                return;
            }
            const relativeFrom = Math.max(from, pos);
            const relativeTo = Math.min(to, pos + node.nodeSize);
            nodeRanges.push({
                node,
                from: relativeFrom,
                to: relativeTo,
            });
        });
        const selectionRange = to - from;
        const matchedNodeRanges = nodeRanges
            .filter(nodeRange => {
            if (!type) {
                return true;
            }
            return type.name === nodeRange.node.type.name;
        })
            .filter(nodeRange => objectIncludes(nodeRange.node.attrs, attributes, { strict: false }));
        if (empty) {
            return !!matchedNodeRanges.length;
        }
        const range = matchedNodeRanges
            .reduce((sum, nodeRange) => sum + nodeRange.to - nodeRange.from, 0);
        return range >= selectionRange;
    }

    const lift$2 = (typeOrName, attributes = {}) => ({ state, dispatch }) => {
        const type = getNodeType(typeOrName, state.schema);
        const isActive = isNodeActive(state, type, attributes);
        if (!isActive) {
            return false;
        }
        return lift$1(state, dispatch);
    };

    const liftEmptyBlock$1 = () => ({ state, dispatch }) => {
        return liftEmptyBlock(state, dispatch);
    };

    const liftListItem$1 = typeOrName => ({ state, dispatch }) => {
        const type = getNodeType(typeOrName, state.schema);
        return liftListItem(type)(state, dispatch);
    };

    const newlineInCode$1 = () => ({ state, dispatch }) => {
        return newlineInCode(state, dispatch);
    };

    function getSchemaTypeNameByName(name, schema) {
        if (schema.nodes[name]) {
            return 'node';
        }
        if (schema.marks[name]) {
            return 'mark';
        }
        return null;
    }

    /**
     * Remove a property or an array of properties from an object
     * @param obj Object
     * @param key Key to remove
     */
    function deleteProps(obj, propOrProps) {
        const props = typeof propOrProps === 'string'
            ? [propOrProps]
            : propOrProps;
        return Object
            .keys(obj)
            .reduce((newObj, prop) => {
            if (!props.includes(prop)) {
                newObj[prop] = obj[prop];
            }
            return newObj;
        }, {});
    }

    const resetAttributes = (typeOrName, attributes) => ({ tr, state, dispatch }) => {
        let nodeType = null;
        let markType = null;
        const schemaType = getSchemaTypeNameByName(typeof typeOrName === 'string'
            ? typeOrName
            : typeOrName.name, state.schema);
        if (!schemaType) {
            return false;
        }
        if (schemaType === 'node') {
            nodeType = getNodeType(typeOrName, state.schema);
        }
        if (schemaType === 'mark') {
            markType = getMarkType(typeOrName, state.schema);
        }
        if (dispatch) {
            tr.selection.ranges.forEach(range => {
                state.doc.nodesBetween(range.$from.pos, range.$to.pos, (node, pos) => {
                    if (nodeType && nodeType === node.type) {
                        tr.setNodeMarkup(pos, undefined, deleteProps(node.attrs, attributes));
                    }
                    if (markType && node.marks.length) {
                        node.marks.forEach(mark => {
                            if (markType === mark.type) {
                                tr.addMark(pos, pos + node.nodeSize, markType.create(deleteProps(mark.attrs, attributes)));
                            }
                        });
                    }
                });
            });
        }
        return true;
    };

    const scrollIntoView = () => ({ tr, dispatch }) => {
        if (dispatch) {
            tr.scrollIntoView();
        }
        return true;
    };

    const selectAll$1 = () => ({ tr, commands }) => {
        return commands.setTextSelection({
            from: 0,
            to: tr.doc.content.size,
        });
    };

    const selectNodeBackward$1 = () => ({ state, dispatch }) => {
        return selectNodeBackward(state, dispatch);
    };

    const selectNodeForward$1 = () => ({ state, dispatch }) => {
        return selectNodeForward(state, dispatch);
    };

    const selectParentNode$1 = () => ({ state, dispatch }) => {
        return selectParentNode(state, dispatch);
    };

    // @ts-ignore
    const selectTextblockEnd$1 = () => ({ state, dispatch }) => {
        return selectTextblockEnd(state, dispatch);
    };

    // @ts-ignore
    const selectTextblockStart$1 = () => ({ state, dispatch }) => {
        return selectTextblockStart(state, dispatch);
    };

    function createDocument(content, schema, parseOptions = {}) {
        return createNodeFromContent(content, schema, { slice: false, parseOptions });
    }

    const setContent = (content, emitUpdate = false, parseOptions = {}) => ({ tr, editor, dispatch }) => {
        const { doc } = tr;
        const document = createDocument(content, editor.schema, parseOptions);
        if (dispatch) {
            tr.replaceWith(0, doc.content.size, document)
                .setMeta('preventUpdate', !emitUpdate);
        }
        return true;
    };

    function defaultBlockAt$1(match) {
        for (let i = 0; i < match.edgeCount; i += 1) {
            const { type } = match.edge(i);
            if (type.isTextblock && !type.hasRequiredAttrs()) {
                return type;
            }
        }
        return null;
    }

    function findParentNodeClosestToPos($pos, predicate) {
        for (let i = $pos.depth; i > 0; i -= 1) {
            const node = $pos.node(i);
            if (predicate(node)) {
                return {
                    pos: i > 0 ? $pos.before(i) : 0,
                    start: $pos.start(i),
                    depth: i,
                    node,
                };
            }
        }
    }

    function findParentNode(predicate) {
        return (selection) => findParentNodeClosestToPos(selection.$from, predicate);
    }

    function getHTMLFromFragment(fragment, schema) {
        const documentFragment = DOMSerializer
            .fromSchema(schema)
            .serializeFragment(fragment);
        const temporaryDocument = document.implementation.createHTMLDocument();
        const container = temporaryDocument.createElement('div');
        container.appendChild(documentFragment);
        return container.innerHTML;
    }

    function getText(node, options) {
        const range = {
            from: 0,
            to: node.content.size,
        };
        return getTextBetween(node, range, options);
    }

    function getMarkAttributes(state, typeOrName) {
        const type = getMarkType(typeOrName, state.schema);
        const { from, to, empty } = state.selection;
        const marks = [];
        if (empty) {
            if (state.storedMarks) {
                marks.push(...state.storedMarks);
            }
            marks.push(...state.selection.$head.marks());
        }
        else {
            state.doc.nodesBetween(from, to, node => {
                marks.push(...node.marks);
            });
        }
        const mark = marks.find(markItem => markItem.type.name === type.name);
        if (!mark) {
            return {};
        }
        return { ...mark.attrs };
    }

    function getNodeAttributes(state, typeOrName) {
        const type = getNodeType(typeOrName, state.schema);
        const { from, to } = state.selection;
        const nodes = [];
        state.doc.nodesBetween(from, to, node => {
            nodes.push(node);
        });
        const node = nodes
            .reverse()
            .find(nodeItem => nodeItem.type.name === type.name);
        if (!node) {
            return {};
        }
        return { ...node.attrs };
    }

    function getAttributes(state, typeOrName) {
        const schemaType = getSchemaTypeNameByName(typeof typeOrName === 'string'
            ? typeOrName
            : typeOrName.name, state.schema);
        if (schemaType === 'node') {
            return getNodeAttributes(state, typeOrName);
        }
        if (schemaType === 'mark') {
            return getMarkAttributes(state, typeOrName);
        }
        return {};
    }

    function getMarksBetween(from, to, doc) {
        const marks = [];
        // get all inclusive marks on empty selection
        if (from === to) {
            doc
                .resolve(from)
                .marks()
                .forEach(mark => {
                const $pos = doc.resolve(from - 1);
                const range = getMarkRange($pos, mark.type);
                if (!range) {
                    return;
                }
                marks.push({
                    mark,
                    ...range,
                });
            });
        }
        else {
            doc.nodesBetween(from, to, (node, pos) => {
                marks.push(...node.marks.map(mark => ({
                    from: pos,
                    to: pos + node.nodeSize,
                    mark,
                })));
            });
        }
        return marks;
    }

    function isMarkActive(state, typeOrName, attributes = {}) {
        const { empty, ranges } = state.selection;
        const type = typeOrName
            ? getMarkType(typeOrName, state.schema)
            : null;
        if (empty) {
            return !!(state.storedMarks || state.selection.$from.marks())
                .filter(mark => {
                if (!type) {
                    return true;
                }
                return type.name === mark.type.name;
            })
                .find(mark => objectIncludes(mark.attrs, attributes, { strict: false }));
        }
        let selectionRange = 0;
        const markRanges = [];
        ranges.forEach(({ $from, $to }) => {
            const from = $from.pos;
            const to = $to.pos;
            state.doc.nodesBetween(from, to, (node, pos) => {
                if (!node.isText && !node.marks.length) {
                    return;
                }
                const relativeFrom = Math.max(from, pos);
                const relativeTo = Math.min(to, pos + node.nodeSize);
                const range = relativeTo - relativeFrom;
                selectionRange += range;
                markRanges.push(...node.marks.map(mark => ({
                    mark,
                    from: relativeFrom,
                    to: relativeTo,
                })));
            });
        });
        if (selectionRange === 0) {
            return false;
        }
        // calculate range of matched mark
        const matchedRange = markRanges
            .filter(markRange => {
            if (!type) {
                return true;
            }
            return type.name === markRange.mark.type.name;
        })
            .filter(markRange => objectIncludes(markRange.mark.attrs, attributes, { strict: false }))
            .reduce((sum, markRange) => sum + markRange.to - markRange.from, 0);
        // calculate range of marks that excludes the searched mark
        // for example `code` doesn’t allow any other marks
        const excludedRange = markRanges
            .filter(markRange => {
            if (!type) {
                return true;
            }
            return markRange.mark.type !== type
                && markRange.mark.type.excludes(type);
        })
            .reduce((sum, markRange) => sum + markRange.to - markRange.from, 0);
        // we only include the result of `excludedRange`
        // if there is a match at all
        const range = matchedRange > 0
            ? matchedRange + excludedRange
            : matchedRange;
        return range >= selectionRange;
    }

    function isActive(state, name, attributes = {}) {
        if (!name) {
            return isNodeActive(state, null, attributes) || isMarkActive(state, null, attributes);
        }
        const schemaType = getSchemaTypeNameByName(name, state.schema);
        if (schemaType === 'node') {
            return isNodeActive(state, name, attributes);
        }
        if (schemaType === 'mark') {
            return isMarkActive(state, name, attributes);
        }
        return false;
    }

    function isList(name, extensions) {
        const { nodeExtensions } = splitExtensions(extensions);
        const extension = nodeExtensions.find(item => item.name === name);
        if (!extension) {
            return false;
        }
        const context = {
            name: extension.name,
            options: extension.options,
            storage: extension.storage,
        };
        const group = callOrReturn(getExtensionField(extension, 'group', context));
        if (typeof group !== 'string') {
            return false;
        }
        return group.split(' ').includes('list');
    }

    function isNodeEmpty(node) {
        var _a;
        const defaultContent = (_a = node.type.createAndFill()) === null || _a === void 0 ? void 0 : _a.toJSON();
        const content = node.toJSON();
        return JSON.stringify(defaultContent) === JSON.stringify(content);
    }

    function canSetMark(state, tr, newMarkType) {
        var _a;
        const { selection } = tr;
        let cursor = null;
        if (isTextSelection(selection)) {
            cursor = selection.$cursor;
        }
        if (cursor) {
            const currentMarks = (_a = state.storedMarks) !== null && _a !== void 0 ? _a : cursor.marks();
            // There can be no current marks that exclude the new mark
            return !!newMarkType.isInSet(currentMarks) || !currentMarks.some(mark => mark.type.excludes(newMarkType));
        }
        const { ranges } = selection;
        return ranges.some(({ $from, $to }) => {
            let someNodeSupportsMark = $from.depth === 0 ? state.doc.inlineContent && state.doc.type.allowsMarkType(newMarkType) : false;
            state.doc.nodesBetween($from.pos, $to.pos, (node, _pos, parent) => {
                // If we already found a mark that we can enable, return false to bypass the remaining search
                if (someNodeSupportsMark) {
                    return false;
                }
                if (node.isInline) {
                    const parentAllowsMarkType = !parent || parent.type.allowsMarkType(newMarkType);
                    const currentMarksAllowMarkType = !!newMarkType.isInSet(node.marks) || !node.marks.some(otherMark => otherMark.type.excludes(newMarkType));
                    someNodeSupportsMark = parentAllowsMarkType && currentMarksAllowMarkType;
                }
                return !someNodeSupportsMark;
            });
            return someNodeSupportsMark;
        });
    }
    const setMark = (typeOrName, attributes = {}) => ({ tr, state, dispatch }) => {
        const { selection } = tr;
        const { empty, ranges } = selection;
        const type = getMarkType(typeOrName, state.schema);
        if (dispatch) {
            if (empty) {
                const oldAttributes = getMarkAttributes(state, type);
                tr.addStoredMark(type.create({
                    ...oldAttributes,
                    ...attributes,
                }));
            }
            else {
                ranges.forEach(range => {
                    const from = range.$from.pos;
                    const to = range.$to.pos;
                    state.doc.nodesBetween(from, to, (node, pos) => {
                        const trimmedFrom = Math.max(pos, from);
                        const trimmedTo = Math.min(pos + node.nodeSize, to);
                        const someHasMark = node.marks.find(mark => mark.type === type);
                        // if there is already a mark of this type
                        // we know that we have to merge its attributes
                        // otherwise we add a fresh new mark
                        if (someHasMark) {
                            node.marks.forEach(mark => {
                                if (type === mark.type) {
                                    tr.addMark(trimmedFrom, trimmedTo, type.create({
                                        ...mark.attrs,
                                        ...attributes,
                                    }));
                                }
                            });
                        }
                        else {
                            tr.addMark(trimmedFrom, trimmedTo, type.create(attributes));
                        }
                    });
                });
            }
        }
        return canSetMark(state, tr, type);
    };

    const setMeta = (key, value) => ({ tr }) => {
        tr.setMeta(key, value);
        return true;
    };

    const setNode = (typeOrName, attributes = {}) => ({ state, dispatch, chain }) => {
        const type = getNodeType(typeOrName, state.schema);
        // TODO: use a fallback like insertContent?
        if (!type.isTextblock) {
            console.warn('[tiptap warn]: Currently "setNode()" only supports text block nodes.');
            return false;
        }
        return chain()
            // try to convert node to default node if needed
            .command(({ commands }) => {
            const canSetBlock = setBlockType$1(type, attributes)(state);
            if (canSetBlock) {
                return true;
            }
            return commands.clearNodes();
        })
            .command(({ state: updatedState }) => {
            return setBlockType$1(type, attributes)(updatedState, dispatch);
        })
            .run();
    };

    const setNodeSelection = position => ({ tr, dispatch }) => {
        if (dispatch) {
            const { doc } = tr;
            const from = minMax(position, 0, doc.content.size);
            const selection = NodeSelection.create(doc, from);
            tr.setSelection(selection);
        }
        return true;
    };

    const setTextSelection = position => ({ tr, dispatch }) => {
        if (dispatch) {
            const { doc } = tr;
            const { from, to } = typeof position === 'number'
                ? { from: position, to: position }
                : position;
            const minPos = TextSelection.atStart(doc).from;
            const maxPos = TextSelection.atEnd(doc).to;
            const resolvedFrom = minMax(from, minPos, maxPos);
            const resolvedEnd = minMax(to, minPos, maxPos);
            const selection = TextSelection.create(doc, resolvedFrom, resolvedEnd);
            tr.setSelection(selection);
        }
        return true;
    };

    const sinkListItem$1 = typeOrName => ({ state, dispatch }) => {
        const type = getNodeType(typeOrName, state.schema);
        return sinkListItem(type)(state, dispatch);
    };

    function getSplittedAttributes(extensionAttributes, typeName, attributes) {
        return Object.fromEntries(Object
            .entries(attributes)
            .filter(([name]) => {
            const extensionAttribute = extensionAttributes.find(item => {
                return item.type === typeName && item.name === name;
            });
            if (!extensionAttribute) {
                return false;
            }
            return extensionAttribute.attribute.keepOnSplit;
        }));
    }

    function ensureMarks(state, splittableMarks) {
        const marks = state.storedMarks
            || (state.selection.$to.parentOffset && state.selection.$from.marks());
        if (marks) {
            const filteredMarks = marks.filter(mark => splittableMarks === null || splittableMarks === void 0 ? void 0 : splittableMarks.includes(mark.type.name));
            state.tr.ensureMarks(filteredMarks);
        }
    }
    const splitBlock$1 = ({ keepMarks = true } = {}) => ({ tr, state, dispatch, editor, }) => {
        const { selection, doc } = tr;
        const { $from, $to } = selection;
        const extensionAttributes = editor.extensionManager.attributes;
        const newAttributes = getSplittedAttributes(extensionAttributes, $from.node().type.name, $from.node().attrs);
        if (selection instanceof NodeSelection && selection.node.isBlock) {
            if (!$from.parentOffset || !canSplit(doc, $from.pos)) {
                return false;
            }
            if (dispatch) {
                if (keepMarks) {
                    ensureMarks(state, editor.extensionManager.splittableMarks);
                }
                tr.split($from.pos).scrollIntoView();
            }
            return true;
        }
        if (!$from.parent.isBlock) {
            return false;
        }
        if (dispatch) {
            const atEnd = $to.parentOffset === $to.parent.content.size;
            if (selection instanceof TextSelection) {
                tr.deleteSelection();
            }
            const deflt = $from.depth === 0
                ? undefined
                : defaultBlockAt$1($from.node(-1).contentMatchAt($from.indexAfter(-1)));
            let types = atEnd && deflt
                ? [{
                        type: deflt,
                        attrs: newAttributes,
                    }]
                : undefined;
            let can = canSplit(tr.doc, tr.mapping.map($from.pos), 1, types);
            if (!types
                && !can
                && canSplit(tr.doc, tr.mapping.map($from.pos), 1, deflt ? [{ type: deflt }] : undefined)) {
                can = true;
                types = deflt
                    ? [{
                            type: deflt,
                            attrs: newAttributes,
                        }]
                    : undefined;
            }
            if (can) {
                tr.split(tr.mapping.map($from.pos), 1, types);
                if (deflt
                    && !atEnd
                    && !$from.parentOffset
                    && $from.parent.type !== deflt) {
                    const first = tr.mapping.map($from.before());
                    const $first = tr.doc.resolve(first);
                    if ($from.node(-1).canReplaceWith($first.index(), $first.index() + 1, deflt)) {
                        tr.setNodeMarkup(tr.mapping.map($from.before()), deflt);
                    }
                }
            }
            if (keepMarks) {
                ensureMarks(state, editor.extensionManager.splittableMarks);
            }
            tr.scrollIntoView();
        }
        return true;
    };

    const splitListItem = typeOrName => ({ tr, state, dispatch, editor, }) => {
        var _a;
        const type = getNodeType(typeOrName, state.schema);
        const { $from, $to } = state.selection;
        // @ts-ignore
        // eslint-disable-next-line
        const node = state.selection.node;
        if ((node && node.isBlock) || $from.depth < 2 || !$from.sameParent($to)) {
            return false;
        }
        const grandParent = $from.node(-1);
        if (grandParent.type !== type) {
            return false;
        }
        const extensionAttributes = editor.extensionManager.attributes;
        if ($from.parent.content.size === 0 && $from.node(-1).childCount === $from.indexAfter(-1)) {
            // In an empty block. If this is a nested list, the wrapping
            // list item should be split. Otherwise, bail out and let next
            // command handle lifting.
            if ($from.depth === 2
                || $from.node(-3).type !== type
                || $from.index(-2) !== $from.node(-2).childCount - 1) {
                return false;
            }
            if (dispatch) {
                let wrap = Fragment.empty;
                // eslint-disable-next-line
                const depthBefore = $from.index(-1)
                    ? 1
                    : $from.index(-2)
                        ? 2
                        : 3;
                // Build a fragment containing empty versions of the structure
                // from the outer list item to the parent node of the cursor
                for (let d = $from.depth - depthBefore; d >= $from.depth - 3; d -= 1) {
                    wrap = Fragment.from($from.node(d).copy(wrap));
                }
                // eslint-disable-next-line
                const depthAfter = $from.indexAfter(-1) < $from.node(-2).childCount
                    ? 1
                    : $from.indexAfter(-2) < $from.node(-3).childCount
                        ? 2
                        : 3;
                // Add a second list item with an empty default start node
                const newNextTypeAttributes = getSplittedAttributes(extensionAttributes, $from.node().type.name, $from.node().attrs);
                const nextType = ((_a = type.contentMatch.defaultType) === null || _a === void 0 ? void 0 : _a.createAndFill(newNextTypeAttributes)) || undefined;
                wrap = wrap.append(Fragment.from(type.createAndFill(null, nextType) || undefined));
                const start = $from.before($from.depth - (depthBefore - 1));
                tr.replace(start, $from.after(-depthAfter), new Slice(wrap, 4 - depthBefore, 0));
                let sel = -1;
                tr.doc.nodesBetween(start, tr.doc.content.size, (n, pos) => {
                    if (sel > -1) {
                        return false;
                    }
                    if (n.isTextblock && n.content.size === 0) {
                        sel = pos + 1;
                    }
                });
                if (sel > -1) {
                    tr.setSelection(TextSelection.near(tr.doc.resolve(sel)));
                }
                tr.scrollIntoView();
            }
            return true;
        }
        const nextType = $to.pos === $from.end()
            ? grandParent.contentMatchAt(0).defaultType
            : null;
        const newTypeAttributes = getSplittedAttributes(extensionAttributes, grandParent.type.name, grandParent.attrs);
        const newNextTypeAttributes = getSplittedAttributes(extensionAttributes, $from.node().type.name, $from.node().attrs);
        tr.delete($from.pos, $to.pos);
        const types = nextType
            ? [{ type, attrs: newTypeAttributes }, { type: nextType, attrs: newNextTypeAttributes }]
            : [{ type, attrs: newTypeAttributes }];
        if (!canSplit(tr.doc, $from.pos, 2)) {
            return false;
        }
        if (dispatch) {
            tr.split($from.pos, 2, types).scrollIntoView();
        }
        return true;
    };

    const joinListBackwards = (tr, listType) => {
        const list = findParentNode(node => node.type === listType)(tr.selection);
        if (!list) {
            return true;
        }
        const before = tr.doc.resolve(Math.max(0, list.pos - 1)).before(list.depth);
        if (before === undefined) {
            return true;
        }
        const nodeBefore = tr.doc.nodeAt(before);
        const canJoinBackwards = list.node.type === (nodeBefore === null || nodeBefore === void 0 ? void 0 : nodeBefore.type)
            && canJoin(tr.doc, list.pos);
        if (!canJoinBackwards) {
            return true;
        }
        tr.join(list.pos);
        return true;
    };
    const joinListForwards = (tr, listType) => {
        const list = findParentNode(node => node.type === listType)(tr.selection);
        if (!list) {
            return true;
        }
        const after = tr.doc.resolve(list.start).after(list.depth);
        if (after === undefined) {
            return true;
        }
        const nodeAfter = tr.doc.nodeAt(after);
        const canJoinForwards = list.node.type === (nodeAfter === null || nodeAfter === void 0 ? void 0 : nodeAfter.type)
            && canJoin(tr.doc, after);
        if (!canJoinForwards) {
            return true;
        }
        tr.join(after);
        return true;
    };
    const toggleList = (listTypeOrName, itemTypeOrName) => ({ editor, tr, state, dispatch, chain, commands, can, }) => {
        const { extensions } = editor.extensionManager;
        const listType = getNodeType(listTypeOrName, state.schema);
        const itemType = getNodeType(itemTypeOrName, state.schema);
        const { selection } = state;
        const { $from, $to } = selection;
        const range = $from.blockRange($to);
        if (!range) {
            return false;
        }
        const parentList = findParentNode(node => isList(node.type.name, extensions))(selection);
        if (range.depth >= 1 && parentList && range.depth - parentList.depth <= 1) {
            // remove list
            if (parentList.node.type === listType) {
                return commands.liftListItem(itemType);
            }
            // change list type
            if (isList(parentList.node.type.name, extensions)
                && listType.validContent(parentList.node.content)
                && dispatch) {
                return chain()
                    .command(() => {
                    tr.setNodeMarkup(parentList.pos, listType);
                    return true;
                })
                    .command(() => joinListBackwards(tr, listType))
                    .command(() => joinListForwards(tr, listType))
                    .run();
            }
        }
        return chain()
            // try to convert node to default node if needed
            .command(() => {
            const canWrapInList = can().wrapInList(listType);
            if (canWrapInList) {
                return true;
            }
            return commands.clearNodes();
        })
            .wrapInList(listType)
            .command(() => joinListBackwards(tr, listType))
            .command(() => joinListForwards(tr, listType))
            .run();
    };

    const toggleMark = (typeOrName, attributes = {}, options = {}) => ({ state, commands }) => {
        const { extendEmptyMarkRange = false } = options;
        const type = getMarkType(typeOrName, state.schema);
        const isActive = isMarkActive(state, type, attributes);
        if (isActive) {
            return commands.unsetMark(type, { extendEmptyMarkRange });
        }
        return commands.setMark(type, attributes);
    };

    const toggleNode = (typeOrName, toggleTypeOrName, attributes = {}) => ({ state, commands }) => {
        const type = getNodeType(typeOrName, state.schema);
        const toggleType = getNodeType(toggleTypeOrName, state.schema);
        const isActive = isNodeActive(state, type, attributes);
        if (isActive) {
            return commands.setNode(toggleType);
        }
        return commands.setNode(type, attributes);
    };

    const toggleWrap = (typeOrName, attributes = {}) => ({ state, commands }) => {
        const type = getNodeType(typeOrName, state.schema);
        const isActive = isNodeActive(state, type, attributes);
        if (isActive) {
            return commands.lift(type);
        }
        return commands.wrapIn(type, attributes);
    };

    const undoInputRule = () => ({ state, dispatch }) => {
        const plugins = state.plugins;
        for (let i = 0; i < plugins.length; i += 1) {
            const plugin = plugins[i];
            let undoable;
            // @ts-ignore
            // eslint-disable-next-line
            if (plugin.spec.isInputRules && (undoable = plugin.getState(state))) {
                if (dispatch) {
                    const tr = state.tr;
                    const toUndo = undoable.transform;
                    for (let j = toUndo.steps.length - 1; j >= 0; j -= 1) {
                        tr.step(toUndo.steps[j].invert(toUndo.docs[j]));
                    }
                    if (undoable.text) {
                        const marks = tr.doc.resolve(undoable.from).marks();
                        tr.replaceWith(undoable.from, undoable.to, state.schema.text(undoable.text, marks));
                    }
                    else {
                        tr.delete(undoable.from, undoable.to);
                    }
                }
                return true;
            }
        }
        return false;
    };

    const unsetAllMarks = () => ({ tr, dispatch }) => {
        const { selection } = tr;
        const { empty, ranges } = selection;
        if (empty) {
            return true;
        }
        if (dispatch) {
            ranges.forEach(range => {
                tr.removeMark(range.$from.pos, range.$to.pos);
            });
        }
        return true;
    };

    const unsetMark = (typeOrName, options = {}) => ({ tr, state, dispatch }) => {
        var _a;
        const { extendEmptyMarkRange = false } = options;
        const { selection } = tr;
        const type = getMarkType(typeOrName, state.schema);
        const { $from, empty, ranges } = selection;
        if (!dispatch) {
            return true;
        }
        if (empty && extendEmptyMarkRange) {
            let { from, to } = selection;
            const attrs = (_a = $from.marks().find(mark => mark.type === type)) === null || _a === void 0 ? void 0 : _a.attrs;
            const range = getMarkRange($from, type, attrs);
            if (range) {
                from = range.from;
                to = range.to;
            }
            tr.removeMark(from, to, type);
        }
        else {
            ranges.forEach(range => {
                tr.removeMark(range.$from.pos, range.$to.pos, type);
            });
        }
        tr.removeStoredMark(type);
        return true;
    };

    const updateAttributes = (typeOrName, attributes = {}) => ({ tr, state, dispatch }) => {
        let nodeType = null;
        let markType = null;
        const schemaType = getSchemaTypeNameByName(typeof typeOrName === 'string'
            ? typeOrName
            : typeOrName.name, state.schema);
        if (!schemaType) {
            return false;
        }
        if (schemaType === 'node') {
            nodeType = getNodeType(typeOrName, state.schema);
        }
        if (schemaType === 'mark') {
            markType = getMarkType(typeOrName, state.schema);
        }
        if (dispatch) {
            tr.selection.ranges.forEach(range => {
                const from = range.$from.pos;
                const to = range.$to.pos;
                state.doc.nodesBetween(from, to, (node, pos) => {
                    if (nodeType && nodeType === node.type) {
                        tr.setNodeMarkup(pos, undefined, {
                            ...node.attrs,
                            ...attributes,
                        });
                    }
                    if (markType && node.marks.length) {
                        node.marks.forEach(mark => {
                            if (markType === mark.type) {
                                const trimmedFrom = Math.max(pos, from);
                                const trimmedTo = Math.min(pos + node.nodeSize, to);
                                tr.addMark(trimmedFrom, trimmedTo, markType.create({
                                    ...mark.attrs,
                                    ...attributes,
                                }));
                            }
                        });
                    }
                });
            });
        }
        return true;
    };

    const wrapIn$1 = (typeOrName, attributes = {}) => ({ state, dispatch }) => {
        const type = getNodeType(typeOrName, state.schema);
        return wrapIn(type, attributes)(state, dispatch);
    };

    const wrapInList$1 = (typeOrName, attributes = {}) => ({ state, dispatch }) => {
        const type = getNodeType(typeOrName, state.schema);
        return wrapInList(type, attributes)(state, dispatch);
    };

    var commands = /*#__PURE__*/Object.freeze({
      __proto__: null,
      blur: blur,
      clearContent: clearContent,
      clearNodes: clearNodes,
      command: command,
      createParagraphNear: createParagraphNear$1,
      deleteNode: deleteNode,
      deleteRange: deleteRange$1,
      deleteSelection: deleteSelection$1,
      enter: enter,
      exitCode: exitCode$1,
      extendMarkRange: extendMarkRange,
      first: first,
      focus: focus,
      forEach: forEach$1,
      insertContent: insertContent,
      insertContentAt: insertContentAt,
      joinBackward: joinBackward$1,
      joinForward: joinForward$1,
      keyboardShortcut: keyboardShortcut,
      lift: lift$2,
      liftEmptyBlock: liftEmptyBlock$1,
      liftListItem: liftListItem$1,
      newlineInCode: newlineInCode$1,
      resetAttributes: resetAttributes,
      scrollIntoView: scrollIntoView,
      selectAll: selectAll$1,
      selectNodeBackward: selectNodeBackward$1,
      selectNodeForward: selectNodeForward$1,
      selectParentNode: selectParentNode$1,
      selectTextblockEnd: selectTextblockEnd$1,
      selectTextblockStart: selectTextblockStart$1,
      setContent: setContent,
      setMark: setMark,
      setMeta: setMeta,
      setNode: setNode,
      setNodeSelection: setNodeSelection,
      setTextSelection: setTextSelection,
      sinkListItem: sinkListItem$1,
      splitBlock: splitBlock$1,
      splitListItem: splitListItem,
      toggleList: toggleList,
      toggleMark: toggleMark,
      toggleNode: toggleNode,
      toggleWrap: toggleWrap,
      undoInputRule: undoInputRule,
      unsetAllMarks: unsetAllMarks,
      unsetMark: unsetMark,
      updateAttributes: updateAttributes,
      wrapIn: wrapIn$1,
      wrapInList: wrapInList$1
    });

    const Commands = Extension.create({
        name: 'commands',
        addCommands() {
            return {
                ...commands,
            };
        },
    });

    const Editable = Extension.create({
        name: 'editable',
        addProseMirrorPlugins() {
            return [
                new Plugin({
                    key: new PluginKey('editable'),
                    props: {
                        editable: () => this.editor.options.editable,
                    },
                }),
            ];
        },
    });

    const FocusEvents = Extension.create({
        name: 'focusEvents',
        addProseMirrorPlugins() {
            const { editor } = this;
            return [
                new Plugin({
                    key: new PluginKey('focusEvents'),
                    props: {
                        handleDOMEvents: {
                            focus: (view, event) => {
                                editor.isFocused = true;
                                const transaction = editor.state.tr
                                    .setMeta('focus', { event })
                                    .setMeta('addToHistory', false);
                                view.dispatch(transaction);
                                return false;
                            },
                            blur: (view, event) => {
                                editor.isFocused = false;
                                const transaction = editor.state.tr
                                    .setMeta('blur', { event })
                                    .setMeta('addToHistory', false);
                                view.dispatch(transaction);
                                return false;
                            },
                        },
                    },
                }),
            ];
        },
    });

    const Keymap = Extension.create({
        name: 'keymap',
        addKeyboardShortcuts() {
            const handleBackspace = () => this.editor.commands.first(({ commands }) => [
                () => commands.undoInputRule(),
                // maybe convert first text block node to default node
                () => commands.command(({ tr }) => {
                    const { selection, doc } = tr;
                    const { empty, $anchor } = selection;
                    const { pos, parent } = $anchor;
                    const isAtStart = Selection.atStart(doc).from === pos;
                    if (!empty
                        || !isAtStart
                        || !parent.type.isTextblock
                        || parent.textContent.length) {
                        return false;
                    }
                    return commands.clearNodes();
                }),
                () => commands.deleteSelection(),
                () => commands.joinBackward(),
                () => commands.selectNodeBackward(),
            ]);
            const handleDelete = () => this.editor.commands.first(({ commands }) => [
                () => commands.deleteSelection(),
                () => commands.joinForward(),
                () => commands.selectNodeForward(),
            ]);
            const handleEnter = () => this.editor.commands.first(({ commands }) => [
                () => commands.newlineInCode(),
                () => commands.createParagraphNear(),
                () => commands.liftEmptyBlock(),
                () => commands.splitBlock(),
            ]);
            const baseKeymap = {
                Enter: handleEnter,
                'Mod-Enter': () => this.editor.commands.exitCode(),
                Backspace: handleBackspace,
                'Mod-Backspace': handleBackspace,
                'Shift-Backspace': handleBackspace,
                Delete: handleDelete,
                'Mod-Delete': handleDelete,
                'Mod-a': () => this.editor.commands.selectAll(),
            };
            const pcKeymap = {
                ...baseKeymap,
            };
            const macKeymap = {
                ...baseKeymap,
                'Ctrl-h': handleBackspace,
                'Alt-Backspace': handleBackspace,
                'Ctrl-d': handleDelete,
                'Ctrl-Alt-Backspace': handleDelete,
                'Alt-Delete': handleDelete,
                'Alt-d': handleDelete,
                'Ctrl-a': () => this.editor.commands.selectTextblockStart(),
                'Ctrl-e': () => this.editor.commands.selectTextblockEnd(),
            };
            if (isiOS() || isMacOS()) {
                return macKeymap;
            }
            return pcKeymap;
        },
        addProseMirrorPlugins() {
            return [
                // With this plugin we check if the whole document was selected and deleted.
                // In this case we will additionally call `clearNodes()` to convert e.g. a heading
                // to a paragraph if necessary.
                // This is an alternative to ProseMirror's `AllSelection`, which doesn’t work well
                // with many other commands.
                new Plugin({
                    key: new PluginKey('clearDocument'),
                    appendTransaction: (transactions, oldState, newState) => {
                        const docChanges = transactions.some(transaction => transaction.docChanged)
                            && !oldState.doc.eq(newState.doc);
                        if (!docChanges) {
                            return;
                        }
                        const { empty, from, to } = oldState.selection;
                        const allFrom = Selection.atStart(oldState.doc).from;
                        const allEnd = Selection.atEnd(oldState.doc).to;
                        const allWasSelected = from === allFrom && to === allEnd;
                        const isEmpty = newState.doc.textBetween(0, newState.doc.content.size, ' ', ' ').length === 0;
                        if (empty || !allWasSelected || !isEmpty) {
                            return;
                        }
                        const tr = newState.tr;
                        const state = createChainableState({
                            state: newState,
                            transaction: tr,
                        });
                        const { commands } = new CommandManager({
                            editor: this.editor,
                            state,
                        });
                        commands.clearNodes();
                        if (!tr.steps.length) {
                            return;
                        }
                        return tr;
                    },
                }),
            ];
        },
    });

    const Tabindex = Extension.create({
        name: 'tabindex',
        addProseMirrorPlugins() {
            return [
                new Plugin({
                    key: new PluginKey('tabindex'),
                    props: {
                        attributes: this.editor.isEditable ? { tabindex: '0' } : {},
                    },
                }),
            ];
        },
    });

    var extensions = /*#__PURE__*/Object.freeze({
      __proto__: null,
      ClipboardTextSerializer: ClipboardTextSerializer,
      Commands: Commands,
      Editable: Editable,
      FocusEvents: FocusEvents,
      Keymap: Keymap,
      Tabindex: Tabindex
    });

    const style = `.ProseMirror {
  position: relative;
}

.ProseMirror {
  word-wrap: break-word;
  white-space: pre-wrap;
  white-space: break-spaces;
  -webkit-font-variant-ligatures: none;
  font-variant-ligatures: none;
  font-feature-settings: "liga" 0; /* the above doesn't seem to work in Edge */
}

.ProseMirror [contenteditable="false"] {
  white-space: normal;
}

.ProseMirror [contenteditable="false"] [contenteditable="true"] {
  white-space: pre-wrap;
}

.ProseMirror pre {
  white-space: pre-wrap;
}

img.ProseMirror-separator {
  display: inline !important;
  border: none !important;
  margin: 0 !important;
  width: 1px !important;
  height: 1px !important;
}

.ProseMirror-gapcursor {
  display: none;
  pointer-events: none;
  position: absolute;
  margin: 0;
}

.ProseMirror-gapcursor:after {
  content: "";
  display: block;
  position: absolute;
  top: -2px;
  width: 20px;
  border-top: 1px solid black;
  animation: ProseMirror-cursor-blink 1.1s steps(2, start) infinite;
}

@keyframes ProseMirror-cursor-blink {
  to {
    visibility: hidden;
  }
}

.ProseMirror-hideselection *::selection {
  background: transparent;
}

.ProseMirror-hideselection *::-moz-selection {
  background: transparent;
}

.ProseMirror-hideselection * {
  caret-color: transparent;
}

.ProseMirror-focused .ProseMirror-gapcursor {
  display: block;
}

.tippy-box[data-animation=fade][data-state=hidden] {
  opacity: 0
}`;

    function createStyleTag(style, nonce) {
        const tipTapStyleTag = document.querySelector('style[data-tiptap-style]');
        if (tipTapStyleTag !== null) {
            return tipTapStyleTag;
        }
        const styleNode = document.createElement('style');
        if (nonce) {
            styleNode.setAttribute('nonce', nonce);
        }
        styleNode.setAttribute('data-tiptap-style', '');
        styleNode.innerHTML = style;
        document.getElementsByTagName('head')[0].appendChild(styleNode);
        return styleNode;
    }

    class Editor extends EventEmitter {
        constructor(options = {}) {
            super();
            this.isFocused = false;
            this.extensionStorage = {};
            this.options = {
                element: document.createElement('div'),
                content: '',
                injectCSS: true,
                injectNonce: undefined,
                extensions: [],
                autofocus: false,
                editable: true,
                editorProps: {},
                parseOptions: {},
                enableInputRules: true,
                enablePasteRules: true,
                enableCoreExtensions: true,
                onBeforeCreate: () => null,
                onCreate: () => null,
                onUpdate: () => null,
                onSelectionUpdate: () => null,
                onTransaction: () => null,
                onFocus: () => null,
                onBlur: () => null,
                onDestroy: () => null,
            };
            this.isCapturingTransaction = false;
            this.capturedTransaction = null;
            this.setOptions(options);
            this.createExtensionManager();
            this.createCommandManager();
            this.createSchema();
            this.on('beforeCreate', this.options.onBeforeCreate);
            this.emit('beforeCreate', { editor: this });
            this.createView();
            this.injectCSS();
            this.on('create', this.options.onCreate);
            this.on('update', this.options.onUpdate);
            this.on('selectionUpdate', this.options.onSelectionUpdate);
            this.on('transaction', this.options.onTransaction);
            this.on('focus', this.options.onFocus);
            this.on('blur', this.options.onBlur);
            this.on('destroy', this.options.onDestroy);
            window.setTimeout(() => {
                if (this.isDestroyed) {
                    return;
                }
                this.commands.focus(this.options.autofocus);
                this.emit('create', { editor: this });
            }, 0);
        }
        /**
         * Returns the editor storage.
         */
        get storage() {
            return this.extensionStorage;
        }
        /**
         * An object of all registered commands.
         */
        get commands() {
            return this.commandManager.commands;
        }
        /**
         * Create a command chain to call multiple commands at once.
         */
        chain() {
            return this.commandManager.chain();
        }
        /**
         * Check if a command or a command chain can be executed. Without executing it.
         */
        can() {
            return this.commandManager.can();
        }
        /**
         * Inject CSS styles.
         */
        injectCSS() {
            if (this.options.injectCSS && document) {
                this.css = createStyleTag(style, this.options.injectNonce);
            }
        }
        /**
         * Update editor options.
         *
         * @param options A list of options
         */
        setOptions(options = {}) {
            this.options = {
                ...this.options,
                ...options,
            };
            if (!this.view || !this.state || this.isDestroyed) {
                return;
            }
            if (this.options.editorProps) {
                this.view.setProps(this.options.editorProps);
            }
            this.view.updateState(this.state);
        }
        /**
         * Update editable state of the editor.
         */
        setEditable(editable) {
            this.setOptions({ editable });
            this.emit('update', { editor: this, transaction: this.state.tr });
        }
        /**
         * Returns whether the editor is editable.
         */
        get isEditable() {
            // since plugins are applied after creating the view
            // `editable` is always `true` for one tick.
            // that’s why we also have to check for `options.editable`
            return this.options.editable
                && this.view
                && this.view.editable;
        }
        /**
         * Returns the editor state.
         */
        get state() {
            return this.view.state;
        }
        /**
         * Register a ProseMirror plugin.
         *
         * @param plugin A ProseMirror plugin
         * @param handlePlugins Control how to merge the plugin into the existing plugins.
         */
        registerPlugin(plugin, handlePlugins) {
            const plugins = isFunction$1(handlePlugins)
                ? handlePlugins(plugin, [...this.state.plugins])
                : [...this.state.plugins, plugin];
            const state = this.state.reconfigure({ plugins });
            this.view.updateState(state);
        }
        /**
         * Unregister a ProseMirror plugin.
         *
         * @param nameOrPluginKey The plugins name
         */
        unregisterPlugin(nameOrPluginKey) {
            if (this.isDestroyed) {
                return;
            }
            const name = typeof nameOrPluginKey === 'string'
                ? `${nameOrPluginKey}$`
                // @ts-ignore
                : nameOrPluginKey.key;
            const state = this.state.reconfigure({
                // @ts-ignore
                plugins: this.state.plugins.filter(plugin => !plugin.key.startsWith(name)),
            });
            this.view.updateState(state);
        }
        /**
         * Creates an extension manager.
         */
        createExtensionManager() {
            const coreExtensions = this.options.enableCoreExtensions
                ? Object.values(extensions)
                : [];
            const allExtensions = [...coreExtensions, ...this.options.extensions].filter(extension => {
                return ['extension', 'node', 'mark'].includes(extension === null || extension === void 0 ? void 0 : extension.type);
            });
            this.extensionManager = new ExtensionManager(allExtensions, this);
        }
        /**
         * Creates an command manager.
         */
        createCommandManager() {
            this.commandManager = new CommandManager({
                editor: this,
            });
        }
        /**
         * Creates a ProseMirror schema.
         */
        createSchema() {
            this.schema = this.extensionManager.schema;
        }
        /**
         * Creates a ProseMirror view.
         */
        createView() {
            const doc = createDocument(this.options.content, this.schema, this.options.parseOptions);
            const selection = resolveFocusPosition(doc, this.options.autofocus);
            this.view = new EditorView(this.options.element, {
                ...this.options.editorProps,
                dispatchTransaction: this.dispatchTransaction.bind(this),
                state: EditorState.create({
                    doc,
                    selection: selection || undefined,
                }),
            });
            // `editor.view` is not yet available at this time.
            // Therefore we will add all plugins and node views directly afterwards.
            const newState = this.state.reconfigure({
                plugins: this.extensionManager.plugins,
            });
            this.view.updateState(newState);
            this.createNodeViews();
            // Let’s store the editor instance in the DOM element.
            // So we’ll have access to it for tests.
            const dom = this.view.dom;
            dom.editor = this;
        }
        /**
         * Creates all node views.
         */
        createNodeViews() {
            this.view.setProps({
                nodeViews: this.extensionManager.nodeViews,
            });
        }
        captureTransaction(fn) {
            this.isCapturingTransaction = true;
            fn();
            this.isCapturingTransaction = false;
            const tr = this.capturedTransaction;
            this.capturedTransaction = null;
            return tr;
        }
        /**
         * The callback over which to send transactions (state updates) produced by the view.
         *
         * @param transaction An editor state transaction
         */
        dispatchTransaction(transaction) {
            if (this.isCapturingTransaction) {
                if (!this.capturedTransaction) {
                    this.capturedTransaction = transaction;
                    return;
                }
                transaction.steps.forEach(step => { var _a; return (_a = this.capturedTransaction) === null || _a === void 0 ? void 0 : _a.step(step); });
                return;
            }
            const state = this.state.apply(transaction);
            const selectionHasChanged = !this.state.selection.eq(state.selection);
            this.view.updateState(state);
            this.emit('transaction', {
                editor: this,
                transaction,
            });
            if (selectionHasChanged) {
                this.emit('selectionUpdate', {
                    editor: this,
                    transaction,
                });
            }
            const focus = transaction.getMeta('focus');
            const blur = transaction.getMeta('blur');
            if (focus) {
                this.emit('focus', {
                    editor: this,
                    event: focus.event,
                    transaction,
                });
            }
            if (blur) {
                this.emit('blur', {
                    editor: this,
                    event: blur.event,
                    transaction,
                });
            }
            if (!transaction.docChanged || transaction.getMeta('preventUpdate')) {
                return;
            }
            this.emit('update', {
                editor: this,
                transaction,
            });
        }
        /**
         * Get attributes of the currently selected node or mark.
         */
        getAttributes(nameOrType) {
            return getAttributes(this.state, nameOrType);
        }
        isActive(nameOrAttributes, attributesOrUndefined) {
            const name = typeof nameOrAttributes === 'string'
                ? nameOrAttributes
                : null;
            const attributes = typeof nameOrAttributes === 'string'
                ? attributesOrUndefined
                : nameOrAttributes;
            return isActive(this.state, name, attributes);
        }
        /**
         * Get the document as JSON.
         */
        getJSON() {
            return this.state.doc.toJSON();
        }
        /**
         * Get the document as HTML.
         */
        getHTML() {
            return getHTMLFromFragment(this.state.doc.content, this.schema);
        }
        /**
         * Get the document as text.
         */
        getText(options) {
            const { blockSeparator = '\n\n', textSerializers = {}, } = options || {};
            return getText(this.state.doc, {
                blockSeparator,
                textSerializers: {
                    ...textSerializers,
                    ...getTextSerializersFromSchema(this.schema),
                },
            });
        }
        /**
         * Check if there is no content.
         */
        get isEmpty() {
            return isNodeEmpty(this.state.doc);
        }
        /**
         * Get the number of characters for the current document.
         *
         * @deprecated
         */
        getCharacterCount() {
            console.warn('[tiptap warn]: "editor.getCharacterCount()" is deprecated. Please use "editor.storage.characterCount.characters()" instead.');
            return this.state.doc.content.size - 2;
        }
        /**
         * Destroy the editor.
         */
        destroy() {
            this.emit('destroy');
            if (this.view) {
                this.view.destroy();
            }
            this.removeAllListeners();
        }
        /**
         * Check if the editor is already destroyed.
         */
        get isDestroyed() {
            var _a;
            // @ts-ignore
            return !((_a = this.view) === null || _a === void 0 ? void 0 : _a.docView);
        }
    }

    /**
     * Build an input rule that adds a mark when the
     * matched text is typed into it.
     */
    function markInputRule(config) {
        return new InputRule({
            find: config.find,
            handler: ({ state, range, match }) => {
                const attributes = callOrReturn(config.getAttributes, undefined, match);
                if (attributes === false || attributes === null) {
                    return null;
                }
                const { tr } = state;
                const captureGroup = match[match.length - 1];
                const fullMatch = match[0];
                let markEnd = range.to;
                if (captureGroup) {
                    const startSpaces = fullMatch.search(/\S/);
                    const textStart = range.from + fullMatch.indexOf(captureGroup);
                    const textEnd = textStart + captureGroup.length;
                    const excludedMarks = getMarksBetween(range.from, range.to, state.doc)
                        .filter(item => {
                        // @ts-ignore
                        const excluded = item.mark.type.excluded;
                        return excluded.find(type => type === config.type && type !== item.mark.type);
                    })
                        .filter(item => item.to > textStart);
                    if (excludedMarks.length) {
                        return null;
                    }
                    if (textEnd < range.to) {
                        tr.delete(textEnd, range.to);
                    }
                    if (textStart > range.from) {
                        tr.delete(range.from + startSpaces, textStart);
                    }
                    markEnd = range.from + startSpaces + captureGroup.length;
                    tr.addMark(range.from + startSpaces, markEnd, config.type.create(attributes || {}));
                    tr.removeStoredMark(config.type);
                }
            },
        });
    }

    /**
     * Build an input rule that adds a node when the
     * matched text is typed into it.
     */
    function nodeInputRule(config) {
        return new InputRule({
            find: config.find,
            handler: ({ state, range, match }) => {
                const attributes = callOrReturn(config.getAttributes, undefined, match) || {};
                const { tr } = state;
                const start = range.from;
                let end = range.to;
                if (match[1]) {
                    const offset = match[0].lastIndexOf(match[1]);
                    let matchStart = start + offset;
                    if (matchStart > end) {
                        matchStart = end;
                    }
                    else {
                        end = matchStart + match[1].length;
                    }
                    // insert last typed character
                    const lastChar = match[0][match[0].length - 1];
                    tr.insertText(lastChar, start + match[0].length - 1);
                    // insert node from input rule
                    tr.replaceWith(matchStart, end, config.type.create(attributes));
                }
                else if (match[0]) {
                    tr.replaceWith(start, end, config.type.create(attributes));
                }
            },
        });
    }

    /**
     * Build an input rule that changes the type of a textblock when the
     * matched text is typed into it. When using a regular expresion you’ll
     * probably want the regexp to start with `^`, so that the pattern can
     * only occur at the start of a textblock.
     */
    function textblockTypeInputRule(config) {
        return new InputRule({
            find: config.find,
            handler: ({ state, range, match }) => {
                const $start = state.doc.resolve(range.from);
                const attributes = callOrReturn(config.getAttributes, undefined, match) || {};
                if (!$start.node(-1).canReplaceWith($start.index(-1), $start.indexAfter(-1), config.type)) {
                    return null;
                }
                state.tr
                    .delete(range.from, range.to)
                    .setBlockType(range.from, range.from, config.type, attributes);
            },
        });
    }

    /**
     * Build an input rule for automatically wrapping a textblock when a
     * given string is typed. When using a regular expresion you’ll
     * probably want the regexp to start with `^`, so that the pattern can
     * only occur at the start of a textblock.
     *
     * `type` is the type of node to wrap in.
     *
     * By default, if there’s a node with the same type above the newly
     * wrapped node, the rule will try to join those
     * two nodes. You can pass a join predicate, which takes a regular
     * expression match and the node before the wrapped node, and can
     * return a boolean to indicate whether a join should happen.
     */
    function wrappingInputRule(config) {
        return new InputRule({
            find: config.find,
            handler: ({ state, range, match }) => {
                const attributes = callOrReturn(config.getAttributes, undefined, match) || {};
                const tr = state.tr.delete(range.from, range.to);
                const $start = tr.doc.resolve(range.from);
                const blockRange = $start.blockRange();
                const wrapping = blockRange && findWrapping(blockRange, config.type, attributes);
                if (!wrapping) {
                    return null;
                }
                tr.wrap(blockRange, wrapping);
                const before = tr.doc.resolve(range.from - 1).nodeBefore;
                if (before
                    && before.type === config.type
                    && canJoin(tr.doc, range.from - 1)
                    && (!config.joinPredicate || config.joinPredicate(match, before))) {
                    tr.join(range.from - 1);
                }
            },
        });
    }

    class Mark$1 {
        constructor(config = {}) {
            this.type = 'mark';
            this.name = 'mark';
            this.parent = null;
            this.child = null;
            this.config = {
                name: this.name,
                defaultOptions: {},
            };
            this.config = {
                ...this.config,
                ...config,
            };
            this.name = this.config.name;
            if (config.defaultOptions) {
                console.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${this.name}".`);
            }
            // TODO: remove `addOptions` fallback
            this.options = this.config.defaultOptions;
            if (this.config.addOptions) {
                this.options = callOrReturn(getExtensionField(this, 'addOptions', {
                    name: this.name,
                }));
            }
            this.storage = callOrReturn(getExtensionField(this, 'addStorage', {
                name: this.name,
                options: this.options,
            })) || {};
        }
        static create(config = {}) {
            return new Mark$1(config);
        }
        configure(options = {}) {
            // return a new instance so we can use the same extension
            // with different calls of `configure`
            const extension = this.extend();
            extension.options = mergeDeep(this.options, options);
            extension.storage = callOrReturn(getExtensionField(extension, 'addStorage', {
                name: extension.name,
                options: extension.options,
            }));
            return extension;
        }
        extend(extendedConfig = {}) {
            const extension = new Mark$1(extendedConfig);
            extension.parent = this;
            this.child = extension;
            extension.name = extendedConfig.name
                ? extendedConfig.name
                : extension.parent.name;
            if (extendedConfig.defaultOptions) {
                console.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${extension.name}".`);
            }
            extension.options = callOrReturn(getExtensionField(extension, 'addOptions', {
                name: extension.name,
            }));
            extension.storage = callOrReturn(getExtensionField(extension, 'addStorage', {
                name: extension.name,
                options: extension.options,
            }));
            return extension;
        }
        static handleExit({ editor, mark, }) {
            const { tr } = editor.state;
            const currentPos = editor.state.selection.$from;
            const isAtEnd = currentPos.pos === currentPos.end();
            if (isAtEnd) {
                const currentMarks = currentPos.marks();
                const isInMark = !!currentMarks.find(m => (m === null || m === void 0 ? void 0 : m.type.name) === mark.name);
                if (!isInMark) {
                    return false;
                }
                const removeMark = currentMarks.find(m => (m === null || m === void 0 ? void 0 : m.type.name) === mark.name);
                if (removeMark) {
                    tr.removeStoredMark(removeMark);
                }
                tr.insertText(' ', currentPos.pos);
                editor.view.dispatch(tr);
                return true;
            }
            return false;
        }
    }

    class Node$1 {
        constructor(config = {}) {
            this.type = 'node';
            this.name = 'node';
            this.parent = null;
            this.child = null;
            this.config = {
                name: this.name,
                defaultOptions: {},
            };
            this.config = {
                ...this.config,
                ...config,
            };
            this.name = this.config.name;
            if (config.defaultOptions) {
                console.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${this.name}".`);
            }
            // TODO: remove `addOptions` fallback
            this.options = this.config.defaultOptions;
            if (this.config.addOptions) {
                this.options = callOrReturn(getExtensionField(this, 'addOptions', {
                    name: this.name,
                }));
            }
            this.storage = callOrReturn(getExtensionField(this, 'addStorage', {
                name: this.name,
                options: this.options,
            })) || {};
        }
        static create(config = {}) {
            return new Node$1(config);
        }
        configure(options = {}) {
            // return a new instance so we can use the same extension
            // with different calls of `configure`
            const extension = this.extend();
            extension.options = mergeDeep(this.options, options);
            extension.storage = callOrReturn(getExtensionField(extension, 'addStorage', {
                name: extension.name,
                options: extension.options,
            }));
            return extension;
        }
        extend(extendedConfig = {}) {
            const extension = new Node$1(extendedConfig);
            extension.parent = this;
            this.child = extension;
            extension.name = extendedConfig.name
                ? extendedConfig.name
                : extension.parent.name;
            if (extendedConfig.defaultOptions) {
                console.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${extension.name}".`);
            }
            extension.options = callOrReturn(getExtensionField(extension, 'addOptions', {
                name: extension.name,
            }));
            extension.storage = callOrReturn(getExtensionField(extension, 'addStorage', {
                name: extension.name,
                options: extension.options,
            }));
            return extension;
        }
    }

    /**
     * Build an paste rule that adds a mark when the
     * matched text is pasted into it.
     */
    function markPasteRule(config) {
        return new PasteRule({
            find: config.find,
            handler: ({ state, range, match }) => {
                const attributes = callOrReturn(config.getAttributes, undefined, match);
                if (attributes === false || attributes === null) {
                    return null;
                }
                const { tr } = state;
                const captureGroup = match[match.length - 1];
                const fullMatch = match[0];
                let markEnd = range.to;
                if (captureGroup) {
                    const startSpaces = fullMatch.search(/\S/);
                    const textStart = range.from + fullMatch.indexOf(captureGroup);
                    const textEnd = textStart + captureGroup.length;
                    const excludedMarks = getMarksBetween(range.from, range.to, state.doc)
                        .filter(item => {
                        // @ts-ignore
                        const excluded = item.mark.type.excluded;
                        return excluded.find(type => type === config.type && type !== item.mark.type);
                    })
                        .filter(item => item.to > textStart);
                    if (excludedMarks.length) {
                        return null;
                    }
                    if (textEnd < range.to) {
                        tr.delete(textEnd, range.to);
                    }
                    if (textStart > range.from) {
                        tr.delete(range.from + startSpaces, textStart);
                    }
                    markEnd = range.from + startSpaces + captureGroup.length;
                    tr.addMark(range.from + startSpaces, markEnd, config.type.create(attributes || {}));
                    tr.removeStoredMark(config.type);
                }
            },
        });
    }

    const inputRegex = /^\s*>\s$/;
    const Blockquote = Node$1.create({
        name: 'blockquote',
        addOptions() {
            return {
                HTMLAttributes: {},
            };
        },
        content: 'block+',
        group: 'block',
        defining: true,
        parseHTML() {
            return [
                { tag: 'blockquote' },
            ];
        },
        renderHTML({ HTMLAttributes }) {
            return ['blockquote', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];
        },
        addCommands() {
            return {
                setBlockquote: () => ({ commands }) => {
                    return commands.wrapIn(this.name);
                },
                toggleBlockquote: () => ({ commands }) => {
                    return commands.toggleWrap(this.name);
                },
                unsetBlockquote: () => ({ commands }) => {
                    return commands.lift(this.name);
                },
            };
        },
        addKeyboardShortcuts() {
            return {
                'Mod-Shift-b': () => this.editor.commands.toggleBlockquote(),
            };
        },
        addInputRules() {
            return [
                wrappingInputRule({
                    find: inputRegex,
                    type: this.type,
                }),
            ];
        },
    });

    const starInputRegex = /(?:^|\s)((?:\*\*)((?:[^*]+))(?:\*\*))$/;
    const starPasteRegex = /(?:^|\s)((?:\*\*)((?:[^*]+))(?:\*\*))/g;
    const underscoreInputRegex = /(?:^|\s)((?:__)((?:[^__]+))(?:__))$/;
    const underscorePasteRegex = /(?:^|\s)((?:__)((?:[^__]+))(?:__))/g;
    const Bold = Mark$1.create({
        name: 'bold',
        addOptions() {
            return {
                HTMLAttributes: {},
            };
        },
        parseHTML() {
            return [
                {
                    tag: 'strong',
                },
                {
                    tag: 'b',
                    getAttrs: node => node.style.fontWeight !== 'normal' && null,
                },
                {
                    style: 'font-weight',
                    getAttrs: value => /^(bold(er)?|[5-9]\d{2,})$/.test(value) && null,
                },
            ];
        },
        renderHTML({ HTMLAttributes }) {
            return ['strong', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];
        },
        addCommands() {
            return {
                setBold: () => ({ commands }) => {
                    return commands.setMark(this.name);
                },
                toggleBold: () => ({ commands }) => {
                    return commands.toggleMark(this.name);
                },
                unsetBold: () => ({ commands }) => {
                    return commands.unsetMark(this.name);
                },
            };
        },
        addKeyboardShortcuts() {
            return {
                'Mod-b': () => this.editor.commands.toggleBold(),
                'Mod-B': () => this.editor.commands.toggleBold(),
            };
        },
        addInputRules() {
            return [
                markInputRule({
                    find: starInputRegex,
                    type: this.type,
                }),
                markInputRule({
                    find: underscoreInputRegex,
                    type: this.type,
                }),
            ];
        },
        addPasteRules() {
            return [
                markPasteRule({
                    find: starPasteRegex,
                    type: this.type,
                }),
                markPasteRule({
                    find: underscorePasteRegex,
                    type: this.type,
                }),
            ];
        },
    });

    const inputRegex$1 = /^\s*([-+*])\s$/;
    const BulletList = Node$1.create({
        name: 'bulletList',
        addOptions() {
            return {
                itemTypeName: 'listItem',
                HTMLAttributes: {},
            };
        },
        group: 'block list',
        content() {
            return `${this.options.itemTypeName}+`;
        },
        parseHTML() {
            return [
                { tag: 'ul' },
            ];
        },
        renderHTML({ HTMLAttributes }) {
            return ['ul', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];
        },
        addCommands() {
            return {
                toggleBulletList: () => ({ commands }) => {
                    return commands.toggleList(this.name, this.options.itemTypeName);
                },
            };
        },
        addKeyboardShortcuts() {
            return {
                'Mod-Shift-8': () => this.editor.commands.toggleBulletList(),
            };
        },
        addInputRules() {
            return [
                wrappingInputRule({
                    find: inputRegex$1,
                    type: this.type,
                }),
            ];
        },
    });

    const inputRegex$2 = /(?:^|\s)((?:`)((?:[^`]+))(?:`))$/;
    const pasteRegex = /(?:^|\s)((?:`)((?:[^`]+))(?:`))/g;
    const Code = Mark$1.create({
        name: 'code',
        addOptions() {
            return {
                HTMLAttributes: {},
            };
        },
        excludes: '_',
        code: true,
        exitable: true,
        parseHTML() {
            return [
                { tag: 'code' },
            ];
        },
        renderHTML({ HTMLAttributes }) {
            return ['code', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];
        },
        addCommands() {
            return {
                setCode: () => ({ commands }) => {
                    return commands.setMark(this.name);
                },
                toggleCode: () => ({ commands }) => {
                    return commands.toggleMark(this.name);
                },
                unsetCode: () => ({ commands }) => {
                    return commands.unsetMark(this.name);
                },
            };
        },
        addKeyboardShortcuts() {
            return {
                'Mod-e': () => this.editor.commands.toggleCode(),
            };
        },
        addInputRules() {
            return [
                markInputRule({
                    find: inputRegex$2,
                    type: this.type,
                }),
            ];
        },
        addPasteRules() {
            return [
                markPasteRule({
                    find: pasteRegex,
                    type: this.type,
                }),
            ];
        },
    });

    const backtickInputRegex = /^```([a-z]+)?[\s\n]$/;
    const tildeInputRegex = /^~~~([a-z]+)?[\s\n]$/;
    const CodeBlock = Node$1.create({
        name: 'codeBlock',
        addOptions() {
            return {
                languageClassPrefix: 'language-',
                exitOnTripleEnter: true,
                exitOnArrowDown: true,
                HTMLAttributes: {},
            };
        },
        content: 'text*',
        marks: '',
        group: 'block',
        code: true,
        defining: true,
        addAttributes() {
            return {
                language: {
                    default: null,
                    parseHTML: element => {
                        var _a;
                        const { languageClassPrefix } = this.options;
                        const classNames = [...((_a = element.firstElementChild) === null || _a === void 0 ? void 0 : _a.classList) || []];
                        const languages = classNames
                            .filter(className => className.startsWith(languageClassPrefix))
                            .map(className => className.replace(languageClassPrefix, ''));
                        const language = languages[0];
                        if (!language) {
                            return null;
                        }
                        return language;
                    },
                    rendered: false,
                },
            };
        },
        parseHTML() {
            return [
                {
                    tag: 'pre',
                    preserveWhitespace: 'full',
                },
            ];
        },
        renderHTML({ node, HTMLAttributes }) {
            return [
                'pre',
                mergeAttributes(this.options.HTMLAttributes, HTMLAttributes),
                [
                    'code',
                    {
                        class: node.attrs.language
                            ? this.options.languageClassPrefix + node.attrs.language
                            : null,
                    },
                    0,
                ],
            ];
        },
        addCommands() {
            return {
                setCodeBlock: attributes => ({ commands }) => {
                    return commands.setNode(this.name, attributes);
                },
                toggleCodeBlock: attributes => ({ commands }) => {
                    return commands.toggleNode(this.name, 'paragraph', attributes);
                },
            };
        },
        addKeyboardShortcuts() {
            return {
                'Mod-Alt-c': () => this.editor.commands.toggleCodeBlock(),
                // remove code block when at start of document or code block is empty
                Backspace: () => {
                    const { empty, $anchor } = this.editor.state.selection;
                    const isAtStart = $anchor.pos === 1;
                    if (!empty || $anchor.parent.type.name !== this.name) {
                        return false;
                    }
                    if (isAtStart || !$anchor.parent.textContent.length) {
                        return this.editor.commands.clearNodes();
                    }
                    return false;
                },
                // exit node on triple enter
                Enter: ({ editor }) => {
                    if (!this.options.exitOnTripleEnter) {
                        return false;
                    }
                    const { state } = editor;
                    const { selection } = state;
                    const { $from, empty } = selection;
                    if (!empty || $from.parent.type !== this.type) {
                        return false;
                    }
                    const isAtEnd = $from.parentOffset === $from.parent.nodeSize - 2;
                    const endsWithDoubleNewline = $from.parent.textContent.endsWith('\n\n');
                    if (!isAtEnd || !endsWithDoubleNewline) {
                        return false;
                    }
                    return editor
                        .chain()
                        .command(({ tr }) => {
                        tr.delete($from.pos - 2, $from.pos);
                        return true;
                    })
                        .exitCode()
                        .run();
                },
                // exit node on arrow down
                ArrowDown: ({ editor }) => {
                    if (!this.options.exitOnArrowDown) {
                        return false;
                    }
                    const { state } = editor;
                    const { selection, doc } = state;
                    const { $from, empty } = selection;
                    if (!empty || $from.parent.type !== this.type) {
                        return false;
                    }
                    const isAtEnd = $from.parentOffset === $from.parent.nodeSize - 2;
                    if (!isAtEnd) {
                        return false;
                    }
                    const after = $from.after();
                    if (after === undefined) {
                        return false;
                    }
                    const nodeAfter = doc.nodeAt(after);
                    if (nodeAfter) {
                        return false;
                    }
                    return editor.commands.exitCode();
                },
            };
        },
        addInputRules() {
            return [
                textblockTypeInputRule({
                    find: backtickInputRegex,
                    type: this.type,
                    getAttributes: match => ({
                        language: match[1],
                    }),
                }),
                textblockTypeInputRule({
                    find: tildeInputRegex,
                    type: this.type,
                    getAttributes: match => ({
                        language: match[1],
                    }),
                }),
            ];
        },
        addProseMirrorPlugins() {
            return [
                // this plugin creates a code block for pasted content from VS Code
                // we can also detect the copied code language
                new Plugin({
                    key: new PluginKey('codeBlockVSCodeHandler'),
                    props: {
                        handlePaste: (view, event) => {
                            if (!event.clipboardData) {
                                return false;
                            }
                            // don’t create a new code block within code blocks
                            if (this.editor.isActive(this.type.name)) {
                                return false;
                            }
                            const text = event.clipboardData.getData('text/plain');
                            const vscode = event.clipboardData.getData('vscode-editor-data');
                            const vscodeData = vscode
                                ? JSON.parse(vscode)
                                : undefined;
                            const language = vscodeData === null || vscodeData === void 0 ? void 0 : vscodeData.mode;
                            if (!text || !language) {
                                return false;
                            }
                            const { tr } = view.state;
                            // create an empty code block
                            tr.replaceSelectionWith(this.type.create({ language }));
                            // put cursor inside the newly created code block
                            tr.setSelection(TextSelection.near(tr.doc.resolve(Math.max(0, tr.selection.from - 2))));
                            // add text to code block
                            // strip carriage return chars from text pasted as code
                            // see: https://github.com/ProseMirror/prosemirror-view/commit/a50a6bcceb4ce52ac8fcc6162488d8875613aacd
                            tr.insertText(text.replace(/\r\n?/g, '\n'));
                            // store meta information
                            // this is useful for other plugins that depends on the paste event
                            // like the paste rule plugin
                            tr.setMeta('paste', true);
                            view.dispatch(tr);
                            return true;
                        },
                    },
                }),
            ];
        },
    });

    const Document = Node$1.create({
        name: 'doc',
        topNode: true,
        content: 'block+',
    });

    /**
    Create a plugin that, when added to a ProseMirror instance,
    causes a decoration to show up at the drop position when something
    is dragged over the editor.

    Nodes may add a `disableDropCursor` property to their spec to
    control the showing of a drop cursor inside them. This may be a
    boolean or a function, which will be called with a view and a
    position, and should return a boolean.
    */
    function dropCursor(options = {}) {
        return new Plugin({
            view(editorView) { return new DropCursorView(editorView, options); }
        });
    }
    class DropCursorView {
        constructor(editorView, options) {
            this.editorView = editorView;
            this.cursorPos = null;
            this.element = null;
            this.timeout = -1;
            this.width = options.width || 1;
            this.color = options.color || "black";
            this.class = options.class;
            this.handlers = ["dragover", "dragend", "drop", "dragleave"].map(name => {
                let handler = (e) => { this[name](e); };
                editorView.dom.addEventListener(name, handler);
                return { name, handler };
            });
        }
        destroy() {
            this.handlers.forEach(({ name, handler }) => this.editorView.dom.removeEventListener(name, handler));
        }
        update(editorView, prevState) {
            if (this.cursorPos != null && prevState.doc != editorView.state.doc) {
                if (this.cursorPos > editorView.state.doc.content.size)
                    this.setCursor(null);
                else
                    this.updateOverlay();
            }
        }
        setCursor(pos) {
            if (pos == this.cursorPos)
                return;
            this.cursorPos = pos;
            if (pos == null) {
                this.element.parentNode.removeChild(this.element);
                this.element = null;
            }
            else {
                this.updateOverlay();
            }
        }
        updateOverlay() {
            let $pos = this.editorView.state.doc.resolve(this.cursorPos), rect;
            if (!$pos.parent.inlineContent) {
                let before = $pos.nodeBefore, after = $pos.nodeAfter;
                if (before || after) {
                    let nodeRect = this.editorView.nodeDOM(this.cursorPos - (before ? before.nodeSize : 0))
                        .getBoundingClientRect();
                    let top = before ? nodeRect.bottom : nodeRect.top;
                    if (before && after)
                        top = (top + this.editorView.nodeDOM(this.cursorPos).getBoundingClientRect().top) / 2;
                    rect = { left: nodeRect.left, right: nodeRect.right, top: top - this.width / 2, bottom: top + this.width / 2 };
                }
            }
            if (!rect) {
                let coords = this.editorView.coordsAtPos(this.cursorPos);
                rect = { left: coords.left - this.width / 2, right: coords.left + this.width / 2, top: coords.top, bottom: coords.bottom };
            }
            let parent = this.editorView.dom.offsetParent;
            if (!this.element) {
                this.element = parent.appendChild(document.createElement("div"));
                if (this.class)
                    this.element.className = this.class;
                this.element.style.cssText = "position: absolute; z-index: 50; pointer-events: none; background-color: " + this.color;
            }
            let parentLeft, parentTop;
            if (!parent || parent == document.body && getComputedStyle(parent).position == "static") {
                parentLeft = -pageXOffset;
                parentTop = -pageYOffset;
            }
            else {
                let rect = parent.getBoundingClientRect();
                parentLeft = rect.left - parent.scrollLeft;
                parentTop = rect.top - parent.scrollTop;
            }
            this.element.style.left = (rect.left - parentLeft) + "px";
            this.element.style.top = (rect.top - parentTop) + "px";
            this.element.style.width = (rect.right - rect.left) + "px";
            this.element.style.height = (rect.bottom - rect.top) + "px";
        }
        scheduleRemoval(timeout) {
            clearTimeout(this.timeout);
            this.timeout = setTimeout(() => this.setCursor(null), timeout);
        }
        dragover(event) {
            if (!this.editorView.editable)
                return;
            let pos = this.editorView.posAtCoords({ left: event.clientX, top: event.clientY });
            let node = pos && pos.inside >= 0 && this.editorView.state.doc.nodeAt(pos.inside);
            let disableDropCursor = node && node.type.spec.disableDropCursor;
            let disabled = typeof disableDropCursor == "function" ? disableDropCursor(this.editorView, pos) : disableDropCursor;
            if (pos && !disabled) {
                let target = pos.pos;
                if (this.editorView.dragging && this.editorView.dragging.slice) {
                    target = dropPoint(this.editorView.state.doc, target, this.editorView.dragging.slice);
                    if (target == null)
                        return this.setCursor(null);
                }
                this.setCursor(target);
                this.scheduleRemoval(5000);
            }
        }
        dragend() {
            this.scheduleRemoval(20);
        }
        drop() {
            this.scheduleRemoval(20);
        }
        dragleave(event) {
            if (event.target == this.editorView.dom || !this.editorView.dom.contains(event.relatedTarget))
                this.setCursor(null);
        }
    }

    const Dropcursor = Extension.create({
        name: 'dropCursor',
        addOptions() {
            return {
                color: 'currentColor',
                width: 1,
                class: undefined,
            };
        },
        addProseMirrorPlugins() {
            return [
                dropCursor(this.options),
            ];
        },
    });

    /**
    Gap cursor selections are represented using this class. Its
    `$anchor` and `$head` properties both point at the cursor position.
    */
    class GapCursor extends Selection {
        /**
        Create a gap cursor.
        */
        constructor($pos) {
            super($pos, $pos);
        }
        map(doc, mapping) {
            let $pos = doc.resolve(mapping.map(this.head));
            return GapCursor.valid($pos) ? new GapCursor($pos) : Selection.near($pos);
        }
        content() { return Slice.empty; }
        eq(other) {
            return other instanceof GapCursor && other.head == this.head;
        }
        toJSON() {
            return { type: "gapcursor", pos: this.head };
        }
        /**
        @internal
        */
        static fromJSON(doc, json) {
            if (typeof json.pos != "number")
                throw new RangeError("Invalid input for GapCursor.fromJSON");
            return new GapCursor(doc.resolve(json.pos));
        }
        /**
        @internal
        */
        getBookmark() { return new GapBookmark(this.anchor); }
        /**
        @internal
        */
        static valid($pos) {
            let parent = $pos.parent;
            if (parent.isTextblock || !closedBefore($pos) || !closedAfter($pos))
                return false;
            let override = parent.type.spec.allowGapCursor;
            if (override != null)
                return override;
            let deflt = parent.contentMatchAt($pos.index()).defaultType;
            return deflt && deflt.isTextblock;
        }
        /**
        @internal
        */
        static findGapCursorFrom($pos, dir, mustMove = false) {
            search: for (;;) {
                if (!mustMove && GapCursor.valid($pos))
                    return $pos;
                let pos = $pos.pos, next = null;
                // Scan up from this position
                for (let d = $pos.depth;; d--) {
                    let parent = $pos.node(d);
                    if (dir > 0 ? $pos.indexAfter(d) < parent.childCount : $pos.index(d) > 0) {
                        next = parent.child(dir > 0 ? $pos.indexAfter(d) : $pos.index(d) - 1);
                        break;
                    }
                    else if (d == 0) {
                        return null;
                    }
                    pos += dir;
                    let $cur = $pos.doc.resolve(pos);
                    if (GapCursor.valid($cur))
                        return $cur;
                }
                // And then down into the next node
                for (;;) {
                    let inside = dir > 0 ? next.firstChild : next.lastChild;
                    if (!inside) {
                        if (next.isAtom && !next.isText && !NodeSelection.isSelectable(next)) {
                            $pos = $pos.doc.resolve(pos + next.nodeSize * dir);
                            mustMove = false;
                            continue search;
                        }
                        break;
                    }
                    next = inside;
                    pos += dir;
                    let $cur = $pos.doc.resolve(pos);
                    if (GapCursor.valid($cur))
                        return $cur;
                }
                return null;
            }
        }
    }
    GapCursor.prototype.visible = false;
    GapCursor.findFrom = GapCursor.findGapCursorFrom;
    Selection.jsonID("gapcursor", GapCursor);
    class GapBookmark {
        constructor(pos) {
            this.pos = pos;
        }
        map(mapping) {
            return new GapBookmark(mapping.map(this.pos));
        }
        resolve(doc) {
            let $pos = doc.resolve(this.pos);
            return GapCursor.valid($pos) ? new GapCursor($pos) : Selection.near($pos);
        }
    }
    function closedBefore($pos) {
        for (let d = $pos.depth; d >= 0; d--) {
            let index = $pos.index(d), parent = $pos.node(d);
            // At the start of this parent, look at next one
            if (index == 0) {
                if (parent.type.spec.isolating)
                    return true;
                continue;
            }
            // See if the node before (or its first ancestor) is closed
            for (let before = parent.child(index - 1);; before = before.lastChild) {
                if ((before.childCount == 0 && !before.inlineContent) || before.isAtom || before.type.spec.isolating)
                    return true;
                if (before.inlineContent)
                    return false;
            }
        }
        // Hit start of document
        return true;
    }
    function closedAfter($pos) {
        for (let d = $pos.depth; d >= 0; d--) {
            let index = $pos.indexAfter(d), parent = $pos.node(d);
            if (index == parent.childCount) {
                if (parent.type.spec.isolating)
                    return true;
                continue;
            }
            for (let after = parent.child(index);; after = after.firstChild) {
                if ((after.childCount == 0 && !after.inlineContent) || after.isAtom || after.type.spec.isolating)
                    return true;
                if (after.inlineContent)
                    return false;
            }
        }
        return true;
    }

    /**
    Create a gap cursor plugin. When enabled, this will capture clicks
    near and arrow-key-motion past places that don't have a normally
    selectable position nearby, and create a gap cursor selection for
    them. The cursor is drawn as an element with class
    `ProseMirror-gapcursor`. You can either include
    `style/gapcursor.css` from the package's directory or add your own
    styles to make it visible.
    */
    function gapCursor() {
        return new Plugin({
            props: {
                decorations: drawGapCursor,
                createSelectionBetween(_view, $anchor, $head) {
                    return $anchor.pos == $head.pos && GapCursor.valid($head) ? new GapCursor($head) : null;
                },
                handleClick,
                handleKeyDown,
                handleDOMEvents: { beforeinput: beforeinput }
            }
        });
    }
    const handleKeyDown = keydownHandler({
        "ArrowLeft": arrow("horiz", -1),
        "ArrowRight": arrow("horiz", 1),
        "ArrowUp": arrow("vert", -1),
        "ArrowDown": arrow("vert", 1)
    });
    function arrow(axis, dir) {
        const dirStr = axis == "vert" ? (dir > 0 ? "down" : "up") : (dir > 0 ? "right" : "left");
        return function (state, dispatch, view) {
            let sel = state.selection;
            let $start = dir > 0 ? sel.$to : sel.$from, mustMove = sel.empty;
            if (sel instanceof TextSelection) {
                if (!view.endOfTextblock(dirStr) || $start.depth == 0)
                    return false;
                mustMove = false;
                $start = state.doc.resolve(dir > 0 ? $start.after() : $start.before());
            }
            let $found = GapCursor.findGapCursorFrom($start, dir, mustMove);
            if (!$found)
                return false;
            if (dispatch)
                dispatch(state.tr.setSelection(new GapCursor($found)));
            return true;
        };
    }
    function handleClick(view, pos, event) {
        if (!view || !view.editable)
            return false;
        let $pos = view.state.doc.resolve(pos);
        if (!GapCursor.valid($pos))
            return false;
        let clickPos = view.posAtCoords({ left: event.clientX, top: event.clientY });
        if (clickPos && clickPos.inside > -1 && NodeSelection.isSelectable(view.state.doc.nodeAt(clickPos.inside)))
            return false;
        view.dispatch(view.state.tr.setSelection(new GapCursor($pos)));
        return true;
    }
    // This is a hack that, when a composition starts while a gap cursor
    // is active, quickly creates an inline context for the composition to
    // happen in, to avoid it being aborted by the DOM selection being
    // moved into a valid position.
    function beforeinput(view, event) {
        if (event.inputType != "insertCompositionText" || !(view.state.selection instanceof GapCursor))
            return false;
        let { $from } = view.state.selection;
        let insert = $from.parent.contentMatchAt($from.index()).findWrapping(view.state.schema.nodes.text);
        if (!insert)
            return false;
        let frag = Fragment.empty;
        for (let i = insert.length - 1; i >= 0; i--)
            frag = Fragment.from(insert[i].createAndFill(null, frag));
        let tr = view.state.tr.replace($from.pos, $from.pos, new Slice(frag, 0, 0));
        tr.setSelection(TextSelection.near(tr.doc.resolve($from.pos + 1)));
        view.dispatch(tr);
        return false;
    }
    function drawGapCursor(state) {
        if (!(state.selection instanceof GapCursor))
            return null;
        let node = document.createElement("div");
        node.className = "ProseMirror-gapcursor";
        return DecorationSet.create(state.doc, [Decoration.widget(state.selection.head, node, { key: "gapcursor" })]);
    }

    const Gapcursor = Extension.create({
        name: 'gapCursor',
        addProseMirrorPlugins() {
            return [
                gapCursor(),
            ];
        },
        extendNodeSchema(extension) {
            var _a;
            const context = {
                name: extension.name,
                options: extension.options,
                storage: extension.storage,
            };
            return {
                allowGapCursor: (_a = callOrReturn(getExtensionField(extension, 'allowGapCursor', context))) !== null && _a !== void 0 ? _a : null,
            };
        },
    });

    const HardBreak = Node$1.create({
        name: 'hardBreak',
        addOptions() {
            return {
                keepMarks: true,
                HTMLAttributes: {},
            };
        },
        inline: true,
        group: 'inline',
        selectable: false,
        parseHTML() {
            return [
                { tag: 'br' },
            ];
        },
        renderHTML({ HTMLAttributes }) {
            return ['br', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes)];
        },
        renderText() {
            return '\n';
        },
        addCommands() {
            return {
                setHardBreak: () => ({ commands, chain, state, editor, }) => {
                    return commands.first([
                        () => commands.exitCode(),
                        () => commands.command(() => {
                            const { selection, storedMarks } = state;
                            if (selection.$from.parent.type.spec.isolating) {
                                return false;
                            }
                            const { keepMarks } = this.options;
                            const { splittableMarks } = editor.extensionManager;
                            const marks = storedMarks
                                || (selection.$to.parentOffset && selection.$from.marks());
                            return chain()
                                .insertContent({ type: this.name })
                                .command(({ tr, dispatch }) => {
                                if (dispatch && marks && keepMarks) {
                                    const filteredMarks = marks
                                        .filter(mark => splittableMarks.includes(mark.type.name));
                                    tr.ensureMarks(filteredMarks);
                                }
                                return true;
                            })
                                .run();
                        }),
                    ]);
                },
            };
        },
        addKeyboardShortcuts() {
            return {
                'Mod-Enter': () => this.editor.commands.setHardBreak(),
                'Shift-Enter': () => this.editor.commands.setHardBreak(),
            };
        },
    });

    const Heading = Node$1.create({
        name: 'heading',
        addOptions() {
            return {
                levels: [1, 2, 3, 4, 5, 6],
                HTMLAttributes: {},
            };
        },
        content: 'inline*',
        group: 'block',
        defining: true,
        addAttributes() {
            return {
                level: {
                    default: 1,
                    rendered: false,
                },
            };
        },
        parseHTML() {
            return this.options.levels
                .map((level) => ({
                tag: `h${level}`,
                attrs: { level },
            }));
        },
        renderHTML({ node, HTMLAttributes }) {
            const hasLevel = this.options.levels.includes(node.attrs.level);
            const level = hasLevel
                ? node.attrs.level
                : this.options.levels[0];
            return [`h${level}`, mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];
        },
        addCommands() {
            return {
                setHeading: attributes => ({ commands }) => {
                    if (!this.options.levels.includes(attributes.level)) {
                        return false;
                    }
                    return commands.setNode(this.name, attributes);
                },
                toggleHeading: attributes => ({ commands }) => {
                    if (!this.options.levels.includes(attributes.level)) {
                        return false;
                    }
                    return commands.toggleNode(this.name, 'paragraph', attributes);
                },
            };
        },
        addKeyboardShortcuts() {
            return this.options.levels.reduce((items, level) => ({
                ...items,
                ...{
                    [`Mod-Alt-${level}`]: () => this.editor.commands.toggleHeading({ level }),
                },
            }), {});
        },
        addInputRules() {
            return this.options.levels.map(level => {
                return textblockTypeInputRule({
                    find: new RegExp(`^(#{1,${level}})\\s$`),
                    type: this.type,
                    getAttributes: {
                        level,
                    },
                });
            });
        },
    });

    var GOOD_LEAF_SIZE = 200;

    // :: class<T> A rope sequence is a persistent sequence data structure
    // that supports appending, prepending, and slicing without doing a
    // full copy. It is represented as a mostly-balanced tree.
    var RopeSequence = function RopeSequence () {};

    RopeSequence.prototype.append = function append (other) {
      if (!other.length) { return this }
      other = RopeSequence.from(other);

      return (!this.length && other) ||
        (other.length < GOOD_LEAF_SIZE && this.leafAppend(other)) ||
        (this.length < GOOD_LEAF_SIZE && other.leafPrepend(this)) ||
        this.appendInner(other)
    };

    // :: (union<[T], RopeSequence<T>>) → RopeSequence<T>
    // Prepend an array or other rope to this one, returning a new rope.
    RopeSequence.prototype.prepend = function prepend (other) {
      if (!other.length) { return this }
      return RopeSequence.from(other).append(this)
    };

    RopeSequence.prototype.appendInner = function appendInner (other) {
      return new Append(this, other)
    };

    // :: (?number, ?number) → RopeSequence<T>
    // Create a rope repesenting a sub-sequence of this rope.
    RopeSequence.prototype.slice = function slice (from, to) {
        if ( from === void 0 ) from = 0;
        if ( to === void 0 ) to = this.length;

      if (from >= to) { return RopeSequence.empty }
      return this.sliceInner(Math.max(0, from), Math.min(this.length, to))
    };

    // :: (number) → T
    // Retrieve the element at the given position from this rope.
    RopeSequence.prototype.get = function get (i) {
      if (i < 0 || i >= this.length) { return undefined }
      return this.getInner(i)
    };

    // :: ((element: T, index: number) → ?bool, ?number, ?number)
    // Call the given function for each element between the given
    // indices. This tends to be more efficient than looping over the
    // indices and calling `get`, because it doesn't have to descend the
    // tree for every element.
    RopeSequence.prototype.forEach = function forEach (f, from, to) {
        if ( from === void 0 ) from = 0;
        if ( to === void 0 ) to = this.length;

      if (from <= to)
        { this.forEachInner(f, from, to, 0); }
      else
        { this.forEachInvertedInner(f, from, to, 0); }
    };

    // :: ((element: T, index: number) → U, ?number, ?number) → [U]
    // Map the given functions over the elements of the rope, producing
    // a flat array.
    RopeSequence.prototype.map = function map (f, from, to) {
        if ( from === void 0 ) from = 0;
        if ( to === void 0 ) to = this.length;

      var result = [];
      this.forEach(function (elt, i) { return result.push(f(elt, i)); }, from, to);
      return result
    };

    // :: (?union<[T], RopeSequence<T>>) → RopeSequence<T>
    // Create a rope representing the given array, or return the rope
    // itself if a rope was given.
    RopeSequence.from = function from (values) {
      if (values instanceof RopeSequence) { return values }
      return values && values.length ? new Leaf(values) : RopeSequence.empty
    };

    var Leaf = /*@__PURE__*/(function (RopeSequence) {
      function Leaf(values) {
        RopeSequence.call(this);
        this.values = values;
      }

      if ( RopeSequence ) Leaf.__proto__ = RopeSequence;
      Leaf.prototype = Object.create( RopeSequence && RopeSequence.prototype );
      Leaf.prototype.constructor = Leaf;

      var prototypeAccessors = { length: { configurable: true },depth: { configurable: true } };

      Leaf.prototype.flatten = function flatten () {
        return this.values
      };

      Leaf.prototype.sliceInner = function sliceInner (from, to) {
        if (from == 0 && to == this.length) { return this }
        return new Leaf(this.values.slice(from, to))
      };

      Leaf.prototype.getInner = function getInner (i) {
        return this.values[i]
      };

      Leaf.prototype.forEachInner = function forEachInner (f, from, to, start) {
        for (var i = from; i < to; i++)
          { if (f(this.values[i], start + i) === false) { return false } }
      };

      Leaf.prototype.forEachInvertedInner = function forEachInvertedInner (f, from, to, start) {
        for (var i = from - 1; i >= to; i--)
          { if (f(this.values[i], start + i) === false) { return false } }
      };

      Leaf.prototype.leafAppend = function leafAppend (other) {
        if (this.length + other.length <= GOOD_LEAF_SIZE)
          { return new Leaf(this.values.concat(other.flatten())) }
      };

      Leaf.prototype.leafPrepend = function leafPrepend (other) {
        if (this.length + other.length <= GOOD_LEAF_SIZE)
          { return new Leaf(other.flatten().concat(this.values)) }
      };

      prototypeAccessors.length.get = function () { return this.values.length };

      prototypeAccessors.depth.get = function () { return 0 };

      Object.defineProperties( Leaf.prototype, prototypeAccessors );

      return Leaf;
    }(RopeSequence));

    // :: RopeSequence
    // The empty rope sequence.
    RopeSequence.empty = new Leaf([]);

    var Append = /*@__PURE__*/(function (RopeSequence) {
      function Append(left, right) {
        RopeSequence.call(this);
        this.left = left;
        this.right = right;
        this.length = left.length + right.length;
        this.depth = Math.max(left.depth, right.depth) + 1;
      }

      if ( RopeSequence ) Append.__proto__ = RopeSequence;
      Append.prototype = Object.create( RopeSequence && RopeSequence.prototype );
      Append.prototype.constructor = Append;

      Append.prototype.flatten = function flatten () {
        return this.left.flatten().concat(this.right.flatten())
      };

      Append.prototype.getInner = function getInner (i) {
        return i < this.left.length ? this.left.get(i) : this.right.get(i - this.left.length)
      };

      Append.prototype.forEachInner = function forEachInner (f, from, to, start) {
        var leftLen = this.left.length;
        if (from < leftLen &&
            this.left.forEachInner(f, from, Math.min(to, leftLen), start) === false)
          { return false }
        if (to > leftLen &&
            this.right.forEachInner(f, Math.max(from - leftLen, 0), Math.min(this.length, to) - leftLen, start + leftLen) === false)
          { return false }
      };

      Append.prototype.forEachInvertedInner = function forEachInvertedInner (f, from, to, start) {
        var leftLen = this.left.length;
        if (from > leftLen &&
            this.right.forEachInvertedInner(f, from - leftLen, Math.max(to, leftLen) - leftLen, start + leftLen) === false)
          { return false }
        if (to < leftLen &&
            this.left.forEachInvertedInner(f, Math.min(from, leftLen), to, start) === false)
          { return false }
      };

      Append.prototype.sliceInner = function sliceInner (from, to) {
        if (from == 0 && to == this.length) { return this }
        var leftLen = this.left.length;
        if (to <= leftLen) { return this.left.slice(from, to) }
        if (from >= leftLen) { return this.right.slice(from - leftLen, to - leftLen) }
        return this.left.slice(from, leftLen).append(this.right.slice(0, to - leftLen))
      };

      Append.prototype.leafAppend = function leafAppend (other) {
        var inner = this.right.leafAppend(other);
        if (inner) { return new Append(this.left, inner) }
      };

      Append.prototype.leafPrepend = function leafPrepend (other) {
        var inner = this.left.leafPrepend(other);
        if (inner) { return new Append(inner, this.right) }
      };

      Append.prototype.appendInner = function appendInner (other) {
        if (this.left.depth >= Math.max(this.right.depth, other.depth) + 1)
          { return new Append(this.left, new Append(this.right, other)) }
        return new Append(this, other)
      };

      return Append;
    }(RopeSequence));

    var ropeSequence = RopeSequence;

    // ProseMirror's history isn't simply a way to roll back to a previous
    // state, because ProseMirror supports applying changes without adding
    // them to the history (for example during collaboration).
    //
    // To this end, each 'Branch' (one for the undo history and one for
    // the redo history) keeps an array of 'Items', which can optionally
    // hold a step (an actual undoable change), and always hold a position
    // map (which is needed to move changes below them to apply to the
    // current document).
    //
    // An item that has both a step and a selection bookmark is the start
    // of an 'event' — a group of changes that will be undone or redone at
    // once. (It stores only the bookmark, since that way we don't have to
    // provide a document until the selection is actually applied, which
    // is useful when compressing.)
    // Used to schedule history compression
    const max_empty_items = 500;
    class Branch {
        constructor(items, eventCount) {
            this.items = items;
            this.eventCount = eventCount;
        }
        // Pop the latest event off the branch's history and apply it
        // to a document transform.
        popEvent(state, preserveItems) {
            if (this.eventCount == 0)
                return null;
            let end = this.items.length;
            for (;; end--) {
                let next = this.items.get(end - 1);
                if (next.selection) {
                    --end;
                    break;
                }
            }
            let remap, mapFrom;
            if (preserveItems) {
                remap = this.remapping(end, this.items.length);
                mapFrom = remap.maps.length;
            }
            let transform = state.tr;
            let selection, remaining;
            let addAfter = [], addBefore = [];
            this.items.forEach((item, i) => {
                if (!item.step) {
                    if (!remap) {
                        remap = this.remapping(end, i + 1);
                        mapFrom = remap.maps.length;
                    }
                    mapFrom--;
                    addBefore.push(item);
                    return;
                }
                if (remap) {
                    addBefore.push(new Item(item.map));
                    let step = item.step.map(remap.slice(mapFrom)), map;
                    if (step && transform.maybeStep(step).doc) {
                        map = transform.mapping.maps[transform.mapping.maps.length - 1];
                        addAfter.push(new Item(map, undefined, undefined, addAfter.length + addBefore.length));
                    }
                    mapFrom--;
                    if (map)
                        remap.appendMap(map, mapFrom);
                }
                else {
                    transform.maybeStep(item.step);
                }
                if (item.selection) {
                    selection = remap ? item.selection.map(remap.slice(mapFrom)) : item.selection;
                    remaining = new Branch(this.items.slice(0, end).append(addBefore.reverse().concat(addAfter)), this.eventCount - 1);
                    return false;
                }
            }, this.items.length, 0);
            return { remaining: remaining, transform, selection: selection };
        }
        // Create a new branch with the given transform added.
        addTransform(transform, selection, histOptions, preserveItems) {
            let newItems = [], eventCount = this.eventCount;
            let oldItems = this.items, lastItem = !preserveItems && oldItems.length ? oldItems.get(oldItems.length - 1) : null;
            for (let i = 0; i < transform.steps.length; i++) {
                let step = transform.steps[i].invert(transform.docs[i]);
                let item = new Item(transform.mapping.maps[i], step, selection), merged;
                if (merged = lastItem && lastItem.merge(item)) {
                    item = merged;
                    if (i)
                        newItems.pop();
                    else
                        oldItems = oldItems.slice(0, oldItems.length - 1);
                }
                newItems.push(item);
                if (selection) {
                    eventCount++;
                    selection = undefined;
                }
                if (!preserveItems)
                    lastItem = item;
            }
            let overflow = eventCount - histOptions.depth;
            if (overflow > DEPTH_OVERFLOW) {
                oldItems = cutOffEvents(oldItems, overflow);
                eventCount -= overflow;
            }
            return new Branch(oldItems.append(newItems), eventCount);
        }
        remapping(from, to) {
            let maps = new Mapping;
            this.items.forEach((item, i) => {
                let mirrorPos = item.mirrorOffset != null && i - item.mirrorOffset >= from
                    ? maps.maps.length - item.mirrorOffset : undefined;
                maps.appendMap(item.map, mirrorPos);
            }, from, to);
            return maps;
        }
        addMaps(array) {
            if (this.eventCount == 0)
                return this;
            return new Branch(this.items.append(array.map(map => new Item(map))), this.eventCount);
        }
        // When the collab module receives remote changes, the history has
        // to know about those, so that it can adjust the steps that were
        // rebased on top of the remote changes, and include the position
        // maps for the remote changes in its array of items.
        rebased(rebasedTransform, rebasedCount) {
            if (!this.eventCount)
                return this;
            let rebasedItems = [], start = Math.max(0, this.items.length - rebasedCount);
            let mapping = rebasedTransform.mapping;
            let newUntil = rebasedTransform.steps.length;
            let eventCount = this.eventCount;
            this.items.forEach(item => { if (item.selection)
                eventCount--; }, start);
            let iRebased = rebasedCount;
            this.items.forEach(item => {
                let pos = mapping.getMirror(--iRebased);
                if (pos == null)
                    return;
                newUntil = Math.min(newUntil, pos);
                let map = mapping.maps[pos];
                if (item.step) {
                    let step = rebasedTransform.steps[pos].invert(rebasedTransform.docs[pos]);
                    let selection = item.selection && item.selection.map(mapping.slice(iRebased + 1, pos));
                    if (selection)
                        eventCount++;
                    rebasedItems.push(new Item(map, step, selection));
                }
                else {
                    rebasedItems.push(new Item(map));
                }
            }, start);
            let newMaps = [];
            for (let i = rebasedCount; i < newUntil; i++)
                newMaps.push(new Item(mapping.maps[i]));
            let items = this.items.slice(0, start).append(newMaps).append(rebasedItems);
            let branch = new Branch(items, eventCount);
            if (branch.emptyItemCount() > max_empty_items)
                branch = branch.compress(this.items.length - rebasedItems.length);
            return branch;
        }
        emptyItemCount() {
            let count = 0;
            this.items.forEach(item => { if (!item.step)
                count++; });
            return count;
        }
        // Compressing a branch means rewriting it to push the air (map-only
        // items) out. During collaboration, these naturally accumulate
        // because each remote change adds one. The `upto` argument is used
        // to ensure that only the items below a given level are compressed,
        // because `rebased` relies on a clean, untouched set of items in
        // order to associate old items with rebased steps.
        compress(upto = this.items.length) {
            let remap = this.remapping(0, upto), mapFrom = remap.maps.length;
            let items = [], events = 0;
            this.items.forEach((item, i) => {
                if (i >= upto) {
                    items.push(item);
                    if (item.selection)
                        events++;
                }
                else if (item.step) {
                    let step = item.step.map(remap.slice(mapFrom)), map = step && step.getMap();
                    mapFrom--;
                    if (map)
                        remap.appendMap(map, mapFrom);
                    if (step) {
                        let selection = item.selection && item.selection.map(remap.slice(mapFrom));
                        if (selection)
                            events++;
                        let newItem = new Item(map.invert(), step, selection), merged, last = items.length - 1;
                        if (merged = items.length && items[last].merge(newItem))
                            items[last] = merged;
                        else
                            items.push(newItem);
                    }
                }
                else if (item.map) {
                    mapFrom--;
                }
            }, this.items.length, 0);
            return new Branch(ropeSequence.from(items.reverse()), events);
        }
    }
    Branch.empty = new Branch(ropeSequence.empty, 0);
    function cutOffEvents(items, n) {
        let cutPoint;
        items.forEach((item, i) => {
            if (item.selection && (n-- == 0)) {
                cutPoint = i;
                return false;
            }
        });
        return items.slice(cutPoint);
    }
    class Item {
        constructor(
        // The (forward) step map for this item.
        map, 
        // The inverted step
        step, 
        // If this is non-null, this item is the start of a group, and
        // this selection is the starting selection for the group (the one
        // that was active before the first step was applied)
        selection, 
        // If this item is the inverse of a previous mapping on the stack,
        // this points at the inverse's offset
        mirrorOffset) {
            this.map = map;
            this.step = step;
            this.selection = selection;
            this.mirrorOffset = mirrorOffset;
        }
        merge(other) {
            if (this.step && other.step && !other.selection) {
                let step = other.step.merge(this.step);
                if (step)
                    return new Item(step.getMap().invert(), step, this.selection);
            }
        }
    }
    // The value of the state field that tracks undo/redo history for that
    // state. Will be stored in the plugin state when the history plugin
    // is active.
    class HistoryState {
        constructor(done, undone, prevRanges, prevTime) {
            this.done = done;
            this.undone = undone;
            this.prevRanges = prevRanges;
            this.prevTime = prevTime;
        }
    }
    const DEPTH_OVERFLOW = 20;
    // Record a transformation in undo history.
    function applyTransaction(history, state, tr, options) {
        let historyTr = tr.getMeta(historyKey), rebased;
        if (historyTr)
            return historyTr.historyState;
        if (tr.getMeta(closeHistoryKey))
            history = new HistoryState(history.done, history.undone, null, 0);
        let appended = tr.getMeta("appendedTransaction");
        if (tr.steps.length == 0) {
            return history;
        }
        else if (appended && appended.getMeta(historyKey)) {
            if (appended.getMeta(historyKey).redo)
                return new HistoryState(history.done.addTransform(tr, undefined, options, mustPreserveItems(state)), history.undone, rangesFor(tr.mapping.maps[tr.steps.length - 1]), history.prevTime);
            else
                return new HistoryState(history.done, history.undone.addTransform(tr, undefined, options, mustPreserveItems(state)), null, history.prevTime);
        }
        else if (tr.getMeta("addToHistory") !== false && !(appended && appended.getMeta("addToHistory") === false)) {
            // Group transforms that occur in quick succession into one event.
            let newGroup = history.prevTime == 0 || !appended && (history.prevTime < (tr.time || 0) - options.newGroupDelay ||
                !isAdjacentTo(tr, history.prevRanges));
            let prevRanges = appended ? mapRanges(history.prevRanges, tr.mapping) : rangesFor(tr.mapping.maps[tr.steps.length - 1]);
            return new HistoryState(history.done.addTransform(tr, newGroup ? state.selection.getBookmark() : undefined, options, mustPreserveItems(state)), Branch.empty, prevRanges, tr.time);
        }
        else if (rebased = tr.getMeta("rebased")) {
            // Used by the collab module to tell the history that some of its
            // content has been rebased.
            return new HistoryState(history.done.rebased(tr, rebased), history.undone.rebased(tr, rebased), mapRanges(history.prevRanges, tr.mapping), history.prevTime);
        }
        else {
            return new HistoryState(history.done.addMaps(tr.mapping.maps), history.undone.addMaps(tr.mapping.maps), mapRanges(history.prevRanges, tr.mapping), history.prevTime);
        }
    }
    function isAdjacentTo(transform, prevRanges) {
        if (!prevRanges)
            return false;
        if (!transform.docChanged)
            return true;
        let adjacent = false;
        transform.mapping.maps[0].forEach((start, end) => {
            for (let i = 0; i < prevRanges.length; i += 2)
                if (start <= prevRanges[i + 1] && end >= prevRanges[i])
                    adjacent = true;
        });
        return adjacent;
    }
    function rangesFor(map) {
        let result = [];
        map.forEach((_from, _to, from, to) => result.push(from, to));
        return result;
    }
    function mapRanges(ranges, mapping) {
        if (!ranges)
            return null;
        let result = [];
        for (let i = 0; i < ranges.length; i += 2) {
            let from = mapping.map(ranges[i], 1), to = mapping.map(ranges[i + 1], -1);
            if (from <= to)
                result.push(from, to);
        }
        return result;
    }
    // Apply the latest event from one branch to the document and shift the event
    // onto the other branch.
    function histTransaction(history, state, dispatch, redo) {
        let preserveItems = mustPreserveItems(state);
        let histOptions = historyKey.get(state).spec.config;
        let pop = (redo ? history.undone : history.done).popEvent(state, preserveItems);
        if (!pop)
            return;
        let selection = pop.selection.resolve(pop.transform.doc);
        let added = (redo ? history.done : history.undone).addTransform(pop.transform, state.selection.getBookmark(), histOptions, preserveItems);
        let newHist = new HistoryState(redo ? added : pop.remaining, redo ? pop.remaining : added, null, 0);
        dispatch(pop.transform.setSelection(selection).setMeta(historyKey, { redo, historyState: newHist }).scrollIntoView());
    }
    let cachedPreserveItems = false, cachedPreserveItemsPlugins = null;
    // Check whether any plugin in the given state has a
    // `historyPreserveItems` property in its spec, in which case we must
    // preserve steps exactly as they came in, so that they can be
    // rebased.
    function mustPreserveItems(state) {
        let plugins = state.plugins;
        if (cachedPreserveItemsPlugins != plugins) {
            cachedPreserveItems = false;
            cachedPreserveItemsPlugins = plugins;
            for (let i = 0; i < plugins.length; i++)
                if (plugins[i].spec.historyPreserveItems) {
                    cachedPreserveItems = true;
                    break;
                }
        }
        return cachedPreserveItems;
    }
    const historyKey = new PluginKey("history");
    const closeHistoryKey = new PluginKey("closeHistory");
    /**
    Returns a plugin that enables the undo history for an editor. The
    plugin will track undo and redo stacks, which can be used with the
    [`undo`](https://prosemirror.net/docs/ref/#history.undo) and [`redo`](https://prosemirror.net/docs/ref/#history.redo) commands.

    You can set an `"addToHistory"` [metadata
    property](https://prosemirror.net/docs/ref/#state.Transaction.setMeta) of `false` on a transaction
    to prevent it from being rolled back by undo.
    */
    function history$1(config = {}) {
        config = { depth: config.depth || 100,
            newGroupDelay: config.newGroupDelay || 500 };
        return new Plugin({
            key: historyKey,
            state: {
                init() {
                    return new HistoryState(Branch.empty, Branch.empty, null, 0);
                },
                apply(tr, hist, state) {
                    return applyTransaction(hist, state, tr, config);
                }
            },
            config,
            props: {
                handleDOMEvents: {
                    beforeinput(view, e) {
                        let inputType = e.inputType;
                        let command = inputType == "historyUndo" ? undo : inputType == "historyRedo" ? redo : null;
                        if (!command)
                            return false;
                        e.preventDefault();
                        return command(view.state, view.dispatch);
                    }
                }
            }
        });
    }
    /**
    A command function that undoes the last change, if any.
    */
    const undo = (state, dispatch) => {
        let hist = historyKey.getState(state);
        if (!hist || hist.done.eventCount == 0)
            return false;
        if (dispatch)
            histTransaction(hist, state, dispatch, false);
        return true;
    };
    /**
    A command function that redoes the last undone change, if any.
    */
    const redo = (state, dispatch) => {
        let hist = historyKey.getState(state);
        if (!hist || hist.undone.eventCount == 0)
            return false;
        if (dispatch)
            histTransaction(hist, state, dispatch, true);
        return true;
    };

    const History = Extension.create({
        name: 'history',
        addOptions() {
            return {
                depth: 100,
                newGroupDelay: 500,
            };
        },
        addCommands() {
            return {
                undo: () => ({ state, dispatch }) => {
                    return undo(state, dispatch);
                },
                redo: () => ({ state, dispatch }) => {
                    return redo(state, dispatch);
                },
            };
        },
        addProseMirrorPlugins() {
            return [
                history$1(this.options),
            ];
        },
        addKeyboardShortcuts() {
            return {
                'Mod-z': () => this.editor.commands.undo(),
                'Mod-y': () => this.editor.commands.redo(),
                'Shift-Mod-z': () => this.editor.commands.redo(),
                // Russian keyboard layouts
                'Mod-я': () => this.editor.commands.undo(),
                'Shift-Mod-я': () => this.editor.commands.redo(),
            };
        },
    });

    const HorizontalRule = Node$1.create({
        name: 'horizontalRule',
        addOptions() {
            return {
                HTMLAttributes: {},
            };
        },
        group: 'block',
        parseHTML() {
            return [
                { tag: 'hr' },
            ];
        },
        renderHTML({ HTMLAttributes }) {
            return ['hr', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes)];
        },
        addCommands() {
            return {
                setHorizontalRule: () => ({ chain }) => {
                    return chain()
                        .insertContent({ type: this.name })
                        // set cursor after horizontal rule
                        .command(({ tr, dispatch }) => {
                        var _a;
                        if (dispatch) {
                            const { $to } = tr.selection;
                            const posAfter = $to.end();
                            if ($to.nodeAfter) {
                                tr.setSelection(TextSelection.create(tr.doc, $to.pos));
                            }
                            else {
                                // add node after horizontal rule if it’s the end of the document
                                const node = (_a = $to.parent.type.contentMatch.defaultType) === null || _a === void 0 ? void 0 : _a.create();
                                if (node) {
                                    tr.insert(posAfter, node);
                                    tr.setSelection(TextSelection.create(tr.doc, posAfter));
                                }
                            }
                            tr.scrollIntoView();
                        }
                        return true;
                    })
                        .run();
                },
            };
        },
        addInputRules() {
            return [
                nodeInputRule({
                    find: /^(?:---|—-|___\s|\*\*\*\s)$/,
                    type: this.type,
                }),
            ];
        },
    });

    const starInputRegex$1 = /(?:^|\s)((?:\*)((?:[^*]+))(?:\*))$/;
    const starPasteRegex$1 = /(?:^|\s)((?:\*)((?:[^*]+))(?:\*))/g;
    const underscoreInputRegex$1 = /(?:^|\s)((?:_)((?:[^_]+))(?:_))$/;
    const underscorePasteRegex$1 = /(?:^|\s)((?:_)((?:[^_]+))(?:_))/g;
    const Italic = Mark$1.create({
        name: 'italic',
        addOptions() {
            return {
                HTMLAttributes: {},
            };
        },
        parseHTML() {
            return [
                {
                    tag: 'em',
                },
                {
                    tag: 'i',
                    getAttrs: node => node.style.fontStyle !== 'normal' && null,
                },
                {
                    style: 'font-style=italic',
                },
            ];
        },
        renderHTML({ HTMLAttributes }) {
            return ['em', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];
        },
        addCommands() {
            return {
                setItalic: () => ({ commands }) => {
                    return commands.setMark(this.name);
                },
                toggleItalic: () => ({ commands }) => {
                    return commands.toggleMark(this.name);
                },
                unsetItalic: () => ({ commands }) => {
                    return commands.unsetMark(this.name);
                },
            };
        },
        addKeyboardShortcuts() {
            return {
                'Mod-i': () => this.editor.commands.toggleItalic(),
                'Mod-I': () => this.editor.commands.toggleItalic(),
            };
        },
        addInputRules() {
            return [
                markInputRule({
                    find: starInputRegex$1,
                    type: this.type,
                }),
                markInputRule({
                    find: underscoreInputRegex$1,
                    type: this.type,
                }),
            ];
        },
        addPasteRules() {
            return [
                markPasteRule({
                    find: starPasteRegex$1,
                    type: this.type,
                }),
                markPasteRule({
                    find: underscorePasteRegex$1,
                    type: this.type,
                }),
            ];
        },
    });

    const ListItem = Node$1.create({
        name: 'listItem',
        addOptions() {
            return {
                HTMLAttributes: {},
            };
        },
        content: 'paragraph block*',
        defining: true,
        parseHTML() {
            return [
                {
                    tag: 'li',
                },
            ];
        },
        renderHTML({ HTMLAttributes }) {
            return ['li', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];
        },
        addKeyboardShortcuts() {
            return {
                Enter: () => this.editor.commands.splitListItem(this.name),
                Tab: () => this.editor.commands.sinkListItem(this.name),
                'Shift-Tab': () => this.editor.commands.liftListItem(this.name),
            };
        },
    });

    const inputRegex$3 = /^(\d+)\.\s$/;
    const OrderedList = Node$1.create({
        name: 'orderedList',
        addOptions() {
            return {
                itemTypeName: 'listItem',
                HTMLAttributes: {},
            };
        },
        group: 'block list',
        content() {
            return `${this.options.itemTypeName}+`;
        },
        addAttributes() {
            return {
                start: {
                    default: 1,
                    parseHTML: element => {
                        return element.hasAttribute('start')
                            ? parseInt(element.getAttribute('start') || '', 10)
                            : 1;
                    },
                },
            };
        },
        parseHTML() {
            return [
                {
                    tag: 'ol',
                },
            ];
        },
        renderHTML({ HTMLAttributes }) {
            const { start, ...attributesWithoutStart } = HTMLAttributes;
            return start === 1
                ? ['ol', mergeAttributes(this.options.HTMLAttributes, attributesWithoutStart), 0]
                : ['ol', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];
        },
        addCommands() {
            return {
                toggleOrderedList: () => ({ commands }) => {
                    return commands.toggleList(this.name, this.options.itemTypeName);
                },
            };
        },
        addKeyboardShortcuts() {
            return {
                'Mod-Shift-7': () => this.editor.commands.toggleOrderedList(),
            };
        },
        addInputRules() {
            return [
                wrappingInputRule({
                    find: inputRegex$3,
                    type: this.type,
                    getAttributes: match => ({ start: +match[1] }),
                    joinPredicate: (match, node) => node.childCount + node.attrs.start === +match[1],
                }),
            ];
        },
    });

    const Paragraph = Node$1.create({
        name: 'paragraph',
        priority: 1000,
        addOptions() {
            return {
                HTMLAttributes: {},
            };
        },
        group: 'block',
        content: 'inline*',
        parseHTML() {
            return [
                { tag: 'p' },
            ];
        },
        renderHTML({ HTMLAttributes }) {
            return ['p', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];
        },
        addCommands() {
            return {
                setParagraph: () => ({ commands }) => {
                    return commands.setNode(this.name);
                },
            };
        },
        addKeyboardShortcuts() {
            return {
                'Mod-Alt-0': () => this.editor.commands.setParagraph(),
            };
        },
    });

    const inputRegex$4 = /(?:^|\s)((?:~~)((?:[^~]+))(?:~~))$/;
    const pasteRegex$1 = /(?:^|\s)((?:~~)((?:[^~]+))(?:~~))/g;
    const Strike = Mark$1.create({
        name: 'strike',
        addOptions() {
            return {
                HTMLAttributes: {},
            };
        },
        parseHTML() {
            return [
                {
                    tag: 's',
                },
                {
                    tag: 'del',
                },
                {
                    tag: 'strike',
                },
                {
                    style: 'text-decoration',
                    consuming: false,
                    getAttrs: style => (style.includes('line-through') ? {} : false),
                },
            ];
        },
        renderHTML({ HTMLAttributes }) {
            return ['s', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];
        },
        addCommands() {
            return {
                setStrike: () => ({ commands }) => {
                    return commands.setMark(this.name);
                },
                toggleStrike: () => ({ commands }) => {
                    return commands.toggleMark(this.name);
                },
                unsetStrike: () => ({ commands }) => {
                    return commands.unsetMark(this.name);
                },
            };
        },
        addKeyboardShortcuts() {
            return {
                'Mod-Shift-x': () => this.editor.commands.toggleStrike(),
            };
        },
        addInputRules() {
            return [
                markInputRule({
                    find: inputRegex$4,
                    type: this.type,
                }),
            ];
        },
        addPasteRules() {
            return [
                markPasteRule({
                    find: pasteRegex$1,
                    type: this.type,
                }),
            ];
        },
    });

    const Text = Node$1.create({
        name: 'text',
        group: 'inline',
    });

    const StarterKit = Extension.create({
        name: 'starterKit',
        addExtensions() {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;
            const extensions = [];
            if (this.options.blockquote !== false) {
                extensions.push(Blockquote.configure((_a = this.options) === null || _a === void 0 ? void 0 : _a.blockquote));
            }
            if (this.options.bold !== false) {
                extensions.push(Bold.configure((_b = this.options) === null || _b === void 0 ? void 0 : _b.bold));
            }
            if (this.options.bulletList !== false) {
                extensions.push(BulletList.configure((_c = this.options) === null || _c === void 0 ? void 0 : _c.bulletList));
            }
            if (this.options.code !== false) {
                extensions.push(Code.configure((_d = this.options) === null || _d === void 0 ? void 0 : _d.code));
            }
            if (this.options.codeBlock !== false) {
                extensions.push(CodeBlock.configure((_e = this.options) === null || _e === void 0 ? void 0 : _e.codeBlock));
            }
            if (this.options.document !== false) {
                extensions.push(Document.configure((_f = this.options) === null || _f === void 0 ? void 0 : _f.document));
            }
            if (this.options.dropcursor !== false) {
                extensions.push(Dropcursor.configure((_g = this.options) === null || _g === void 0 ? void 0 : _g.dropcursor));
            }
            if (this.options.gapcursor !== false) {
                extensions.push(Gapcursor.configure((_h = this.options) === null || _h === void 0 ? void 0 : _h.gapcursor));
            }
            if (this.options.hardBreak !== false) {
                extensions.push(HardBreak.configure((_j = this.options) === null || _j === void 0 ? void 0 : _j.hardBreak));
            }
            if (this.options.heading !== false) {
                extensions.push(Heading.configure((_k = this.options) === null || _k === void 0 ? void 0 : _k.heading));
            }
            if (this.options.history !== false) {
                extensions.push(History.configure((_l = this.options) === null || _l === void 0 ? void 0 : _l.history));
            }
            if (this.options.horizontalRule !== false) {
                extensions.push(HorizontalRule.configure((_m = this.options) === null || _m === void 0 ? void 0 : _m.horizontalRule));
            }
            if (this.options.italic !== false) {
                extensions.push(Italic.configure((_o = this.options) === null || _o === void 0 ? void 0 : _o.italic));
            }
            if (this.options.listItem !== false) {
                extensions.push(ListItem.configure((_p = this.options) === null || _p === void 0 ? void 0 : _p.listItem));
            }
            if (this.options.orderedList !== false) {
                extensions.push(OrderedList.configure((_q = this.options) === null || _q === void 0 ? void 0 : _q.orderedList));
            }
            if (this.options.paragraph !== false) {
                extensions.push(Paragraph.configure((_r = this.options) === null || _r === void 0 ? void 0 : _r.paragraph));
            }
            if (this.options.strike !== false) {
                extensions.push(Strike.configure((_s = this.options) === null || _s === void 0 ? void 0 : _s.strike));
            }
            if (this.options.text !== false) {
                extensions.push(Text.configure((_t = this.options) === null || _t === void 0 ? void 0 : _t.text));
            }
            return extensions;
        },
    });

    const toggleFunctions = [];
    const chainer = (editor, fn) => editor.chain().focus()[fn]().run();

    toggleFunctions.push({function: editor => chainer(editor, 'toggleBold'), name: 'bold', svg: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24"><path fill="none" d="M0 0h24v24H0z"/><path d="M8 11h4.5a2.5 2.5 0 1 0 0-5H8v5zm10 4.5a4.5 4.5 0 0 1-4.5 4.5H6V4h6.5a4.5 4.5 0 0 1 3.256 7.606A4.498 4.498 0 0 1 18 15.5zM8 13v5h5.5a2.5 2.5 0 1 0 0-5H8z"/></svg>`});
    toggleFunctions.push({function: editor => editor.chain().focus().toggleItalic().run(), name: 'italic', svg: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24"><path fill="none" d="M0 0h24v24H0z"/><path d="M15 20H7v-2h2.927l2.116-12H9V4h8v2h-2.927l-2.116 12H15z"/></svg>`});
    toggleFunctions.push({function: editor => editor.chain().focus().toggleStrike().run(), name: 'strike', svg: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24" ><path fill="none" d="M0 0h24v24H0z"/><path d="M17.154 14c.23.516.346 1.09.346 1.72 0 1.342-.524 2.392-1.571 3.147C14.88 19.622 13.433 20 11.586 20c-1.64 0-3.263-.381-4.87-1.144V16.6c1.52.877 3.075 1.316 4.666 1.316 2.551 0 3.83-.732 3.839-2.197a2.21 2.21 0 0 0-.648-1.603l-.12-.117H3v-2h18v2h-3.846zm-4.078-3H7.629a4.086 4.086 0 0 1-.481-.522C6.716 9.92 6.5 9.246 6.5 8.452c0-1.236.466-2.287 1.397-3.153C8.83 4.433 10.271 4 12.222 4c1.471 0 2.879.328 4.222.984v2.152c-1.2-.687-2.515-1.03-3.946-1.03-2.48 0-3.719.782-3.719 2.346 0 .42.218.786.654 1.099.436.313.974.562 1.613.75.62.18 1.297.414 2.03.699z"/></svg>`});
    toggleFunctions.push({function: editor => editor.chain().focus().toggleHeading({ level: 1 }).run(), name: 'h-1', svg: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24" ><path fill="none" d="M0 0H24V24H0z"/><path d="M13 20h-2v-7H4v7H2V4h2v7h7V4h2v16zm8-12v12h-2v-9.796l-2 .536V8.67L19.5 8H21z"/></svg>`});
    toggleFunctions.push({function: editor => editor.chain().focus().toggleHeading({ level: 2 }).run(), name: 'h-2', svg: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24"><path fill="none" d="M0 0H24V24H0z"/><path d="M4 4v7h7V4h2v16h-2v-7H4v7H2V4h2zm14.5 4c2.071 0 3.75 1.679 3.75 3.75 0 .857-.288 1.648-.772 2.28l-.148.18L18.034 18H22v2h-7v-1.556l4.82-5.546c.268-.307.43-.709.43-1.148 0-.966-.784-1.75-1.75-1.75-.918 0-1.671.707-1.744 1.606l-.006.144h-2C14.75 9.679 16.429 8 18.5 8z"/></svg>`});
    toggleFunctions.push({function: editor => editor.chain().focus().toggleHeading({ level: 3 }).run(), name: 'h-3', svg: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24"><path fill="none" d="M0 0H24V24H0z"/><path d="M22 8l-.002 2-2.505 2.883c1.59.435 2.757 1.89 2.757 3.617 0 2.071-1.679 3.75-3.75 3.75-1.826 0-3.347-1.305-3.682-3.033l1.964-.382c.156.806.866 1.415 1.718 1.415.966 0 1.75-.784 1.75-1.75s-.784-1.75-1.75-1.75c-.286 0-.556.069-.794.19l-1.307-1.547L19.35 10H15V8h7zM4 4v7h7V4h2v16h-2v-7H4v7H2V4h2z"/></svg>`});

    //toggleFunctions.toggleParagraph = {function: editor => editor.chain().focus().setParagraph().run(), name: 'paragraph', svg: ''};
    toggleFunctions.push({function: editor => editor.chain().focus().toggleOrderedList().run(), name: 'orderedList', svg: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24"><path fill="none" d="M0 0h24v24H0z"/><path d="M8 4h13v2H8V4zM5 3v3h1v1H3V6h1V4H3V3h2zM3 14v-2.5h2V11H3v-1h3v2.5H4v.5h2v1H3zm2 5.5H3v-1h2V18H3v-1h3v4H3v-1h2v-.5zM8 11h13v2H8v-2zm0 7h13v2H8v-2z"/></svg>`});
    toggleFunctions.push({function: editor => editor.chain().focus().toggleBulletList().run(), name: 'bulletList', svg: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24"><path fill="none" d="M0 0h24v24H0z"/><path d="M8 4h13v2H8V4zM4.5 6.5a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3zm0 7a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3zm0 6.9a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3zM8 11h13v2H8v-2zm0 7h13v2H8v-2z"/></svg>`});

    /* components/manager/Tiptap/Button.svelte generated by Svelte v3.50.1 */

    const file$l = "components/manager/Tiptap/Button.svelte";

    // (12:0) {#if editor}
    function create_if_block$b(ctx) {
    	let if_block_anchor;

    	function select_block_type(ctx, dirty) {
    		if (/*name*/ ctx[2] == 'h-1') return create_if_block_1$9;
    		if (/*name*/ ctx[2] == 'h-2') return create_if_block_2$4;
    		if (/*name*/ ctx[2] == 'h-3') return create_if_block_3$1;
    		if (/*name*/ ctx[2] == 'paragraph') return create_if_block_4$1;
    		return create_else_block$a;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			}
    		},
    		d: function destroy(detaching) {
    			if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$b.name,
    		type: "if",
    		source: "(12:0) {#if editor}",
    		ctx
    	});

    	return block;
    }

    // (29:4) {:else}
    function create_else_block$a(ctx) {
    	let div1;
    	let div0;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			attr_dev(div0, "contenteditable", "true");
    			if (/*svg*/ ctx[0] === void 0) add_render_callback(() => /*div0_input_handler_4*/ ctx[12].call(div0));
    			add_location(div0, file$l, 30, 12, 1191);
    			attr_dev(div1, "id", "tool-item");
    			attr_dev(div1, "class", "svelte-2me4fi");
    			toggle_class(div1, "active", /*editor*/ ctx[1].isActive({ name: /*name*/ ctx[2] }));
    			add_location(div1, file$l, 29, 8, 1078);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);

    			if (/*svg*/ ctx[0] !== void 0) {
    				div0.innerHTML = /*svg*/ ctx[0];
    			}

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "input", /*div0_input_handler_4*/ ctx[12]),
    					listen_dev(div1, "click", /*click_handler_4*/ ctx[13], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*svg*/ 1 && /*svg*/ ctx[0] !== div0.innerHTML) {
    				div0.innerHTML = /*svg*/ ctx[0];
    			}

    			if (dirty & /*editor, name*/ 6) {
    				toggle_class(div1, "active", /*editor*/ ctx[1].isActive({ name: /*name*/ ctx[2] }));
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$a.name,
    		type: "else",
    		source: "(29:4) {:else}",
    		ctx
    	});

    	return block;
    }

    // (25:34) 
    function create_if_block_4$1(ctx) {
    	let div1;
    	let div0;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			attr_dev(div0, "contenteditable", "true");
    			if (/*svg*/ ctx[0] === void 0) add_render_callback(() => /*div0_input_handler_3*/ ctx[10].call(div0));
    			add_location(div0, file$l, 26, 12, 984);
    			attr_dev(div1, "id", "tool-item");
    			attr_dev(div1, "class", "svelte-2me4fi");
    			add_location(div1, file$l, 25, 8, 910);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);

    			if (/*svg*/ ctx[0] !== void 0) {
    				div0.innerHTML = /*svg*/ ctx[0];
    			}

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "input", /*div0_input_handler_3*/ ctx[10]),
    					listen_dev(div1, "click", /*click_handler_3*/ ctx[11], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*svg*/ 1 && /*svg*/ ctx[0] !== div0.innerHTML) {
    				div0.innerHTML = /*svg*/ ctx[0];
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$1.name,
    		type: "if",
    		source: "(25:34) ",
    		ctx
    	});

    	return block;
    }

    // (21:28) 
    function create_if_block_3$1(ctx) {
    	let div1;
    	let div0;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			attr_dev(div0, "contenteditable", "true");
    			if (/*svg*/ ctx[0] === void 0) add_render_callback(() => /*div0_input_handler_2*/ ctx[8].call(div0));
    			add_location(div0, file$l, 22, 12, 793);
    			attr_dev(div1, "id", "tool-item");
    			attr_dev(div1, "class", "svelte-2me4fi");
    			toggle_class(div1, "active", /*editor*/ ctx[1].isActive('heading', { level: 3 }));
    			add_location(div1, file$l, 21, 8, 663);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);

    			if (/*svg*/ ctx[0] !== void 0) {
    				div0.innerHTML = /*svg*/ ctx[0];
    			}

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "input", /*div0_input_handler_2*/ ctx[8]),
    					listen_dev(div1, "click", /*click_handler_2*/ ctx[9], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*svg*/ 1 && /*svg*/ ctx[0] !== div0.innerHTML) {
    				div0.innerHTML = /*svg*/ ctx[0];
    			}

    			if (dirty & /*editor*/ 2) {
    				toggle_class(div1, "active", /*editor*/ ctx[1].isActive('heading', { level: 3 }));
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$1.name,
    		type: "if",
    		source: "(21:28) ",
    		ctx
    	});

    	return block;
    }

    // (17:28) 
    function create_if_block_2$4(ctx) {
    	let div1;
    	let div0;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			attr_dev(div0, "contenteditable", "true");
    			if (/*svg*/ ctx[0] === void 0) add_render_callback(() => /*div0_input_handler_1*/ ctx[6].call(div0));
    			add_location(div0, file$l, 18, 12, 552);
    			attr_dev(div1, "id", "tool-item");
    			attr_dev(div1, "class", "svelte-2me4fi");
    			toggle_class(div1, "active", /*editor*/ ctx[1].isActive('heading', { level: 2 }));
    			add_location(div1, file$l, 17, 8, 422);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);

    			if (/*svg*/ ctx[0] !== void 0) {
    				div0.innerHTML = /*svg*/ ctx[0];
    			}

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "input", /*div0_input_handler_1*/ ctx[6]),
    					listen_dev(div1, "click", /*click_handler_1*/ ctx[7], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*svg*/ 1 && /*svg*/ ctx[0] !== div0.innerHTML) {
    				div0.innerHTML = /*svg*/ ctx[0];
    			}

    			if (dirty & /*editor*/ 2) {
    				toggle_class(div1, "active", /*editor*/ ctx[1].isActive('heading', { level: 2 }));
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$4.name,
    		type: "if",
    		source: "(17:28) ",
    		ctx
    	});

    	return block;
    }

    // (13:4) {#if name == 'h-1'}
    function create_if_block_1$9(ctx) {
    	let div1;
    	let div0;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			attr_dev(div0, "contenteditable", "true");
    			if (/*svg*/ ctx[0] === void 0) add_render_callback(() => /*div0_input_handler*/ ctx[4].call(div0));
    			add_location(div0, file$l, 14, 12, 311);
    			attr_dev(div1, "id", "tool-item");
    			attr_dev(div1, "class", "svelte-2me4fi");
    			toggle_class(div1, "active", /*editor*/ ctx[1].isActive('heading', { level: 1 }));
    			add_location(div1, file$l, 13, 8, 181);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);

    			if (/*svg*/ ctx[0] !== void 0) {
    				div0.innerHTML = /*svg*/ ctx[0];
    			}

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "input", /*div0_input_handler*/ ctx[4]),
    					listen_dev(div1, "click", /*click_handler*/ ctx[5], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*svg*/ 1 && /*svg*/ ctx[0] !== div0.innerHTML) {
    				div0.innerHTML = /*svg*/ ctx[0];
    			}

    			if (dirty & /*editor*/ 2) {
    				toggle_class(div1, "active", /*editor*/ ctx[1].isActive('heading', { level: 1 }));
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$9.name,
    		type: "if",
    		source: "(13:4) {#if name == 'h-1'}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$p(ctx) {
    	let if_block_anchor;
    	let if_block = /*editor*/ ctx[1] && create_if_block$b(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*editor*/ ctx[1]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$b(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$p.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$p($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Button', slots, []);
    	let { editor } = $$props;
    	let { name } = $$props;
    	let { toggleFunction } = $$props;
    	let { svg } = $$props;
    	const writable_props = ['editor', 'name', 'toggleFunction', 'svg'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Button> was created with unknown prop '${key}'`);
    	});

    	function div0_input_handler() {
    		svg = this.innerHTML;
    		$$invalidate(0, svg);
    	}

    	const click_handler = () => toggleFunction(editor);

    	function div0_input_handler_1() {
    		svg = this.innerHTML;
    		$$invalidate(0, svg);
    	}

    	const click_handler_1 = () => toggleFunction(editor);

    	function div0_input_handler_2() {
    		svg = this.innerHTML;
    		$$invalidate(0, svg);
    	}

    	const click_handler_2 = () => toggleFunction(editor);

    	function div0_input_handler_3() {
    		svg = this.innerHTML;
    		$$invalidate(0, svg);
    	}

    	const click_handler_3 = () => toggleFunction(editor);

    	function div0_input_handler_4() {
    		svg = this.innerHTML;
    		$$invalidate(0, svg);
    	}

    	const click_handler_4 = () => toggleFunction(editor);

    	$$self.$$set = $$props => {
    		if ('editor' in $$props) $$invalidate(1, editor = $$props.editor);
    		if ('name' in $$props) $$invalidate(2, name = $$props.name);
    		if ('toggleFunction' in $$props) $$invalidate(3, toggleFunction = $$props.toggleFunction);
    		if ('svg' in $$props) $$invalidate(0, svg = $$props.svg);
    	};

    	$$self.$capture_state = () => ({ editor, name, toggleFunction, svg });

    	$$self.$inject_state = $$props => {
    		if ('editor' in $$props) $$invalidate(1, editor = $$props.editor);
    		if ('name' in $$props) $$invalidate(2, name = $$props.name);
    		if ('toggleFunction' in $$props) $$invalidate(3, toggleFunction = $$props.toggleFunction);
    		if ('svg' in $$props) $$invalidate(0, svg = $$props.svg);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		svg,
    		editor,
    		name,
    		toggleFunction,
    		div0_input_handler,
    		click_handler,
    		div0_input_handler_1,
    		click_handler_1,
    		div0_input_handler_2,
    		click_handler_2,
    		div0_input_handler_3,
    		click_handler_3,
    		div0_input_handler_4,
    		click_handler_4
    	];
    }

    class Button extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$p, create_fragment$p, safe_not_equal, {
    			editor: 1,
    			name: 2,
    			toggleFunction: 3,
    			svg: 0
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Button",
    			options,
    			id: create_fragment$p.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*editor*/ ctx[1] === undefined && !('editor' in props)) {
    			console.warn("<Button> was created without expected prop 'editor'");
    		}

    		if (/*name*/ ctx[2] === undefined && !('name' in props)) {
    			console.warn("<Button> was created without expected prop 'name'");
    		}

    		if (/*toggleFunction*/ ctx[3] === undefined && !('toggleFunction' in props)) {
    			console.warn("<Button> was created without expected prop 'toggleFunction'");
    		}

    		if (/*svg*/ ctx[0] === undefined && !('svg' in props)) {
    			console.warn("<Button> was created without expected prop 'svg'");
    		}
    	}

    	get editor() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set editor(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get name() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set name(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get toggleFunction() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set toggleFunction(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get svg() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set svg(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* components/manager/Tiptap/FixedMenu.svelte generated by Svelte v3.50.1 */
    const file$m = "components/manager/Tiptap/FixedMenu.svelte";

    function get_each_context$9(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[1] = list[i];
    	child_ctx[3] = i;
    	return child_ctx;
    }

    // (8:0) {#if editor}
    function create_if_block$c(ctx) {
    	let div1;
    	let div0;
    	let current;
    	let each_value = toggleFunctions;
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$9(get_each_context$9(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(div0, "class", "btn-wrap svelte-16lorjj");
    			add_location(div0, file$m, 9, 2, 189);
    			attr_dev(div1, "class", "fixed-menu svelte-16lorjj");
    			add_location(div1, file$m, 8, 1, 161);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div0, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*editor, toggleFunctions*/ 1) {
    				each_value = toggleFunctions;
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$9(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$9(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(div0, null);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$c.name,
    		type: "if",
    		source: "(8:0) {#if editor}",
    		ctx
    	});

    	return block;
    }

    // (11:3) {#each toggleFunctions as toggleFunction, index}
    function create_each_block$9(ctx) {
    	let button;
    	let current;

    	button = new Button({
    			props: {
    				editor: /*editor*/ ctx[0],
    				toggleFunction: /*toggleFunction*/ ctx[1].function,
    				name: /*toggleFunction*/ ctx[1].name,
    				svg: /*toggleFunction*/ ctx[1].svg
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(button.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(button, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const button_changes = {};
    			if (dirty & /*editor*/ 1) button_changes.editor = /*editor*/ ctx[0];
    			button.$set(button_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(button.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(button.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(button, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$9.name,
    		type: "each",
    		source: "(11:3) {#each toggleFunctions as toggleFunction, index}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$q(ctx) {
    	let if_block_anchor;
    	let current;
    	let if_block = /*editor*/ ctx[0] && create_if_block$c(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*editor*/ ctx[0]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*editor*/ 1) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$c(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$q.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$q($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('FixedMenu', slots, []);
    	let { editor } = $$props;
    	const writable_props = ['editor'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<FixedMenu> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('editor' in $$props) $$invalidate(0, editor = $$props.editor);
    	};

    	$$self.$capture_state = () => ({ toggleFunctions, Button, editor });

    	$$self.$inject_state = $$props => {
    		if ('editor' in $$props) $$invalidate(0, editor = $$props.editor);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [editor];
    }

    class FixedMenu extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$q, create_fragment$q, safe_not_equal, { editor: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "FixedMenu",
    			options,
    			id: create_fragment$q.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*editor*/ ctx[0] === undefined && !('editor' in props)) {
    			console.warn("<FixedMenu> was created without expected prop 'editor'");
    		}
    	}

    	get editor() {
    		throw new Error("<FixedMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set editor(value) {
    		throw new Error("<FixedMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* components/manager/Tiptap/Tiptap.svelte generated by Svelte v3.50.1 */

    const { console: console_1$5 } = globals;

    const file$n = "components/manager/Tiptap/Tiptap.svelte";

    function create_fragment$r(ctx) {
    	let div2;
    	let fixedmenu;
    	let t;
    	let div1;
    	let div0;
    	let current;

    	fixedmenu = new FixedMenu({
    			props: { editor: /*editor*/ ctx[1] },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			create_component(fixedmenu.$$.fragment);
    			t = space();
    			div1 = element("div");
    			div0 = element("div");
    			attr_dev(div0, "class", "element-wrapper svelte-3d9wul");
    			add_location(div0, file$n, 50, 8, 1498);
    			attr_dev(div1, "class", "element-view svelte-3d9wul");
    			add_location(div1, file$n, 49, 4, 1462);
    			attr_dev(div2, "class", "wrapper svelte-3d9wul");
    			add_location(div2, file$n, 47, 0, 1400);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			mount_component(fixedmenu, div2, null);
    			append_dev(div2, t);
    			append_dev(div2, div1);
    			append_dev(div1, div0);
    			/*div0_binding*/ ctx[3](div0);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const fixedmenu_changes = {};
    			if (dirty & /*editor*/ 2) fixedmenu_changes.editor = /*editor*/ ctx[1];
    			fixedmenu.$set(fixedmenu_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(fixedmenu.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(fixedmenu.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			destroy_component(fixedmenu);
    			/*div0_binding*/ ctx[3](null);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$r.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$r($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Tiptap', slots, []);
    	let { content = "" } = $$props;
    	let element;

    	// HTML content of editor can be accessed through editor.getHTML()
    	let editor;

    	let bubbleMenu;
    	let dispatch = createEventDispatcher();

    	onMount(() => {
    		$$invalidate(1, editor = new Editor({
    				element,
    				extensions: [StarterKit, Document, Paragraph, Text],
    				content,
    				onTransaction: () => {
    					$$invalidate(1, editor);
    				}
    			}));

    		editor.on("update", ({ editor }) => {
    			console.log("editor html", editor.getHTML());
    			dispatch('change', { html: editor.getHTML() });
    		});
    	});

    	onDestroy(() => {
    		editor.destroy();
    	});

    	const writable_props = ['content'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$5.warn(`<Tiptap> was created with unknown prop '${key}'`);
    	});

    	function div0_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			element = $$value;
    			$$invalidate(0, element);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ('content' in $$props) $$invalidate(2, content = $$props.content);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		onDestroy,
    		createEventDispatcher,
    		writable,
    		Editor,
    		StarterKit,
    		Document,
    		Paragraph,
    		Text,
    		FixedMenu,
    		content,
    		element,
    		editor,
    		bubbleMenu,
    		dispatch
    	});

    	$$self.$inject_state = $$props => {
    		if ('content' in $$props) $$invalidate(2, content = $$props.content);
    		if ('element' in $$props) $$invalidate(0, element = $$props.element);
    		if ('editor' in $$props) $$invalidate(1, editor = $$props.editor);
    		if ('bubbleMenu' in $$props) bubbleMenu = $$props.bubbleMenu;
    		if ('dispatch' in $$props) dispatch = $$props.dispatch;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [element, editor, content, div0_binding];
    }

    class Tiptap extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$r, create_fragment$r, safe_not_equal, { content: 2 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Tiptap",
    			options,
    			id: create_fragment$r.name
    		});
    	}

    	get content() {
    		throw new Error("<Tiptap>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set content(value) {
    		throw new Error("<Tiptap>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* components/manager/ManageCreateItem.svelte generated by Svelte v3.50.1 */
    const file_1$1 = "components/manager/ManageCreateItem.svelte";

    // (140:16) {#if checked}
    function create_if_block_2$5(ctx) {
    	let svg;
    	let path;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "stroke-linecap", "round");
    			attr_dev(path, "stroke-linejoin", "round");
    			attr_dev(path, "d", "M4.5 12.75l6 6 9-13.5");
    			add_location(path, file_1$1, 141, 24, 3089);
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "fill", "none");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			attr_dev(svg, "stroke-width", "1.5");
    			attr_dev(svg, "stroke", "white");
    			attr_dev(svg, "height", "17");
    			attr_dev(svg, "width", "17");
    			add_location(svg, file_1$1, 140, 20, 2934);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$5.name,
    		type: "if",
    		source: "(140:16) {#if checked}",
    		ctx
    	});

    	return block;
    }

    // (156:12) {:else}
    function create_else_block$b(ctx) {
    	const block = { c: noop, m: noop, p: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$b.name,
    		type: "else",
    		source: "(156:12) {:else}",
    		ctx
    	});

    	return block;
    }

    // (152:32) 
    function create_if_block_1$a(ctx) {
    	let video;
    	let source;
    	let source_src_value;

    	const block = {
    		c: function create() {
    			video = element("video");
    			source = element("source");
    			if (!src_url_equal(source.src, source_src_value = /*src*/ ctx[1])) attr_dev(source, "src", source_src_value);
    			attr_dev(source, "type", "video/mp4");
    			add_location(source, file_1$1, 153, 20, 3555);
    			attr_dev(video, "height", "85px");
    			video.controls = true;
    			add_location(video, file_1$1, 152, 16, 3503);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, video, anchor);
    			append_dev(video, source);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*src*/ 2 && !src_url_equal(source.src, source_src_value = /*src*/ ctx[1])) {
    				attr_dev(source, "src", source_src_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(video);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$a.name,
    		type: "if",
    		source: "(152:32) ",
    		ctx
    	});

    	return block;
    }

    // (150:12) {#if type == 0}
    function create_if_block$d(ctx) {
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			if (!src_url_equal(img.src, img_src_value = /*src*/ ctx[1])) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "height", "85px");
    			attr_dev(img, "alt", "test-img");
    			add_location(img, file_1$1, 150, 16, 3405);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*src*/ 2 && !src_url_equal(img.src, img_src_value = /*src*/ ctx[1])) {
    				attr_dev(img, "src", img_src_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$d.name,
    		type: "if",
    		source: "(150:12) {#if type == 0}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$s(ctx) {
    	let div10;
    	let div1;
    	let div0;
    	let button0;
    	let button0_class_value;
    	let t0;
    	let div3;
    	let div2;
    	let t1;
    	let div5;
    	let div4;
    	let h3;
    	let t2;
    	let t3;
    	let div7;
    	let div6;
    	let button1;
    	let svg0;
    	let path0;
    	let t4;
    	let div9;
    	let div8;
    	let button2;
    	let svg1;
    	let path1;
    	let mounted;
    	let dispose;
    	let if_block0 = /*checked*/ ctx[0] && create_if_block_2$5(ctx);

    	function select_block_type(ctx, dirty) {
    		if (/*type*/ ctx[2] == 0) return create_if_block$d;
    		if (/*type*/ ctx[2] == 1) return create_if_block_1$a;
    		return create_else_block$b;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block1 = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			div10 = element("div");
    			div1 = element("div");
    			div0 = element("div");
    			button0 = element("button");
    			if (if_block0) if_block0.c();
    			t0 = space();
    			div3 = element("div");
    			div2 = element("div");
    			if_block1.c();
    			t1 = space();
    			div5 = element("div");
    			div4 = element("div");
    			h3 = element("h3");
    			t2 = text(/*name*/ ctx[3]);
    			t3 = space();
    			div7 = element("div");
    			div6 = element("div");
    			button1 = element("button");
    			svg0 = svg_element("svg");
    			path0 = svg_element("path");
    			t4 = space();
    			div9 = element("div");
    			div8 = element("div");
    			button2 = element("button");
    			svg1 = svg_element("svg");
    			path1 = svg_element("path");
    			attr_dev(button0, "class", button0_class_value = "" + (null_to_empty(/*checked*/ ctx[0] ? 'check-btn-clicked' : 'check-btn') + " svelte-ayax6a"));
    			add_location(button0, file_1$1, 138, 12, 2794);
    			attr_dev(div0, "class", "check-container container svelte-ayax6a");
    			add_location(div0, file_1$1, 137, 8, 2741);
    			attr_dev(div1, "class", "check-wrap wrap svelte-ayax6a");
    			add_location(div1, file_1$1, 136, 4, 2702);
    			attr_dev(div2, "class", "snapshot-container container svelte-ayax6a");
    			add_location(div2, file_1$1, 148, 8, 3316);
    			attr_dev(div3, "class", "snapshot-wrap svelte-ayax6a");
    			add_location(div3, file_1$1, 147, 4, 3279);
    			attr_dev(h3, "class", "svelte-ayax6a");
    			add_location(h3, file_1$1, 161, 12, 3778);
    			attr_dev(div4, "class", "title-container container svelte-ayax6a");
    			add_location(div4, file_1$1, 160, 8, 3725);
    			attr_dev(div5, "class", "title-wrap svelte-ayax6a");
    			add_location(div5, file_1$1, 159, 4, 3691);
    			attr_dev(path0, "stroke-linecap", "round");
    			attr_dev(path0, "stroke-linejoin", "round");
    			attr_dev(path0, "d", "M3 16.5v2.25A2.25 2.25 0 005.25 21h13.5A2.25 2.25 0 0021 18.75V16.5M16.5 12L12 16.5m0 0L7.5 12m4.5 4.5V3");
    			add_location(path0, file_1$1, 168, 20, 4126);
    			attr_dev(svg0, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg0, "fill", "none");
    			attr_dev(svg0, "viewBox", "0 0 24 24");
    			attr_dev(svg0, "stroke-width", "2");
    			attr_dev(svg0, "stroke", "currentColor");
    			attr_dev(svg0, "height", "18");
    			attr_dev(svg0, "width", "18");
    			add_location(svg0, file_1$1, 167, 16, 3970);
    			attr_dev(button1, "class", "svelte-ayax6a");
    			add_location(button1, file_1$1, 166, 12, 3920);
    			attr_dev(div6, "class", "download-container container svelte-ayax6a");
    			add_location(div6, file_1$1, 165, 8, 3864);
    			attr_dev(div7, "class", "download-wrap svelte-ayax6a");
    			add_location(div7, file_1$1, 164, 4, 3827);
    			attr_dev(path1, "stroke-linecap", "round");
    			attr_dev(path1, "stroke-linejoin", "round");
    			attr_dev(path1, "d", "M6 18L18 6M6 6l12 12");
    			add_location(path1, file_1$1, 177, 20, 4666);
    			attr_dev(svg1, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg1, "fill", "none");
    			attr_dev(svg1, "viewBox", "0 0 24 24");
    			attr_dev(svg1, "stroke-width", "1.5");
    			attr_dev(svg1, "stroke", "currentColor");
    			attr_dev(svg1, "height", "18");
    			attr_dev(svg1, "width", "18");
    			add_location(svg1, file_1$1, 176, 16, 4508);
    			attr_dev(button2, "class", "svelte-ayax6a");
    			add_location(button2, file_1$1, 175, 12, 4460);
    			attr_dev(div8, "class", "delete-container container svelte-ayax6a");
    			add_location(div8, file_1$1, 174, 8, 4406);
    			attr_dev(div9, "class", "delete-wrap svelte-ayax6a");
    			add_location(div9, file_1$1, 173, 4, 4371);
    			attr_dev(div10, "class", "table-content svelte-ayax6a");
    			add_location(div10, file_1$1, 135, 0, 2669);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div10, anchor);
    			append_dev(div10, div1);
    			append_dev(div1, div0);
    			append_dev(div0, button0);
    			if (if_block0) if_block0.m(button0, null);
    			append_dev(div10, t0);
    			append_dev(div10, div3);
    			append_dev(div3, div2);
    			if_block1.m(div2, null);
    			append_dev(div10, t1);
    			append_dev(div10, div5);
    			append_dev(div5, div4);
    			append_dev(div4, h3);
    			append_dev(h3, t2);
    			append_dev(div10, t3);
    			append_dev(div10, div7);
    			append_dev(div7, div6);
    			append_dev(div6, button1);
    			append_dev(button1, svg0);
    			append_dev(svg0, path0);
    			append_dev(div10, t4);
    			append_dev(div10, div9);
    			append_dev(div9, div8);
    			append_dev(div8, button2);
    			append_dev(button2, svg1);
    			append_dev(svg1, path1);

    			if (!mounted) {
    				dispose = [
    					listen_dev(button0, "click", /*checkHandle*/ ctx[4], false, false, false),
    					listen_dev(button1, "click", /*downloadCall*/ ctx[5], false, false, false),
    					listen_dev(button2, "click", /*deleteCall*/ ctx[6], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*checked*/ ctx[0]) {
    				if (if_block0) ; else {
    					if_block0 = create_if_block_2$5(ctx);
    					if_block0.c();
    					if_block0.m(button0, null);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (dirty & /*checked*/ 1 && button0_class_value !== (button0_class_value = "" + (null_to_empty(/*checked*/ ctx[0] ? 'check-btn-clicked' : 'check-btn') + " svelte-ayax6a"))) {
    				attr_dev(button0, "class", button0_class_value);
    			}

    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block1) {
    				if_block1.p(ctx, dirty);
    			} else {
    				if_block1.d(1);
    				if_block1 = current_block_type(ctx);

    				if (if_block1) {
    					if_block1.c();
    					if_block1.m(div2, null);
    				}
    			}

    			if (dirty & /*name*/ 8) set_data_dev(t2, /*name*/ ctx[3]);
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div10);
    			if (if_block0) if_block0.d();
    			if_block1.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$s.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$s($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ManageCreateItem', slots, []);
    	let { checked = false } = $$props;
    	let { src = '/public/main_page_bg.JPG' } = $$props;
    	let { file } = $$props;
    	let { index = 0 } = $$props;
    	let { type = '사진' } = $$props;
    	let element;
    	let editor;
    	let name = 'unknown';
    	var dispatch = createEventDispatcher();

    	function checkHandle() {
    		if (checked) {
    			$$invalidate(0, checked = false);
    		} else {
    			$$invalidate(0, checked = true);
    		}

    		dispatch('check', { index, checked });
    	}

    	function downloadCall() {
    		dispatch('download', { index });
    	}

    	function deleteCall() {
    		dispatch('delete', { index });
    	}

    	const writable_props = ['checked', 'src', 'file', 'index', 'type'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ManageCreateItem> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('checked' in $$props) $$invalidate(0, checked = $$props.checked);
    		if ('src' in $$props) $$invalidate(1, src = $$props.src);
    		if ('file' in $$props) $$invalidate(7, file = $$props.file);
    		if ('index' in $$props) $$invalidate(8, index = $$props.index);
    		if ('type' in $$props) $$invalidate(2, type = $$props.type);
    	};

    	$$self.$capture_state = () => ({
    		createEventDispatcher,
    		onDestroy,
    		onMount,
    		checked,
    		src,
    		file,
    		index,
    		type,
    		element,
    		editor,
    		name,
    		dispatch,
    		checkHandle,
    		downloadCall,
    		deleteCall
    	});

    	$$self.$inject_state = $$props => {
    		if ('checked' in $$props) $$invalidate(0, checked = $$props.checked);
    		if ('src' in $$props) $$invalidate(1, src = $$props.src);
    		if ('file' in $$props) $$invalidate(7, file = $$props.file);
    		if ('index' in $$props) $$invalidate(8, index = $$props.index);
    		if ('type' in $$props) $$invalidate(2, type = $$props.type);
    		if ('element' in $$props) element = $$props.element;
    		if ('editor' in $$props) editor = $$props.editor;
    		if ('name' in $$props) $$invalidate(3, name = $$props.name);
    		if ('dispatch' in $$props) dispatch = $$props.dispatch;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*src, file*/ 130) {
    			 {
    				if (src) {
    					$$invalidate(3, name = file.name);
    				} else {
    					$$invalidate(3, name = "알 수 없는 이름");
    				}
    			}
    		}
    	};

    	return [checked, src, type, name, checkHandle, downloadCall, deleteCall, file, index];
    }

    class ManageCreateItem extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$s, create_fragment$s, safe_not_equal, {
    			checked: 0,
    			src: 1,
    			file: 7,
    			index: 8,
    			type: 2
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ManageCreateItem",
    			options,
    			id: create_fragment$s.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*file*/ ctx[7] === undefined && !('file' in props)) {
    			console.warn("<ManageCreateItem> was created without expected prop 'file'");
    		}
    	}

    	get checked() {
    		throw new Error("<ManageCreateItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set checked(value) {
    		throw new Error("<ManageCreateItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get src() {
    		throw new Error("<ManageCreateItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set src(value) {
    		throw new Error("<ManageCreateItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get file() {
    		throw new Error("<ManageCreateItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set file(value) {
    		throw new Error("<ManageCreateItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get index() {
    		throw new Error("<ManageCreateItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set index(value) {
    		throw new Error("<ManageCreateItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get type() {
    		throw new Error("<ManageCreateItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set type(value) {
    		throw new Error("<ManageCreateItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* components/manager/CreateViews/Preview.svelte generated by Svelte v3.50.1 */

    const { console: console_1$6 } = globals;
    const file$o = "components/manager/CreateViews/Preview.svelte";

    function get_each_context$a(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[25] = list[i];
    	child_ctx[27] = i;
    	return child_ctx;
    }

    // (419:24) {#if img_hover}
    function create_if_block_3$2(ctx) {
    	let div2;
    	let div0;
    	let svg0;
    	let path0;
    	let t;
    	let div1;
    	let svg1;
    	let path1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div0 = element("div");
    			svg0 = svg_element("svg");
    			path0 = svg_element("path");
    			t = space();
    			div1 = element("div");
    			svg1 = svg_element("svg");
    			path1 = svg_element("path");
    			attr_dev(path0, "stroke-linecap", "round");
    			attr_dev(path0, "stroke-linejoin", "round");
    			attr_dev(path0, "d", "M15.75 19.5L8.25 12l7.5-7.5");
    			add_location(path0, file$o, 422, 36, 11400);
    			attr_dev(svg0, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg0, "fill", "none");
    			attr_dev(svg0, "viewBox", "0 0 24 24");
    			attr_dev(svg0, "stroke-width", "2");
    			attr_dev(svg0, "stroke", "white");
    			attr_dev(svg0, "height", "60");
    			attr_dev(svg0, "width", "60");
    			add_location(svg0, file$o, 421, 32, 11235);
    			attr_dev(div0, "class", "left-arrow-wrap");
    			add_location(div0, file$o, 420, 28, 11143);
    			attr_dev(path1, "stroke-linecap", "round");
    			attr_dev(path1, "stroke-linejoin", "round");
    			attr_dev(path1, "d", "M8.25 4.5l7.5 7.5-7.5 7.5");
    			add_location(path1, file$o, 427, 36, 11852);
    			attr_dev(svg1, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg1, "fill", "none");
    			attr_dev(svg1, "viewBox", "0 0 24 24");
    			attr_dev(svg1, "stroke-width", "2");
    			attr_dev(svg1, "stroke", "white");
    			attr_dev(svg1, "height", "60");
    			attr_dev(svg1, "width", "60");
    			add_location(svg1, file$o, 426, 32, 11687);
    			attr_dev(div1, "class", "right-arrow-wrap");
    			add_location(div1, file$o, 425, 28, 11593);
    			attr_dev(div2, "class", "facad svelte-iy615z");
    			add_location(div2, file$o, 419, 24, 11094);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div0);
    			append_dev(div0, svg0);
    			append_dev(svg0, path0);
    			append_dev(div2, t);
    			append_dev(div2, div1);
    			append_dev(div1, svg1);
    			append_dev(svg1, path1);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*imageNavigateBack*/ ctx[12], false, false, false),
    					listen_dev(div1, "click", /*imageNavigateForth*/ ctx[13], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$2.name,
    		type: "if",
    		source: "(419:24) {#if img_hover}",
    		ctx
    	});

    	return block;
    }

    // (443:24) {:else}
    function create_else_block_3$1(ctx) {
    	let h1;

    	const block = {
    		c: function create() {
    			h1 = element("h1");
    			h1.textContent = "이미지가 없습니다";
    			add_location(h1, file$o, 443, 28, 12707);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h1, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_3$1.name,
    		type: "else",
    		source: "(443:24) {:else}",
    		ctx
    	});

    	return block;
    }

    // (434:24) {#if curr}
    function create_if_block_1$b(ctx) {
    	let img;
    	let img_src_value;
    	let t;
    	let if_block_anchor;
    	let mounted;
    	let dispose;

    	function select_block_type_1(ctx, dirty) {
    		if (/*img_hover*/ ctx[10]) return create_if_block_2$6;
    		return create_else_block_2$1;
    	}

    	let current_block_type = select_block_type_1(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			img = element("img");
    			t = space();
    			if_block.c();
    			if_block_anchor = empty();
    			if (!src_url_equal(img.src, img_src_value = /*curr*/ ctx[7].src)) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "main_pg_bg");
    			add_location(img, file$o, 434, 28, 12224);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    			/*img_binding*/ ctx[18](img);
    			insert_dev(target, t, anchor);
    			if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);

    			if (!mounted) {
    				dispose = listen_dev(img, "mouseover", /*hoverHandle*/ ctx[11], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*curr*/ 128 && !src_url_equal(img.src, img_src_value = /*curr*/ ctx[7].src)) {
    				attr_dev(img, "src", img_src_value);
    			}

    			if (current_block_type === (current_block_type = select_block_type_1(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    			/*img_binding*/ ctx[18](null);
    			if (detaching) detach_dev(t);
    			if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$b.name,
    		type: "if",
    		source: "(434:24) {#if curr}",
    		ctx
    	});

    	return block;
    }

    // (440:28) {:else}
    function create_else_block_2$1(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "class", "caption-placeholder svelte-iy615z");
    			add_location(div, file$o, 440, 32, 12570);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_2$1.name,
    		type: "else",
    		source: "(440:28) {:else}",
    		ctx
    	});

    	return block;
    }

    // (436:28) {#if img_hover}
    function create_if_block_2$6(ctx) {
    	let div;
    	let h4;
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			h4 = element("h4");
    			t = text(/*name*/ ctx[9]);
    			attr_dev(h4, "class", "svelte-iy615z");
    			add_location(h4, file$o, 437, 36, 12444);
    			attr_dev(div, "class", "caption svelte-iy615z");
    			add_location(div, file$o, 436, 32, 12385);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, h4);
    			append_dev(h4, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*name*/ 512) set_data_dev(t, /*name*/ ctx[9]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$6.name,
    		type: "if",
    		source: "(436:28) {#if img_hover}",
    		ctx
    	});

    	return block;
    }

    // (477:32) {:else}
    function create_else_block_1$1(ctx) {
    	let h5;

    	const block = {
    		c: function create() {
    			h5 = element("h5");
    			h5.textContent = "주요 참석자가 없습니다.";
    			add_location(h5, file$o, 477, 36, 14300);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h5, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h5);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1$1.name,
    		type: "else",
    		source: "(477:32) {:else}",
    		ctx
    	});

    	return block;
    }

    // (475:32) {#each attendee as person, index}
    function create_each_block$a(ctx) {
    	let h5;
    	let t0;
    	let t1_value = /*person*/ ctx[25] + "";
    	let t1;

    	const block = {
    		c: function create() {
    			h5 = element("h5");
    			t0 = text("#");
    			t1 = text(t1_value);
    			add_location(h5, file$o, 475, 36, 14203);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h5, anchor);
    			append_dev(h5, t0);
    			append_dev(h5, t1);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*attendee*/ 16 && t1_value !== (t1_value = /*person*/ ctx[25] + "")) set_data_dev(t1, t1_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h5);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$a.name,
    		type: "each",
    		source: "(475:32) {#each attendee as person, index}",
    		ctx
    	});

    	return block;
    }

    // (490:28) {:else}
    function create_else_block$c(ctx) {
    	let h5;
    	let svg;
    	let path;
    	let t;

    	const block = {
    		c: function create() {
    			h5 = element("h5");
    			svg = svg_element("svg");
    			path = svg_element("path");
    			t = text("\r\n                                    본 기록물은 생산되었습니다.");
    			attr_dev(path, "stroke-linecap", "round");
    			attr_dev(path, "stroke-linejoin", "round");
    			attr_dev(path, "d", "M11.25 11.25l.041-.02a.75.75 0 011.063.852l-.708 2.836a.75.75 0 001.063.853l.041-.021M21 12a9 9 0 11-18 0 9 9 0 0118 0zm-9-3.75h.008v.008H12V8.25z");
    			add_location(path, file$o, 492, 40, 15408);
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "fill", "none");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			attr_dev(svg, "stroke-width", "2");
    			attr_dev(svg, "stroke", "black");
    			attr_dev(svg, "width", "14");
    			attr_dev(svg, "height", "14");
    			attr_dev(svg, "class", "svelte-iy615z");
    			add_location(svg, file$o, 491, 36, 15239);
    			attr_dev(h5, "class", "svelte-iy615z");
    			add_location(h5, file$o, 490, 32, 15197);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h5, anchor);
    			append_dev(h5, svg);
    			append_dev(svg, path);
    			append_dev(h5, t);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h5);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$c.name,
    		type: "else",
    		source: "(490:28) {:else}",
    		ctx
    	});

    	return block;
    }

    // (483:28) {#if produced}
    function create_if_block$e(ctx) {
    	let h5;
    	let svg;
    	let path;
    	let t;

    	const block = {
    		c: function create() {
    			h5 = element("h5");
    			svg = svg_element("svg");
    			path = svg_element("path");
    			t = text("\r\n                                    본 기록물은 수집되었습니다.");
    			attr_dev(path, "stroke-linecap", "round");
    			attr_dev(path, "stroke-linejoin", "round");
    			attr_dev(path, "d", "M11.25 11.25l.041-.02a.75.75 0 011.063.852l-.708 2.836a.75.75 0 001.063.853l.041-.021M21 12a9 9 0 11-18 0 9 9 0 0118 0zm-9-3.75h.008v.008H12V8.25z");
    			add_location(path, file$o, 485, 40, 14784);
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "fill", "none");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			attr_dev(svg, "stroke-width", "2");
    			attr_dev(svg, "stroke", "black");
    			attr_dev(svg, "width", "14");
    			attr_dev(svg, "height", "14");
    			attr_dev(svg, "class", "svelte-iy615z");
    			add_location(svg, file$o, 484, 36, 14615);
    			attr_dev(h5, "class", "svelte-iy615z");
    			add_location(h5, file$o, 483, 32, 14573);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h5, anchor);
    			append_dev(h5, svg);
    			append_dev(svg, path);
    			append_dev(h5, t);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h5);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$e.name,
    		type: "if",
    		source: "(483:28) {#if produced}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$t(ctx) {
    	let div31;
    	let div10;
    	let div0;
    	let svg0;
    	let path0;
    	let path0_intro;
    	let t0;
    	let h30;
    	let t1;
    	let t2;
    	let div5;
    	let div2;
    	let svg1;
    	let path1;
    	let t3;
    	let div1;
    	let t4;
    	let h31;
    	let t5;
    	let t6;
    	let div4;
    	let svg2;
    	let path2;
    	let t7;
    	let div3;
    	let t8;
    	let h32;
    	let t9;
    	let t10;
    	let div9;
    	let div6;
    	let svg3;
    	let path3;
    	let t11;
    	let div7;
    	let svg4;
    	let path4;
    	let t12;
    	let div8;
    	let svg5;
    	let path5;
    	let t13;
    	let div30;
    	let div29;
    	let div12;
    	let div11;
    	let t14;
    	let t15;
    	let div28;
    	let div13;
    	let h50;
    	let t17;
    	let div25;
    	let div16;
    	let div14;
    	let h51;
    	let t19;
    	let div15;
    	let h52;
    	let t20;
    	let t21;
    	let t22;
    	let div19;
    	let div17;
    	let h53;
    	let t24;
    	let div18;
    	let h54;
    	let t25;
    	let t26;
    	let t27;
    	let div22;
    	let div20;
    	let h55;
    	let t29;
    	let div21;
    	let t30;
    	let div23;
    	let t31;
    	let div24;
    	let h56;
    	let svg6;
    	let path6;
    	let t32;
    	let t33;
    	let div26;
    	let h57;
    	let t35;
    	let div27;
    	let mounted;
    	let dispose;
    	let if_block0 = /*img_hover*/ ctx[10] && create_if_block_3$2(ctx);

    	function select_block_type(ctx, dirty) {
    		if (/*curr*/ ctx[7]) return create_if_block_1$b;
    		return create_else_block_3$1;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block1 = current_block_type(ctx);
    	let each_value = /*attendee*/ ctx[4];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$a(get_each_context$a(ctx, each_value, i));
    	}

    	let each_1_else = null;

    	if (!each_value.length) {
    		each_1_else = create_else_block_1$1(ctx);
    	}

    	function select_block_type_2(ctx, dirty) {
    		if (/*produced*/ ctx[6]) return create_if_block$e;
    		return create_else_block$c;
    	}

    	let current_block_type_1 = select_block_type_2(ctx);
    	let if_block2 = current_block_type_1(ctx);

    	const block = {
    		c: function create() {
    			div31 = element("div");
    			div10 = element("div");
    			div0 = element("div");
    			svg0 = svg_element("svg");
    			path0 = svg_element("path");
    			t0 = space();
    			h30 = element("h3");
    			t1 = text(/*title*/ ctx[1]);
    			t2 = space();
    			div5 = element("div");
    			div2 = element("div");
    			svg1 = svg_element("svg");
    			path1 = svg_element("path");
    			t3 = space();
    			div1 = element("div");
    			t4 = space();
    			h31 = element("h3");
    			t5 = text(/*associate*/ ctx[3]);
    			t6 = space();
    			div4 = element("div");
    			svg2 = svg_element("svg");
    			path2 = svg_element("path");
    			t7 = space();
    			div3 = element("div");
    			t8 = space();
    			h32 = element("h3");
    			t9 = text(/*date*/ ctx[5]);
    			t10 = space();
    			div9 = element("div");
    			div6 = element("div");
    			svg3 = svg_element("svg");
    			path3 = svg_element("path");
    			t11 = space();
    			div7 = element("div");
    			svg4 = svg_element("svg");
    			path4 = svg_element("path");
    			t12 = space();
    			div8 = element("div");
    			svg5 = svg_element("svg");
    			path5 = svg_element("path");
    			t13 = space();
    			div30 = element("div");
    			div29 = element("div");
    			div12 = element("div");
    			div11 = element("div");
    			if (if_block0) if_block0.c();
    			t14 = space();
    			if_block1.c();
    			t15 = space();
    			div28 = element("div");
    			div13 = element("div");
    			h50 = element("h5");
    			h50.textContent = "세부사항";
    			t17 = space();
    			div25 = element("div");
    			div16 = element("div");
    			div14 = element("div");
    			h51 = element("h5");
    			h51.textContent = "대표장소:";
    			t19 = space();
    			div15 = element("div");
    			h52 = element("h5");
    			t20 = text("@");
    			t21 = text(/*location*/ ctx[2]);
    			t22 = space();
    			div19 = element("div");
    			div17 = element("div");
    			h53 = element("h5");
    			h53.textContent = "촬영자:";
    			t24 = space();
    			div18 = element("div");
    			h54 = element("h5");
    			t25 = text("#");
    			t26 = text(/*associate*/ ctx[3]);
    			t27 = space();
    			div22 = element("div");
    			div20 = element("div");
    			h55 = element("h5");
    			h55.textContent = "주요참석자:";
    			t29 = space();
    			div21 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			if (each_1_else) {
    				each_1_else.c();
    			}

    			t30 = space();
    			div23 = element("div");
    			if_block2.c();
    			t31 = space();
    			div24 = element("div");
    			h56 = element("h5");
    			svg6 = svg_element("svg");
    			path6 = svg_element("path");
    			t32 = text("\r\n                                    본 기록물은 또한 공개 기록물입니다.");
    			t33 = space();
    			div26 = element("div");
    			h57 = element("h5");
    			h57.textContent = "설명";
    			t35 = space();
    			div27 = element("div");
    			attr_dev(path0, "stroke-linecap", "round");
    			attr_dev(path0, "stroke-linejoin", "round");
    			attr_dev(path0, "d", "M9 12.75L11.25 15 15 9.75M21 12a9 9 0 11-18 0 9 9 0 0118 0z");
    			add_location(path0, file$o, 369, 20, 7910);
    			attr_dev(svg0, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg0, "fill", "none");
    			attr_dev(svg0, "viewBox", "0 0 24 24");
    			attr_dev(svg0, "stroke-width", "2");
    			attr_dev(svg0, "stroke", "rgb(99, 228, 99)");
    			attr_dev(svg0, "height", "18");
    			attr_dev(svg0, "width", "18");
    			add_location(svg0, file$o, 368, 16, 7750);
    			attr_dev(div0, "class", "approved-mark-wrap svelte-iy615z");
    			add_location(div0, file$o, 367, 12, 7700);
    			attr_dev(h30, "class", "svelte-iy615z");
    			add_location(h30, file$o, 373, 12, 8124);
    			attr_dev(path1, "stroke-linecap", "round");
    			attr_dev(path1, "stroke-linejoin", "round");
    			attr_dev(path1, "d", "M15.75 6a3.75 3.75 0 11-7.5 0 3.75 3.75 0 017.5 0zM4.501 20.118a7.5 7.5 0 0114.998 0A17.933 17.933 0 0112 21.75c-2.676 0-5.216-.584-7.499-1.632z");
    			add_location(path1, file$o, 380, 24, 8434);
    			attr_dev(svg1, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg1, "fill", "none");
    			attr_dev(svg1, "viewBox", "0 0 24 24");
    			attr_dev(svg1, "stroke-width", "2");
    			attr_dev(svg1, "stroke", "currentColor");
    			attr_dev(svg1, "height", "11");
    			attr_dev(svg1, "width", "11");
    			add_location(svg1, file$o, 379, 20, 8274);
    			attr_dev(div1, "class", "space svelte-iy615z");
    			add_location(div1, file$o, 382, 20, 8688);
    			attr_dev(h31, "class", "svelte-iy615z");
    			add_location(h31, file$o, 383, 20, 8735);
    			attr_dev(div2, "class", "name-wrap svelte-iy615z");
    			add_location(div2, file$o, 378, 16, 8229);
    			attr_dev(path2, "stroke-linecap", "round");
    			attr_dev(path2, "stroke-linejoin", "round");
    			attr_dev(path2, "d", "M6.75 3v2.25M17.25 3v2.25M3 18.75V7.5a2.25 2.25 0 012.25-2.25h13.5A2.25 2.25 0 0121 7.5v11.25m-18 0A2.25 2.25 0 005.25 21h13.5A2.25 2.25 0 0021 18.75m-18 0v-7.5A2.25 2.25 0 015.25 9h13.5A2.25 2.25 0 0121 11.25v7.5");
    			add_location(path2, file$o, 387, 24, 9002);
    			attr_dev(svg2, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg2, "fill", "none");
    			attr_dev(svg2, "viewBox", "0 0 24 24");
    			attr_dev(svg2, "stroke-width", "2");
    			attr_dev(svg2, "stroke", "currentColor");
    			attr_dev(svg2, "height", "11");
    			attr_dev(svg2, "width", "11");
    			add_location(svg2, file$o, 386, 20, 8842);
    			attr_dev(div3, "class", "space svelte-iy615z");
    			add_location(div3, file$o, 389, 20, 9325);
    			attr_dev(h32, "class", "svelte-iy615z");
    			add_location(h32, file$o, 390, 20, 9372);
    			attr_dev(div4, "class", "date-wrap svelte-iy615z");
    			add_location(div4, file$o, 385, 16, 8797);
    			attr_dev(div5, "class", "info-wrap svelte-iy615z");
    			add_location(div5, file$o, 377, 12, 8188);
    			attr_dev(path3, "stroke-linecap", "round");
    			attr_dev(path3, "stroke-linejoin", "round");
    			attr_dev(path3, "d", "M12 4.5v15m7.5-7.5h-15");
    			add_location(path3, file$o, 397, 24, 9698);
    			attr_dev(svg3, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg3, "fill", "none");
    			attr_dev(svg3, "viewBox", "0 0 24 24");
    			attr_dev(svg3, "stroke-width", "2");
    			attr_dev(svg3, "stroke", "currentColor");
    			attr_dev(svg3, "height", "18");
    			attr_dev(svg3, "width", "18");
    			add_location(svg3, file$o, 396, 20, 9538);
    			attr_dev(div6, "class", "fix-wrap icon svelte-iy615z");
    			add_location(div6, file$o, 395, 16, 9489);
    			attr_dev(path4, "stroke-linecap", "round");
    			attr_dev(path4, "stroke-linejoin", "round");
    			attr_dev(path4, "d", "M14.857 17.082a23.848 23.848 0 005.454-1.31A8.967 8.967 0 0118 9.75v-.7V9A6 6 0 006 9v.75a8.967 8.967 0 01-2.312 6.022c1.733.64 3.56 1.085 5.455 1.31m5.714 0a24.255 24.255 0 01-5.714 0m5.714 0a3 3 0 11-5.714 0");
    			add_location(path4, file$o, 402, 24, 10060);
    			attr_dev(svg4, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg4, "fill", "none");
    			attr_dev(svg4, "viewBox", "0 0 24 24");
    			attr_dev(svg4, "stroke-width", "2");
    			attr_dev(svg4, "stroke", "currentColor");
    			attr_dev(svg4, "height", "18");
    			attr_dev(svg4, "width", "18");
    			add_location(svg4, file$o, 401, 20, 9900);
    			attr_dev(div7, "class", "bell-wrap icon svelte-iy615z");
    			add_location(div7, file$o, 400, 16, 9850);
    			attr_dev(path5, "stroke-linecap", "round");
    			attr_dev(path5, "stroke-linejoin", "round");
    			attr_dev(path5, "d", "M3 16.5v2.25A2.25 2.25 0 005.25 21h13.5A2.25 2.25 0 0021 18.75V16.5M16.5 12L12 16.5m0 0L7.5 12m4.5 4.5V3");
    			add_location(path5, file$o, 407, 24, 10613);
    			attr_dev(svg5, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg5, "fill", "none");
    			attr_dev(svg5, "viewBox", "0 0 24 24");
    			attr_dev(svg5, "stroke-width", "2");
    			attr_dev(svg5, "stroke", "currentColor");
    			attr_dev(svg5, "height", "18");
    			attr_dev(svg5, "width", "18");
    			add_location(svg5, file$o, 406, 20, 10453);
    			attr_dev(div8, "class", "download-wrap icon svelte-iy615z");
    			add_location(div8, file$o, 405, 16, 10399);
    			attr_dev(div9, "class", "icons-wrap svelte-iy615z");
    			add_location(div9, file$o, 394, 12, 9447);
    			attr_dev(div10, "class", "header svelte-iy615z");
    			add_location(div10, file$o, 365, 4, 7664);
    			attr_dev(div11, "class", "photo-container svelte-iy615z");
    			add_location(div11, file$o, 417, 20, 10998);
    			attr_dev(div12, "class", "media-wrap svelte-iy615z");
    			add_location(div12, file$o, 416, 16, 10952);
    			attr_dev(h50, "class", "svelte-iy615z");
    			add_location(h50, file$o, 449, 24, 12925);
    			attr_dev(div13, "class", "info-header svelte-iy615z");
    			add_location(div13, file$o, 448, 20, 12874);
    			add_location(h51, file$o, 454, 32, 13164);
    			attr_dev(div14, "class", "label");
    			add_location(div14, file$o, 453, 28, 13111);
    			add_location(h52, file$o, 457, 32, 13318);
    			attr_dev(div15, "class", "location info-item-content svelte-iy615z");
    			add_location(div15, file$o, 456, 28, 13244);
    			attr_dev(div16, "class", "location-wrap info-item svelte-iy615z");
    			add_location(div16, file$o, 452, 24, 13044);
    			add_location(h53, file$o, 463, 32, 13587);
    			attr_dev(div17, "class", "label");
    			add_location(div17, file$o, 462, 28, 13534);
    			add_location(h54, file$o, 466, 32, 13741);
    			attr_dev(div18, "class", "associate info-item-content svelte-iy615z");
    			add_location(div18, file$o, 465, 28, 13666);
    			attr_dev(div19, "class", "assosiate-wrap info-item svelte-iy615z");
    			add_location(div19, file$o, 461, 24, 13466);
    			add_location(h55, file$o, 471, 32, 13976);
    			attr_dev(div20, "class", "label");
    			add_location(div20, file$o, 470, 28, 13923);
    			attr_dev(div21, "class", "attendees info-item-content svelte-iy615z");
    			add_location(div21, file$o, 473, 28, 14057);
    			attr_dev(div22, "class", "attendee-wrap info-item svelte-iy615z");
    			add_location(div22, file$o, 469, 24, 13856);
    			attr_dev(div23, "class", "collected-wrap info-item svelte-iy615z");
    			add_location(div23, file$o, 481, 24, 14457);
    			attr_dev(path6, "stroke-linecap", "round");
    			attr_dev(path6, "stroke-linejoin", "round");
    			attr_dev(path6, "d", "M11.25 11.25l.041-.02a.75.75 0 011.063.852l-.708 2.836a.75.75 0 001.063.853l.041-.021M21 12a9 9 0 11-18 0 9 9 0 0118 0zm-9-3.75h.008v.008H12V8.25z");
    			add_location(path6, file$o, 511, 40, 16869);
    			attr_dev(svg6, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg6, "fill", "none");
    			attr_dev(svg6, "viewBox", "0 0 24 24");
    			attr_dev(svg6, "stroke-width", "2");
    			attr_dev(svg6, "stroke", "black");
    			attr_dev(svg6, "width", "14");
    			attr_dev(svg6, "height", "14");
    			attr_dev(svg6, "class", "svelte-iy615z");
    			add_location(svg6, file$o, 510, 36, 16700);
    			attr_dev(h56, "class", "svelte-iy615z");
    			add_location(h56, file$o, 509, 32, 16658);
    			attr_dev(div24, "class", "private-wrap info-item svelte-iy615z");
    			add_location(div24, file$o, 498, 24, 15843);
    			attr_dev(div25, "class", "detail-wrap-info svelte-iy615z");
    			add_location(div25, file$o, 451, 20, 12988);
    			attr_dev(h57, "class", "svelte-iy615z");
    			add_location(h57, file$o, 519, 24, 17394);
    			attr_dev(div26, "class", "content-header svelte-iy615z");
    			add_location(div26, file$o, 518, 20, 17340);
    			attr_dev(div27, "class", "detail-wrap-content svelte-iy615z");
    			attr_dev(div27, "contenteditable", "false");
    			if (/*content*/ ctx[0] === void 0) add_render_callback(() => /*div27_input_handler*/ ctx[19].call(div27));
    			add_location(div27, file$o, 521, 20, 17455);
    			attr_dev(div28, "class", "details-wrap svelte-iy615z");
    			add_location(div28, file$o, 447, 16, 12826);
    			attr_dev(div29, "class", "body-content-wrap svelte-iy615z");
    			add_location(div29, file$o, 415, 12, 10903);
    			attr_dev(div30, "class", "body svelte-iy615z");
    			add_location(div30, file$o, 414, 4, 10871);
    			attr_dev(div31, "class", "focus svelte-iy615z");
    			add_location(div31, file$o, 364, 0, 7639);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div31, anchor);
    			append_dev(div31, div10);
    			append_dev(div10, div0);
    			append_dev(div0, svg0);
    			append_dev(svg0, path0);
    			append_dev(div10, t0);
    			append_dev(div10, h30);
    			append_dev(h30, t1);
    			append_dev(div10, t2);
    			append_dev(div10, div5);
    			append_dev(div5, div2);
    			append_dev(div2, svg1);
    			append_dev(svg1, path1);
    			append_dev(div2, t3);
    			append_dev(div2, div1);
    			append_dev(div2, t4);
    			append_dev(div2, h31);
    			append_dev(h31, t5);
    			append_dev(div5, t6);
    			append_dev(div5, div4);
    			append_dev(div4, svg2);
    			append_dev(svg2, path2);
    			append_dev(div4, t7);
    			append_dev(div4, div3);
    			append_dev(div4, t8);
    			append_dev(div4, h32);
    			append_dev(h32, t9);
    			append_dev(div10, t10);
    			append_dev(div10, div9);
    			append_dev(div9, div6);
    			append_dev(div6, svg3);
    			append_dev(svg3, path3);
    			append_dev(div9, t11);
    			append_dev(div9, div7);
    			append_dev(div7, svg4);
    			append_dev(svg4, path4);
    			append_dev(div9, t12);
    			append_dev(div9, div8);
    			append_dev(div8, svg5);
    			append_dev(svg5, path5);
    			append_dev(div31, t13);
    			append_dev(div31, div30);
    			append_dev(div30, div29);
    			append_dev(div29, div12);
    			append_dev(div12, div11);
    			if (if_block0) if_block0.m(div11, null);
    			append_dev(div11, t14);
    			if_block1.m(div11, null);
    			append_dev(div29, t15);
    			append_dev(div29, div28);
    			append_dev(div28, div13);
    			append_dev(div13, h50);
    			append_dev(div28, t17);
    			append_dev(div28, div25);
    			append_dev(div25, div16);
    			append_dev(div16, div14);
    			append_dev(div14, h51);
    			append_dev(div16, t19);
    			append_dev(div16, div15);
    			append_dev(div15, h52);
    			append_dev(h52, t20);
    			append_dev(h52, t21);
    			append_dev(div25, t22);
    			append_dev(div25, div19);
    			append_dev(div19, div17);
    			append_dev(div17, h53);
    			append_dev(div19, t24);
    			append_dev(div19, div18);
    			append_dev(div18, h54);
    			append_dev(h54, t25);
    			append_dev(h54, t26);
    			append_dev(div25, t27);
    			append_dev(div25, div22);
    			append_dev(div22, div20);
    			append_dev(div20, h55);
    			append_dev(div22, t29);
    			append_dev(div22, div21);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div21, null);
    			}

    			if (each_1_else) {
    				each_1_else.m(div21, null);
    			}

    			append_dev(div25, t30);
    			append_dev(div25, div23);
    			if_block2.m(div23, null);
    			append_dev(div25, t31);
    			append_dev(div25, div24);
    			append_dev(div24, h56);
    			append_dev(h56, svg6);
    			append_dev(svg6, path6);
    			append_dev(h56, t32);
    			append_dev(div28, t33);
    			append_dev(div28, div26);
    			append_dev(div26, h57);
    			append_dev(div28, t35);
    			append_dev(div28, div27);

    			if (/*content*/ ctx[0] !== void 0) {
    				div27.innerHTML = /*content*/ ctx[0];
    			}

    			if (!mounted) {
    				dispose = listen_dev(div27, "input", /*div27_input_handler*/ ctx[19]);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*title*/ 2) set_data_dev(t1, /*title*/ ctx[1]);
    			if (dirty & /*associate*/ 8) set_data_dev(t5, /*associate*/ ctx[3]);
    			if (dirty & /*date*/ 32) set_data_dev(t9, /*date*/ ctx[5]);

    			if (/*img_hover*/ ctx[10]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_3$2(ctx);
    					if_block0.c();
    					if_block0.m(div11, t14);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block1) {
    				if_block1.p(ctx, dirty);
    			} else {
    				if_block1.d(1);
    				if_block1 = current_block_type(ctx);

    				if (if_block1) {
    					if_block1.c();
    					if_block1.m(div11, null);
    				}
    			}

    			if (dirty & /*location*/ 4) set_data_dev(t21, /*location*/ ctx[2]);
    			if (dirty & /*associate*/ 8) set_data_dev(t26, /*associate*/ ctx[3]);

    			if (dirty & /*attendee*/ 16) {
    				each_value = /*attendee*/ ctx[4];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$a(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$a(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div21, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;

    				if (!each_value.length && each_1_else) {
    					each_1_else.p(ctx, dirty);
    				} else if (!each_value.length) {
    					each_1_else = create_else_block_1$1(ctx);
    					each_1_else.c();
    					each_1_else.m(div21, null);
    				} else if (each_1_else) {
    					each_1_else.d(1);
    					each_1_else = null;
    				}
    			}

    			if (current_block_type_1 !== (current_block_type_1 = select_block_type_2(ctx))) {
    				if_block2.d(1);
    				if_block2 = current_block_type_1(ctx);

    				if (if_block2) {
    					if_block2.c();
    					if_block2.m(div23, null);
    				}
    			}

    			if (dirty & /*content*/ 1 && /*content*/ ctx[0] !== div27.innerHTML) {
    				div27.innerHTML = /*content*/ ctx[0];
    			}
    		},
    		i: function intro(local) {
    			if (!path0_intro) {
    				add_render_callback(() => {
    					path0_intro = create_in_transition(path0, draw, { duration: 700, speed: 1 });
    					path0_intro.start();
    				});
    			}
    		},
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div31);
    			if (if_block0) if_block0.d();
    			if_block1.d();
    			destroy_each(each_blocks, detaching);
    			if (each_1_else) each_1_else.d();
    			if_block2.d();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$t.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$t($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Preview', slots, []);
    	let { item_objs } = $$props;
    	let { title } = $$props;
    	let { location } = $$props;
    	let { affiliation } = $$props;
    	let { associate } = $$props;
    	let { attendee } = $$props;
    	let { date } = $$props;
    	let { produced } = $$props;
    	let { type } = $$props;
    	let { content } = $$props;
    	let img_hover = false;
    	let curr;
    	let file_copy = [...item_objs];
    	curr = getPhotoFromFront();
    	console.log(curr);
    	var dispatch = createEventDispatcher();

    	function hoverHandle() {
    		$$invalidate(10, img_hover = true);
    		console.log('hover');

    		setTimeout(
    			() => {
    				if (img_hover) {
    					$$invalidate(10, img_hover = false);
    				}
    			},
    			4000
    		);
    	}

    	function getPhotoFromFront() {
    		if (file_copy) {
    			let result = file_copy.shift();
    			$$invalidate(17, file_copy = [...file_copy, result]);
    			return result;
    		} else {
    			console.log("No file object detected");
    		}
    	}

    	function getPhotoFromBack() {
    		if (file_copy) {
    			let result = file_copy.pop();
    			$$invalidate(17, file_copy = [result, ...file_copy]);
    			return result;
    		} else {
    			console.log("No file object detected");
    		}
    	}

    	function imageNavigateBack() {
    		$$invalidate(7, curr = getPhotoFromBack());
    	}

    	function imageNavigateForth() {
    		$$invalidate(7, curr = getPhotoFromFront());
    	}

    	/* Test variables to be fetched from server when online */
    	/* USER object:
            @authority - Show the contents to authorized personal only. 
                         Set false at default.
            @name      - Name of the logged in user.  
    */
    	let user = { authority: true, name: "Kim" };

    	let image;
    	let preview_source;
    	let name;

    	const writable_props = [
    		'item_objs',
    		'title',
    		'location',
    		'affiliation',
    		'associate',
    		'attendee',
    		'date',
    		'produced',
    		'type',
    		'content'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$6.warn(`<Preview> was created with unknown prop '${key}'`);
    	});

    	function img_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			image = $$value;
    			((($$invalidate(8, image), $$invalidate(7, curr)), $$invalidate(9, name)), $$invalidate(17, file_copy));
    		});
    	}

    	function div27_input_handler() {
    		content = this.innerHTML;
    		$$invalidate(0, content);
    	}

    	$$self.$$set = $$props => {
    		if ('item_objs' in $$props) $$invalidate(14, item_objs = $$props.item_objs);
    		if ('title' in $$props) $$invalidate(1, title = $$props.title);
    		if ('location' in $$props) $$invalidate(2, location = $$props.location);
    		if ('affiliation' in $$props) $$invalidate(15, affiliation = $$props.affiliation);
    		if ('associate' in $$props) $$invalidate(3, associate = $$props.associate);
    		if ('attendee' in $$props) $$invalidate(4, attendee = $$props.attendee);
    		if ('date' in $$props) $$invalidate(5, date = $$props.date);
    		if ('produced' in $$props) $$invalidate(6, produced = $$props.produced);
    		if ('type' in $$props) $$invalidate(16, type = $$props.type);
    		if ('content' in $$props) $$invalidate(0, content = $$props.content);
    	};

    	$$self.$capture_state = () => ({
    		createEventDispatcher,
    		onDestroy,
    		onMount,
    		draw,
    		item_objs,
    		title,
    		location,
    		affiliation,
    		associate,
    		attendee,
    		date,
    		produced,
    		type,
    		content,
    		img_hover,
    		curr,
    		file_copy,
    		dispatch,
    		hoverHandle,
    		getPhotoFromFront,
    		getPhotoFromBack,
    		imageNavigateBack,
    		imageNavigateForth,
    		user,
    		image,
    		preview_source,
    		name
    	});

    	$$self.$inject_state = $$props => {
    		if ('item_objs' in $$props) $$invalidate(14, item_objs = $$props.item_objs);
    		if ('title' in $$props) $$invalidate(1, title = $$props.title);
    		if ('location' in $$props) $$invalidate(2, location = $$props.location);
    		if ('affiliation' in $$props) $$invalidate(15, affiliation = $$props.affiliation);
    		if ('associate' in $$props) $$invalidate(3, associate = $$props.associate);
    		if ('attendee' in $$props) $$invalidate(4, attendee = $$props.attendee);
    		if ('date' in $$props) $$invalidate(5, date = $$props.date);
    		if ('produced' in $$props) $$invalidate(6, produced = $$props.produced);
    		if ('type' in $$props) $$invalidate(16, type = $$props.type);
    		if ('content' in $$props) $$invalidate(0, content = $$props.content);
    		if ('img_hover' in $$props) $$invalidate(10, img_hover = $$props.img_hover);
    		if ('curr' in $$props) $$invalidate(7, curr = $$props.curr);
    		if ('file_copy' in $$props) $$invalidate(17, file_copy = $$props.file_copy);
    		if ('dispatch' in $$props) dispatch = $$props.dispatch;
    		if ('user' in $$props) user = $$props.user;
    		if ('image' in $$props) $$invalidate(8, image = $$props.image);
    		if ('preview_source' in $$props) preview_source = $$props.preview_source;
    		if ('name' in $$props) $$invalidate(9, name = $$props.name);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*image, curr, name, file_copy*/ 131968) {
    			 {
    				if (image) {
    					$$invalidate(9, name = curr.file.name);
    					console.log(name);

    					if (image.offsetHeight > image.offsetWidth) {
    						$$invalidate(8, image.height = 450, image);
    					} else {
    						$$invalidate(8, image.width = 450, image);
    					}
    				}

    				console.log(file_copy.length);
    			}
    		}
    	};

    	return [
    		content,
    		title,
    		location,
    		associate,
    		attendee,
    		date,
    		produced,
    		curr,
    		image,
    		name,
    		img_hover,
    		hoverHandle,
    		imageNavigateBack,
    		imageNavigateForth,
    		item_objs,
    		affiliation,
    		type,
    		file_copy,
    		img_binding,
    		div27_input_handler
    	];
    }

    class Preview extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$t, create_fragment$t, safe_not_equal, {
    			item_objs: 14,
    			title: 1,
    			location: 2,
    			affiliation: 15,
    			associate: 3,
    			attendee: 4,
    			date: 5,
    			produced: 6,
    			type: 16,
    			content: 0
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Preview",
    			options,
    			id: create_fragment$t.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*item_objs*/ ctx[14] === undefined && !('item_objs' in props)) {
    			console_1$6.warn("<Preview> was created without expected prop 'item_objs'");
    		}

    		if (/*title*/ ctx[1] === undefined && !('title' in props)) {
    			console_1$6.warn("<Preview> was created without expected prop 'title'");
    		}

    		if (/*location*/ ctx[2] === undefined && !('location' in props)) {
    			console_1$6.warn("<Preview> was created without expected prop 'location'");
    		}

    		if (/*affiliation*/ ctx[15] === undefined && !('affiliation' in props)) {
    			console_1$6.warn("<Preview> was created without expected prop 'affiliation'");
    		}

    		if (/*associate*/ ctx[3] === undefined && !('associate' in props)) {
    			console_1$6.warn("<Preview> was created without expected prop 'associate'");
    		}

    		if (/*attendee*/ ctx[4] === undefined && !('attendee' in props)) {
    			console_1$6.warn("<Preview> was created without expected prop 'attendee'");
    		}

    		if (/*date*/ ctx[5] === undefined && !('date' in props)) {
    			console_1$6.warn("<Preview> was created without expected prop 'date'");
    		}

    		if (/*produced*/ ctx[6] === undefined && !('produced' in props)) {
    			console_1$6.warn("<Preview> was created without expected prop 'produced'");
    		}

    		if (/*type*/ ctx[16] === undefined && !('type' in props)) {
    			console_1$6.warn("<Preview> was created without expected prop 'type'");
    		}

    		if (/*content*/ ctx[0] === undefined && !('content' in props)) {
    			console_1$6.warn("<Preview> was created without expected prop 'content'");
    		}
    	}

    	get item_objs() {
    		throw new Error("<Preview>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set item_objs(value) {
    		throw new Error("<Preview>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get title() {
    		throw new Error("<Preview>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set title(value) {
    		throw new Error("<Preview>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get location() {
    		throw new Error("<Preview>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set location(value) {
    		throw new Error("<Preview>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get affiliation() {
    		throw new Error("<Preview>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set affiliation(value) {
    		throw new Error("<Preview>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get associate() {
    		throw new Error("<Preview>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set associate(value) {
    		throw new Error("<Preview>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get attendee() {
    		throw new Error("<Preview>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set attendee(value) {
    		throw new Error("<Preview>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get date() {
    		throw new Error("<Preview>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set date(value) {
    		throw new Error("<Preview>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get produced() {
    		throw new Error("<Preview>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set produced(value) {
    		throw new Error("<Preview>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get type() {
    		throw new Error("<Preview>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set type(value) {
    		throw new Error("<Preview>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get content() {
    		throw new Error("<Preview>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set content(value) {
    		throw new Error("<Preview>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* pages/content_container/ManageCreateContainer.svelte generated by Svelte v3.50.1 */

    const { console: console_1$7 } = globals;
    const file$p = "pages/content_container/ManageCreateContainer.svelte";

    function get_each_context$b(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[42] = list[i];
    	child_ctx[44] = i;
    	return child_ctx;
    }

    // (720:25) 
    function create_if_block_7$1(ctx) {
    	let preview;
    	let current;

    	preview = new Preview({
    			props: {
    				item_objs: /*item_objs*/ ctx[2],
    				title: /*title*/ ctx[3],
    				location: /*location*/ ctx[4],
    				affiliation: /*affiliation*/ ctx[5],
    				associate: /*associate*/ ctx[6],
    				attendee: /*attendee_list*/ ctx[7],
    				date: /*date*/ ctx[8],
    				produced: /*produced*/ ctx[9],
    				type: /*type*/ ctx[10],
    				content: /*content*/ ctx[13]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(preview.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(preview, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const preview_changes = {};
    			if (dirty[0] & /*item_objs*/ 4) preview_changes.item_objs = /*item_objs*/ ctx[2];
    			if (dirty[0] & /*title*/ 8) preview_changes.title = /*title*/ ctx[3];
    			if (dirty[0] & /*location*/ 16) preview_changes.location = /*location*/ ctx[4];
    			if (dirty[0] & /*affiliation*/ 32) preview_changes.affiliation = /*affiliation*/ ctx[5];
    			if (dirty[0] & /*associate*/ 64) preview_changes.associate = /*associate*/ ctx[6];
    			if (dirty[0] & /*attendee_list*/ 128) preview_changes.attendee = /*attendee_list*/ ctx[7];
    			if (dirty[0] & /*date*/ 256) preview_changes.date = /*date*/ ctx[8];
    			if (dirty[0] & /*produced*/ 512) preview_changes.produced = /*produced*/ ctx[9];
    			if (dirty[0] & /*type*/ 1024) preview_changes.type = /*type*/ ctx[10];
    			if (dirty[0] & /*content*/ 8192) preview_changes.content = /*content*/ ctx[13];
    			preview.$set(preview_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(preview.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(preview.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(preview, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_7$1.name,
    		type: "if",
    		source: "(720:25) ",
    		ctx
    	});

    	return block;
    }

    // (718:25) 
    function create_if_block_6$1(ctx) {
    	let tiptap;
    	let current;

    	tiptap = new Tiptap({
    			props: { content: /*content*/ ctx[13] },
    			$$inline: true
    		});

    	tiptap.$on("change", /*contentHandle*/ ctx[19]);

    	const block = {
    		c: function create() {
    			create_component(tiptap.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(tiptap, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const tiptap_changes = {};
    			if (dirty[0] & /*content*/ 8192) tiptap_changes.content = /*content*/ ctx[13];
    			tiptap.$set(tiptap_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(tiptap.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(tiptap.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(tiptap, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6$1.name,
    		type: "if",
    		source: "(718:25) ",
    		ctx
    	});

    	return block;
    }

    // (643:25) 
    function create_if_block_1$c(ctx) {
    	let div16;
    	let div1;
    	let t0;
    	let div0;
    	let label;
    	let h30;
    	let t2;
    	let input;
    	let t3;
    	let button0;
    	let h31;
    	let t5;
    	let button1;
    	let h32;
    	let t7;
    	let div13;
    	let div2;
    	let button2;
    	let button2_class_value;
    	let t8;
    	let div4;
    	let div3;
    	let h33;
    	let t10;
    	let div6;
    	let div5;
    	let h34;
    	let t12;
    	let div9;
    	let div8;
    	let div7;
    	let svg0;
    	let path0;
    	let t13;
    	let div12;
    	let div11;
    	let div10;
    	let svg1;
    	let path1;
    	let t14;
    	let div15;
    	let div14;
    	let current;
    	let mounted;
    	let dispose;

    	function select_block_type_1(ctx, dirty) {
    		if (/*type*/ ctx[10] == 0) return create_if_block_3$3;
    		if (/*type*/ ctx[10] == 1) return create_if_block_4$2;
    		if (/*type*/ ctx[10] == 2) return create_if_block_5$1;
    		return create_else_block$d;
    	}

    	let current_block_type = select_block_type_1(ctx);
    	let if_block0 = current_block_type(ctx);
    	let if_block1 = /*all_checked*/ ctx[11] && create_if_block_2$7(ctx);
    	let each_value = /*item_objs*/ ctx[2];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$b(get_each_context$b(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			div16 = element("div");
    			div1 = element("div");
    			if_block0.c();
    			t0 = space();
    			div0 = element("div");
    			label = element("label");
    			h30 = element("h3");
    			h30.textContent = "업로드";
    			t2 = space();
    			input = element("input");
    			t3 = space();
    			button0 = element("button");
    			h31 = element("h3");
    			h31.textContent = "저장";
    			t5 = space();
    			button1 = element("button");
    			h32 = element("h3");
    			h32.textContent = "삭제";
    			t7 = space();
    			div13 = element("div");
    			div2 = element("div");
    			button2 = element("button");
    			if (if_block1) if_block1.c();
    			t8 = space();
    			div4 = element("div");
    			div3 = element("div");
    			h33 = element("h3");
    			h33.textContent = "스냅샷";
    			t10 = space();
    			div6 = element("div");
    			div5 = element("div");
    			h34 = element("h3");
    			h34.textContent = "파일명";
    			t12 = space();
    			div9 = element("div");
    			div8 = element("div");
    			div7 = element("div");
    			svg0 = svg_element("svg");
    			path0 = svg_element("path");
    			t13 = space();
    			div12 = element("div");
    			div11 = element("div");
    			div10 = element("div");
    			svg1 = svg_element("svg");
    			path1 = svg_element("path");
    			t14 = space();
    			div15 = element("div");
    			div14 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(h30, "class", "svelte-s4xuyl");
    			add_location(h30, file$p, 655, 91, 18816);
    			attr_dev(label, "for", "file-input");
    			attr_dev(label, "class", "file-input-label svelte-s4xuyl");
    			add_location(label, file$p, 655, 20, 18745);
    			attr_dev(input, "id", "file-input");
    			attr_dev(input, "name", "file-input");
    			attr_dev(input, "class", "file-input svelte-s4xuyl");
    			attr_dev(input, "type", "file");
    			add_location(input, file$p, 656, 24, 18862);
    			attr_dev(h31, "class", "svelte-s4xuyl");
    			add_location(h31, file$p, 657, 52, 19017);
    			attr_dev(button0, "class", "svelte-s4xuyl");
    			add_location(button0, file$p, 657, 20, 18985);
    			attr_dev(h32, "class", "svelte-s4xuyl");
    			add_location(h32, file$p, 658, 50, 19089);
    			attr_dev(button1, "class", "svelte-s4xuyl");
    			add_location(button1, file$p, 658, 20, 19059);
    			attr_dev(div0, "class", "control-panel svelte-s4xuyl");
    			add_location(div0, file$p, 654, 16, 18696);
    			attr_dev(div1, "class", "header svelte-s4xuyl");
    			add_location(div1, file$p, 644, 12, 18349);

    			attr_dev(button2, "class", button2_class_value = "" + (null_to_empty(/*all_checked*/ ctx[11]
    			? 'check-btn-clicked'
    			: 'check-btn') + " svelte-s4xuyl"));

    			add_location(button2, file$p, 663, 20, 19272);
    			attr_dev(div2, "class", "header-checkbox-container svelte-s4xuyl");
    			add_location(div2, file$p, 662, 16, 19211);
    			attr_dev(h33, "class", "svelte-s4xuyl");
    			add_location(h33, file$p, 673, 24, 19941);
    			attr_dev(div3, "class", "header-container svelte-s4xuyl");
    			add_location(div3, file$p, 672, 20, 19885);
    			attr_dev(div4, "class", "header-snapshot-container svelte-s4xuyl");
    			add_location(div4, file$p, 671, 16, 19824);
    			attr_dev(h34, "class", "svelte-s4xuyl");
    			add_location(h34, file$p, 678, 24, 20137);
    			attr_dev(div5, "class", "header-container svelte-s4xuyl");
    			add_location(div5, file$p, 677, 20, 20081);
    			attr_dev(div6, "class", "header-title-container svelte-s4xuyl");
    			add_location(div6, file$p, 676, 16, 20023);
    			attr_dev(path0, "stroke-linecap", "round");
    			attr_dev(path0, "stroke-linejoin", "round");
    			attr_dev(path0, "d", "M3 16.5v2.25A2.25 2.25 0 005.25 21h13.5A2.25 2.25 0 0021 18.75V16.5M16.5 12L12 16.5m0 0L7.5 12m4.5 4.5V3");
    			add_location(path0, file$p, 685, 32, 20556);
    			attr_dev(svg0, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg0, "fill", "none");
    			attr_dev(svg0, "viewBox", "0 0 24 24");
    			attr_dev(svg0, "stroke-width", "2");
    			attr_dev(svg0, "stroke", "currentColor");
    			attr_dev(svg0, "height", "18");
    			attr_dev(svg0, "width", "18");
    			add_location(svg0, file$p, 684, 28, 20388);
    			attr_dev(div7, "class", "svg-wrap");
    			add_location(div7, file$p, 683, 24, 20336);
    			attr_dev(div8, "class", "header-container svelte-s4xuyl");
    			add_location(div8, file$p, 682, 20, 20280);
    			attr_dev(div9, "class", "header-download-container svelte-s4xuyl");
    			add_location(div9, file$p, 681, 16, 20219);
    			attr_dev(path1, "stroke-linecap", "round");
    			attr_dev(path1, "stroke-linejoin", "round");
    			attr_dev(path1, "d", "M6 18L18 6M6 6l12 12");
    			add_location(path1, file$p, 694, 32, 21193);
    			attr_dev(svg1, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg1, "fill", "none");
    			attr_dev(svg1, "viewBox", "0 0 24 24");
    			attr_dev(svg1, "stroke-width", "2");
    			attr_dev(svg1, "stroke", "currentColor");
    			attr_dev(svg1, "height", "18");
    			attr_dev(svg1, "width", "18");
    			add_location(svg1, file$p, 693, 28, 21025);
    			attr_dev(div10, "class", "svg-wrap");
    			add_location(div10, file$p, 692, 24, 20973);
    			attr_dev(div11, "class", "header-container svelte-s4xuyl");
    			add_location(div11, file$p, 691, 20, 20917);
    			attr_dev(div12, "class", "header-delete-container svelte-s4xuyl");
    			add_location(div12, file$p, 690, 16, 20858);
    			attr_dev(div13, "class", "table-header svelte-s4xuyl");
    			add_location(div13, file$p, 661, 12, 19167);
    			attr_dev(div14, "class", "table svelte-s4xuyl");
    			add_location(div14, file$p, 701, 16, 21463);
    			attr_dev(div15, "class", "body svelte-s4xuyl");
    			add_location(div15, file$p, 700, 12, 21427);
    			attr_dev(div16, "class", "upload-view svelte-s4xuyl");
    			add_location(div16, file$p, 643, 8, 18310);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div16, anchor);
    			append_dev(div16, div1);
    			if_block0.m(div1, null);
    			append_dev(div1, t0);
    			append_dev(div1, div0);
    			append_dev(div0, label);
    			append_dev(label, h30);
    			append_dev(div0, t2);
    			append_dev(div0, input);
    			append_dev(div0, t3);
    			append_dev(div0, button0);
    			append_dev(button0, h31);
    			append_dev(div0, t5);
    			append_dev(div0, button1);
    			append_dev(button1, h32);
    			append_dev(div16, t7);
    			append_dev(div16, div13);
    			append_dev(div13, div2);
    			append_dev(div2, button2);
    			if (if_block1) if_block1.m(button2, null);
    			append_dev(div13, t8);
    			append_dev(div13, div4);
    			append_dev(div4, div3);
    			append_dev(div3, h33);
    			append_dev(div13, t10);
    			append_dev(div13, div6);
    			append_dev(div6, div5);
    			append_dev(div5, h34);
    			append_dev(div13, t12);
    			append_dev(div13, div9);
    			append_dev(div9, div8);
    			append_dev(div8, div7);
    			append_dev(div7, svg0);
    			append_dev(svg0, path0);
    			append_dev(div13, t13);
    			append_dev(div13, div12);
    			append_dev(div12, div11);
    			append_dev(div11, div10);
    			append_dev(div10, svg1);
    			append_dev(svg1, path1);
    			append_dev(div16, t14);
    			append_dev(div16, div15);
    			append_dev(div15, div14);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div14, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(label, "click", /*uploadCall*/ ctx[22], false, false, false),
    					listen_dev(input, "change", /*input_change_handler*/ ctx[32]),
    					listen_dev(button0, "click", /*downloadCall*/ ctx[20], false, false, false),
    					listen_dev(button1, "click", /*deleteCall*/ ctx[21], false, false, false),
    					listen_dev(button2, "click", /*allCheckHandle*/ ctx[15], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type !== (current_block_type = select_block_type_1(ctx))) {
    				if_block0.d(1);
    				if_block0 = current_block_type(ctx);

    				if (if_block0) {
    					if_block0.c();
    					if_block0.m(div1, t0);
    				}
    			}

    			if (/*all_checked*/ ctx[11]) {
    				if (if_block1) ; else {
    					if_block1 = create_if_block_2$7(ctx);
    					if_block1.c();
    					if_block1.m(button2, null);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (!current || dirty[0] & /*all_checked*/ 2048 && button2_class_value !== (button2_class_value = "" + (null_to_empty(/*all_checked*/ ctx[11]
    			? 'check-btn-clicked'
    			: 'check-btn') + " svelte-s4xuyl"))) {
    				attr_dev(button2, "class", button2_class_value);
    			}

    			if (dirty[0] & /*item_objs, type, deleteHandle, downloadHandle, checkHandle*/ 459780) {
    				each_value = /*item_objs*/ ctx[2];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$b(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$b(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(div14, null);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div16);
    			if_block0.d();
    			if (if_block1) if_block1.d();
    			destroy_each(each_blocks, detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$c.name,
    		type: "if",
    		source: "(643:25) ",
    		ctx
    	});

    	return block;
    }

    // (613:4) {#if stage == 1}
    function create_if_block$f(ctx) {
    	let div1;
    	let div0;
    	let h30;
    	let t1;
    	let inputsinglevalue0;
    	let t2;
    	let inputmultivalue;
    	let t3;
    	let div3;
    	let div2;
    	let t4;
    	let inputsinglevalue1;
    	let t5;
    	let inputselectvalue0;
    	let t6;
    	let div5;
    	let div4;
    	let t7;
    	let inputselectvalue1;
    	let t8;
    	let inputsinglevalue2;
    	let t9;
    	let div6;
    	let t10;
    	let div8;
    	let div7;
    	let h31;
    	let t12;
    	let inputsinglevalue3;
    	let t13;
    	let inputsinglevalue4;
    	let current;

    	inputsinglevalue0 = new InputSingleValue({
    			props: {
    				placeholder: "제목을 입력해주세요",
    				init: /*title*/ ctx[3],
    				conditions: condition_set.default_conditions
    			},
    			$$inline: true
    		});

    	inputsinglevalue0.$on("change", /*change_handler*/ ctx[24]);

    	inputmultivalue = new InputMultiValue({
    			props: {
    				placeholder: "주요 참석자들을 입력해주세요",
    				init: /*attendee*/ ctx[1],
    				conditions: condition_set.attendee_conditions
    			},
    			$$inline: true
    		});

    	inputmultivalue.$on("change", /*change_handler_1*/ ctx[25]);

    	inputsinglevalue1 = new InputSingleValue({
    			props: {
    				placeholder: "행사 장소를 입력해주세요",
    				init: /*location*/ ctx[4],
    				conditions: condition_set.default_conditions
    			},
    			$$inline: true
    		});

    	inputsinglevalue1.$on("change", /*change_handler_2*/ ctx[26]);

    	inputselectvalue0 = new InputSelectValue({
    			props: {
    				placeholder: "기록 유형을 선택해주세요",
    				init: /*type*/ ctx[10],
    				conditions: condition_set.select_conditions,
    				option_list: ['사진', '영상', '문서']
    			},
    			$$inline: true
    		});

    	inputselectvalue0.$on("change", /*change_handler_3*/ ctx[27]);

    	inputselectvalue1 = new InputSelectValue({
    			props: {
    				placeholder: "생산물 여부를 선택해주세요",
    				init: /*produced*/ ctx[9],
    				conditions: condition_set.select_conditions,
    				option_list: ['생산', '수집']
    			},
    			$$inline: true
    		});

    	inputselectvalue1.$on("change", /*change_handler_4*/ ctx[28]);

    	inputsinglevalue2 = new InputSingleValue({
    			props: {
    				placeholder: "생산 부대를 입력해주세요",
    				init: /*affiliation*/ ctx[5],
    				conditions: condition_set.default_conditions
    			},
    			$$inline: true
    		});

    	inputsinglevalue2.$on("change", /*change_handler_5*/ ctx[29]);

    	inputsinglevalue3 = new InputSingleValue({
    			props: {
    				placeholder: "촬영자를 입력해주세요",
    				init: /*associate*/ ctx[6],
    				conditions: condition_set.default_conditions
    			},
    			$$inline: true
    		});

    	inputsinglevalue3.$on("change", /*change_handler_6*/ ctx[30]);

    	inputsinglevalue4 = new InputSingleValue({
    			props: {
    				placeholder: "생산연도를 입력해주세요",
    				init: /*date*/ ctx[8],
    				conditions: condition_set.default_conditions
    			},
    			$$inline: true
    		});

    	inputsinglevalue4.$on("change", /*change_handler_7*/ ctx[31]);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			h30 = element("h3");
    			h30.textContent = "기본 등록 정보";
    			t1 = space();
    			create_component(inputsinglevalue0.$$.fragment);
    			t2 = space();
    			create_component(inputmultivalue.$$.fragment);
    			t3 = space();
    			div3 = element("div");
    			div2 = element("div");
    			t4 = space();
    			create_component(inputsinglevalue1.$$.fragment);
    			t5 = space();
    			create_component(inputselectvalue0.$$.fragment);
    			t6 = space();
    			div5 = element("div");
    			div4 = element("div");
    			t7 = space();
    			create_component(inputselectvalue1.$$.fragment);
    			t8 = space();
    			create_component(inputsinglevalue2.$$.fragment);
    			t9 = space();
    			div6 = element("div");
    			t10 = space();
    			div8 = element("div");
    			div7 = element("div");
    			h31 = element("h3");
    			h31.textContent = "생산 정보";
    			t12 = space();
    			create_component(inputsinglevalue3.$$.fragment);
    			t13 = space();
    			create_component(inputsinglevalue4.$$.fragment);
    			attr_dev(h30, "class", "svelte-s4xuyl");
    			add_location(h30, file$p, 615, 16, 16415);
    			attr_dev(div0, "class", "input-category-title svelte-s4xuyl");
    			add_location(div0, file$p, 614, 12, 16363);
    			attr_dev(div1, "class", "single-input-wrap svelte-s4xuyl");
    			add_location(div1, file$p, 613, 8, 16318);
    			attr_dev(div2, "class", "padding svelte-s4xuyl");
    			add_location(div2, file$p, 621, 12, 16858);
    			attr_dev(div3, "class", "single-input-wrap svelte-s4xuyl");
    			add_location(div3, file$p, 620, 8, 16813);
    			attr_dev(div4, "class", "padding svelte-s4xuyl");
    			add_location(div4, file$p, 626, 12, 17321);
    			attr_dev(div5, "class", "single-input-wrap svelte-s4xuyl");
    			add_location(div5, file$p, 625, 8, 17276);
    			attr_dev(div6, "class", "buffer svelte-s4xuyl");
    			add_location(div6, file$p, 631, 8, 17751);
    			attr_dev(h31, "class", "svelte-s4xuyl");
    			add_location(h31, file$p, 636, 16, 17888);
    			attr_dev(div7, "class", "input-category-title svelte-s4xuyl");
    			add_location(div7, file$p, 635, 12, 17836);
    			attr_dev(div8, "class", "single-input-wrap svelte-s4xuyl");
    			add_location(div8, file$p, 634, 8, 17791);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			append_dev(div0, h30);
    			append_dev(div1, t1);
    			mount_component(inputsinglevalue0, div1, null);
    			append_dev(div1, t2);
    			mount_component(inputmultivalue, div1, null);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div2);
    			append_dev(div3, t4);
    			mount_component(inputsinglevalue1, div3, null);
    			append_dev(div3, t5);
    			mount_component(inputselectvalue0, div3, null);
    			insert_dev(target, t6, anchor);
    			insert_dev(target, div5, anchor);
    			append_dev(div5, div4);
    			append_dev(div5, t7);
    			mount_component(inputselectvalue1, div5, null);
    			append_dev(div5, t8);
    			mount_component(inputsinglevalue2, div5, null);
    			insert_dev(target, t9, anchor);
    			insert_dev(target, div6, anchor);
    			insert_dev(target, t10, anchor);
    			insert_dev(target, div8, anchor);
    			append_dev(div8, div7);
    			append_dev(div7, h31);
    			append_dev(div8, t12);
    			mount_component(inputsinglevalue3, div8, null);
    			append_dev(div8, t13);
    			mount_component(inputsinglevalue4, div8, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const inputsinglevalue0_changes = {};
    			if (dirty[0] & /*title*/ 8) inputsinglevalue0_changes.init = /*title*/ ctx[3];
    			inputsinglevalue0.$set(inputsinglevalue0_changes);
    			const inputmultivalue_changes = {};
    			if (dirty[0] & /*attendee*/ 2) inputmultivalue_changes.init = /*attendee*/ ctx[1];
    			inputmultivalue.$set(inputmultivalue_changes);
    			const inputsinglevalue1_changes = {};
    			if (dirty[0] & /*location*/ 16) inputsinglevalue1_changes.init = /*location*/ ctx[4];
    			inputsinglevalue1.$set(inputsinglevalue1_changes);
    			const inputselectvalue0_changes = {};
    			if (dirty[0] & /*type*/ 1024) inputselectvalue0_changes.init = /*type*/ ctx[10];
    			inputselectvalue0.$set(inputselectvalue0_changes);
    			const inputselectvalue1_changes = {};
    			if (dirty[0] & /*produced*/ 512) inputselectvalue1_changes.init = /*produced*/ ctx[9];
    			inputselectvalue1.$set(inputselectvalue1_changes);
    			const inputsinglevalue2_changes = {};
    			if (dirty[0] & /*affiliation*/ 32) inputsinglevalue2_changes.init = /*affiliation*/ ctx[5];
    			inputsinglevalue2.$set(inputsinglevalue2_changes);
    			const inputsinglevalue3_changes = {};
    			if (dirty[0] & /*associate*/ 64) inputsinglevalue3_changes.init = /*associate*/ ctx[6];
    			inputsinglevalue3.$set(inputsinglevalue3_changes);
    			const inputsinglevalue4_changes = {};
    			if (dirty[0] & /*date*/ 256) inputsinglevalue4_changes.init = /*date*/ ctx[8];
    			inputsinglevalue4.$set(inputsinglevalue4_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(inputsinglevalue0.$$.fragment, local);
    			transition_in(inputmultivalue.$$.fragment, local);
    			transition_in(inputsinglevalue1.$$.fragment, local);
    			transition_in(inputselectvalue0.$$.fragment, local);
    			transition_in(inputselectvalue1.$$.fragment, local);
    			transition_in(inputsinglevalue2.$$.fragment, local);
    			transition_in(inputsinglevalue3.$$.fragment, local);
    			transition_in(inputsinglevalue4.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(inputsinglevalue0.$$.fragment, local);
    			transition_out(inputmultivalue.$$.fragment, local);
    			transition_out(inputsinglevalue1.$$.fragment, local);
    			transition_out(inputselectvalue0.$$.fragment, local);
    			transition_out(inputselectvalue1.$$.fragment, local);
    			transition_out(inputsinglevalue2.$$.fragment, local);
    			transition_out(inputsinglevalue3.$$.fragment, local);
    			transition_out(inputsinglevalue4.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			destroy_component(inputsinglevalue0);
    			destroy_component(inputmultivalue);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(div3);
    			destroy_component(inputsinglevalue1);
    			destroy_component(inputselectvalue0);
    			if (detaching) detach_dev(t6);
    			if (detaching) detach_dev(div5);
    			destroy_component(inputselectvalue1);
    			destroy_component(inputsinglevalue2);
    			if (detaching) detach_dev(t9);
    			if (detaching) detach_dev(div6);
    			if (detaching) detach_dev(t10);
    			if (detaching) detach_dev(div8);
    			destroy_component(inputsinglevalue3);
    			destroy_component(inputsinglevalue4);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$f.name,
    		type: "if",
    		source: "(613:4) {#if stage == 1}",
    		ctx
    	});

    	return block;
    }

    // (652:16) {:else}
    function create_else_block$d(ctx) {
    	let h3;

    	const block = {
    		c: function create() {
    			h3 = element("h3");
    			h3.textContent = "다시 시도해 주세요";
    			attr_dev(h3, "class", "svelte-s4xuyl");
    			add_location(h3, file$p, 652, 20, 18636);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h3, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h3);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$d.name,
    		type: "else",
    		source: "(652:16) {:else}",
    		ctx
    	});

    	return block;
    }

    // (650:36) 
    function create_if_block_5$1(ctx) {
    	let h3;

    	const block = {
    		c: function create() {
    			h3 = element("h3");
    			h3.textContent = "문서 업로드";
    			attr_dev(h3, "class", "svelte-s4xuyl");
    			add_location(h3, file$p, 650, 20, 18574);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h3, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h3);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5$1.name,
    		type: "if",
    		source: "(650:36) ",
    		ctx
    	});

    	return block;
    }

    // (648:36) 
    function create_if_block_4$2(ctx) {
    	let h3;

    	const block = {
    		c: function create() {
    			h3 = element("h3");
    			h3.textContent = "영상 업로드";
    			attr_dev(h3, "class", "svelte-s4xuyl");
    			add_location(h3, file$p, 648, 20, 18499);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h3, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h3);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$2.name,
    		type: "if",
    		source: "(648:36) ",
    		ctx
    	});

    	return block;
    }

    // (646:16) {#if type == 0}
    function create_if_block_3$3(ctx) {
    	let h3;

    	const block = {
    		c: function create() {
    			h3 = element("h3");
    			h3.textContent = "사진 업로드";
    			attr_dev(h3, "class", "svelte-s4xuyl");
    			add_location(h3, file$p, 646, 20, 18424);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h3, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h3);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$3.name,
    		type: "if",
    		source: "(646:16) {#if type == 0}",
    		ctx
    	});

    	return block;
    }

    // (665:24) {#if all_checked}
    function create_if_block_2$7(ctx) {
    	let svg;
    	let path;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "stroke-linecap", "round");
    			attr_dev(path, "stroke-linejoin", "round");
    			attr_dev(path, "d", "M4.5 12.75l6 6 9-13.5");
    			add_location(path, file$p, 666, 32, 19602);
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "fill", "none");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			attr_dev(svg, "stroke-width", "1.5");
    			attr_dev(svg, "stroke", "white");
    			attr_dev(svg, "height", "17");
    			attr_dev(svg, "width", "17");
    			add_location(svg, file$p, 665, 28, 19439);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$7.name,
    		type: "if",
    		source: "(665:24) {#if all_checked}",
    		ctx
    	});

    	return block;
    }

    // (703:20) {#each item_objs as item, index}
    function create_each_block$b(ctx) {
    	let managecreateitem;
    	let current;

    	managecreateitem = new ManageCreateItem({
    			props: {
    				checked: /*item*/ ctx[42].checked,
    				src: /*item*/ ctx[42].src,
    				file: /*item*/ ctx[42].file,
    				index: /*index*/ ctx[44],
    				type: /*type*/ ctx[10]
    			},
    			$$inline: true
    		});

    	managecreateitem.$on("delete", /*deleteHandle*/ ctx[17]);
    	managecreateitem.$on("download", /*downloadHandle*/ ctx[16]);
    	managecreateitem.$on("check", /*checkHandle*/ ctx[18]);

    	const block = {
    		c: function create() {
    			create_component(managecreateitem.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(managecreateitem, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const managecreateitem_changes = {};
    			if (dirty[0] & /*item_objs*/ 4) managecreateitem_changes.checked = /*item*/ ctx[42].checked;
    			if (dirty[0] & /*item_objs*/ 4) managecreateitem_changes.src = /*item*/ ctx[42].src;
    			if (dirty[0] & /*item_objs*/ 4) managecreateitem_changes.file = /*item*/ ctx[42].file;
    			if (dirty[0] & /*type*/ 1024) managecreateitem_changes.type = /*type*/ ctx[10];
    			managecreateitem.$set(managecreateitem_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(managecreateitem.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(managecreateitem.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(managecreateitem, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$b.name,
    		type: "each",
    		source: "(703:20) {#each item_objs as item, index}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$u(ctx) {
    	let div;
    	let current_block_type_index;
    	let if_block;
    	let current;
    	const if_block_creators = [create_if_block$f, create_if_block_1$c, create_if_block_6$1, create_if_block_7$1];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*stage*/ ctx[0] == 1) return 0;
    		if (/*stage*/ ctx[0] == 2) return 1;
    		if (/*stage*/ ctx[0] == 3) return 2;
    		if (/*stage*/ ctx[0] == 4) return 3;
    		return -1;
    	}

    	if (~(current_block_type_index = select_block_type(ctx))) {
    		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (if_block) if_block.c();
    			attr_dev(div, "class", "browse-content-container svelte-s4xuyl");
    			add_location(div, file$p, 611, 0, 16248);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if (~current_block_type_index) {
    					if_blocks[current_block_type_index].p(ctx, dirty);
    				}
    			} else {
    				if (if_block) {
    					group_outros();

    					transition_out(if_blocks[previous_block_index], 1, 1, () => {
    						if_blocks[previous_block_index] = null;
    					});

    					check_outros();
    				}

    				if (~current_block_type_index) {
    					if_block = if_blocks[current_block_type_index];

    					if (!if_block) {
    						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    						if_block.c();
    					} else {
    						if_block.p(ctx, dirty);
    					}

    					transition_in(if_block, 1);
    					if_block.m(div, null);
    				} else {
    					if_block = null;
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].d();
    			}
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$u.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function downloader(item) {
    	if (!item) {
    		console.log('cannot find item');
    	}

    	console.log("downloading from...", item.src);
    }

    function parseToList(str) {
    	// str = "#a #b #c ..."
    	let str_lst = str.split(' ');

    	let result = [];

    	str_lst.forEach(item => {
    		result.push(item.replace(/['#']*/, ''));
    	});

    	return result;
    }

    function parseToString(lst) {
    	let result_list = [];

    	lst.forEach(item => {
    		result_list.push("'" + item + "'");
    	});

    	return `${result_list}`;
    }

    function passCheck(lst) {
    	if (lst.length() == 1) {
    		return false;
    	}

    	for (var item in lst) {
    		console.log(item, ':', lst[item]);

    		if (!lst[item]) {
    			return false;
    		}
    	}

    	return true;
    }

    function instance$u($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ManageCreateContainer', slots, []);
    	let { stage = 1 } = $$props;
    	let saved_data = {};
    	let title;
    	let location;
    	let affiliation;
    	let associate;
    	let attendee;
    	let attendee_list = [];
    	let date;
    	let produced = -1;
    	let created_at;
    	let type = -1;
    	let source;

    	let pass_list = {
    		length: () => {
    			let length = 0;

    			for (var item in this) {
    				length += 1;
    			}

    			return length;
    		},
    		title: false,
    		location: false,
    		affiliation: false,
    		associate: false,
    		attendee: false,
    		date: false,
    		produced: false,
    		type: false
    	};

    	// FILE_UPLOADING is a flag for which to track if file is being 
    	// transfered in that moment of time
    	let file_uploading = false;

    	let all_checked = false;
    	let received_file = false;
    	let content = "";
    	let item_objs = [];
    	var dispatch = createEventDispatcher();

    	function changeHandle(e, variable_name) {
    		if (variable_name == 'title') {
    			$$invalidate(3, title = e.detail.value);
    			$$invalidate(23, pass_list.title = e.detail.pass, pass_list);
    			$$invalidate(23, pass_list);
    		} else if (variable_name == 'attendee') {
    			$$invalidate(1, attendee = e.detail.value);
    			$$invalidate(23, pass_list.attendee = e.detail.pass, pass_list);
    			$$invalidate(23, pass_list);
    		} else if (variable_name == 'location') {
    			$$invalidate(4, location = e.detail.value);
    			$$invalidate(23, pass_list.location = e.detail.pass, pass_list);
    			$$invalidate(23, pass_list);
    		} else if (variable_name == 'associate') {
    			$$invalidate(6, associate = e.detail.value);
    			$$invalidate(23, pass_list.associate = e.detail.pass, pass_list);
    			$$invalidate(23, pass_list);
    		} else if (variable_name == 'date') {
    			$$invalidate(8, date = e.detail.value);
    			$$invalidate(23, pass_list.date = e.detail.pass, pass_list);
    			$$invalidate(23, pass_list);
    		} else if (variable_name == 'affiliation') {
    			$$invalidate(5, affiliation = e.detail.value);
    			$$invalidate(23, pass_list.affiliation = e.detail.pass, pass_list);
    			$$invalidate(23, pass_list);
    		} else if (variable_name == 'produced') {
    			// Option input doesn't save renewed value without console.log call
    			// to KEY. The reason is left unanswered.
    			// DON'T REMOVE THE CONSOLE LOG BELOW!
    			console.log(e.detail.key);

    			$$invalidate(9, produced = e.detail.key);
    			$$invalidate(23, pass_list.produced = e.detail.pass, pass_list);
    			$$invalidate(23, pass_list);
    		} else if (variable_name == 'type') {
    			// DON'T REMOVE THE CONSOLE LOG BELOW!
    			console.log(e.detail.key);

    			$$invalidate(10, type = e.detail.key);
    			$$invalidate(23, pass_list.type = e.detail.pass, pass_list);
    			$$invalidate(23, pass_list);
    		} else {
    			console.log('Change Error Occurred');
    		}
    	}

    	// Handler is received from components
    	function allCheckHandle(e) {
    		if (all_checked) {
    			$$invalidate(11, all_checked = false);

    			item_objs.forEach(item => {
    				item.checked = false;
    			});
    		} else {
    			$$invalidate(11, all_checked = true);

    			item_objs.forEach(item => {
    				item.checked = true;
    			});
    		}

    		((($$invalidate(2, item_objs), $$invalidate(0, stage)), $$invalidate(1, attendee)), $$invalidate(23, pass_list));
    	}

    	function downloadHandle(e) {
    		let index = e.detail.index;
    		downloader(item_objs[index]);
    	}

    	function deleteHandle(e) {
    		let index = e.detail.index;

    		if (item_objs[index]) {
    			let pop_obj = item_objs.splice(index, 1);
    			console.log(pop_obj[0].src);
    			console.log(item_objs);

    			if (pop_obj[0].src) {
    				console.log('revoking Url');
    				URL.revokeObjectURL(pop_obj[0].src);
    			} else {
    				console.log('Url revoking error');
    			}

    			((($$invalidate(2, item_objs), $$invalidate(0, stage)), $$invalidate(1, attendee)), $$invalidate(23, pass_list));
    		} else {
    			console.log(`item_objs[${index}] doesn't exist`);
    		}
    	}

    	function checkHandle(e) {
    		let index = e.detail.index;
    		let checked = e.detail.checked;

    		if (item_objs[index]) {
    			$$invalidate(2, item_objs[index].checked = checked, item_objs);
    		} else {
    			console.log(`item_objs[${index}] doesn't exist`);
    		}

    		((($$invalidate(2, item_objs), $$invalidate(0, stage)), $$invalidate(1, attendee)), $$invalidate(23, pass_list));
    	}

    	function contentHandle(e) {
    		$$invalidate(13, content = e.detail.html);
    	}

    	// Call is received directly from buttons
    	function downloadCall() {
    		item_objs.forEach(item => {
    			if (item.checked) {
    				downloader(item);
    				item.checked = false;
    			}
    		});

    		((($$invalidate(2, item_objs), $$invalidate(0, stage)), $$invalidate(1, attendee)), $$invalidate(23, pass_list));
    	}

    	function deleteCall() {
    		let result = getItemList();
    		console.log(result.length);

    		for (let i = 0; i < result.length; i++) {
    			console.log(i);

    			if (result[i].checked) {
    				let pop_obj = result.splice(i, 1);

    				if (pop_obj[0].src) {
    					console.log('revoking Url');
    					URL.revokeObjectURL(pop_obj[0].src);
    				} else {
    					console.log('Url revoking error');
    				}

    				i = i - 1;
    			}
    		}

    		$$invalidate(2, item_objs = result);
    	}

    	function uploadCall() {
    		console.log('uploading call received');
    		waitFile();
    	}

    	function waitFile(index) {
    		if (!received_file) {
    			setTimeout(() => waitFile(), 1000);
    		} else {
    			console.log('waitfile fired');
    			let src = URL.createObjectURL(received_file[0]);
    			let file = received_file[0];
    			console.log('received the file:', received_file, src);
    			let new_item = { checked: false, src, file };
    			$$invalidate(2, item_objs = [...item_objs, new_item]);
    			$$invalidate(12, received_file = false);
    		}
    	}

    	// Utility functions
    	function getItemListLength() {
    		return getItemList().length;
    	}

    	function getItemList() {
    		// returns copied list of ITEM_OBJS
    		return [...item_objs];
    	}

    	async function fileUpload() {
    		if (item_objs && !file_uploading) {
    			let result = null;
    			let formData = new FormData();
    			file_uploading = true;

    			try {
    				let index = 0;
    				formData.append("title", title);
    				formData.append('file_index', item_objs.length - 1);
    				formData.append('content', content);
    				formData.append('attendee', attendee_list);
    				formData.append('location', location);
    				formData.append('affiliation', affiliation);
    				formData.append('associate', associate);
    				formData.append('produced', produced);
    				formData.append('private', 1);
    				formData.append('type', type);

    				//file should be sent seperately -> don't send in form of list !
    				item_objs.forEach(item => {
    					formData.append(`${index}`, item.file);
    					index += 1;
    				});

    				result = await axios$1({
    					headers: { "Content-Type": "multipart/form-data" },
    					url: `http://localhost:8000/drf/cases/create/${type}`,
    					method: "POST",
    					data: formData
    				});

    				console.log(result.data);
    			} catch(error) {
    				result = error;
    				console.log(error);
    			}

    			file_uploading = false;
    			console.log('file_uploading procedure ended');
    			return result;
    		}
    	}

    	const writable_props = ['stage'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$7.warn(`<ManageCreateContainer> was created with unknown prop '${key}'`);
    	});

    	const change_handler = e => changeHandle(e, 'title');
    	const change_handler_1 = e => changeHandle(e, 'attendee');
    	const change_handler_2 = e => changeHandle(e, 'location');
    	const change_handler_3 = e => changeHandle(e, 'type');
    	const change_handler_4 = e => changeHandle(e, 'produced');
    	const change_handler_5 = e => changeHandle(e, 'affiliation');
    	const change_handler_6 = e => changeHandle(e, 'associate');
    	const change_handler_7 = e => changeHandle(e, 'date');

    	function input_change_handler() {
    		received_file = this.files;
    		$$invalidate(12, received_file);
    	}

    	$$self.$$set = $$props => {
    		if ('stage' in $$props) $$invalidate(0, stage = $$props.stage);
    	};

    	$$self.$capture_state = () => ({
    		Route,
    		router: f,
    		axios: axios$1,
    		createEventDispatcher,
    		onDestroy,
    		onMount,
    		writable,
    		crossfade,
    		flip,
    		InputSingleValue,
    		InputMultiValue,
    		InputCheckboxValue,
    		InputDateValue,
    		InputSelectValue,
    		Tiptap,
    		ManageCreateItem,
    		Preview,
    		condition_set,
    		stage,
    		saved_data,
    		title,
    		location,
    		affiliation,
    		associate,
    		attendee,
    		attendee_list,
    		date,
    		produced,
    		created_at,
    		type,
    		source,
    		pass_list,
    		file_uploading,
    		all_checked,
    		received_file,
    		content,
    		item_objs,
    		dispatch,
    		downloader,
    		changeHandle,
    		allCheckHandle,
    		downloadHandle,
    		deleteHandle,
    		checkHandle,
    		contentHandle,
    		downloadCall,
    		deleteCall,
    		uploadCall,
    		waitFile,
    		getItemListLength,
    		getItemList,
    		fileUpload,
    		parseToList,
    		parseToString,
    		passCheck
    	});

    	$$self.$inject_state = $$props => {
    		if ('stage' in $$props) $$invalidate(0, stage = $$props.stage);
    		if ('saved_data' in $$props) saved_data = $$props.saved_data;
    		if ('title' in $$props) $$invalidate(3, title = $$props.title);
    		if ('location' in $$props) $$invalidate(4, location = $$props.location);
    		if ('affiliation' in $$props) $$invalidate(5, affiliation = $$props.affiliation);
    		if ('associate' in $$props) $$invalidate(6, associate = $$props.associate);
    		if ('attendee' in $$props) $$invalidate(1, attendee = $$props.attendee);
    		if ('attendee_list' in $$props) $$invalidate(7, attendee_list = $$props.attendee_list);
    		if ('date' in $$props) $$invalidate(8, date = $$props.date);
    		if ('produced' in $$props) $$invalidate(9, produced = $$props.produced);
    		if ('created_at' in $$props) created_at = $$props.created_at;
    		if ('type' in $$props) $$invalidate(10, type = $$props.type);
    		if ('source' in $$props) source = $$props.source;
    		if ('pass_list' in $$props) $$invalidate(23, pass_list = $$props.pass_list);
    		if ('file_uploading' in $$props) file_uploading = $$props.file_uploading;
    		if ('all_checked' in $$props) $$invalidate(11, all_checked = $$props.all_checked);
    		if ('received_file' in $$props) $$invalidate(12, received_file = $$props.received_file);
    		if ('content' in $$props) $$invalidate(13, content = $$props.content);
    		if ('item_objs' in $$props) $$invalidate(2, item_objs = $$props.item_objs);
    		if ('dispatch' in $$props) $$invalidate(37, dispatch = $$props.dispatch);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*stage, item_objs, attendee, pass_list*/ 8388615) {
    			// stage manager
    			// stage manager manages the logic behind navigation within create-container
    			 {
    				if (stage == 1) {
    					if (item_objs) {
    						item_objs.forEach(item => {
    							URL.revokeObjectURL(item.src);
    						});

    						$$invalidate(2, item_objs = []);
    					}
    				} else if (stage == 2) {
    					// parse ATTENDEE in form of list (ATTENDEE -> ATTENDEE_LIST)
    					if (attendee) {
    						passCheck(pass_list);
    						$$invalidate(7, attendee_list = parseToList(attendee));
    					}
    				} else if (stage == 3) ; else //console.log(result)
    				if (stage == 5) {
    					let result = fileUpload(); //let result = fileUpload();
    					console.log(result);
    				}
    			}
    		}

    		if ($$self.$$.dirty[0] & /*pass_list*/ 8388608) {
    			 {
    				if (passCheck(pass_list)) {
    					dispatch('data', { cleared: true });
    				} else {
    					dispatch('data', { cleared: false });
    				}
    			}
    		}
    	};

    	return [
    		stage,
    		attendee,
    		item_objs,
    		title,
    		location,
    		affiliation,
    		associate,
    		attendee_list,
    		date,
    		produced,
    		type,
    		all_checked,
    		received_file,
    		content,
    		changeHandle,
    		allCheckHandle,
    		downloadHandle,
    		deleteHandle,
    		checkHandle,
    		contentHandle,
    		downloadCall,
    		deleteCall,
    		uploadCall,
    		pass_list,
    		change_handler,
    		change_handler_1,
    		change_handler_2,
    		change_handler_3,
    		change_handler_4,
    		change_handler_5,
    		change_handler_6,
    		change_handler_7,
    		input_change_handler
    	];
    }

    class ManageCreateContainer extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$u, create_fragment$u, safe_not_equal, { stage: 0 }, null, [-1, -1]);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ManageCreateContainer",
    			options,
    			id: create_fragment$u.name
    		});
    	}

    	get stage() {
    		throw new Error("<ManageCreateContainer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set stage(value) {
    		throw new Error("<ManageCreateContainer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* pages/sidebar/ManageCreateNavbar.svelte generated by Svelte v3.50.1 */
    const file$q = "pages/sidebar/ManageCreateNavbar.svelte";

    // (138:8) {#if stage != 1}
    function create_if_block$g(ctx) {
    	let div;
    	let button;
    	let svg;
    	let path;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			button = element("button");
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "stroke-linecap", "round");
    			attr_dev(path, "stroke-linejoin", "round");
    			attr_dev(path, "d", "M15.75 19.5L8.25 12l7.5-7.5");
    			add_location(path, file$q, 141, 24, 3230);
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "fill", "none");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			attr_dev(svg, "stroke-width", "2.5");
    			attr_dev(svg, "stroke", "white");
    			attr_dev(svg, "class", "left-svg svelte-1crfji7");
    			attr_dev(svg, "width", "19");
    			attr_dev(svg, "height", "19");
    			add_location(svg, file$q, 140, 20, 3058);
    			attr_dev(button, "class", "go-back svelte-1crfji7");
    			add_location(button, file$q, 139, 16, 2987);
    			attr_dev(div, "class", "go-back-wrap svelte-1crfji7");
    			add_location(div, file$q, 138, 12, 2943);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, button);
    			append_dev(button, svg);
    			append_dev(svg, path);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*stageDecrease*/ ctx[2], false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$g.name,
    		type: "if",
    		source: "(138:8) {#if stage != 1}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$v(ctx) {
    	let div1;
    	let t;
    	let div0;
    	let button;
    	let svg;
    	let path;
    	let mounted;
    	let dispose;
    	let if_block = /*stage*/ ctx[0] != 1 && create_if_block$g(ctx);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			if (if_block) if_block.c();
    			t = space();
    			div0 = element("div");
    			button = element("button");
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "stroke-linecap", "round");
    			attr_dev(path, "stroke-linejoin", "round");
    			attr_dev(path, "d", "M8.25 4.5l7.5 7.5-7.5 7.5");
    			add_location(path, file$q, 151, 20, 3699);
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "fill", "none");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			attr_dev(svg, "stroke-width", "2.5");
    			attr_dev(svg, "stroke", "white");
    			attr_dev(svg, "class", "right-svg svelte-1crfji7");
    			attr_dev(svg, "width", "19");
    			attr_dev(svg, "height", "19");
    			add_location(svg, file$q, 150, 16, 3530);
    			attr_dev(button, "class", "go-forth svelte-1crfji7");
    			add_location(button, file$q, 149, 12, 3462);
    			attr_dev(div0, "class", "go-forth-wrap svelte-1crfji7");
    			add_location(div0, file$q, 148, 8, 3421);
    			attr_dev(div1, "class", "browse-navbar-wrap svelte-1crfji7");
    			add_location(div1, file$q, 135, 0, 2869);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			if (if_block) if_block.m(div1, null);
    			append_dev(div1, t);
    			append_dev(div1, div0);
    			append_dev(div0, button);
    			append_dev(button, svg);
    			append_dev(svg, path);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*stageIncrease*/ ctx[1], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*stage*/ ctx[0] != 1) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$g(ctx);
    					if_block.c();
    					if_block.m(div1, t);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if (if_block) if_block.d();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$v.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$v($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ManageCreateNavbar', slots, []);
    	var dispatch = createEventDispatcher();
    	let { stage = 1 } = $$props;

    	function stageIncrease() {
    		$$invalidate(0, stage += 1);
    		dispatch('stageChange', { stage });
    	}

    	function stageDecrease() {
    		if (stage != 1) {
    			$$invalidate(0, stage -= 1);
    			dispatch('stageChange', { stage });
    		}
    	}

    	const writable_props = ['stage'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ManageCreateNavbar> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('stage' in $$props) $$invalidate(0, stage = $$props.stage);
    	};

    	$$self.$capture_state = () => ({
    		createEventDispatcher,
    		dispatch,
    		stage,
    		stageIncrease,
    		stageDecrease
    	});

    	$$self.$inject_state = $$props => {
    		if ('dispatch' in $$props) dispatch = $$props.dispatch;
    		if ('stage' in $$props) $$invalidate(0, stage = $$props.stage);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [stage, stageIncrease, stageDecrease];
    }

    class ManageCreateNavbar extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$v, create_fragment$v, safe_not_equal, { stage: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ManageCreateNavbar",
    			options,
    			id: create_fragment$v.name
    		});
    	}

    	get stage() {
    		throw new Error("<ManageCreateNavbar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set stage(value) {
    		throw new Error("<ManageCreateNavbar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* pages/sidebar/stageManageBtn.svelte generated by Svelte v3.50.1 */

    const { console: console_1$8 } = globals;
    const file$r = "pages/sidebar/stageManageBtn.svelte";

    function get_each_context$c(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[7] = list[i];
    	child_ctx[9] = i;
    	return child_ctx;
    }

    // (91:4) {#if !focus}
    function create_if_block$h(ctx) {
    	let each_1_anchor;
    	let each_value = /*data*/ ctx[1].stages;
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$c(get_each_context$c(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*stageControl, data, stage*/ 11) {
    				each_value = /*data*/ ctx[1].stages;
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$c(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$c(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$h.name,
    		type: "if",
    		source: "(91:4) {#if !focus}",
    		ctx
    	});

    	return block;
    }

    // (98:16) {:else}
    function create_else_block$e(ctx) {
    	let button;
    	let h2;
    	let t_value = /*stage_item*/ ctx[7].stage + "";
    	let t;
    	let button_class_value;
    	let mounted;
    	let dispose;

    	function click_handler_1() {
    		return /*click_handler_1*/ ctx[5](/*stage_item*/ ctx[7]);
    	}

    	const block = {
    		c: function create() {
    			button = element("button");
    			h2 = element("h2");
    			t = text(t_value);
    			attr_dev(h2, "class", "svelte-b827nt");
    			add_location(h2, file$r, 99, 24, 2808);

    			attr_dev(button, "class", button_class_value = "" + (null_to_empty(/*data*/ ctx[1].unclear_list.includes(/*stage_item*/ ctx[7].stage)
    			? "unclear-stage-btn"
    			: "stage-btn") + " svelte-b827nt"));

    			add_location(button, file$r, 98, 20, 2633);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, h2);
    			append_dev(h2, t);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", click_handler_1, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty & /*data*/ 2 && t_value !== (t_value = /*stage_item*/ ctx[7].stage + "")) set_data_dev(t, t_value);

    			if (dirty & /*data*/ 2 && button_class_value !== (button_class_value = "" + (null_to_empty(/*data*/ ctx[1].unclear_list.includes(/*stage_item*/ ctx[7].stage)
    			? "unclear-stage-btn"
    			: "stage-btn") + " svelte-b827nt"))) {
    				attr_dev(button, "class", button_class_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$e.name,
    		type: "else",
    		source: "(98:16) {:else}",
    		ctx
    	});

    	return block;
    }

    // (94:16) {#if stage == stage_item.stage}
    function create_if_block_1$d(ctx) {
    	let button;
    	let h2;
    	let t_value = /*stage_item*/ ctx[7].stage + "";
    	let t;
    	let mounted;
    	let dispose;

    	function click_handler() {
    		return /*click_handler*/ ctx[4](/*stage_item*/ ctx[7]);
    	}

    	const block = {
    		c: function create() {
    			button = element("button");
    			h2 = element("h2");
    			t = text(t_value);
    			attr_dev(h2, "class", "svelte-b827nt");
    			add_location(h2, file$r, 95, 24, 2528);
    			attr_dev(button, "class", "curr-stage-btn svelte-b827nt");
    			add_location(button, file$r, 94, 20, 2423);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, h2);
    			append_dev(h2, t);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", click_handler, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty & /*data*/ 2 && t_value !== (t_value = /*stage_item*/ ctx[7].stage + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$d.name,
    		type: "if",
    		source: "(94:16) {#if stage == stage_item.stage}",
    		ctx
    	});

    	return block;
    }

    // (92:8) {#each data.stages as stage_item, index}
    function create_each_block$c(ctx) {
    	let div;
    	let t;

    	function select_block_type(ctx, dirty) {
    		if (/*stage*/ ctx[0] == /*stage_item*/ ctx[7].stage) return create_if_block_1$d;
    		return create_else_block$e;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if_block.c();
    			t = space();
    			attr_dev(div, "class", "stage-btn-wrap svelte-b827nt");
    			add_location(div, file$r, 92, 12, 2324);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if_block.m(div, null);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(div, t);
    				}
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$c.name,
    		type: "each",
    		source: "(92:8) {#each data.stages as stage_item, index}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$w(ctx) {
    	let div;
    	let if_block = !/*focus*/ ctx[2] && create_if_block$h(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (if_block) if_block.c();
    			attr_dev(div, "class", "browse-navbar-wrap svelte-b827nt");
    			add_location(div, file$r, 88, 0, 2208);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if (if_block) if_block.m(div, null);
    		},
    		p: function update(ctx, [dirty]) {
    			if (!/*focus*/ ctx[2]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$h(ctx);
    					if_block.c();
    					if_block.m(div, null);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$w.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$w($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('StageManageBtn', slots, []);
    	var dispatch = createEventDispatcher();
    	let { stage = 1 } = $$props;
    	let { data } = $$props;
    	let { focus = false } = $$props;

    	function stageControl(stage) {
    		if (data.unclear_list.includes(stage)) {
    			console.log("pass modal... not available");
    			return;
    		}

    		dispatch('stageChange', { stage });
    	}

    	const writable_props = ['stage', 'data', 'focus'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$8.warn(`<StageManageBtn> was created with unknown prop '${key}'`);
    	});

    	const click_handler = stage_item => stageControl(stage_item.stage);
    	const click_handler_1 = stage_item => stageControl(stage_item.stage);

    	$$self.$$set = $$props => {
    		if ('stage' in $$props) $$invalidate(0, stage = $$props.stage);
    		if ('data' in $$props) $$invalidate(1, data = $$props.data);
    		if ('focus' in $$props) $$invalidate(2, focus = $$props.focus);
    	};

    	$$self.$capture_state = () => ({
    		createEventDispatcher,
    		UserSearch,
    		dispatch,
    		stage,
    		data,
    		focus,
    		stageControl
    	});

    	$$self.$inject_state = $$props => {
    		if ('dispatch' in $$props) dispatch = $$props.dispatch;
    		if ('stage' in $$props) $$invalidate(0, stage = $$props.stage);
    		if ('data' in $$props) $$invalidate(1, data = $$props.data);
    		if ('focus' in $$props) $$invalidate(2, focus = $$props.focus);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [stage, data, focus, stageControl, click_handler, click_handler_1];
    }

    class StageManageBtn extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$w, create_fragment$w, safe_not_equal, { stage: 0, data: 1, focus: 2 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "StageManageBtn",
    			options,
    			id: create_fragment$w.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*data*/ ctx[1] === undefined && !('data' in props)) {
    			console_1$8.warn("<StageManageBtn> was created without expected prop 'data'");
    		}
    	}

    	get stage() {
    		throw new Error("<StageManageBtn>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set stage(value) {
    		throw new Error("<StageManageBtn>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get data() {
    		throw new Error("<StageManageBtn>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set data(value) {
    		throw new Error("<StageManageBtn>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get focus() {
    		throw new Error("<StageManageBtn>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set focus(value) {
    		throw new Error("<StageManageBtn>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* components/manager/ContentTitle/ManageCreateTitle.svelte generated by Svelte v3.50.1 */

    const file$s = "components/manager/ContentTitle/ManageCreateTitle.svelte";

    function create_fragment$x(ctx) {
    	let div2;
    	let h30;
    	let t1;
    	let div1;
    	let div0;
    	let h31;
    	let t2;

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			h30 = element("h3");
    			h30.textContent = "기록물 생성";
    			t1 = space();
    			div1 = element("div");
    			div0 = element("div");
    			h31 = element("h3");
    			t2 = text(/*subtitle*/ ctx[0]);
    			attr_dev(h30, "class", "svelte-1wpj7h6");
    			add_location(h30, file$s, 68, 4, 1464);
    			attr_dev(h31, "class", "svelte-1wpj7h6");
    			add_location(h31, file$s, 71, 12, 1576);
    			attr_dev(div0, "class", "keyword-holder-label svelte-1wpj7h6");
    			add_location(div0, file$s, 70, 8, 1528);
    			attr_dev(div1, "class", "keyword-holder-wrap svelte-1wpj7h6");
    			add_location(div1, file$s, 69, 4, 1485);
    			attr_dev(div2, "class", "browse-content-title svelte-1wpj7h6");
    			add_location(div2, file$s, 67, 0, 1424);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, h30);
    			append_dev(div2, t1);
    			append_dev(div2, div1);
    			append_dev(div1, div0);
    			append_dev(div0, h31);
    			append_dev(h31, t2);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*subtitle*/ 1) set_data_dev(t2, /*subtitle*/ ctx[0]);
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$x.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$x($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ManageCreateTitle', slots, []);
    	let { subtitle = '' } = $$props;
    	const writable_props = ['subtitle'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ManageCreateTitle> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('subtitle' in $$props) $$invalidate(0, subtitle = $$props.subtitle);
    	};

    	$$self.$capture_state = () => ({ subtitle });

    	$$self.$inject_state = $$props => {
    		if ('subtitle' in $$props) $$invalidate(0, subtitle = $$props.subtitle);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [subtitle];
    }

    class ManageCreateTitle extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$x, create_fragment$x, safe_not_equal, { subtitle: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ManageCreateTitle",
    			options,
    			id: create_fragment$x.name
    		});
    	}

    	get subtitle() {
    		throw new Error("<ManageCreateTitle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set subtitle(value) {
    		throw new Error("<ManageCreateTitle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* components/manager/CreateViews/ManageCreateView.svelte generated by Svelte v3.50.1 */
    const file$t = "components/manager/CreateViews/ManageCreateView.svelte";

    function create_fragment$y(ctx) {
    	let managecreatetitle;
    	let t0;
    	let managecreatecontainer;
    	let t1;
    	let div;
    	let stagemanagebtn;
    	let current;

    	managecreatetitle = new ManageCreateTitle({
    			props: { subtitle: /*subtitle*/ ctx[1] },
    			$$inline: true
    		});

    	managecreatecontainer = new ManageCreateContainer({
    			props: { stage: /*stage*/ ctx[0] },
    			$$inline: true
    		});

    	managecreatecontainer.$on("data", /*dataRefresh*/ ctx[4]);

    	stagemanagebtn = new StageManageBtn({
    			props: {
    				stage: /*stage*/ ctx[0],
    				data: /*data*/ ctx[2]
    			},
    			$$inline: true
    		});

    	stagemanagebtn.$on("stageChange", /*stageHandle*/ ctx[3]);

    	const block = {
    		c: function create() {
    			create_component(managecreatetitle.$$.fragment);
    			t0 = space();
    			create_component(managecreatecontainer.$$.fragment);
    			t1 = space();
    			div = element("div");
    			create_component(stagemanagebtn.$$.fragment);
    			attr_dev(div, "class", "bottom-bar svelte-f8j4m1");
    			add_location(div, file$t, 74, 0, 1799);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(managecreatetitle, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(managecreatecontainer, target, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div, anchor);
    			mount_component(stagemanagebtn, div, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const managecreatetitle_changes = {};
    			if (dirty & /*subtitle*/ 2) managecreatetitle_changes.subtitle = /*subtitle*/ ctx[1];
    			managecreatetitle.$set(managecreatetitle_changes);
    			const managecreatecontainer_changes = {};
    			if (dirty & /*stage*/ 1) managecreatecontainer_changes.stage = /*stage*/ ctx[0];
    			managecreatecontainer.$set(managecreatecontainer_changes);
    			const stagemanagebtn_changes = {};
    			if (dirty & /*stage*/ 1) stagemanagebtn_changes.stage = /*stage*/ ctx[0];
    			if (dirty & /*data*/ 4) stagemanagebtn_changes.data = /*data*/ ctx[2];
    			stagemanagebtn.$set(stagemanagebtn_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(managecreatetitle.$$.fragment, local);
    			transition_in(managecreatecontainer.$$.fragment, local);
    			transition_in(stagemanagebtn.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(managecreatetitle.$$.fragment, local);
    			transition_out(managecreatecontainer.$$.fragment, local);
    			transition_out(stagemanagebtn.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(managecreatetitle, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(managecreatecontainer, detaching);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div);
    			destroy_component(stagemanagebtn);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$y.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function titleChange(stage) {
    	if (stage == 1) {
    		return '메타데이터 등록';
    	} else if (stage == 2) {
    		return '기록물 파일 등록';
    	} else if (stage == 3) {
    		return '내용 등록';
    	} else if (stage == 4) {
    		return '미리보기';
    	} else if (stage == 5) {
    		return '저장하기';
    	}

    	return '허가되지 않은 창';
    }

    function instance$y($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ManageCreateView', slots, []);
    	let subtitle = '';
    	let stage = 1;

    	let data = {
    		stages: [
    			{ stage: 1, name: '메타데이터 등록' },
    			{ stage: 2, name: '기록물 파일 등록' },
    			{ stage: 3, name: '내용 등록' },
    			{ stage: 4, name: '미리보기' },
    			{ stage: 5, name: '저장하기' }
    		],
    		unclear_list: [2, 3, 4, 5]
    	};

    	function stageHandle(e) {
    		$$invalidate(0, stage = e.detail.stage);
    	}

    	function dataRefresh(e) {
    		if (e.detail.cleared) {
    			$$invalidate(2, data.unclear_list = [], data);
    		} else {
    			$$invalidate(2, data.unclear_list = [2, 3, 4, 5], data);
    		}
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ManageCreateView> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		ManageCreateContainer,
    		ManageCreateNavbar,
    		StageManageBtn,
    		ManageCreateTitle,
    		subtitle,
    		stage,
    		data,
    		stageHandle,
    		titleChange,
    		dataRefresh
    	});

    	$$self.$inject_state = $$props => {
    		if ('subtitle' in $$props) $$invalidate(1, subtitle = $$props.subtitle);
    		if ('stage' in $$props) $$invalidate(0, stage = $$props.stage);
    		if ('data' in $$props) $$invalidate(2, data = $$props.data);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*stage*/ 1) {
    			 {
    				$$invalidate(1, subtitle = titleChange(stage));
    			}
    		}
    	};

    	return [stage, subtitle, data, stageHandle, dataRefresh];
    }

    class ManageCreateView extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$y, create_fragment$y, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ManageCreateView",
    			options,
    			id: create_fragment$y.name
    		});
    	}
    }

    /* components/user/UserInfo.svelte generated by Svelte v3.50.1 */

    const file$u = "components/user/UserInfo.svelte";

    function create_fragment$z(ctx) {
    	let div0;
    	let svg;
    	let path;
    	let t0;
    	let h30;
    	let t2;
    	let div6;
    	let div1;
    	let h31;
    	let t4;
    	let h40;
    	let t6;
    	let div2;
    	let h41;
    	let t8;
    	let h32;
    	let t10;
    	let div3;
    	let h42;
    	let t12;
    	let h33;
    	let t14;
    	let div4;
    	let h43;
    	let t16;
    	let h34;
    	let t18;
    	let div5;
    	let a0;
    	let h35;
    	let t20;
    	let a1;
    	let h36;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			svg = svg_element("svg");
    			path = svg_element("path");
    			t0 = space();
    			h30 = element("h3");
    			h30.textContent = "회원정보";
    			t2 = space();
    			div6 = element("div");
    			div1 = element("div");
    			h31 = element("h3");
    			h31.textContent = "안상철";
    			t4 = space();
    			h40 = element("h4");
    			h40.textContent = "님";
    			t6 = space();
    			div2 = element("div");
    			h41 = element("h4");
    			h41.textContent = "소속";
    			t8 = space();
    			h32 = element("h3");
    			h32.textContent = "학술정보원 멀티미디어교실";
    			t10 = space();
    			div3 = element("div");
    			h42 = element("h4");
    			h42.textContent = "접속 주소";
    			t12 = space();
    			h33 = element("h3");
    			h33.textContent = "192.168.0.10";
    			t14 = space();
    			div4 = element("div");
    			h43 = element("h4");
    			h43.textContent = "최근접속";
    			t16 = space();
    			h34 = element("h3");
    			h34.textContent = "4시간 전";
    			t18 = space();
    			div5 = element("div");
    			a0 = element("a");
    			h35 = element("h3");
    			h35.textContent = "로그아웃";
    			t20 = space();
    			a1 = element("a");
    			h36 = element("h3");
    			h36.textContent = "정보수정";
    			attr_dev(path, "stroke-linecap", "round");
    			attr_dev(path, "stroke-linejoin", "round");
    			attr_dev(path, "d", "M17.982 18.725A7.488 7.488 0 0012 15.75a7.488 7.488 0 00-5.982 2.975m11.963 0a9 9 0 10-11.963 0m11.963 0A8.966 8.966 0 0112 21a8.966 8.966 0 01-5.982-2.275M15 9.75a3 3 0 11-6 0 3 3 0 016 0z");
    			add_location(path, file$u, 129, 8, 2973);
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "fill", "none");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			attr_dev(svg, "stroke-width", "2");
    			attr_dev(svg, "stroke", "rgb(247, 247, 247)");
    			attr_dev(svg, "width", "17");
    			attr_dev(svg, "height", "17");
    			attr_dev(svg, "class", "svelte-1sadpxu");
    			add_location(svg, file$u, 128, 4, 2823);
    			attr_dev(h30, "class", "svelte-1sadpxu");
    			add_location(h30, file$u, 131, 4, 3240);
    			attr_dev(div0, "class", "user-info-title svelte-1sadpxu");
    			add_location(div0, file$u, 127, 0, 2788);
    			attr_dev(h31, "class", "svelte-1sadpxu");
    			add_location(h31, file$u, 135, 8, 3340);
    			attr_dev(h40, "class", "svelte-1sadpxu");
    			add_location(h40, file$u, 136, 8, 3362);
    			attr_dev(div1, "class", "user-name-wrap svelte-1sadpxu");
    			add_location(div1, file$u, 134, 4, 3302);
    			attr_dev(h41, "class", "svelte-1sadpxu");
    			add_location(h41, file$u, 139, 8, 3440);
    			attr_dev(h32, "class", "svelte-1sadpxu");
    			add_location(h32, file$u, 140, 8, 3461);
    			attr_dev(div2, "class", "user-affiliation-wrap item svelte-1sadpxu");
    			add_location(div2, file$u, 138, 4, 3390);
    			attr_dev(h42, "class", "svelte-1sadpxu");
    			add_location(h42, file$u, 143, 8, 3542);
    			attr_dev(h33, "class", "svelte-1sadpxu");
    			add_location(h33, file$u, 144, 8, 3566);
    			attr_dev(div3, "class", "user-ip-wrap item svelte-1sadpxu");
    			add_location(div3, file$u, 142, 4, 3501);
    			attr_dev(h43, "class", "svelte-1sadpxu");
    			add_location(h43, file$u, 147, 8, 3650);
    			attr_dev(h34, "class", "svelte-1sadpxu");
    			add_location(h34, file$u, 148, 8, 3673);
    			attr_dev(div4, "class", "user-recent-wrap item svelte-1sadpxu");
    			add_location(div4, file$u, 146, 4, 3605);
    			attr_dev(h35, "href", "/logout");
    			attr_dev(h35, "class", "svelte-1sadpxu");
    			add_location(h35, file$u, 152, 12, 3806);
    			attr_dev(a0, "class", "logout-btn-wrap svelte-1sadpxu");
    			attr_dev(a0, "href", "/logout");
    			add_location(a0, file$u, 151, 8, 3750);
    			attr_dev(h36, "href", "/user/change");
    			attr_dev(h36, "class", "svelte-1sadpxu");
    			add_location(h36, file$u, 157, 12, 3959);
    			attr_dev(a1, "class", "change-account-btn-wrap svelte-1sadpxu");
    			attr_dev(a1, "href", "/user/change");
    			add_location(a1, file$u, 156, 8, 3890);
    			attr_dev(div5, "class", "user-btn-control-wrap svelte-1sadpxu");
    			add_location(div5, file$u, 150, 4, 3705);
    			attr_dev(div6, "class", "user-info-container svelte-1sadpxu");
    			add_location(div6, file$u, 133, 0, 3263);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			append_dev(div0, svg);
    			append_dev(svg, path);
    			append_dev(div0, t0);
    			append_dev(div0, h30);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, div6, anchor);
    			append_dev(div6, div1);
    			append_dev(div1, h31);
    			append_dev(div1, t4);
    			append_dev(div1, h40);
    			append_dev(div6, t6);
    			append_dev(div6, div2);
    			append_dev(div2, h41);
    			append_dev(div2, t8);
    			append_dev(div2, h32);
    			append_dev(div6, t10);
    			append_dev(div6, div3);
    			append_dev(div3, h42);
    			append_dev(div3, t12);
    			append_dev(div3, h33);
    			append_dev(div6, t14);
    			append_dev(div6, div4);
    			append_dev(div4, h43);
    			append_dev(div4, t16);
    			append_dev(div4, h34);
    			append_dev(div6, t18);
    			append_dev(div6, div5);
    			append_dev(div5, a0);
    			append_dev(a0, h35);
    			append_dev(div5, t20);
    			append_dev(div5, a1);
    			append_dev(a1, h36);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(div6);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$z.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$z($$self, $$props) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('UserInfo', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<UserInfo> was created with unknown prop '${key}'`);
    	});

    	return [];
    }

    class UserInfo extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$z, create_fragment$z, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "UserInfo",
    			options,
    			id: create_fragment$z.name
    		});
    	}
    }

    /* pages/DevViews/NotReadyView.svelte generated by Svelte v3.50.1 */

    const file$v = "pages/DevViews/NotReadyView.svelte";

    function create_fragment$A(ctx) {
    	let div2;
    	let div0;
    	let svg;
    	let path;
    	let t0;
    	let div1;
    	let h1;
    	let t2;
    	let h20;
    	let t4;
    	let h21;

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div0 = element("div");
    			svg = svg_element("svg");
    			path = svg_element("path");
    			t0 = space();
    			div1 = element("div");
    			h1 = element("h1");
    			h1.textContent = "준비중입니다!";
    			t2 = space();
    			h20 = element("h2");
    			h20.textContent = "찾아오신 페이지는 아직 준비중입니다.";
    			t4 = space();
    			h21 = element("h2");
    			h21.textContent = "곧 좋은 서비스로 뵙겠습니다!";
    			attr_dev(path, "stroke-linecap", "round");
    			attr_dev(path, "stroke-linejoin", "round");
    			attr_dev(path, "d", "M10.05 4.575a1.575 1.575 0 10-3.15 0v3m3.15-3v-1.5a1.575 1.575 0 013.15 0v1.5m-3.15 0l.075 5.925m3.075.75V4.575m0 0a1.575 1.575 0 013.15 0V15M6.9 7.575a1.575 1.575 0 10-3.15 0v8.175a6.75 6.75 0 006.75 6.75h2.018a5.25 5.25 0 003.712-1.538l1.732-1.732a5.25 5.25 0 001.538-3.712l.003-2.024a.668.668 0 01.198-.471 1.575 1.575 0 10-2.228-2.228 3.818 3.818 0 00-1.12 2.687M6.9 7.575V12m6.27 4.318A4.49 4.49 0 0116.35 15m.002 0h-.002");
    			add_location(path, file$v, 59, 12, 1363);
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "fill", "none");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			attr_dev(svg, "stroke-width", "0.8");
    			attr_dev(svg, "stroke", "rgb(31, 32, 88)");
    			attr_dev(svg, "height", "200");
    			attr_dev(svg, "width", "200");
    			add_location(svg, file$v, 58, 8, 1208);
    			attr_dev(div0, "class", "icon-wrap svelte-1wxqcy9");
    			add_location(div0, file$v, 57, 4, 1175);
    			attr_dev(h1, "class", "svelte-1wxqcy9");
    			add_location(h1, file$v, 63, 8, 1924);
    			attr_dev(h20, "class", "details-1 svelte-1wxqcy9");
    			add_location(h20, file$v, 64, 8, 1950);
    			attr_dev(h21, "class", "details-2 svelte-1wxqcy9");
    			add_location(h21, file$v, 65, 8, 2007);
    			attr_dev(div1, "class", "notification-wrap svelte-1wxqcy9");
    			add_location(div1, file$v, 62, 4, 1883);
    			attr_dev(div2, "class", "not-ready-page svelte-1wxqcy9");
    			add_location(div2, file$v, 56, 0, 1141);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div0);
    			append_dev(div0, svg);
    			append_dev(svg, path);
    			append_dev(div2, t0);
    			append_dev(div2, div1);
    			append_dev(div1, h1);
    			append_dev(div1, t2);
    			append_dev(div1, h20);
    			append_dev(div1, t4);
    			append_dev(div1, h21);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$A.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$A($$self, $$props) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('NotReadyView', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<NotReadyView> was created with unknown prop '${key}'`);
    	});

    	return [];
    }

    class NotReadyView extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$A, create_fragment$A, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "NotReadyView",
    			options,
    			id: create_fragment$A.name
    		});
    	}
    }

    /* pages/ManageBrowse/ManageBrowse.svelte generated by Svelte v3.50.1 */
    const file$w = "pages/ManageBrowse/ManageBrowse.svelte";

    // (87:12) <Route path="/browse/*">
    function create_default_slot_3(ctx) {
    	let browsetitle;
    	let t0;
    	let contentcontainer;
    	let t1;
    	let div;
    	let browsenavbar;
    	let current;
    	browsetitle = new BrowseTitle({ $$inline: true });
    	browsetitle.$on("viewChange", /*viewHandle*/ ctx[6]);

    	contentcontainer = new ContentContainer({
    			props: {
    				page: /*page*/ ctx[0],
    				view: /*view*/ ctx[2]
    			},
    			$$inline: true
    		});

    	contentcontainer.$on("pageChange", /*pageHandle*/ ctx[4]);
    	contentcontainer.$on("focus", /*focusHandle*/ ctx[5]);

    	browsenavbar = new BrowseNavbar({
    			props: {
    				page: /*page*/ ctx[0],
    				focus: /*focus*/ ctx[1]
    			},
    			$$inline: true
    		});

    	browsenavbar.$on("pageChange", /*pageHandle*/ ctx[4]);

    	const block = {
    		c: function create() {
    			create_component(browsetitle.$$.fragment);
    			t0 = space();
    			create_component(contentcontainer.$$.fragment);
    			t1 = space();
    			div = element("div");
    			create_component(browsenavbar.$$.fragment);
    			attr_dev(div, "class", "bottom-bar svelte-1sg9ilg");
    			add_location(div, file$w, 94, 16, 2784);
    		},
    		m: function mount(target, anchor) {
    			mount_component(browsetitle, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(contentcontainer, target, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div, anchor);
    			mount_component(browsenavbar, div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const contentcontainer_changes = {};
    			if (dirty & /*page*/ 1) contentcontainer_changes.page = /*page*/ ctx[0];
    			if (dirty & /*view*/ 4) contentcontainer_changes.view = /*view*/ ctx[2];
    			contentcontainer.$set(contentcontainer_changes);
    			const browsenavbar_changes = {};
    			if (dirty & /*page*/ 1) browsenavbar_changes.page = /*page*/ ctx[0];
    			if (dirty & /*focus*/ 2) browsenavbar_changes.focus = /*focus*/ ctx[1];
    			browsenavbar.$set(browsenavbar_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(browsetitle.$$.fragment, local);
    			transition_in(contentcontainer.$$.fragment, local);
    			transition_in(browsenavbar.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(browsetitle.$$.fragment, local);
    			transition_out(contentcontainer.$$.fragment, local);
    			transition_out(browsenavbar.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(browsetitle, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(contentcontainer, detaching);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div);
    			destroy_component(browsenavbar);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3.name,
    		type: "slot",
    		source: "(87:12) <Route path=\\\"/browse/*\\\">",
    		ctx
    	});

    	return block;
    }

    // (100:12) <Route path="/create">
    function create_default_slot_2(ctx) {
    	let managecreateview;
    	let current;
    	managecreateview = new ManageCreateView({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(managecreateview.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(managecreateview, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(managecreateview.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(managecreateview.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(managecreateview, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2.name,
    		type: "slot",
    		source: "(100:12) <Route path=\\\"/create\\\">",
    		ctx
    	});

    	return block;
    }

    // (104:12) <Route path="/stats/*">
    function create_default_slot_1(ctx) {
    	let div;
    	let notreadyview;
    	let current;
    	notreadyview = new NotReadyView({ $$inline: true });

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(notreadyview.$$.fragment);
    			attr_dev(div, "class", "stats-content-wrap svelte-1sg9ilg");
    			add_location(div, file$w, 104, 16, 3089);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(notreadyview, div, null);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(notreadyview.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(notreadyview.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(notreadyview);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1.name,
    		type: "slot",
    		source: "(104:12) <Route path=\\\"/stats/*\\\">",
    		ctx
    	});

    	return block;
    }

    // (79:0) <Route path="/*">
    function create_default_slot$1(ctx) {
    	let div0;
    	let managesidebar;
    	let div0_intro;
    	let div0_outro;
    	let t0;
    	let div2;
    	let div1;
    	let route0;
    	let t1;
    	let route1;
    	let t2;
    	let route2;
    	let t3;
    	let route3;
    	let t4;
    	let div3;
    	let userinfo;
    	let div3_intro;
    	let div3_outro;
    	let current;

    	managesidebar = new ManageSidebar({
    			props: { categories: /*categories*/ ctx[3] },
    			$$inline: true
    		});

    	route0 = new Route({
    			props: {
    				path: "/",
    				redirect: "/manage/cases/browse"
    			},
    			$$inline: true
    		});

    	route1 = new Route({
    			props: {
    				path: "/browse/*",
    				$$slots: { default: [create_default_slot_3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	route2 = new Route({
    			props: {
    				path: "/create",
    				$$slots: { default: [create_default_slot_2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	route3 = new Route({
    			props: {
    				path: "/stats/*",
    				$$slots: { default: [create_default_slot_1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	userinfo = new UserInfo({ $$inline: true });

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			create_component(managesidebar.$$.fragment);
    			t0 = space();
    			div2 = element("div");
    			div1 = element("div");
    			create_component(route0.$$.fragment);
    			t1 = space();
    			create_component(route1.$$.fragment);
    			t2 = space();
    			create_component(route2.$$.fragment);
    			t3 = space();
    			create_component(route3.$$.fragment);
    			t4 = space();
    			div3 = element("div");
    			create_component(userinfo.$$.fragment);
    			attr_dev(div0, "class", "sidebar-wrap");
    			add_location(div0, file$w, 79, 4, 2162);
    			attr_dev(div1, "class", "browse-content-wrap svelte-1sg9ilg");
    			add_location(div1, file$w, 83, 8, 2366);
    			attr_dev(div2, "class", "manage-content-main svelte-1sg9ilg");
    			add_location(div2, file$w, 82, 4, 2323);
    			attr_dev(div3, "class", "user-info-wrap");
    			add_location(div3, file$w, 110, 4, 3239);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			mount_component(managesidebar, div0, null);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div1);
    			mount_component(route0, div1, null);
    			append_dev(div1, t1);
    			mount_component(route1, div1, null);
    			append_dev(div1, t2);
    			mount_component(route2, div1, null);
    			append_dev(div1, t3);
    			mount_component(route3, div1, null);
    			insert_dev(target, t4, anchor);
    			insert_dev(target, div3, anchor);
    			mount_component(userinfo, div3, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const route1_changes = {};

    			if (dirty & /*$$scope, page, focus, view*/ 1031) {
    				route1_changes.$$scope = { dirty, ctx };
    			}

    			route1.$set(route1_changes);
    			const route2_changes = {};

    			if (dirty & /*$$scope*/ 1024) {
    				route2_changes.$$scope = { dirty, ctx };
    			}

    			route2.$set(route2_changes);
    			const route3_changes = {};

    			if (dirty & /*$$scope*/ 1024) {
    				route3_changes.$$scope = { dirty, ctx };
    			}

    			route3.$set(route3_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(managesidebar.$$.fragment, local);

    			add_render_callback(() => {
    				if (div0_outro) div0_outro.end(1);
    				div0_intro = create_in_transition(div0, fly, { duration: 200, x: -400, y: 0 });
    				div0_intro.start();
    			});

    			transition_in(route0.$$.fragment, local);
    			transition_in(route1.$$.fragment, local);
    			transition_in(route2.$$.fragment, local);
    			transition_in(route3.$$.fragment, local);
    			transition_in(userinfo.$$.fragment, local);

    			add_render_callback(() => {
    				if (div3_outro) div3_outro.end(1);
    				div3_intro = create_in_transition(div3, fly, { duration: 200, x: +400, y: 0 });
    				div3_intro.start();
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(managesidebar.$$.fragment, local);
    			if (div0_intro) div0_intro.invalidate();
    			div0_outro = create_out_transition(div0, fade, { duration: 10 });
    			transition_out(route0.$$.fragment, local);
    			transition_out(route1.$$.fragment, local);
    			transition_out(route2.$$.fragment, local);
    			transition_out(route3.$$.fragment, local);
    			transition_out(userinfo.$$.fragment, local);
    			if (div3_intro) div3_intro.invalidate();
    			div3_outro = create_out_transition(div3, fade, { duration: 10 });
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			destroy_component(managesidebar);
    			if (detaching && div0_outro) div0_outro.end();
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div2);
    			destroy_component(route0);
    			destroy_component(route1);
    			destroy_component(route2);
    			destroy_component(route3);
    			if (detaching) detach_dev(t4);
    			if (detaching) detach_dev(div3);
    			destroy_component(userinfo);
    			if (detaching && div3_outro) div3_outro.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$1.name,
    		type: "slot",
    		source: "(79:0) <Route path=\\\"/*\\\">",
    		ctx
    	});

    	return block;
    }

    function create_fragment$B(ctx) {
    	let route;
    	let current;

    	route = new Route({
    			props: {
    				path: "/*",
    				$$slots: { default: [create_default_slot$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(route.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(route, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const route_changes = {};

    			if (dirty & /*$$scope, page, focus, view*/ 1031) {
    				route_changes.$$scope = { dirty, ctx };
    			}

    			route.$set(route_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(route.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(route.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(route, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$B.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$B($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ManageBrowse', slots, []);
    	let selected_index = null;
    	let page = 1;
    	let stage = 1;
    	let focus = false;
    	let view = "box";

    	let categories = [
    		{
    			name: "기록물 관리",
    			sub_category: [
    				{
    					name: "기록물 관리",
    					path: "/manage/cases/browse"
    				},
    				{
    					name: "기록물 생성",
    					path: "/manage/cases/create"
    				}
    			]
    		},
    		{
    			name: "홈페이지",
    			sub_category: [{ name: "관리자 메인", path: "/manage" }, { name: "유저 메인", path: "/user" }]
    		},
    		{
    			name: "통계",
    			sub_category: [
    				{
    					name: "나의 통계",
    					path: "/manage/cases/stats/user"
    				},
    				{
    					name: "기록물 생성",
    					path: "/manage/cases/stats/"
    				}
    			]
    		}
    	];

    	function categorySelect(e) {
    		selected_index = e.detail.index;
    	}

    	function pageHandle(e) {
    		$$invalidate(0, page = e.detail.page);
    	}

    	function focusHandle(e) {
    		$$invalidate(1, focus = e.detail.focus);
    	}

    	function viewHandle(e) {
    		$$invalidate(2, view = e.detail.view);
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ManageBrowse> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		ContentContainer,
    		BrowseNavbar,
    		ManageSidebar,
    		BrowseTitle,
    		ManageCreateView,
    		UserInfo,
    		NotReadyView,
    		meta: O,
    		Route,
    		fly,
    		fade,
    		selected_index,
    		page,
    		stage,
    		focus,
    		view,
    		categories,
    		categorySelect,
    		pageHandle,
    		focusHandle,
    		viewHandle
    	});

    	$$self.$inject_state = $$props => {
    		if ('selected_index' in $$props) selected_index = $$props.selected_index;
    		if ('page' in $$props) $$invalidate(0, page = $$props.page);
    		if ('stage' in $$props) stage = $$props.stage;
    		if ('focus' in $$props) $$invalidate(1, focus = $$props.focus);
    		if ('view' in $$props) $$invalidate(2, view = $$props.view);
    		if ('categories' in $$props) $$invalidate(3, categories = $$props.categories);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [page, focus, view, categories, pageHandle, focusHandle, viewHandle];
    }

    class ManageBrowse extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$B, create_fragment$B, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ManageBrowse",
    			options,
    			id: create_fragment$B.name
    		});
    	}
    }

    /* components/manager/UserManage/UserSearchSmall.svelte generated by Svelte v3.50.1 */

    const { console: console_1$9 } = globals;
    const file$x = "components/manager/UserManage/UserSearchSmall.svelte";

    // (190:12) {:else}
    function create_else_block$f(ctx) {
    	let label;
    	let h3;
    	let t;
    	let label_intro;
    	let label_outro;
    	let current;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			label = element("label");
    			h3 = element("h3");
    			t = text(/*placeholder*/ ctx[0]);
    			attr_dev(h3, "class", "svelte-1fzukvj");
    			add_location(h3, file$x, 195, 27, 4692);
    			attr_dev(label, "for", "search-input");
    			attr_dev(label, "class", "search-label svelte-1fzukvj");
    			add_location(label, file$x, 191, 20, 4449);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, label, anchor);
    			append_dev(label, h3);
    			append_dev(h3, t);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(label, "click", labelHandle$1, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (!current || dirty & /*placeholder*/ 1) set_data_dev(t, /*placeholder*/ ctx[0]);
    		},
    		i: function intro(local) {
    			if (current) return;

    			add_render_callback(() => {
    				if (label_outro) label_outro.end(1);
    				label_intro = create_in_transition(label, /*receive*/ ctx[4], { key: 'unfocused' });
    				label_intro.start();
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			if (label_intro) label_intro.invalidate();
    			label_outro = create_out_transition(label, /*send*/ ctx[3], { key: 'focused' });
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(label);
    			if (detaching && label_outro) label_outro.end();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$f.name,
    		type: "else",
    		source: "(190:12) {:else}",
    		ctx
    	});

    	return block;
    }

    // (181:12) {#if focused || search_value}
    function create_if_block$i(ctx) {
    	let label;
    	let h3;
    	let t;
    	let label_intro;
    	let label_outro;
    	let current;

    	const block = {
    		c: function create() {
    			label = element("label");
    			h3 = element("h3");
    			t = text(/*placeholder*/ ctx[0]);
    			attr_dev(h3, "class", "svelte-1fzukvj");
    			add_location(h3, file$x, 186, 27, 4294);
    			attr_dev(label, "for", "search-input");
    			attr_dev(label, "class", "search-label-focused svelte-1fzukvj");
    			add_location(label, file$x, 182, 20, 4065);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, label, anchor);
    			append_dev(label, h3);
    			append_dev(h3, t);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (!current || dirty & /*placeholder*/ 1) set_data_dev(t, /*placeholder*/ ctx[0]);
    		},
    		i: function intro(local) {
    			if (current) return;

    			add_render_callback(() => {
    				if (label_outro) label_outro.end(1);
    				label_intro = create_in_transition(label, /*receive*/ ctx[4], { key: 'focused' });
    				label_intro.start();
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			if (label_intro) label_intro.invalidate();
    			label_outro = create_out_transition(label, /*send*/ ctx[3], { key: 'unfocused' });
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(label);
    			if (detaching && label_outro) label_outro.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$i.name,
    		type: "if",
    		source: "(181:12) {#if focused || search_value}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$C(ctx) {
    	let div1;
    	let div0;
    	let form;
    	let input;
    	let t;
    	let current_block_type_index;
    	let if_block;
    	let current;
    	let mounted;
    	let dispose;
    	const if_block_creators = [create_if_block$i, create_else_block$f];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*focused*/ ctx[1] || /*search_value*/ ctx[2]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			form = element("form");
    			input = element("input");
    			t = space();
    			if_block.c();
    			attr_dev(input, "class", "search-input-small svelte-1fzukvj");
    			attr_dev(input, "type", "text");
    			add_location(input, file$x, 179, 8, 3850);
    			attr_dev(form, "class", "search-form svelte-1fzukvj");
    			add_location(form, file$x, 178, 4, 3814);
    			attr_dev(div0, "class", "user-search-container svelte-1fzukvj");
    			add_location(div0, file$x, 177, 4, 3773);
    			attr_dev(div1, "class", "user-search-wrap svelte-1fzukvj");
    			add_location(div1, file$x, 176, 0, 3737);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			append_dev(div0, form);
    			append_dev(form, input);
    			set_input_value(input, /*search_value*/ ctx[2]);
    			append_dev(form, t);
    			if_blocks[current_block_type_index].m(form, null);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(input, "focus", /*focusHandle*/ ctx[5], false, false, false),
    					listen_dev(input, "blur", /*blurHandle*/ ctx[6], false, false, false),
    					listen_dev(input, "input", /*input_input_handler*/ ctx[7])
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*search_value*/ 4 && input.value !== /*search_value*/ ctx[2]) {
    				set_input_value(input, /*search_value*/ ctx[2]);
    			}

    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(form, null);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if_blocks[current_block_type_index].d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$C.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function labelHandle$1() {
    	document.querySelector('.search-input-small').focus = true;
    }

    function tagSplice$1(string) {
    	let str = [...string];

    	for (let i = 0; i <= str.length; i++) {
    		if (str[i] == ',') {
    			if (i + 1 == str.length) {
    				str[i] = ' ';
    				str = [...str, '#'];
    			} else {
    				str[i] = ' ';
    				str.splice(i + 1, 0, '#');
    			}
    		}
    	}

    	return str;
    }

    function instance$C($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('UserSearchSmall', slots, []);
    	const [send, receive] = crossfade({});
    	const dispatch = createEventDispatcher();
    	let focused = false;
    	let search_value = '';
    	let { placeholder = "검색해주세요" } = $$props;

    	function focusHandle() {
    		$$invalidate(1, focused = true);
    		console.log("focused", focused);
    	}

    	function blurHandle() {
    		$$invalidate(1, focused = false);
    		console.log("blurred", focused);
    	}

    	function changeCall(value) {
    		dispatch('change', { value });
    	}

    	const writable_props = ['placeholder'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$9.warn(`<UserSearchSmall> was created with unknown prop '${key}'`);
    	});

    	function input_input_handler() {
    		search_value = this.value;
    		($$invalidate(2, search_value), $$invalidate(1, focused));
    	}

    	$$self.$$set = $$props => {
    		if ('placeholder' in $$props) $$invalidate(0, placeholder = $$props.placeholder);
    	};

    	$$self.$capture_state = () => ({
    		Route,
    		router: f,
    		createEventDispatcher,
    		crossfade,
    		fade,
    		flip,
    		send,
    		receive,
    		dispatch,
    		focused,
    		search_value,
    		placeholder,
    		focusHandle,
    		blurHandle,
    		labelHandle: labelHandle$1,
    		tagSplice: tagSplice$1,
    		changeCall
    	});

    	$$self.$inject_state = $$props => {
    		if ('focused' in $$props) $$invalidate(1, focused = $$props.focused);
    		if ('search_value' in $$props) $$invalidate(2, search_value = $$props.search_value);
    		if ('placeholder' in $$props) $$invalidate(0, placeholder = $$props.placeholder);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*focused, search_value*/ 6) {
    			 {
    				if (focused) {
    					if (!search_value) {
    						$$invalidate(2, search_value = '#');
    					}
    				} else if (search_value.length == 1) {
    					$$invalidate(2, search_value = '');
    				}
    			}
    		}

    		if ($$self.$$.dirty & /*search_value*/ 4) {
    			 {
    				let result = '';
    				let str_list = search_value.split('');
    				str_list = tagSplice$1(str_list);

    				if (str_list) {
    					str_list.forEach(char => {
    						result = result + char;
    					});

    					$$invalidate(2, search_value = result);
    				}

    				$$invalidate(2, search_value = search_value.replace(/\s+[^#]/, '_'));
    			}
    		}

    		if ($$self.$$.dirty & /*search_value*/ 4) {
    			 {
    				dispatch('change', { value: search_value });
    			}
    		}
    	};

    	return [
    		placeholder,
    		focused,
    		search_value,
    		send,
    		receive,
    		focusHandle,
    		blurHandle,
    		input_input_handler
    	];
    }

    class UserSearchSmall extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$C, create_fragment$C, safe_not_equal, { placeholder: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "UserSearchSmall",
    			options,
    			id: create_fragment$C.name
    		});
    	}

    	get placeholder() {
    		throw new Error("<UserSearchSmall>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set placeholder(value) {
    		throw new Error("<UserSearchSmall>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* components/manager/ContentTitle/BrowseAccountTitle.svelte generated by Svelte v3.50.1 */
    const file$y = "components/manager/ContentTitle/BrowseAccountTitle.svelte";

    function get_each_context$d(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[4] = list[i];
    	child_ctx[6] = i;
    	return child_ctx;
    }

    // (133:16) {:else}
    function create_else_block$g(ctx) {
    	let h5;

    	const block = {
    		c: function create() {
    			h5 = element("h5");
    			h5.textContent = "키워드를 입력해주세요.";
    			attr_dev(h5, "class", "svelte-e6h8sd");
    			add_location(h5, file$y, 133, 20, 3109);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h5, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h5);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$g.name,
    		type: "else",
    		source: "(133:16) {:else}",
    		ctx
    	});

    	return block;
    }

    // (130:20) {#if keyword != ''}
    function create_if_block$j(ctx) {
    	let div;
    	let h3;
    	let t_value = /*keyword*/ ctx[4] + "";
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			h3 = element("h3");
    			t = text(t_value);
    			attr_dev(h3, "class", "svelte-e6h8sd");
    			add_location(h3, file$y, 130, 45, 3014);
    			attr_dev(div, "class", "keyword svelte-e6h8sd");
    			add_location(div, file$y, 130, 24, 2993);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, h3);
    			append_dev(h3, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*keywords*/ 1 && t_value !== (t_value = /*keyword*/ ctx[4] + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$j.name,
    		type: "if",
    		source: "(130:20) {#if keyword != ''}",
    		ctx
    	});

    	return block;
    }

    // (129:16) {#each keywords as keyword, index}
    function create_each_block$d(ctx) {
    	let if_block_anchor;
    	let if_block = /*keyword*/ ctx[4] != '' && create_if_block$j(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (/*keyword*/ ctx[4] != '') {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$j(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$d.name,
    		type: "each",
    		source: "(129:16) {#each keywords as keyword, index}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$D(ctx) {
    	let div4;
    	let h30;
    	let t1;
    	let div2;
    	let div0;
    	let h31;
    	let t3;
    	let div1;
    	let t4;
    	let div3;
    	let usersearchsmall;
    	let current;
    	let each_value = /*keywords*/ ctx[0];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$d(get_each_context$d(ctx, each_value, i));
    	}

    	let each_1_else = null;

    	if (!each_value.length) {
    		each_1_else = create_else_block$g(ctx);
    	}

    	usersearchsmall = new UserSearchSmall({
    			props: { placeholder: "키워드 검색" },
    			$$inline: true
    		});

    	usersearchsmall.$on("change", /*valueChangeHandle*/ ctx[1]);

    	const block = {
    		c: function create() {
    			div4 = element("div");
    			h30 = element("h3");
    			h30.textContent = "회원 조회";
    			t1 = space();
    			div2 = element("div");
    			div0 = element("div");
    			h31 = element("h3");
    			h31.textContent = "키워드:";
    			t3 = space();
    			div1 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			if (each_1_else) {
    				each_1_else.c();
    			}

    			t4 = space();
    			div3 = element("div");
    			create_component(usersearchsmall.$$.fragment);
    			attr_dev(h30, "class", "svelte-e6h8sd");
    			add_location(h30, file$y, 122, 8, 2684);
    			attr_dev(h31, "class", "svelte-e6h8sd");
    			add_location(h31, file$y, 125, 16, 2804);
    			attr_dev(div0, "class", "keyword-holder-label svelte-e6h8sd");
    			add_location(div0, file$y, 124, 12, 2753);
    			attr_dev(div1, "class", "keyword-holder svelte-e6h8sd");
    			add_location(div1, file$y, 127, 12, 2849);
    			attr_dev(div2, "class", "keyword-holder-wrap svelte-e6h8sd");
    			add_location(div2, file$y, 123, 8, 2707);
    			attr_dev(div3, "class", "search-field svelte-e6h8sd");
    			add_location(div3, file$y, 137, 8, 3197);
    			attr_dev(div4, "class", "browse-content-title svelte-e6h8sd");
    			add_location(div4, file$y, 121, 4, 2641);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div4, anchor);
    			append_dev(div4, h30);
    			append_dev(div4, t1);
    			append_dev(div4, div2);
    			append_dev(div2, div0);
    			append_dev(div0, h31);
    			append_dev(div2, t3);
    			append_dev(div2, div1);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div1, null);
    			}

    			if (each_1_else) {
    				each_1_else.m(div1, null);
    			}

    			append_dev(div4, t4);
    			append_dev(div4, div3);
    			mount_component(usersearchsmall, div3, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*keywords*/ 1) {
    				each_value = /*keywords*/ ctx[0];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$d(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$d(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div1, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;

    				if (!each_value.length && each_1_else) {
    					each_1_else.p(ctx, dirty);
    				} else if (!each_value.length) {
    					each_1_else = create_else_block$g(ctx);
    					each_1_else.c();
    					each_1_else.m(div1, null);
    				} else if (each_1_else) {
    					each_1_else.d(1);
    					each_1_else = null;
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(usersearchsmall.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(usersearchsmall.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div4);
    			destroy_each(each_blocks, detaching);
    			if (each_1_else) each_1_else.d();
    			destroy_component(usersearchsmall);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$D.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$D($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('BrowseAccountTitle', slots, []);
    	let keywords = ['#사용자_전체'];
    	var dispatch = createEventDispatcher();

    	function valueChangeHandle(e) {
    		let search_keywords = e.detail.value;
    		$$invalidate(0, keywords = search_keywords.split(' '));
    	}

    	function keywordChange(keywords) {
    		dispatch('keyword', { keywords });
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<BrowseAccountTitle> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		Route,
    		createEventDispatcher,
    		UserSearchSmall,
    		keywords,
    		dispatch,
    		valueChangeHandle,
    		keywordChange
    	});

    	$$self.$inject_state = $$props => {
    		if ('keywords' in $$props) $$invalidate(0, keywords = $$props.keywords);
    		if ('dispatch' in $$props) dispatch = $$props.dispatch;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*keywords*/ 1) {
    			 {
    				keywordChange(keywords);
    			}
    		}
    	};

    	return [keywords, valueChangeHandle];
    }

    class BrowseAccountTitle extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$D, create_fragment$D, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "BrowseAccountTitle",
    			options,
    			id: create_fragment$D.name
    		});
    	}
    }

    /* components/manager/UserManage/UserListItem.svelte generated by Svelte v3.50.1 */
    const file$z = "components/manager/UserManage/UserListItem.svelte";

    function create_fragment$E(ctx) {
    	let div14;
    	let div1;
    	let div0;
    	let h30;
    	let t0_value = /*item*/ ctx[0]._id + "";
    	let t0;
    	let t1;
    	let div3;
    	let div2;
    	let h31;
    	let t2_value = /*item*/ ctx[0].authority + "";
    	let t2;
    	let t3;
    	let div5;
    	let div4;
    	let h32;
    	let t4_value = /*item*/ ctx[0].name + "";
    	let t4;
    	let t5;
    	let div7;
    	let div6;
    	let h33;
    	let t6_value = /*item*/ ctx[0].standing + "";
    	let t6;
    	let t7;
    	let div9;
    	let div8;
    	let h34;
    	let t8_value = /*item*/ ctx[0].created_at + "";
    	let t8;
    	let t9;
    	let div11;
    	let div10;
    	let h35;
    	let t10_value = /*item*/ ctx[0].affiliation + "";
    	let t10;
    	let t11;
    	let div13;
    	let div12;
    	let h36;
    	let t12_value = /*item*/ ctx[0].position + "";
    	let t12;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div14 = element("div");
    			div1 = element("div");
    			div0 = element("div");
    			h30 = element("h3");
    			t0 = text(t0_value);
    			t1 = space();
    			div3 = element("div");
    			div2 = element("div");
    			h31 = element("h3");
    			t2 = text(t2_value);
    			t3 = space();
    			div5 = element("div");
    			div4 = element("div");
    			h32 = element("h3");
    			t4 = text(t4_value);
    			t5 = space();
    			div7 = element("div");
    			div6 = element("div");
    			h33 = element("h3");
    			t6 = text(t6_value);
    			t7 = space();
    			div9 = element("div");
    			div8 = element("div");
    			h34 = element("h3");
    			t8 = text(t8_value);
    			t9 = space();
    			div11 = element("div");
    			div10 = element("div");
    			h35 = element("h3");
    			t10 = text(t10_value);
    			t11 = space();
    			div13 = element("div");
    			div12 = element("div");
    			h36 = element("h3");
    			t12 = text(t12_value);
    			attr_dev(h30, "class", "svelte-cobv41");
    			add_location(h30, file$z, 17, 12, 401);
    			attr_dev(div0, "class", "id-container container svelte-cobv41");
    			add_location(div0, file$z, 16, 8, 352);
    			attr_dev(div1, "class", "id-wrap wrap svelte-cobv41");
    			add_location(div1, file$z, 15, 4, 317);
    			attr_dev(h31, "class", "svelte-cobv41");
    			add_location(h31, file$z, 22, 12, 544);
    			attr_dev(div2, "class", "authority-container container svelte-cobv41");
    			add_location(div2, file$z, 21, 8, 488);
    			attr_dev(div3, "class", "authority-wrap svelte-cobv41");
    			add_location(div3, file$z, 20, 4, 451);
    			attr_dev(h32, "class", "svelte-cobv41");
    			add_location(h32, file$z, 27, 12, 683);
    			attr_dev(div4, "class", "name-container container svelte-cobv41");
    			add_location(div4, file$z, 26, 8, 632);
    			attr_dev(div5, "class", "name-wrap svelte-cobv41");
    			add_location(div5, file$z, 25, 4, 600);
    			attr_dev(h33, "class", "svelte-cobv41");
    			add_location(h33, file$z, 32, 12, 825);
    			attr_dev(div6, "class", "standing-container container svelte-cobv41");
    			add_location(div6, file$z, 31, 8, 770);
    			attr_dev(div7, "class", "standing-wrap svelte-cobv41");
    			add_location(div7, file$z, 30, 4, 734);
    			attr_dev(h34, "class", "svelte-cobv41");
    			add_location(h34, file$z, 37, 12, 963);
    			attr_dev(div8, "class", "date-container container svelte-cobv41");
    			add_location(div8, file$z, 36, 8, 912);
    			attr_dev(div9, "class", "date-wrap svelte-cobv41");
    			add_location(div9, file$z, 35, 4, 880);
    			attr_dev(h35, "class", "svelte-cobv41");
    			add_location(h35, file$z, 42, 12, 1117);
    			attr_dev(div10, "class", "affiliation-container container svelte-cobv41");
    			add_location(div10, file$z, 41, 8, 1059);
    			attr_dev(div11, "class", "affiliation-wrap svelte-cobv41");
    			add_location(div11, file$z, 40, 4, 1020);
    			attr_dev(h36, "class", "svelte-cobv41");
    			add_location(h36, file$z, 47, 12, 1266);
    			attr_dev(div12, "class", "position-container container svelte-cobv41");
    			add_location(div12, file$z, 46, 8, 1211);
    			attr_dev(div13, "class", "position-wrap svelte-cobv41");
    			add_location(div13, file$z, 45, 4, 1175);
    			attr_dev(div14, "class", "table-content svelte-cobv41");
    			add_location(div14, file$z, 14, 0, 264);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div14, anchor);
    			append_dev(div14, div1);
    			append_dev(div1, div0);
    			append_dev(div0, h30);
    			append_dev(h30, t0);
    			append_dev(div14, t1);
    			append_dev(div14, div3);
    			append_dev(div3, div2);
    			append_dev(div2, h31);
    			append_dev(h31, t2);
    			append_dev(div14, t3);
    			append_dev(div14, div5);
    			append_dev(div5, div4);
    			append_dev(div4, h32);
    			append_dev(h32, t4);
    			append_dev(div14, t5);
    			append_dev(div14, div7);
    			append_dev(div7, div6);
    			append_dev(div6, h33);
    			append_dev(h33, t6);
    			append_dev(div14, t7);
    			append_dev(div14, div9);
    			append_dev(div9, div8);
    			append_dev(div8, h34);
    			append_dev(h34, t8);
    			append_dev(div14, t9);
    			append_dev(div14, div11);
    			append_dev(div11, div10);
    			append_dev(div10, h35);
    			append_dev(h35, t10);
    			append_dev(div14, t11);
    			append_dev(div14, div13);
    			append_dev(div13, div12);
    			append_dev(div12, h36);
    			append_dev(h36, t12);

    			if (!mounted) {
    				dispose = listen_dev(div14, "click", /*clickCall*/ ctx[1], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*item*/ 1 && t0_value !== (t0_value = /*item*/ ctx[0]._id + "")) set_data_dev(t0, t0_value);
    			if (dirty & /*item*/ 1 && t2_value !== (t2_value = /*item*/ ctx[0].authority + "")) set_data_dev(t2, t2_value);
    			if (dirty & /*item*/ 1 && t4_value !== (t4_value = /*item*/ ctx[0].name + "")) set_data_dev(t4, t4_value);
    			if (dirty & /*item*/ 1 && t6_value !== (t6_value = /*item*/ ctx[0].standing + "")) set_data_dev(t6, t6_value);
    			if (dirty & /*item*/ 1 && t8_value !== (t8_value = /*item*/ ctx[0].created_at + "")) set_data_dev(t8, t8_value);
    			if (dirty & /*item*/ 1 && t10_value !== (t10_value = /*item*/ ctx[0].affiliation + "")) set_data_dev(t10, t10_value);
    			if (dirty & /*item*/ 1 && t12_value !== (t12_value = /*item*/ ctx[0].position + "")) set_data_dev(t12, t12_value);
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div14);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$E.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$E($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('UserListItem', slots, []);
    	let { item = item } = $$props;
    	var dispatch = createEventDispatcher();

    	function clickCall() {
    		dispatch("click", { item });
    	}

    	const writable_props = ['item'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<UserListItem> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('item' in $$props) $$invalidate(0, item = $$props.item);
    	};

    	$$self.$capture_state = () => ({
    		createEventDispatcher,
    		onDestroy,
    		onMount,
    		item,
    		dispatch,
    		clickCall
    	});

    	$$self.$inject_state = $$props => {
    		if ('item' in $$props) $$invalidate(0, item = $$props.item);
    		if ('dispatch' in $$props) dispatch = $$props.dispatch;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [item, clickCall];
    }

    class UserListItem extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$E, create_fragment$E, safe_not_equal, { item: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "UserListItem",
    			options,
    			id: create_fragment$E.name
    		});
    	}

    	get item() {
    		throw new Error("<UserListItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set item(value) {
    		throw new Error("<UserListItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* pages/content_container/AccountView.svelte generated by Svelte v3.50.1 */
    const file$A = "pages/content_container/AccountView.svelte";

    // (330:8) {:catch error}
    function create_catch_block$2(ctx) {
    	let div;
    	let svg;
    	let path;
    	let t0;
    	let h3;

    	const block = {
    		c: function create() {
    			div = element("div");
    			svg = svg_element("svg");
    			path = svg_element("path");
    			t0 = space();
    			h3 = element("h3");
    			h3.textContent = "다시 시도 바랍니다";
    			attr_dev(path, "stroke-linecap", "round");
    			attr_dev(path, "stroke-linejoin", "round");
    			attr_dev(path, "d", "M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126zM12 15.75h.007v.008H12v-.008z");
    			add_location(path, file$A, 332, 20, 8039);
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "fill", "none");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			attr_dev(svg, "stroke-width", "1.5");
    			attr_dev(svg, "stroke", "rgb(226, 41, 41)");
    			attr_dev(svg, "height", "18");
    			attr_dev(svg, "width", "18");
    			add_location(svg, file$A, 331, 16, 7878);
    			attr_dev(div, "class", "approved-mark-wrap svelte-1vv01jw");
    			add_location(div, file$A, 330, 12, 7829);
    			attr_dev(h3, "class", "svelte-1vv01jw");
    			add_location(h3, file$A, 335, 12, 8330);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, svg);
    			append_dev(svg, path);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, h3, anchor);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(h3);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_catch_block$2.name,
    		type: "catch",
    		source: "(330:8) {:catch error}",
    		ctx
    	});

    	return block;
    }

    // (321:8) {:then result}
    function create_then_block$2(ctx) {
    	let div;
    	let svg;
    	let path;
    	let path_intro;
    	let t0;
    	let h3;
    	let t1_value = /*result*/ ctx[28].name + "";
    	let t1;

    	const block = {
    		c: function create() {
    			div = element("div");
    			svg = svg_element("svg");
    			path = svg_element("path");
    			t0 = space();
    			h3 = element("h3");
    			t1 = text(t1_value);
    			attr_dev(path, "stroke-linecap", "round");
    			attr_dev(path, "stroke-linejoin", "round");
    			attr_dev(path, "d", "M9 12.75L11.25 15 15 9.75M21 12a9 9 0 11-18 0 9 9 0 0118 0z");
    			add_location(path, file$A, 323, 20, 7532);
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "fill", "none");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			attr_dev(svg, "stroke-width", "2");
    			attr_dev(svg, "stroke", "rgb(99, 228, 99)");
    			attr_dev(svg, "height", "18");
    			attr_dev(svg, "width", "18");
    			add_location(svg, file$A, 322, 16, 7373);
    			attr_dev(div, "class", "approved-mark-wrap svelte-1vv01jw");
    			add_location(div, file$A, 321, 12, 7324);
    			attr_dev(h3, "class", "svelte-1vv01jw");
    			add_location(h3, file$A, 326, 12, 7741);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, svg);
    			append_dev(svg, path);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, h3, anchor);
    			append_dev(h3, t1);
    		},
    		p: noop,
    		i: function intro(local) {
    			if (!path_intro) {
    				add_render_callback(() => {
    					path_intro = create_in_transition(path, draw, { duration: 700, speed: 1 });
    					path_intro.start();
    				});
    			}
    		},
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(h3);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_then_block$2.name,
    		type: "then",
    		source: "(321:8) {:then result}",
    		ctx
    	});

    	return block;
    }

    // (315:39)              <div class="approved-mark-wrap">             </div>             <h3>                 파일을 받아오는 중입니다             </h3>         {:then result}
    function create_pending_block$2(ctx) {
    	let div;
    	let t0;
    	let h3;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t0 = space();
    			h3 = element("h3");
    			h3.textContent = "파일을 받아오는 중입니다";
    			attr_dev(div, "class", "approved-mark-wrap svelte-1vv01jw");
    			add_location(div, file$A, 315, 12, 7172);
    			attr_dev(h3, "class", "svelte-1vv01jw");
    			add_location(h3, file$A, 317, 12, 7236);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, h3, anchor);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(h3);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_pending_block$2.name,
    		type: "pending",
    		source: "(315:39)              <div class=\\\"approved-mark-wrap\\\">             </div>             <h3>                 파일을 받아오는 중입니다             </h3>         {:then result}",
    		ctx
    	});

    	return block;
    }

    // (342:8) {#if status == 1}
    function create_if_block_3$4(ctx) {
    	let div2;
    	let div1;
    	let svg0;
    	let path0;
    	let t0;
    	let div0;
    	let t1;
    	let h3;
    	let t2_value = /*user*/ ctx[0].created_at + "";
    	let t2;
    	let t3;
    	let div6;
    	let div3;
    	let svg1;
    	let path1;
    	let t4;
    	let div4;
    	let svg2;
    	let path2;
    	let t5;
    	let div5;
    	let svg3;
    	let path3;

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div1 = element("div");
    			svg0 = svg_element("svg");
    			path0 = svg_element("path");
    			t0 = space();
    			div0 = element("div");
    			t1 = space();
    			h3 = element("h3");
    			t2 = text(t2_value);
    			t3 = space();
    			div6 = element("div");
    			div3 = element("div");
    			svg1 = svg_element("svg");
    			path1 = svg_element("path");
    			t4 = space();
    			div4 = element("div");
    			svg2 = svg_element("svg");
    			path2 = svg_element("path");
    			t5 = space();
    			div5 = element("div");
    			svg3 = svg_element("svg");
    			path3 = svg_element("path");
    			attr_dev(path0, "stroke-linecap", "round");
    			attr_dev(path0, "stroke-linejoin", "round");
    			attr_dev(path0, "d", "M6.75 3v2.25M17.25 3v2.25M3 18.75V7.5a2.25 2.25 0 012.25-2.25h13.5A2.25 2.25 0 0121 7.5v11.25m-18 0A2.25 2.25 0 005.25 21h13.5A2.25 2.25 0 0021 18.75m-18 0v-7.5A2.25 2.25 0 015.25 9h13.5A2.25 2.25 0 0121 11.25v7.5");
    			add_location(path0, file$A, 345, 24, 8680);
    			attr_dev(svg0, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg0, "fill", "none");
    			attr_dev(svg0, "viewBox", "0 0 24 24");
    			attr_dev(svg0, "stroke-width", "2");
    			attr_dev(svg0, "stroke", "currentColor");
    			attr_dev(svg0, "height", "11");
    			attr_dev(svg0, "width", "11");
    			add_location(svg0, file$A, 344, 20, 8521);
    			attr_dev(div0, "class", "space svelte-1vv01jw");
    			add_location(div0, file$A, 347, 20, 9001);
    			attr_dev(h3, "class", "svelte-1vv01jw");
    			add_location(h3, file$A, 348, 20, 9047);
    			attr_dev(div1, "class", "date-wrap svelte-1vv01jw");
    			add_location(div1, file$A, 343, 16, 8477);
    			attr_dev(div2, "class", "info-wrap svelte-1vv01jw");
    			add_location(div2, file$A, 342, 12, 8437);
    			attr_dev(path1, "stroke-linecap", "round");
    			attr_dev(path1, "stroke-linejoin", "round");
    			attr_dev(path1, "d", "M12 4.5v15m7.5-7.5h-15");
    			add_location(path1, file$A, 355, 24, 9377);
    			attr_dev(svg1, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg1, "fill", "none");
    			attr_dev(svg1, "viewBox", "0 0 24 24");
    			attr_dev(svg1, "stroke-width", "2");
    			attr_dev(svg1, "stroke", "currentColor");
    			attr_dev(svg1, "height", "18");
    			attr_dev(svg1, "width", "18");
    			add_location(svg1, file$A, 354, 20, 9218);
    			attr_dev(div3, "class", "fix-wrap icon svelte-1vv01jw");
    			add_location(div3, file$A, 353, 16, 9170);
    			attr_dev(path2, "stroke-linecap", "round");
    			attr_dev(path2, "stroke-linejoin", "round");
    			attr_dev(path2, "d", "M14.857 17.082a23.848 23.848 0 005.454-1.31A8.967 8.967 0 0118 9.75v-.7V9A6 6 0 006 9v.75a8.967 8.967 0 01-2.312 6.022c1.733.64 3.56 1.085 5.455 1.31m5.714 0a24.255 24.255 0 01-5.714 0m5.714 0a3 3 0 11-5.714 0");
    			add_location(path2, file$A, 360, 24, 9734);
    			attr_dev(svg2, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg2, "fill", "none");
    			attr_dev(svg2, "viewBox", "0 0 24 24");
    			attr_dev(svg2, "stroke-width", "2");
    			attr_dev(svg2, "stroke", "currentColor");
    			attr_dev(svg2, "height", "18");
    			attr_dev(svg2, "width", "18");
    			add_location(svg2, file$A, 359, 20, 9575);
    			attr_dev(div4, "class", "bell-wrap icon svelte-1vv01jw");
    			add_location(div4, file$A, 358, 16, 9526);
    			attr_dev(path3, "stroke-linecap", "round");
    			attr_dev(path3, "stroke-linejoin", "round");
    			attr_dev(path3, "d", "M3 16.5v2.25A2.25 2.25 0 005.25 21h13.5A2.25 2.25 0 0021 18.75V16.5M16.5 12L12 16.5m0 0L7.5 12m4.5 4.5V3");
    			add_location(path3, file$A, 365, 24, 10282);
    			attr_dev(svg3, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg3, "fill", "none");
    			attr_dev(svg3, "viewBox", "0 0 24 24");
    			attr_dev(svg3, "stroke-width", "2");
    			attr_dev(svg3, "stroke", "currentColor");
    			attr_dev(svg3, "height", "18");
    			attr_dev(svg3, "width", "18");
    			add_location(svg3, file$A, 364, 20, 10123);
    			attr_dev(div5, "class", "download-wrap icon svelte-1vv01jw");
    			add_location(div5, file$A, 363, 16, 10070);
    			attr_dev(div6, "class", "icons-wrap svelte-1vv01jw");
    			add_location(div6, file$A, 352, 12, 9129);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div1);
    			append_dev(div1, svg0);
    			append_dev(svg0, path0);
    			append_dev(div1, t0);
    			append_dev(div1, div0);
    			append_dev(div1, t1);
    			append_dev(div1, h3);
    			append_dev(h3, t2);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, div6, anchor);
    			append_dev(div6, div3);
    			append_dev(div3, svg1);
    			append_dev(svg1, path1);
    			append_dev(div6, t4);
    			append_dev(div6, div4);
    			append_dev(div4, svg2);
    			append_dev(svg2, path2);
    			append_dev(div6, t5);
    			append_dev(div6, div5);
    			append_dev(div5, svg3);
    			append_dev(svg3, path3);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*user*/ 1 && t2_value !== (t2_value = /*user*/ ctx[0].created_at + "")) set_data_dev(t2, t2_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(div6);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$4.name,
    		type: "if",
    		source: "(342:8) {#if status == 1}",
    		ctx
    	});

    	return block;
    }

    // (415:8) {:else}
    function create_else_block$h(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "class", "body-content-wrap-unauthorized");
    			add_location(div, file$A, 415, 12, 13886);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$h.name,
    		type: "else",
    		source: "(415:8) {:else}",
    		ctx
    	});

    	return block;
    }

    // (374:8) {#if user.authority}
    function create_if_block$k(ctx) {
    	let div;
    	let current_block_type_index;
    	let if_block;
    	let current;
    	const if_block_creators = [create_if_block_1$e, create_if_block_2$8];
    	const if_blocks = [];

    	function select_block_type_1(ctx, dirty) {
    		if (/*status*/ ctx[11] == 0) return 0;
    		if (/*status*/ ctx[11] == 2) return 1;
    		return -1;
    	}

    	if (~(current_block_type_index = select_block_type_1(ctx))) {
    		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (if_block) if_block.c();
    			attr_dev(div, "class", "body-content-wrap svelte-1vv01jw");
    			add_location(div, file$A, 374, 12, 10606);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (if_block) if_block.p(ctx, dirty);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].d();
    			}
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$k.name,
    		type: "if",
    		source: "(374:8) {#if user.authority}",
    		ctx
    	});

    	return block;
    }

    // (411:38) 
    function create_if_block_2$8(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Error!");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$8.name,
    		type: "if",
    		source: "(411:38) ",
    		ctx
    	});

    	return block;
    }

    // (377:16) {#if status == 0}
    function create_if_block_1$e(ctx) {
    	let div1;
    	let div0;
    	let h30;
    	let t1;
    	let inputsinglevalue0;
    	let t2;
    	let inputsinglevalue1;
    	let t3;
    	let div3;
    	let div2;
    	let t4;
    	let inputsinglevalue2;
    	let t5;
    	let inputsinglevalue3;
    	let t6;
    	let div5;
    	let div4;
    	let t7;
    	let inputsinglevalue4;
    	let t8;
    	let inputsinglevalue5;
    	let t9;
    	let div7;
    	let div6;
    	let t10;
    	let inputsinglevalue6;
    	let t11;
    	let inputsinglevalue7;
    	let t12;
    	let div8;
    	let t13;
    	let div10;
    	let div9;
    	let h31;
    	let t15;
    	let inputselectvalue;
    	let t16;
    	let inputsinglevalue8;
    	let current;

    	inputsinglevalue0 = new InputSingleValue({
    			props: {
    				placeholder: "이름",
    				init: /*name*/ ctx[1],
    				conditions: condition_set.default_conditions
    			},
    			$$inline: true
    		});

    	inputsinglevalue0.$on("change", /*change_handler*/ ctx[15]);
    	inputsinglevalue0.$on("pass", passHandle);

    	inputsinglevalue1 = new InputSingleValue({
    			props: {
    				placeholder: "아이디",
    				init: /*registered_id*/ ctx[3],
    				conditions: condition_set.registered_id_conditions
    			},
    			$$inline: true
    		});

    	inputsinglevalue1.$on("change", /*change_handler_1*/ ctx[16]);
    	inputsinglevalue1.$on("pass", passHandle);

    	inputsinglevalue2 = new InputSingleValue({
    			props: {
    				placeholder: "계급",
    				init: /*standing*/ ctx[8],
    				conditions: condition_set.default_conditions
    			},
    			$$inline: true
    		});

    	inputsinglevalue2.$on("change", /*change_handler_2*/ ctx[17]);
    	inputsinglevalue2.$on("pass", passHandle);

    	inputsinglevalue3 = new InputSingleValue({
    			props: {
    				placeholder: "직별 혹은 직책",
    				init: /*position*/ ctx[9],
    				conditions: condition_set.default_conditions
    			},
    			$$inline: true
    		});

    	inputsinglevalue3.$on("change", /*change_handler_3*/ ctx[18]);
    	inputsinglevalue3.$on("pass", passHandle);

    	inputsinglevalue4 = new InputSingleValue({
    			props: {
    				placeholder: "소속",
    				init: /*affiliation*/ ctx[4],
    				conditions: condition_set.default_conditions
    			},
    			$$inline: true
    		});

    	inputsinglevalue4.$on("change", /*change_handler_4*/ ctx[19]);
    	inputsinglevalue4.$on("pass", passHandle);

    	inputsinglevalue5 = new InputSingleValue({
    			props: {
    				placeholder: "등록 번호",
    				init: /*id*/ ctx[14],
    				conditions: condition_set.unchangable_conditions('등록 번호를'),
    				immutable: true
    			},
    			$$inline: true
    		});

    	inputsinglevalue5.$on("change", /*change_handler_5*/ ctx[20]);
    	inputsinglevalue5.$on("pass", passHandle);

    	inputsinglevalue6 = new InputSingleValue({
    			props: {
    				placeholder: "등록 일자",
    				init: /*date*/ ctx[6],
    				conditions: condition_set.unchangable_conditions('등록 일자를'),
    				immutable: true
    			},
    			$$inline: true
    		});

    	inputsinglevalue6.$on("change", /*change_handler_6*/ ctx[21]);
    	inputsinglevalue6.$on("pass", passHandle);

    	inputsinglevalue7 = new InputSingleValue({
    			props: {
    				placeholder: "등록 IP",
    				init: /*ip_address*/ ctx[5],
    				conditions: condition_set.unchangable_conditions('등록 IP를'),
    				immutable: true
    			},
    			$$inline: true
    		});

    	inputsinglevalue7.$on("change", /*change_handler_7*/ ctx[22]);
    	inputsinglevalue7.$on("pass", passHandle);

    	inputselectvalue = new InputSelectValue({
    			props: {
    				placeholder: "권한 종류",
    				init: /*authority*/ ctx[7],
    				conditions: condition_set.default_conditions,
    				option_list: ['비인가', '일반 유저', '관리자']
    			},
    			$$inline: true
    		});

    	inputselectvalue.$on("change", /*change_handler_8*/ ctx[23]);
    	inputselectvalue.$on("pass", passHandle);

    	inputsinglevalue8 = new InputSingleValue({
    			props: {
    				placeholder: "권한 부여자",
    				init: /*registered_by*/ ctx[2],
    				conditions: condition_set.unchangable_conditions('권한 부여자를'),
    				immutable: true
    			},
    			$$inline: true
    		});

    	inputsinglevalue8.$on("change", /*change_handler_9*/ ctx[24]);
    	inputsinglevalue8.$on("pass", passHandle);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			h30 = element("h3");
    			h30.textContent = "기본 등록 정보";
    			t1 = space();
    			create_component(inputsinglevalue0.$$.fragment);
    			t2 = space();
    			create_component(inputsinglevalue1.$$.fragment);
    			t3 = space();
    			div3 = element("div");
    			div2 = element("div");
    			t4 = space();
    			create_component(inputsinglevalue2.$$.fragment);
    			t5 = space();
    			create_component(inputsinglevalue3.$$.fragment);
    			t6 = space();
    			div5 = element("div");
    			div4 = element("div");
    			t7 = space();
    			create_component(inputsinglevalue4.$$.fragment);
    			t8 = space();
    			create_component(inputsinglevalue5.$$.fragment);
    			t9 = space();
    			div7 = element("div");
    			div6 = element("div");
    			t10 = space();
    			create_component(inputsinglevalue6.$$.fragment);
    			t11 = space();
    			create_component(inputsinglevalue7.$$.fragment);
    			t12 = space();
    			div8 = element("div");
    			t13 = space();
    			div10 = element("div");
    			div9 = element("div");
    			h31 = element("h3");
    			h31.textContent = "권한 정보";
    			t15 = space();
    			create_component(inputselectvalue.$$.fragment);
    			t16 = space();
    			create_component(inputsinglevalue8.$$.fragment);
    			attr_dev(h30, "class", "svelte-1vv01jw");
    			add_location(h30, file$A, 379, 28, 10881);
    			attr_dev(div0, "class", "input-category-title svelte-1vv01jw");
    			add_location(div0, file$A, 378, 24, 10818);
    			attr_dev(div1, "class", "single-input-wrap svelte-1vv01jw");
    			add_location(div1, file$A, 377, 20, 10762);
    			attr_dev(div2, "class", "padding svelte-1vv01jw");
    			add_location(div2, file$A, 385, 24, 11423);
    			attr_dev(div3, "class", "single-input-wrap svelte-1vv01jw");
    			add_location(div3, file$A, 384, 20, 11367);
    			attr_dev(div4, "class", "padding svelte-1vv01jw");
    			add_location(div4, file$A, 390, 24, 11940);
    			attr_dev(div5, "class", "single-input-wrap svelte-1vv01jw");
    			add_location(div5, file$A, 389, 20, 11884);
    			attr_dev(div6, "class", "padding svelte-1vv01jw");
    			add_location(div6, file$A, 395, 24, 12479);
    			attr_dev(div7, "class", "single-input-wrap svelte-1vv01jw");
    			add_location(div7, file$A, 394, 20, 12423);
    			attr_dev(div8, "class", "buffer svelte-1vv01jw");
    			add_location(div8, file$A, 400, 20, 13011);
    			attr_dev(h31, "class", "svelte-1vv01jw");
    			add_location(h31, file$A, 405, 28, 13203);
    			attr_dev(div9, "class", "input-category-title svelte-1vv01jw");
    			add_location(div9, file$A, 404, 24, 13140);
    			attr_dev(div10, "class", "single-input-wrap svelte-1vv01jw");
    			add_location(div10, file$A, 403, 20, 13084);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			append_dev(div0, h30);
    			append_dev(div1, t1);
    			mount_component(inputsinglevalue0, div1, null);
    			append_dev(div1, t2);
    			mount_component(inputsinglevalue1, div1, null);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div2);
    			append_dev(div3, t4);
    			mount_component(inputsinglevalue2, div3, null);
    			append_dev(div3, t5);
    			mount_component(inputsinglevalue3, div3, null);
    			insert_dev(target, t6, anchor);
    			insert_dev(target, div5, anchor);
    			append_dev(div5, div4);
    			append_dev(div5, t7);
    			mount_component(inputsinglevalue4, div5, null);
    			append_dev(div5, t8);
    			mount_component(inputsinglevalue5, div5, null);
    			insert_dev(target, t9, anchor);
    			insert_dev(target, div7, anchor);
    			append_dev(div7, div6);
    			append_dev(div7, t10);
    			mount_component(inputsinglevalue6, div7, null);
    			append_dev(div7, t11);
    			mount_component(inputsinglevalue7, div7, null);
    			insert_dev(target, t12, anchor);
    			insert_dev(target, div8, anchor);
    			insert_dev(target, t13, anchor);
    			insert_dev(target, div10, anchor);
    			append_dev(div10, div9);
    			append_dev(div9, h31);
    			append_dev(div10, t15);
    			mount_component(inputselectvalue, div10, null);
    			append_dev(div10, t16);
    			mount_component(inputsinglevalue8, div10, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const inputsinglevalue0_changes = {};
    			if (dirty & /*name*/ 2) inputsinglevalue0_changes.init = /*name*/ ctx[1];
    			inputsinglevalue0.$set(inputsinglevalue0_changes);
    			const inputsinglevalue1_changes = {};
    			if (dirty & /*registered_id*/ 8) inputsinglevalue1_changes.init = /*registered_id*/ ctx[3];
    			inputsinglevalue1.$set(inputsinglevalue1_changes);
    			const inputsinglevalue2_changes = {};
    			if (dirty & /*standing*/ 256) inputsinglevalue2_changes.init = /*standing*/ ctx[8];
    			inputsinglevalue2.$set(inputsinglevalue2_changes);
    			const inputsinglevalue3_changes = {};
    			if (dirty & /*position*/ 512) inputsinglevalue3_changes.init = /*position*/ ctx[9];
    			inputsinglevalue3.$set(inputsinglevalue3_changes);
    			const inputsinglevalue4_changes = {};
    			if (dirty & /*affiliation*/ 16) inputsinglevalue4_changes.init = /*affiliation*/ ctx[4];
    			inputsinglevalue4.$set(inputsinglevalue4_changes);
    			const inputsinglevalue6_changes = {};
    			if (dirty & /*date*/ 64) inputsinglevalue6_changes.init = /*date*/ ctx[6];
    			inputsinglevalue6.$set(inputsinglevalue6_changes);
    			const inputsinglevalue7_changes = {};
    			if (dirty & /*ip_address*/ 32) inputsinglevalue7_changes.init = /*ip_address*/ ctx[5];
    			inputsinglevalue7.$set(inputsinglevalue7_changes);
    			const inputselectvalue_changes = {};
    			if (dirty & /*authority*/ 128) inputselectvalue_changes.init = /*authority*/ ctx[7];
    			inputselectvalue.$set(inputselectvalue_changes);
    			const inputsinglevalue8_changes = {};
    			if (dirty & /*registered_by*/ 4) inputsinglevalue8_changes.init = /*registered_by*/ ctx[2];
    			inputsinglevalue8.$set(inputsinglevalue8_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(inputsinglevalue0.$$.fragment, local);
    			transition_in(inputsinglevalue1.$$.fragment, local);
    			transition_in(inputsinglevalue2.$$.fragment, local);
    			transition_in(inputsinglevalue3.$$.fragment, local);
    			transition_in(inputsinglevalue4.$$.fragment, local);
    			transition_in(inputsinglevalue5.$$.fragment, local);
    			transition_in(inputsinglevalue6.$$.fragment, local);
    			transition_in(inputsinglevalue7.$$.fragment, local);
    			transition_in(inputselectvalue.$$.fragment, local);
    			transition_in(inputsinglevalue8.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(inputsinglevalue0.$$.fragment, local);
    			transition_out(inputsinglevalue1.$$.fragment, local);
    			transition_out(inputsinglevalue2.$$.fragment, local);
    			transition_out(inputsinglevalue3.$$.fragment, local);
    			transition_out(inputsinglevalue4.$$.fragment, local);
    			transition_out(inputsinglevalue5.$$.fragment, local);
    			transition_out(inputsinglevalue6.$$.fragment, local);
    			transition_out(inputsinglevalue7.$$.fragment, local);
    			transition_out(inputselectvalue.$$.fragment, local);
    			transition_out(inputsinglevalue8.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			destroy_component(inputsinglevalue0);
    			destroy_component(inputsinglevalue1);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(div3);
    			destroy_component(inputsinglevalue2);
    			destroy_component(inputsinglevalue3);
    			if (detaching) detach_dev(t6);
    			if (detaching) detach_dev(div5);
    			destroy_component(inputsinglevalue4);
    			destroy_component(inputsinglevalue5);
    			if (detaching) detach_dev(t9);
    			if (detaching) detach_dev(div7);
    			destroy_component(inputsinglevalue6);
    			destroy_component(inputsinglevalue7);
    			if (detaching) detach_dev(t12);
    			if (detaching) detach_dev(div8);
    			if (detaching) detach_dev(t13);
    			if (detaching) detach_dev(div10);
    			destroy_component(inputselectvalue);
    			destroy_component(inputsinglevalue8);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$e.name,
    		type: "if",
    		source: "(377:16) {#if status == 0}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$F(ctx) {
    	let div3;
    	let div1;
    	let div0;
    	let button;
    	let svg;
    	let path;
    	let t0;
    	let promise;
    	let t1;
    	let t2;
    	let div2;
    	let current_block_type_index;
    	let if_block1;
    	let current;
    	let mounted;
    	let dispose;

    	let info = {
    		ctx,
    		current: null,
    		token: null,
    		hasCatch: true,
    		pending: create_pending_block$2,
    		then: create_then_block$2,
    		catch: create_catch_block$2,
    		value: 28,
    		error: 29
    	};

    	handle_promise(promise = /*getDataFromId*/ ctx[13](/*user_id*/ ctx[10]), info);
    	let if_block0 = /*status*/ ctx[11] == 1 && create_if_block_3$4(ctx);
    	const if_block_creators = [create_if_block$k, create_else_block$h];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*user*/ ctx[0].authority) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			div1 = element("div");
    			div0 = element("div");
    			button = element("button");
    			svg = svg_element("svg");
    			path = svg_element("path");
    			t0 = space();
    			info.block.c();
    			t1 = space();
    			if (if_block0) if_block0.c();
    			t2 = space();
    			div2 = element("div");
    			if_block1.c();
    			attr_dev(path, "stroke-linecap", "round");
    			attr_dev(path, "stroke-linejoin", "round");
    			attr_dev(path, "d", "M9 15L3 9m0 0l6-6M3 9h12a6 6 0 010 12h-3");
    			add_location(path, file$A, 310, 20, 6960);
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "fill", "none");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			attr_dev(svg, "stroke-width", "2");
    			attr_dev(svg, "stroke", "currentColor");
    			attr_dev(svg, "class", "w-6 h-6");
    			attr_dev(svg, "height", "18");
    			attr_dev(svg, "width", "18");
    			add_location(svg, file$A, 309, 16, 6789);
    			attr_dev(button, "class", "back-btn svelte-1vv01jw");
    			add_location(button, file$A, 308, 12, 6726);
    			attr_dev(div0, "class", "back-btn-wrap svelte-1vv01jw");
    			add_location(div0, file$A, 307, 8, 6686);
    			attr_dev(div1, "class", "header svelte-1vv01jw");
    			add_location(div1, file$A, 306, 4, 6657);
    			attr_dev(div2, "class", "body svelte-1vv01jw");
    			add_location(div2, file$A, 372, 4, 10546);
    			attr_dev(div3, "class", "focus svelte-1vv01jw");
    			add_location(div3, file$A, 305, 0, 6633);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div1);
    			append_dev(div1, div0);
    			append_dev(div0, button);
    			append_dev(button, svg);
    			append_dev(svg, path);
    			append_dev(div1, t0);
    			info.block.m(div1, info.anchor = null);
    			info.mount = () => div1;
    			info.anchor = t1;
    			append_dev(div1, t1);
    			if (if_block0) if_block0.m(div1, null);
    			append_dev(div3, t2);
    			append_dev(div3, div2);
    			if_blocks[current_block_type_index].m(div2, null);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*undoFocus*/ ctx[12], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;
    			update_await_block_branch(info, ctx, dirty);
    			if (/*status*/ ctx[11] == 1) if_block0.p(ctx, dirty);
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block1 = if_blocks[current_block_type_index];

    				if (!if_block1) {
    					if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block1.c();
    				} else {
    					if_block1.p(ctx, dirty);
    				}

    				transition_in(if_block1, 1);
    				if_block1.m(div2, null);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(info.block);
    			transition_in(if_block1);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block1);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    			info.block.d();
    			info.token = null;
    			info = null;
    			if (if_block0) if_block0.d();
    			if_blocks[current_block_type_index].d();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$F.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function changeHandle(e, variable) {
    	variable = e.detail.value;
    }

    function changeOptionHandle(e, variable) {
    	variable = e.detail.key;
    }

    function passHandle(e) {
    	let input_name = e.detail.name;
    	pass_list[input_name] = e.detail.pass;
    }

    function instance$F($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('AccountView', slots, []);
    	let { user } = $$props;
    	const route = O();
    	let user_id = route.params._id;
    	let status = 0;
    	let image;
    	var dispatch = createEventDispatcher();

    	function undoFocus() {
    		dispatch('escape', { focus: null });
    		f.goto('/manage/accounts/browse');
    	}

    	async function getDataFromId(id) {
    		$$invalidate(0, user = await axios$1.get(`http://localhost:4000/account/${id}`));
    		$$invalidate(1, { name, registered_by, registered_id, affiliation, id, ip_address, date, authority, standing, position } = user, name, $$invalidate(2, registered_by), $$invalidate(3, registered_id), $$invalidate(4, affiliation), $$invalidate(5, ip_address), $$invalidate(6, date), $$invalidate(7, authority), $$invalidate(8, standing), $$invalidate(9, position));
    		return user;
    	} //if user is fetched:
    	//  status = 1;

    	//if user fetch fails:
    	//  status = 0;
    	//if waiting to be fetched:
    	//  status = 2;
    	/* Test variables to be fetched from server when online */
    	/* USER object:
            @redistered_id - Registered id used to login user
            @authority     - Show confidential contents to authorized personal only. 
                             Set 0 at default.
                             (0: waitlist
                              1: user
                              2: admin)
            @name          - Name of the logged in user.
            @standing      - String, set "" at default.
            @position      - String, set "" at default.
            @affiliation   - Location object, set blank at default.
            @created_at    - Date time object.
    */
    	user = {
    		_id: 2,
    		registered_id: 'sampleId',
    		name: "김재우",
    		authority: 1,
    		standing: "상병",
    		position: "전산병",
    		affiliation: "학술정보원 멀티미디어교실",
    		created_at: "22년 2월 3일",
    		ip_address: "192.168.0.101",
    		registered_by: "김재우",
    		date: "2022년 12월 12일"
    	};

    	let name = user.name;
    	let registered_by = user.registered_by;
    	let registered_id = user.registered_id;
    	let affiliation = user.affiliation;
    	let id = user._id;
    	let ip_address = user.ip_address;
    	let date = user.date;
    	let authority = user.authority;
    	let standing = user.standing;
    	let position = user.position;
    	const writable_props = ['user'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<AccountView> was created with unknown prop '${key}'`);
    	});

    	const change_handler = e => changeHandle(e, name);
    	const change_handler_1 = e => changeHandle(e, registered_id);
    	const change_handler_2 = e => changeHandle(e, standing);
    	const change_handler_3 = e => changeHandle(e, position);
    	const change_handler_4 = e => changeHandle(e, affiliation);
    	const change_handler_5 = e => changeHandle(e, id);
    	const change_handler_6 = e => changeHandle(e, date);
    	const change_handler_7 = e => changeHandle(e, ip_address);
    	const change_handler_8 = e => changeOptionHandle(e, authority);
    	const change_handler_9 = e => changeHandle(e, registered_by);

    	$$self.$$set = $$props => {
    		if ('user' in $$props) $$invalidate(0, user = $$props.user);
    	};

    	$$self.$capture_state = () => ({
    		Route,
    		meta: O,
    		router: f,
    		axios: axios$1,
    		draw,
    		fade,
    		createEventDispatcher,
    		onMount,
    		condition_set,
    		InputMultiValue,
    		InputSingleValue,
    		InputSelectValue,
    		user,
    		route,
    		user_id,
    		status,
    		image,
    		dispatch,
    		undoFocus,
    		changeHandle,
    		changeOptionHandle,
    		passHandle,
    		getDataFromId,
    		name,
    		registered_by,
    		registered_id,
    		affiliation,
    		id,
    		ip_address,
    		date,
    		authority,
    		standing,
    		position
    	});

    	$$self.$inject_state = $$props => {
    		if ('user' in $$props) $$invalidate(0, user = $$props.user);
    		if ('user_id' in $$props) $$invalidate(10, user_id = $$props.user_id);
    		if ('status' in $$props) $$invalidate(11, status = $$props.status);
    		if ('image' in $$props) image = $$props.image;
    		if ('dispatch' in $$props) dispatch = $$props.dispatch;
    		if ('name' in $$props) $$invalidate(1, name = $$props.name);
    		if ('registered_by' in $$props) $$invalidate(2, registered_by = $$props.registered_by);
    		if ('registered_id' in $$props) $$invalidate(3, registered_id = $$props.registered_id);
    		if ('affiliation' in $$props) $$invalidate(4, affiliation = $$props.affiliation);
    		if ('id' in $$props) $$invalidate(14, id = $$props.id);
    		if ('ip_address' in $$props) $$invalidate(5, ip_address = $$props.ip_address);
    		if ('date' in $$props) $$invalidate(6, date = $$props.date);
    		if ('authority' in $$props) $$invalidate(7, authority = $$props.authority);
    		if ('standing' in $$props) $$invalidate(8, standing = $$props.standing);
    		if ('position' in $$props) $$invalidate(9, position = $$props.position);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		user,
    		name,
    		registered_by,
    		registered_id,
    		affiliation,
    		ip_address,
    		date,
    		authority,
    		standing,
    		position,
    		user_id,
    		status,
    		undoFocus,
    		getDataFromId,
    		id,
    		change_handler,
    		change_handler_1,
    		change_handler_2,
    		change_handler_3,
    		change_handler_4,
    		change_handler_5,
    		change_handler_6,
    		change_handler_7,
    		change_handler_8,
    		change_handler_9
    	];
    }

    class AccountView extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$F, create_fragment$F, safe_not_equal, { user: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "AccountView",
    			options,
    			id: create_fragment$F.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*user*/ ctx[0] === undefined && !('user' in props)) {
    			console.warn("<AccountView> was created without expected prop 'user'");
    		}
    	}

    	get user() {
    		throw new Error("<AccountView>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set user(value) {
    		throw new Error("<AccountView>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* pages/content_container/AccountListContainer.svelte generated by Svelte v3.50.1 */

    const { console: console_1$a } = globals;
    const file$B = "pages/content_container/AccountListContainer.svelte";

    function get_each_context_1$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[13] = list[i];
    	child_ctx[15] = i;
    	return child_ctx;
    }

    function get_each_context$e(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[13] = list[i];
    	child_ctx[15] = i;
    	return child_ctx;
    }

    // (176:50) 
    function create_if_block_3$5(ctx) {
    	let div1;
    	let div0;
    	let svg;
    	let path;
    	let path_intro;
    	let t0;
    	let h4;
    	let t2;
    	let h5;

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			svg = svg_element("svg");
    			path = svg_element("path");
    			t0 = space();
    			h4 = element("h4");
    			h4.textContent = "연결이 끊겼습니다";
    			t2 = space();
    			h5 = element("h5");
    			h5.textContent = "다시 한번 시도해보세요";
    			attr_dev(path, "stroke-linecap", "round");
    			attr_dev(path, "stroke-linejoin", "round");
    			attr_dev(path, "d", "M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126zM12 15.75h.007v.008H12v-.008z");
    			add_location(path, file$B, 179, 32, 6222);
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "fill", "none");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			attr_dev(svg, "stroke-width", "0.8");
    			attr_dev(svg, "stroke", "rgb(226, 41, 41)");
    			attr_dev(svg, "height", "100");
    			attr_dev(svg, "width", "100");
    			add_location(svg, file$B, 178, 28, 6047);
    			attr_dev(div0, "class", "svg-wrap");
    			add_location(div0, file$B, 177, 24, 5996);
    			attr_dev(h4, "class", "svelte-8jozsi");
    			add_location(h4, file$B, 182, 24, 6584);
    			attr_dev(h5, "class", "svelte-8jozsi");
    			add_location(h5, file$B, 183, 24, 6627);
    			attr_dev(div1, "class", "user-fetch-error-page svelte-8jozsi");
    			add_location(div1, file$B, 176, 20, 5936);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			append_dev(div0, svg);
    			append_dev(svg, path);
    			append_dev(div1, t0);
    			append_dev(div1, h4);
    			append_dev(div1, t2);
    			append_dev(div1, h5);
    		},
    		p: noop,
    		i: function intro(local) {
    			if (!path_intro) {
    				add_render_callback(() => {
    					path_intro = create_in_transition(path, draw, { duration: 700, speed: 1 });
    					path_intro.start();
    				});
    			}
    		},
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$5.name,
    		type: "if",
    		source: "(176:50) ",
    		ctx
    	});

    	return block;
    }

    // (170:46) 
    function create_if_block_2$9(ctx) {
    	let div;
    	let current;
    	let each_value_1 = /*curr_page_items*/ ctx[3];
    	validate_each_argument(each_value_1);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1$2(get_each_context_1$2(ctx, each_value_1, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(div, "class", "table svelte-8jozsi");
    			add_location(div, file$B, 170, 20, 5650);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*curr_page_items, passFocus*/ 40) {
    				each_value_1 = /*curr_page_items*/ ctx[3];
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$2(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block_1$2(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(div, null);
    					}
    				}

    				group_outros();

    				for (i = each_value_1.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value_1.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$9.name,
    		type: "if",
    		source: "(170:46) ",
    		ctx
    	});

    	return block;
    }

    // (161:16) {#if fetching}
    function create_if_block_1$f(ctx) {
    	let div1;
    	let div0;
    	let svg;
    	let path;
    	let path_intro;
    	let t0;
    	let h4;

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			svg = svg_element("svg");
    			path = svg_element("path");
    			t0 = space();
    			h4 = element("h4");
    			h4.textContent = "정보를 받아오고 있습니다";
    			attr_dev(path, "stroke-linecap", "round");
    			attr_dev(path, "stroke-linejoin", "round");
    			attr_dev(path, "d", "M10.05 4.575a1.575 1.575 0 10-3.15 0v3m3.15-3v-1.5a1.575 1.575 0 013.15 0v1.5m-3.15 0l.075 5.925m3.075.75V4.575m0 0a1.575 1.575 0 013.15 0V15M6.9 7.575a1.575 1.575 0 10-3.15 0v8.175a6.75 6.75 0 006.75 6.75h2.018a5.25 5.25 0 003.712-1.538l1.732-1.732a5.25 5.25 0 001.538-3.712l.003-2.024a.668.668 0 01.198-.471 1.575 1.575 0 10-2.228-2.228 3.818 3.818 0 00-1.12 2.687M6.9 7.575V12m6.27 4.318A4.49 4.49 0 0116.35 15m.002 0h-.002");
    			add_location(path, file$B, 164, 32, 4921);
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "fill", "none");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			attr_dev(svg, "stroke-width", "0.8");
    			attr_dev(svg, "stroke", "rgb(31, 32, 88)");
    			attr_dev(svg, "height", "100");
    			attr_dev(svg, "width", "100");
    			add_location(svg, file$B, 163, 28, 4747);
    			attr_dev(div0, "class", "svg-wrap");
    			add_location(div0, file$B, 162, 24, 4696);
    			attr_dev(h4, "class", "svelte-8jozsi");
    			add_location(h4, file$B, 167, 24, 5533);
    			attr_dev(div1, "class", "user-fetch-spinner-page svelte-8jozsi");
    			add_location(div1, file$B, 161, 20, 4634);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			append_dev(div0, svg);
    			append_dev(svg, path);
    			append_dev(div1, t0);
    			append_dev(div1, h4);
    		},
    		p: noop,
    		i: function intro(local) {
    			if (!path_intro) {
    				add_render_callback(() => {
    					path_intro = create_in_transition(path, draw, { duration: 700, speed: 1 });
    					path_intro.start();
    				});
    			}
    		},
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$f.name,
    		type: "if",
    		source: "(161:16) {#if fetching}",
    		ctx
    	});

    	return block;
    }

    // (154:12) {#if debug == true}
    function create_if_block$l(ctx) {
    	let div;
    	let current;
    	let each_value = /*curr_page_items*/ ctx[3];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$e(get_each_context$e(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(div, "class", "table svelte-8jozsi");
    			add_location(div, file$B, 154, 16, 4364);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*curr_page_items, passFocus*/ 40) {
    				each_value = /*curr_page_items*/ ctx[3];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$e(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$e(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(div, null);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$l.name,
    		type: "if",
    		source: "(154:12) {#if debug == true}",
    		ctx
    	});

    	return block;
    }

    // (172:24) {#each curr_page_items as item, index}
    function create_each_block_1$2(ctx) {
    	let userlistitem;
    	let current;

    	userlistitem = new UserListItem({
    			props: { item: /*item*/ ctx[13] },
    			$$inline: true
    		});

    	userlistitem.$on("click", /*passFocus*/ ctx[5]);

    	const block = {
    		c: function create() {
    			create_component(userlistitem.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(userlistitem, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const userlistitem_changes = {};
    			if (dirty & /*curr_page_items*/ 8) userlistitem_changes.item = /*item*/ ctx[13];
    			userlistitem.$set(userlistitem_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(userlistitem.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(userlistitem.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(userlistitem, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$2.name,
    		type: "each",
    		source: "(172:24) {#each curr_page_items as item, index}",
    		ctx
    	});

    	return block;
    }

    // (156:20) {#each curr_page_items as item, index}
    function create_each_block$e(ctx) {
    	let userlistitem;
    	let current;

    	userlistitem = new UserListItem({
    			props: { item: /*item*/ ctx[13] },
    			$$inline: true
    		});

    	userlistitem.$on("click", /*passFocus*/ ctx[5]);

    	const block = {
    		c: function create() {
    			create_component(userlistitem.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(userlistitem, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const userlistitem_changes = {};
    			if (dirty & /*curr_page_items*/ 8) userlistitem_changes.item = /*item*/ ctx[13];
    			userlistitem.$set(userlistitem_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(userlistitem.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(userlistitem.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(userlistitem, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$e.name,
    		type: "each",
    		source: "(156:20) {#each curr_page_items as item, index}",
    		ctx
    	});

    	return block;
    }

    // (191:4) <Route path="/:_id">
    function create_default_slot$2(ctx) {
    	let accountview;
    	let current;

    	accountview = new AccountView({
    			props: { user: /*focus*/ ctx[0] },
    			$$inline: true
    		});

    	accountview.$on("escape", /*undoFocus*/ ctx[6]);

    	const block = {
    		c: function create() {
    			create_component(accountview.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(accountview, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const accountview_changes = {};
    			if (dirty & /*focus*/ 1) accountview_changes.user = /*focus*/ ctx[0];
    			accountview.$set(accountview_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(accountview.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(accountview.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(accountview, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$2.name,
    		type: "slot",
    		source: "(191:4) <Route path=\\\"/:_id\\\">",
    		ctx
    	});

    	return block;
    }

    function create_fragment$G(ctx) {
    	let div17;
    	let div16;
    	let div14;
    	let div1;
    	let div0;
    	let h30;
    	let t1;
    	let div3;
    	let div2;
    	let h31;
    	let t3;
    	let div5;
    	let div4;
    	let h32;
    	let t5;
    	let div7;
    	let div6;
    	let h33;
    	let t7;
    	let div9;
    	let div8;
    	let h34;
    	let t9;
    	let div11;
    	let div10;
    	let h35;
    	let t11;
    	let div13;
    	let div12;
    	let h36;
    	let t13;
    	let div15;
    	let current_block_type_index;
    	let if_block;
    	let t14;
    	let route;
    	let current;
    	const if_block_creators = [create_if_block$l, create_if_block_1$f, create_if_block_2$9, create_if_block_3$5];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*debug*/ ctx[4] == true) return 0;
    		if (/*fetching*/ ctx[1]) return 1;
    		if (!/*error*/ ctx[2] && !/*fetching*/ ctx[1]) return 2;
    		if (!/*fetching*/ ctx[1] && /*error*/ ctx[2] == 1) return 3;
    		return -1;
    	}

    	if (~(current_block_type_index = select_block_type(ctx))) {
    		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	}

    	route = new Route({
    			props: {
    				path: "/:_id",
    				$$slots: { default: [create_default_slot$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div17 = element("div");
    			div16 = element("div");
    			div14 = element("div");
    			div1 = element("div");
    			div0 = element("div");
    			h30 = element("h3");
    			h30.textContent = "ID";
    			t1 = space();
    			div3 = element("div");
    			div2 = element("div");
    			h31 = element("h3");
    			h31.textContent = "권한";
    			t3 = space();
    			div5 = element("div");
    			div4 = element("div");
    			h32 = element("h3");
    			h32.textContent = "실명";
    			t5 = space();
    			div7 = element("div");
    			div6 = element("div");
    			h33 = element("h3");
    			h33.textContent = "계급";
    			t7 = space();
    			div9 = element("div");
    			div8 = element("div");
    			h34 = element("h3");
    			h34.textContent = "가입일";
    			t9 = space();
    			div11 = element("div");
    			div10 = element("div");
    			h35 = element("h3");
    			h35.textContent = "소속";
    			t11 = space();
    			div13 = element("div");
    			div12 = element("div");
    			h36 = element("h3");
    			h36.textContent = "직책";
    			t13 = space();
    			div15 = element("div");
    			if (if_block) if_block.c();
    			t14 = space();
    			create_component(route.$$.fragment);
    			attr_dev(h30, "class", "svelte-8jozsi");
    			add_location(h30, file$B, 118, 20, 3179);
    			attr_dev(div0, "class", "header-container svelte-8jozsi");
    			add_location(div0, file$B, 117, 16, 3128);
    			attr_dev(div1, "class", "header-id-container svelte-8jozsi");
    			add_location(div1, file$B, 116, 12, 3078);
    			attr_dev(h31, "class", "svelte-8jozsi");
    			add_location(h31, file$B, 123, 20, 3353);
    			attr_dev(div2, "class", "header-container svelte-8jozsi");
    			add_location(div2, file$B, 122, 16, 3302);
    			attr_dev(div3, "class", "header-authority-container svelte-8jozsi");
    			add_location(div3, file$B, 121, 12, 3245);
    			attr_dev(h32, "class", "svelte-8jozsi");
    			add_location(h32, file$B, 128, 20, 3522);
    			attr_dev(div4, "class", "header-container svelte-8jozsi");
    			add_location(div4, file$B, 127, 16, 3471);
    			attr_dev(div5, "class", "header-name-container svelte-8jozsi");
    			add_location(div5, file$B, 126, 12, 3419);
    			attr_dev(h33, "class", "svelte-8jozsi");
    			add_location(h33, file$B, 133, 20, 3695);
    			attr_dev(div6, "class", "header-container svelte-8jozsi");
    			add_location(div6, file$B, 132, 16, 3644);
    			attr_dev(div7, "class", "header-standing-container svelte-8jozsi");
    			add_location(div7, file$B, 131, 12, 3588);
    			attr_dev(h34, "class", "svelte-8jozsi");
    			add_location(h34, file$B, 138, 20, 3864);
    			attr_dev(div8, "class", "header-container svelte-8jozsi");
    			add_location(div8, file$B, 137, 16, 3813);
    			attr_dev(div9, "class", "header-date-container svelte-8jozsi");
    			add_location(div9, file$B, 136, 12, 3761);
    			attr_dev(h35, "class", "svelte-8jozsi");
    			add_location(h35, file$B, 143, 20, 4041);
    			attr_dev(div10, "class", "header-container svelte-8jozsi");
    			add_location(div10, file$B, 142, 16, 3990);
    			attr_dev(div11, "class", "header-affiliation-container svelte-8jozsi");
    			add_location(div11, file$B, 141, 12, 3931);
    			attr_dev(h36, "class", "svelte-8jozsi");
    			add_location(h36, file$B, 148, 20, 4214);
    			attr_dev(div12, "class", "header-container svelte-8jozsi");
    			add_location(div12, file$B, 147, 16, 4163);
    			attr_dev(div13, "class", "header-position-container svelte-8jozsi");
    			add_location(div13, file$B, 146, 12, 4107);
    			attr_dev(div14, "class", "table-header svelte-8jozsi");
    			add_location(div14, file$B, 115, 8, 3039);
    			attr_dev(div15, "class", "list-frame svelte-8jozsi");
    			add_location(div15, file$B, 152, 8, 4291);
    			attr_dev(div16, "class", "upload-view svelte-8jozsi");
    			add_location(div16, file$B, 114, 4, 3005);
    			attr_dev(div17, "class", "browse-content-container svelte-8jozsi");
    			add_location(div17, file$B, 113, 0, 2962);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div17, anchor);
    			append_dev(div17, div16);
    			append_dev(div16, div14);
    			append_dev(div14, div1);
    			append_dev(div1, div0);
    			append_dev(div0, h30);
    			append_dev(div14, t1);
    			append_dev(div14, div3);
    			append_dev(div3, div2);
    			append_dev(div2, h31);
    			append_dev(div14, t3);
    			append_dev(div14, div5);
    			append_dev(div5, div4);
    			append_dev(div4, h32);
    			append_dev(div14, t5);
    			append_dev(div14, div7);
    			append_dev(div7, div6);
    			append_dev(div6, h33);
    			append_dev(div14, t7);
    			append_dev(div14, div9);
    			append_dev(div9, div8);
    			append_dev(div8, h34);
    			append_dev(div14, t9);
    			append_dev(div14, div11);
    			append_dev(div11, div10);
    			append_dev(div10, h35);
    			append_dev(div14, t11);
    			append_dev(div14, div13);
    			append_dev(div13, div12);
    			append_dev(div12, h36);
    			append_dev(div16, t13);
    			append_dev(div16, div15);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].m(div15, null);
    			}

    			append_dev(div17, t14);
    			mount_component(route, div17, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if (~current_block_type_index) {
    					if_blocks[current_block_type_index].p(ctx, dirty);
    				}
    			} else {
    				if (if_block) {
    					group_outros();

    					transition_out(if_blocks[previous_block_index], 1, 1, () => {
    						if_blocks[previous_block_index] = null;
    					});

    					check_outros();
    				}

    				if (~current_block_type_index) {
    					if_block = if_blocks[current_block_type_index];

    					if (!if_block) {
    						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    						if_block.c();
    					} else {
    						if_block.p(ctx, dirty);
    					}

    					transition_in(if_block, 1);
    					if_block.m(div15, null);
    				} else {
    					if_block = null;
    				}
    			}

    			const route_changes = {};

    			if (dirty & /*$$scope, focus*/ 131073) {
    				route_changes.$$scope = { dirty, ctx };
    			}

    			route.$set(route_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			transition_in(route.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			transition_out(route.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div17);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].d();
    			}

    			destroy_component(route);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$G.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$G($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('AccountListContainer', slots, []);
    	let { page = 1 } = $$props;
    	let { keywords } = $$props;
    	let debug = true;
    	var dispatch = createEventDispatcher();
    	let focus = null;
    	let fetching = false;
    	let error = null;
    	let fetched_items = [];
    	let curr_page_items;

    	async function getUserFromKeywords(keywords) {
    		if (!fetching) {
    			$$invalidate(9, fetched_items = []);
    			$$invalidate(2, error = null);
    			$$invalidate(1, fetching = true);

    			try {
    				$$invalidate(9, fetched_items = await axios$1.get('http://localhost:4000'));
    				$$invalidate(1, fetching = false);
    			} catch(e) {
    				$$invalidate(2, error = 1);
    				$$invalidate(1, fetching = false);
    			}
    		}

    		console.log('fetch');
    	}

    	function passFocus(e) {
    		$$invalidate(0, focus = e.detail.item);
    		dispatch("focus", { focus: true });
    		f.goto(`/manage/accounts/browse/${focus._id}`);
    	}

    	function undoFocus() {
    		$$invalidate(0, focus = null);
    		dispatch("focus", { focus: false });
    	}

    	/* Test variables to be fetched from server when online */
    	/* USER object:
            @authority - Show the contents to authorized personal only. 
                         Set false at default.
            @name      - Name of the logged in user.  
    */
    	let user = { authority: true, name: "Kim" };

    	/* ITEM object:
            @authority - Show the contents to authorized personal only. 
                         Set false at default.
            @name      - Name of the logged in user.  
    */
    	for (let i = 0; i < 40; i++) {
    		fetched_items = [
    			...fetched_items,
    			{
    				_id: i,
    				name: "김재우",
    				authority: "관리자",
    				standing: "상병",
    				position: "전산병",
    				affiliation: "학술정보원 멀티미디어교실",
    				created_at: "22년 2월 3일"
    			}
    		];
    	}

    	const writable_props = ['page', 'keywords'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$a.warn(`<AccountListContainer> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('page' in $$props) $$invalidate(7, page = $$props.page);
    		if ('keywords' in $$props) $$invalidate(8, keywords = $$props.keywords);
    	};

    	$$self.$capture_state = () => ({
    		Route,
    		meta: O,
    		router: f,
    		axios: axios$1,
    		draw,
    		fade,
    		createEventDispatcher,
    		UserListItem,
    		AccountView,
    		page,
    		keywords,
    		debug,
    		dispatch,
    		focus,
    		fetching,
    		error,
    		fetched_items,
    		curr_page_items,
    		getUserFromKeywords,
    		passFocus,
    		undoFocus,
    		user
    	});

    	$$self.$inject_state = $$props => {
    		if ('page' in $$props) $$invalidate(7, page = $$props.page);
    		if ('keywords' in $$props) $$invalidate(8, keywords = $$props.keywords);
    		if ('debug' in $$props) $$invalidate(4, debug = $$props.debug);
    		if ('dispatch' in $$props) dispatch = $$props.dispatch;
    		if ('focus' in $$props) $$invalidate(0, focus = $$props.focus);
    		if ('fetching' in $$props) $$invalidate(1, fetching = $$props.fetching);
    		if ('error' in $$props) $$invalidate(2, error = $$props.error);
    		if ('fetched_items' in $$props) $$invalidate(9, fetched_items = $$props.fetched_items);
    		if ('curr_page_items' in $$props) $$invalidate(3, curr_page_items = $$props.curr_page_items);
    		if ('user' in $$props) user = $$props.user;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*fetched_items, page*/ 640) {
    			 {
    				try {
    					$$invalidate(3, curr_page_items = fetched_items.slice((page - 1) * 12, page * 12));
    				} catch(e) {
    					$$invalidate(3, curr_page_items = null);
    				}
    			}
    		}

    		if ($$self.$$.dirty & /*keywords*/ 256) {
    			 {
    				getUserFromKeywords();
    			}
    		}
    	};

    	return [
    		focus,
    		fetching,
    		error,
    		curr_page_items,
    		debug,
    		passFocus,
    		undoFocus,
    		page,
    		keywords,
    		fetched_items
    	];
    }

    class AccountListContainer extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$G, create_fragment$G, safe_not_equal, { page: 7, keywords: 8 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "AccountListContainer",
    			options,
    			id: create_fragment$G.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*keywords*/ ctx[8] === undefined && !('keywords' in props)) {
    			console_1$a.warn("<AccountListContainer> was created without expected prop 'keywords'");
    		}
    	}

    	get page() {
    		throw new Error("<AccountListContainer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set page(value) {
    		throw new Error("<AccountListContainer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get keywords() {
    		throw new Error("<AccountListContainer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set keywords(value) {
    		throw new Error("<AccountListContainer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* components/manager/AccessControlItem.svelte generated by Svelte v3.50.1 */
    const file$C = "components/manager/AccessControlItem.svelte";

    // (135:16) {#if checked}
    function create_if_block$m(ctx) {
    	let svg;
    	let path;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "stroke-linecap", "round");
    			attr_dev(path, "stroke-linejoin", "round");
    			attr_dev(path, "d", "M4.5 12.75l6 6 9-13.5");
    			add_location(path, file$C, 136, 24, 2920);
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "fill", "none");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			attr_dev(svg, "stroke-width", "1.5");
    			attr_dev(svg, "stroke", "white");
    			attr_dev(svg, "height", "17");
    			attr_dev(svg, "width", "17");
    			add_location(svg, file$C, 135, 20, 2765);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$m.name,
    		type: "if",
    		source: "(135:16) {#if checked}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$H(ctx) {
    	let div12;
    	let div1;
    	let div0;
    	let button0;
    	let button0_class_value;
    	let t0;
    	let div3;
    	let div2;
    	let h30;
    	let t1_value = /*data*/ ctx[1].user_id + "";
    	let t1;
    	let t2;
    	let div5;
    	let div4;
    	let h31;
    	let t3_value = /*data*/ ctx[1].name + "";
    	let t3;
    	let t4;
    	let div7;
    	let div6;
    	let h32;
    	let t5_value = /*data*/ ctx[1].detail + "";
    	let t5;
    	let t6;
    	let div9;
    	let div8;
    	let button1;
    	let svg0;
    	let path0;
    	let t7;
    	let div11;
    	let div10;
    	let button2;
    	let svg1;
    	let path1;
    	let mounted;
    	let dispose;
    	let if_block = /*checked*/ ctx[0] && create_if_block$m(ctx);

    	const block = {
    		c: function create() {
    			div12 = element("div");
    			div1 = element("div");
    			div0 = element("div");
    			button0 = element("button");
    			if (if_block) if_block.c();
    			t0 = space();
    			div3 = element("div");
    			div2 = element("div");
    			h30 = element("h3");
    			t1 = text(t1_value);
    			t2 = space();
    			div5 = element("div");
    			div4 = element("div");
    			h31 = element("h3");
    			t3 = text(t3_value);
    			t4 = space();
    			div7 = element("div");
    			div6 = element("div");
    			h32 = element("h3");
    			t5 = text(t5_value);
    			t6 = space();
    			div9 = element("div");
    			div8 = element("div");
    			button1 = element("button");
    			svg0 = svg_element("svg");
    			path0 = svg_element("path");
    			t7 = space();
    			div11 = element("div");
    			div10 = element("div");
    			button2 = element("button");
    			svg1 = svg_element("svg");
    			path1 = svg_element("path");
    			attr_dev(button0, "class", button0_class_value = "" + (null_to_empty(/*checked*/ ctx[0] ? 'check-btn-clicked' : 'check-btn') + " svelte-1oybaxq"));
    			add_location(button0, file$C, 133, 12, 2625);
    			attr_dev(div0, "class", "check-container container svelte-1oybaxq");
    			add_location(div0, file$C, 132, 8, 2572);
    			attr_dev(div1, "class", "check-wrap wrap svelte-1oybaxq");
    			add_location(div1, file$C, 131, 4, 2533);
    			attr_dev(h30, "class", "svelte-1oybaxq");
    			add_location(h30, file$C, 144, 12, 3178);
    			attr_dev(div2, "class", "container svelte-1oybaxq");
    			add_location(div2, file$C, 143, 8, 3141);
    			attr_dev(div3, "class", "id-wrap svelte-1oybaxq");
    			add_location(div3, file$C, 142, 4, 3110);
    			attr_dev(h31, "class", "svelte-1oybaxq");
    			add_location(h31, file$C, 149, 12, 3305);
    			attr_dev(div4, "class", "container svelte-1oybaxq");
    			add_location(div4, file$C, 148, 8, 3268);
    			attr_dev(div5, "class", "name-wrap svelte-1oybaxq");
    			add_location(div5, file$C, 147, 4, 3235);
    			attr_dev(h32, "class", "svelte-1oybaxq");
    			add_location(h32, file$C, 154, 12, 3431);
    			attr_dev(div6, "class", "container svelte-1oybaxq");
    			add_location(div6, file$C, 153, 8, 3394);
    			attr_dev(div7, "class", "detail-wrap svelte-1oybaxq");
    			add_location(div7, file$C, 152, 4, 3359);
    			attr_dev(path0, "stroke-linecap", "round");
    			attr_dev(path0, "stroke-linejoin", "round");
    			attr_dev(path0, "d", "M4.5 12.75l6 6 9-13.5");
    			add_location(path0, file$C, 161, 20, 3780);
    			attr_dev(svg0, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg0, "fill", "none");
    			attr_dev(svg0, "viewBox", "0 0 24 24");
    			attr_dev(svg0, "stroke-width", "2");
    			attr_dev(svg0, "stroke", "currentColor");
    			attr_dev(svg0, "height", "18");
    			attr_dev(svg0, "width", "18");
    			add_location(svg0, file$C, 160, 16, 3624);
    			attr_dev(button1, "class", "svelte-1oybaxq");
    			add_location(button1, file$C, 159, 12, 3576);
    			attr_dev(div8, "class", "accept-container container svelte-1oybaxq");
    			add_location(div8, file$C, 158, 8, 3522);
    			attr_dev(div9, "class", "accept-wrap svelte-1oybaxq");
    			add_location(div9, file$C, 157, 4, 3487);
    			attr_dev(path1, "stroke-linecap", "round");
    			attr_dev(path1, "stroke-linejoin", "round");
    			attr_dev(path1, "d", "M6 18L18 6M6 6l12 12");
    			add_location(path1, file$C, 170, 20, 4240);
    			attr_dev(svg1, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg1, "fill", "none");
    			attr_dev(svg1, "viewBox", "0 0 24 24");
    			attr_dev(svg1, "stroke-width", "1.5");
    			attr_dev(svg1, "stroke", "currentColor");
    			attr_dev(svg1, "height", "18");
    			attr_dev(svg1, "width", "18");
    			add_location(svg1, file$C, 169, 16, 4082);
    			attr_dev(button2, "class", "svelte-1oybaxq");
    			add_location(button2, file$C, 168, 12, 4033);
    			attr_dev(div10, "class", "decline-container container svelte-1oybaxq");
    			add_location(div10, file$C, 167, 8, 3978);
    			attr_dev(div11, "class", "decline-wrap svelte-1oybaxq");
    			add_location(div11, file$C, 166, 4, 3942);
    			attr_dev(div12, "class", "table-content svelte-1oybaxq");
    			add_location(div12, file$C, 130, 0, 2479);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div12, anchor);
    			append_dev(div12, div1);
    			append_dev(div1, div0);
    			append_dev(div0, button0);
    			if (if_block) if_block.m(button0, null);
    			append_dev(div12, t0);
    			append_dev(div12, div3);
    			append_dev(div3, div2);
    			append_dev(div2, h30);
    			append_dev(h30, t1);
    			append_dev(div12, t2);
    			append_dev(div12, div5);
    			append_dev(div5, div4);
    			append_dev(div4, h31);
    			append_dev(h31, t3);
    			append_dev(div12, t4);
    			append_dev(div12, div7);
    			append_dev(div7, div6);
    			append_dev(div6, h32);
    			append_dev(h32, t5);
    			append_dev(div12, t6);
    			append_dev(div12, div9);
    			append_dev(div9, div8);
    			append_dev(div8, button1);
    			append_dev(button1, svg0);
    			append_dev(svg0, path0);
    			append_dev(div12, t7);
    			append_dev(div12, div11);
    			append_dev(div11, div10);
    			append_dev(div10, button2);
    			append_dev(button2, svg1);
    			append_dev(svg1, path1);

    			if (!mounted) {
    				dispose = [
    					listen_dev(button0, "click", /*checkHandle*/ ctx[2], false, false, false),
    					listen_dev(button1, "click", /*acceptCall*/ ctx[3], false, false, false),
    					listen_dev(button2, "click", /*declineCall*/ ctx[4], false, false, false),
    					listen_dev(div12, "click", /*focusCall*/ ctx[5], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*checked*/ ctx[0]) {
    				if (if_block) ; else {
    					if_block = create_if_block$m(ctx);
    					if_block.c();
    					if_block.m(button0, null);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			if (dirty & /*checked*/ 1 && button0_class_value !== (button0_class_value = "" + (null_to_empty(/*checked*/ ctx[0] ? 'check-btn-clicked' : 'check-btn') + " svelte-1oybaxq"))) {
    				attr_dev(button0, "class", button0_class_value);
    			}

    			if (dirty & /*data*/ 2 && t1_value !== (t1_value = /*data*/ ctx[1].user_id + "")) set_data_dev(t1, t1_value);
    			if (dirty & /*data*/ 2 && t3_value !== (t3_value = /*data*/ ctx[1].name + "")) set_data_dev(t3, t3_value);
    			if (dirty & /*data*/ 2 && t5_value !== (t5_value = /*data*/ ctx[1].detail + "")) set_data_dev(t5, t5_value);
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div12);
    			if (if_block) if_block.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$H.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$H($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('AccessControlItem', slots, []);
    	let { checked = false } = $$props;
    	let { data } = $$props;
    	let { index } = $$props;
    	var dispatch = createEventDispatcher();

    	function checkHandle() {
    		if (checked) {
    			$$invalidate(0, checked = false);
    		} else {
    			$$invalidate(0, checked = true);
    		}

    		dispatch('check', { index, checked });
    	}

    	function acceptCall() {
    		dispatch('accept', { index });
    	}

    	function declineCall() {
    		dispatch('decline', { index });
    	}

    	function focusCall() {
    		dispatch('click', { index });
    	}

    	const writable_props = ['checked', 'data', 'index'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<AccessControlItem> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('checked' in $$props) $$invalidate(0, checked = $$props.checked);
    		if ('data' in $$props) $$invalidate(1, data = $$props.data);
    		if ('index' in $$props) $$invalidate(6, index = $$props.index);
    	};

    	$$self.$capture_state = () => ({
    		createEventDispatcher,
    		onDestroy,
    		onMount,
    		checked,
    		data,
    		index,
    		dispatch,
    		checkHandle,
    		acceptCall,
    		declineCall,
    		focusCall
    	});

    	$$self.$inject_state = $$props => {
    		if ('checked' in $$props) $$invalidate(0, checked = $$props.checked);
    		if ('data' in $$props) $$invalidate(1, data = $$props.data);
    		if ('index' in $$props) $$invalidate(6, index = $$props.index);
    		if ('dispatch' in $$props) dispatch = $$props.dispatch;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [checked, data, checkHandle, acceptCall, declineCall, focusCall, index];
    }

    class AccessControlItem extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$H, create_fragment$H, safe_not_equal, { checked: 0, data: 1, index: 6 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "AccessControlItem",
    			options,
    			id: create_fragment$H.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*data*/ ctx[1] === undefined && !('data' in props)) {
    			console.warn("<AccessControlItem> was created without expected prop 'data'");
    		}

    		if (/*index*/ ctx[6] === undefined && !('index' in props)) {
    			console.warn("<AccessControlItem> was created without expected prop 'index'");
    		}
    	}

    	get checked() {
    		throw new Error("<AccessControlItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set checked(value) {
    		throw new Error("<AccessControlItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get data() {
    		throw new Error("<AccessControlItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set data(value) {
    		throw new Error("<AccessControlItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get index() {
    		throw new Error("<AccessControlItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set index(value) {
    		throw new Error("<AccessControlItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* pages/content_container/AccessControlDetailView.svelte generated by Svelte v3.50.1 */

    const { console: console_1$b } = globals;
    const file$D = "pages/content_container/AccessControlDetailView.svelte";

    function get_each_context$f(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[25] = list[i];
    	child_ctx[27] = i;
    	return child_ctx;
    }

    // (537:8) {:catch error}
    function create_catch_block$3(ctx) {
    	let div;
    	let svg;
    	let path;
    	let t0;
    	let h3;

    	const block = {
    		c: function create() {
    			div = element("div");
    			svg = svg_element("svg");
    			path = svg_element("path");
    			t0 = space();
    			h3 = element("h3");
    			h3.textContent = "다시 시도 바랍니다";
    			attr_dev(path, "stroke-linecap", "round");
    			attr_dev(path, "stroke-linejoin", "round");
    			attr_dev(path, "d", "M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126zM12 15.75h.007v.008H12v-.008z");
    			add_location(path, file$D, 539, 20, 12900);
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "fill", "none");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			attr_dev(svg, "stroke-width", "1.5");
    			attr_dev(svg, "stroke", "rgb(226, 41, 41)");
    			attr_dev(svg, "height", "18");
    			attr_dev(svg, "width", "18");
    			add_location(svg, file$D, 538, 16, 12738);
    			attr_dev(div, "class", "approved-mark-wrap svelte-1htkxxx");
    			add_location(div, file$D, 537, 12, 12688);
    			attr_dev(h3, "class", "svelte-1htkxxx");
    			add_location(h3, file$D, 542, 12, 13194);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, svg);
    			append_dev(svg, path);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, h3, anchor);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(h3);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_catch_block$3.name,
    		type: "catch",
    		source: "(537:8) {:catch error}",
    		ctx
    	});

    	return block;
    }

    // (528:8) {:then result}
    function create_then_block$3(ctx) {
    	let div;
    	let svg;
    	let path;
    	let path_intro;
    	let t0;
    	let h3;
    	let t1_value = /*result*/ ctx[28].title + "";
    	let t1;

    	const block = {
    		c: function create() {
    			div = element("div");
    			svg = svg_element("svg");
    			path = svg_element("path");
    			t0 = space();
    			h3 = element("h3");
    			t1 = text(t1_value);
    			attr_dev(path, "stroke-linecap", "round");
    			attr_dev(path, "stroke-linejoin", "round");
    			attr_dev(path, "d", "M9 12.75L11.25 15 15 9.75M21 12a9 9 0 11-18 0 9 9 0 0118 0z");
    			add_location(path, file$D, 530, 20, 12383);
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "fill", "none");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			attr_dev(svg, "stroke-width", "2");
    			attr_dev(svg, "stroke", "rgb(99, 228, 99)");
    			attr_dev(svg, "height", "18");
    			attr_dev(svg, "width", "18");
    			add_location(svg, file$D, 529, 16, 12223);
    			attr_dev(div, "class", "approved-mark-wrap svelte-1htkxxx");
    			add_location(div, file$D, 528, 12, 12173);
    			attr_dev(h3, "class", "svelte-1htkxxx");
    			add_location(h3, file$D, 533, 12, 12595);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, svg);
    			append_dev(svg, path);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, h3, anchor);
    			append_dev(h3, t1);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*request*/ 1 && t1_value !== (t1_value = /*result*/ ctx[28].title + "")) set_data_dev(t1, t1_value);
    		},
    		i: function intro(local) {
    			if (!path_intro) {
    				add_render_callback(() => {
    					path_intro = create_in_transition(path, draw, { duration: 700, speed: 1 });
    					path_intro.start();
    				});
    			}
    		},
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(h3);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_then_block$3.name,
    		type: "then",
    		source: "(528:8) {:then result}",
    		ctx
    	});

    	return block;
    }

    // (522:46)               <div class="approved-mark-wrap">              </div>              <h3>                  파일을 받아오는 중입니다              </h3>          {:then result}
    function create_pending_block$3(ctx) {
    	let div;
    	let t0;
    	let h3;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t0 = space();
    			h3 = element("h3");
    			h3.textContent = "파일을 받아오는 중입니다";
    			attr_dev(div, "class", "approved-mark-wrap svelte-1htkxxx");
    			add_location(div, file$D, 522, 12, 12015);
    			attr_dev(h3, "class", "svelte-1htkxxx");
    			add_location(h3, file$D, 524, 12, 12081);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, h3, anchor);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(h3);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_pending_block$3.name,
    		type: "pending",
    		source: "(522:46)               <div class=\\\"approved-mark-wrap\\\">              </div>              <h3>                  파일을 받아오는 중입니다              </h3>          {:then result}",
    		ctx
    	});

    	return block;
    }

    // (549:8) {#if status == 1}
    function create_if_block_5$2(ctx) {
    	let div4;
    	let div1;
    	let svg0;
    	let path0;
    	let t0;
    	let div0;
    	let t1;
    	let h30;
    	let t3;
    	let div3;
    	let svg1;
    	let path1;
    	let t4;
    	let div2;
    	let t5;
    	let h31;
    	let t7;
    	let div8;
    	let div5;
    	let svg2;
    	let path2;
    	let t8;
    	let div6;
    	let svg3;
    	let path3;
    	let t9;
    	let div7;
    	let svg4;
    	let path4;

    	const block = {
    		c: function create() {
    			div4 = element("div");
    			div1 = element("div");
    			svg0 = svg_element("svg");
    			path0 = svg_element("path");
    			t0 = space();
    			div0 = element("div");
    			t1 = space();
    			h30 = element("h3");
    			h30.textContent = `${/*user*/ ctx[7].associate}`;
    			t3 = space();
    			div3 = element("div");
    			svg1 = svg_element("svg");
    			path1 = svg_element("path");
    			t4 = space();
    			div2 = element("div");
    			t5 = space();
    			h31 = element("h3");
    			h31.textContent = `${/*user*/ ctx[7].created_at}`;
    			t7 = space();
    			div8 = element("div");
    			div5 = element("div");
    			svg2 = svg_element("svg");
    			path2 = svg_element("path");
    			t8 = space();
    			div6 = element("div");
    			svg3 = svg_element("svg");
    			path3 = svg_element("path");
    			t9 = space();
    			div7 = element("div");
    			svg4 = svg_element("svg");
    			path4 = svg_element("path");
    			attr_dev(path0, "stroke-linecap", "round");
    			attr_dev(path0, "stroke-linejoin", "round");
    			attr_dev(path0, "d", "M15.75 6a3.75 3.75 0 11-7.5 0 3.75 3.75 0 017.5 0zM4.501 20.118a7.5 7.5 0 0114.998 0A17.933 17.933 0 0112 21.75c-2.676 0-5.216-.584-7.499-1.632z");
    			add_location(path0, file$D, 552, 24, 13554);
    			attr_dev(svg0, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg0, "fill", "none");
    			attr_dev(svg0, "viewBox", "0 0 24 24");
    			attr_dev(svg0, "stroke-width", "2");
    			attr_dev(svg0, "stroke", "currentColor");
    			attr_dev(svg0, "height", "11");
    			attr_dev(svg0, "width", "11");
    			add_location(svg0, file$D, 551, 20, 13394);
    			attr_dev(div0, "class", "space svelte-1htkxxx");
    			add_location(div0, file$D, 554, 20, 13808);
    			attr_dev(h30, "class", "svelte-1htkxxx");
    			add_location(h30, file$D, 555, 20, 13855);
    			attr_dev(div1, "class", "name-wrap svelte-1htkxxx");
    			add_location(div1, file$D, 550, 16, 13349);
    			attr_dev(path1, "stroke-linecap", "round");
    			attr_dev(path1, "stroke-linejoin", "round");
    			attr_dev(path1, "d", "M6.75 3v2.25M17.25 3v2.25M3 18.75V7.5a2.25 2.25 0 012.25-2.25h13.5A2.25 2.25 0 0121 7.5v11.25m-18 0A2.25 2.25 0 005.25 21h13.5A2.25 2.25 0 0021 18.75m-18 0v-7.5A2.25 2.25 0 015.25 9h13.5A2.25 2.25 0 0121 11.25v7.5");
    			add_location(path1, file$D, 559, 24, 14127);
    			attr_dev(svg1, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg1, "fill", "none");
    			attr_dev(svg1, "viewBox", "0 0 24 24");
    			attr_dev(svg1, "stroke-width", "2");
    			attr_dev(svg1, "stroke", "currentColor");
    			attr_dev(svg1, "height", "11");
    			attr_dev(svg1, "width", "11");
    			add_location(svg1, file$D, 558, 20, 13967);
    			attr_dev(div2, "class", "space svelte-1htkxxx");
    			add_location(div2, file$D, 561, 20, 14450);
    			attr_dev(h31, "class", "svelte-1htkxxx");
    			add_location(h31, file$D, 562, 20, 14497);
    			attr_dev(div3, "class", "date-wrap svelte-1htkxxx");
    			add_location(div3, file$D, 557, 16, 13922);
    			attr_dev(div4, "class", "info-wrap svelte-1htkxxx");
    			add_location(div4, file$D, 549, 12, 13308);
    			attr_dev(path2, "stroke-linecap", "round");
    			attr_dev(path2, "stroke-linejoin", "round");
    			attr_dev(path2, "d", "M12 4.5v15m7.5-7.5h-15");
    			add_location(path2, file$D, 569, 24, 14834);
    			attr_dev(svg2, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg2, "fill", "none");
    			attr_dev(svg2, "viewBox", "0 0 24 24");
    			attr_dev(svg2, "stroke-width", "2");
    			attr_dev(svg2, "stroke", "currentColor");
    			attr_dev(svg2, "height", "18");
    			attr_dev(svg2, "width", "18");
    			add_location(svg2, file$D, 568, 20, 14674);
    			attr_dev(div5, "class", "fix-wrap icon svelte-1htkxxx");
    			add_location(div5, file$D, 567, 16, 14625);
    			attr_dev(path3, "stroke-linecap", "round");
    			attr_dev(path3, "stroke-linejoin", "round");
    			attr_dev(path3, "d", "M14.857 17.082a23.848 23.848 0 005.454-1.31A8.967 8.967 0 0118 9.75v-.7V9A6 6 0 006 9v.75a8.967 8.967 0 01-2.312 6.022c1.733.64 3.56 1.085 5.455 1.31m5.714 0a24.255 24.255 0 01-5.714 0m5.714 0a3 3 0 11-5.714 0");
    			add_location(path3, file$D, 574, 24, 15196);
    			attr_dev(svg3, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg3, "fill", "none");
    			attr_dev(svg3, "viewBox", "0 0 24 24");
    			attr_dev(svg3, "stroke-width", "2");
    			attr_dev(svg3, "stroke", "currentColor");
    			attr_dev(svg3, "height", "18");
    			attr_dev(svg3, "width", "18");
    			add_location(svg3, file$D, 573, 20, 15036);
    			attr_dev(div6, "class", "bell-wrap icon svelte-1htkxxx");
    			add_location(div6, file$D, 572, 16, 14986);
    			attr_dev(path4, "stroke-linecap", "round");
    			attr_dev(path4, "stroke-linejoin", "round");
    			attr_dev(path4, "d", "M3 16.5v2.25A2.25 2.25 0 005.25 21h13.5A2.25 2.25 0 0021 18.75V16.5M16.5 12L12 16.5m0 0L7.5 12m4.5 4.5V3");
    			add_location(path4, file$D, 579, 24, 15749);
    			attr_dev(svg4, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg4, "fill", "none");
    			attr_dev(svg4, "viewBox", "0 0 24 24");
    			attr_dev(svg4, "stroke-width", "2");
    			attr_dev(svg4, "stroke", "currentColor");
    			attr_dev(svg4, "height", "18");
    			attr_dev(svg4, "width", "18");
    			add_location(svg4, file$D, 578, 20, 15589);
    			attr_dev(div7, "class", "download-wrap icon svelte-1htkxxx");
    			add_location(div7, file$D, 577, 16, 15535);
    			attr_dev(div8, "class", "icons-wrap svelte-1htkxxx");
    			add_location(div8, file$D, 566, 12, 14583);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div4, anchor);
    			append_dev(div4, div1);
    			append_dev(div1, svg0);
    			append_dev(svg0, path0);
    			append_dev(div1, t0);
    			append_dev(div1, div0);
    			append_dev(div1, t1);
    			append_dev(div1, h30);
    			append_dev(div4, t3);
    			append_dev(div4, div3);
    			append_dev(div3, svg1);
    			append_dev(svg1, path1);
    			append_dev(div3, t4);
    			append_dev(div3, div2);
    			append_dev(div3, t5);
    			append_dev(div3, h31);
    			insert_dev(target, t7, anchor);
    			insert_dev(target, div8, anchor);
    			append_dev(div8, div5);
    			append_dev(div5, svg2);
    			append_dev(svg2, path2);
    			append_dev(div8, t8);
    			append_dev(div8, div6);
    			append_dev(div6, svg3);
    			append_dev(svg3, path3);
    			append_dev(div8, t9);
    			append_dev(div8, div7);
    			append_dev(div7, svg4);
    			append_dev(svg4, path4);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div4);
    			if (detaching) detach_dev(t7);
    			if (detaching) detach_dev(div8);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5$2.name,
    		type: "if",
    		source: "(549:8) {#if status == 1}",
    		ctx
    	});

    	return block;
    }

    // (727:8) {:else}
    function create_else_block_3$2(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "class", "body-content-wrap-unauthorized");
    			add_location(div, file$D, 727, 12, 25332);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_3$2.name,
    		type: "else",
    		source: "(727:8) {:else}",
    		ctx
    	});

    	return block;
    }

    // (588:8) {#if user.authority}
    function create_if_block$n(ctx) {
    	let div19;
    	let div1;
    	let div0;
    	let h30;
    	let t1;
    	let inputsinglevalue0;
    	let t2;
    	let inputsinglevalue1;
    	let t3;
    	let div3;
    	let div2;
    	let t4;
    	let inputsinglevalue2;
    	let t5;
    	let inputsinglevalue3;
    	let t6;
    	let div5;
    	let div4;
    	let t7;
    	let inputsinglevalue4;
    	let t8;
    	let inputsinglevalue5;
    	let t9;
    	let div7;
    	let div6;
    	let t10;
    	let inputsinglevalue6;
    	let t11;
    	let inputsinglevalue7;
    	let t12;
    	let div9;
    	let div8;
    	let t13;
    	let inputselectvalue;
    	let t14;
    	let inputsinglevalue8;
    	let t15;
    	let div10;
    	let t16;
    	let div12;
    	let div11;
    	let h31;
    	let t18;
    	let t19;
    	let div13;
    	let t20;
    	let div16;
    	let div14;
    	let h32;
    	let t22;
    	let div15;
    	let h5;
    	let t24;
    	let div18;
    	let div17;
    	let button0;
    	let h33;
    	let t26;
    	let button1;
    	let h34;
    	let t28;
    	let button2;
    	let h35;
    	let current;

    	inputsinglevalue0 = new InputSingleValue({
    			props: {
    				placeholder: "이름",
    				init: /*name*/ ctx[8],
    				conditions: condition_set.unchangable_conditions('여기서는'),
    				immutable: true
    			},
    			$$inline: true
    		});

    	inputsinglevalue1 = new InputSingleValue({
    			props: {
    				placeholder: "아이디",
    				init: /*registered_id*/ ctx[10],
    				conditions: condition_set.unchangable_conditions('여기서는')
    			},
    			$$inline: true
    		});

    	inputsinglevalue2 = new InputSingleValue({
    			props: {
    				placeholder: "계급",
    				init: /*standing*/ ctx[16],
    				conditions: condition_set.unchangable_conditions('여기서는'),
    				immutable: true
    			},
    			$$inline: true
    		});

    	inputsinglevalue3 = new InputSingleValue({
    			props: {
    				placeholder: "직별 혹은 직책",
    				init: /*position*/ ctx[17],
    				conditions: condition_set.unchangable_conditions('여기서는'),
    				immutable: true
    			},
    			$$inline: true
    		});

    	inputsinglevalue4 = new InputSingleValue({
    			props: {
    				placeholder: "소속",
    				init: /*affiliation*/ ctx[11],
    				conditions: condition_set.unchangable_conditions('여기서는'),
    				immutable: true
    			},
    			$$inline: true
    		});

    	inputsinglevalue5 = new InputSingleValue({
    			props: {
    				placeholder: "등록 번호",
    				init: /*id*/ ctx[12],
    				conditions: condition_set.unchangable_conditions('여기서는'),
    				immutable: true
    			},
    			$$inline: true
    		});

    	inputsinglevalue6 = new InputSingleValue({
    			props: {
    				placeholder: "등록 일자",
    				init: /*date*/ ctx[14],
    				conditions: condition_set.unchangable_conditions('여기서는'),
    				immutable: true
    			},
    			$$inline: true
    		});

    	inputsinglevalue7 = new InputSingleValue({
    			props: {
    				placeholder: "등록 IP",
    				init: /*ip_address*/ ctx[13],
    				conditions: condition_set.unchangable_conditions('여기서는'),
    				immutable: true
    			},
    			$$inline: true
    		});

    	inputselectvalue = new InputSelectValue({
    			props: {
    				placeholder: "권한 종류",
    				init: /*authority*/ ctx[15],
    				conditions: condition_set.default_conditions,
    				option_list: ['비인가', '일반 유저', '관리자'],
    				immutable: true
    			},
    			$$inline: true
    		});

    	inputsinglevalue8 = new InputSingleValue({
    			props: {
    				placeholder: "권한 부여자",
    				init: /*registered_by*/ ctx[9],
    				conditions: condition_set.unchangable_conditions('권한 부여자'),
    				immutable: true
    			},
    			$$inline: true
    		});

    	function select_block_type_1(ctx, dirty) {
    		if (/*request*/ ctx[0].content.type == 0) return create_if_block_1$g;
    		if (/*request*/ ctx[0].content.type == 1) return create_if_block_4$3;
    	}

    	let current_block_type = select_block_type_1(ctx);
    	let if_block = current_block_type && current_block_type(ctx);

    	const block = {
    		c: function create() {
    			div19 = element("div");
    			div1 = element("div");
    			div0 = element("div");
    			h30 = element("h3");
    			h30.textContent = "회원 정보";
    			t1 = space();
    			create_component(inputsinglevalue0.$$.fragment);
    			t2 = space();
    			create_component(inputsinglevalue1.$$.fragment);
    			t3 = space();
    			div3 = element("div");
    			div2 = element("div");
    			t4 = space();
    			create_component(inputsinglevalue2.$$.fragment);
    			t5 = space();
    			create_component(inputsinglevalue3.$$.fragment);
    			t6 = space();
    			div5 = element("div");
    			div4 = element("div");
    			t7 = space();
    			create_component(inputsinglevalue4.$$.fragment);
    			t8 = space();
    			create_component(inputsinglevalue5.$$.fragment);
    			t9 = space();
    			div7 = element("div");
    			div6 = element("div");
    			t10 = space();
    			create_component(inputsinglevalue6.$$.fragment);
    			t11 = space();
    			create_component(inputsinglevalue7.$$.fragment);
    			t12 = space();
    			div9 = element("div");
    			div8 = element("div");
    			t13 = space();
    			create_component(inputselectvalue.$$.fragment);
    			t14 = space();
    			create_component(inputsinglevalue8.$$.fragment);
    			t15 = space();
    			div10 = element("div");
    			t16 = space();
    			div12 = element("div");
    			div11 = element("div");
    			h31 = element("h3");
    			h31.textContent = "요청 사항";
    			t18 = space();
    			if (if_block) if_block.c();
    			t19 = space();
    			div13 = element("div");
    			t20 = space();
    			div16 = element("div");
    			div14 = element("div");
    			h32 = element("h3");
    			h32.textContent = "사유";
    			t22 = space();
    			div15 = element("div");
    			h5 = element("h5");
    			h5.textContent = "안녕하십니까, 상병 김재우입니다. 다름이 아니라 이번 순항훈련전단에서 \r\n                            지금까지 있었던 순항훈련 기록물을 참고하여 기항지 탐색/조사를 시행하려 합니다.\r\n                            협조 부탁드립니다";
    			t24 = space();
    			div18 = element("div");
    			div17 = element("div");
    			button0 = element("button");
    			h33 = element("h3");
    			h33.textContent = "보류하기";
    			t26 = space();
    			button1 = element("button");
    			h34 = element("h3");
    			h34.textContent = "적용하기";
    			t28 = space();
    			button2 = element("button");
    			h35 = element("h3");
    			h35.textContent = "거부하기";
    			attr_dev(h30, "class", "svelte-1htkxxx");
    			add_location(h30, file$D, 591, 24, 16244);
    			attr_dev(div0, "class", "input-category-title svelte-1htkxxx");
    			add_location(div0, file$D, 590, 20, 16184);
    			attr_dev(div1, "class", "single-input-wrap svelte-1htkxxx");
    			add_location(div1, file$D, 589, 16, 16131);
    			attr_dev(div2, "class", "padding svelte-1htkxxx");
    			add_location(div2, file$D, 597, 20, 16666);
    			attr_dev(div3, "class", "single-input-wrap svelte-1htkxxx");
    			add_location(div3, file$D, 596, 16, 16613);
    			attr_dev(div4, "class", "padding svelte-1htkxxx");
    			add_location(div4, file$D, 602, 20, 17094);
    			attr_dev(div5, "class", "single-input-wrap svelte-1htkxxx");
    			add_location(div5, file$D, 601, 16, 17041);
    			attr_dev(div6, "class", "padding svelte-1htkxxx");
    			add_location(div6, file$D, 607, 20, 17516);
    			attr_dev(div7, "class", "single-input-wrap svelte-1htkxxx");
    			add_location(div7, file$D, 606, 16, 17463);
    			attr_dev(div8, "class", "padding svelte-1htkxxx");
    			add_location(div8, file$D, 612, 20, 17942);
    			attr_dev(div9, "class", "single-input-wrap svelte-1htkxxx");
    			add_location(div9, file$D, 611, 16, 17889);
    			attr_dev(div10, "class", "buffer svelte-1htkxxx");
    			add_location(div10, file$D, 617, 16, 18354);
    			attr_dev(h31, "class", "svelte-1htkxxx");
    			add_location(h31, file$D, 621, 24, 18513);
    			attr_dev(div11, "class", "input-category-title svelte-1htkxxx");
    			add_location(div11, file$D, 620, 20, 18453);
    			attr_dev(div12, "class", "single-input-wrap svelte-1htkxxx");
    			add_location(div12, file$D, 619, 16, 18400);
    			attr_dev(div13, "class", "buffer svelte-1htkxxx");
    			add_location(div13, file$D, 698, 16, 24182);
    			attr_dev(h32, "class", "svelte-1htkxxx");
    			add_location(h32, file$D, 702, 24, 24341);
    			attr_dev(div14, "class", "input-category-title svelte-1htkxxx");
    			add_location(div14, file$D, 701, 20, 24281);
    			attr_dev(h5, "class", "svelte-1htkxxx");
    			add_location(h5, file$D, 705, 24, 24451);
    			attr_dev(div15, "class", "text-wrap svelte-1htkxxx");
    			add_location(div15, file$D, 704, 20, 24402);
    			attr_dev(div16, "class", "single-input-wrap svelte-1htkxxx");
    			add_location(div16, file$D, 700, 16, 24228);
    			attr_dev(h33, "class", "svelte-1htkxxx");
    			add_location(h33, file$D, 715, 28, 24910);
    			attr_dev(button0, "class", "withdraw-btn btn svelte-1htkxxx");
    			add_location(button0, file$D, 714, 24, 24847);
    			attr_dev(h34, "class", "svelte-1htkxxx");
    			add_location(h34, file$D, 718, 28, 25045);
    			attr_dev(button1, "class", "accept-btn btn svelte-1htkxxx");
    			add_location(button1, file$D, 717, 24, 24984);
    			attr_dev(h35, "class", "svelte-1htkxxx");
    			add_location(h35, file$D, 721, 28, 25181);
    			attr_dev(button2, "class", "decline-btn btn svelte-1htkxxx");
    			add_location(button2, file$D, 720, 24, 25119);
    			attr_dev(div17, "class", "btn-container svelte-1htkxxx");
    			add_location(div17, file$D, 713, 20, 24794);
    			attr_dev(div18, "class", "btn-control-wrap svelte-1htkxxx");
    			add_location(div18, file$D, 712, 16, 24742);
    			attr_dev(div19, "class", "body-content-wrap svelte-1htkxxx");
    			add_location(div19, file$D, 588, 12, 16082);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div19, anchor);
    			append_dev(div19, div1);
    			append_dev(div1, div0);
    			append_dev(div0, h30);
    			append_dev(div1, t1);
    			mount_component(inputsinglevalue0, div1, null);
    			append_dev(div1, t2);
    			mount_component(inputsinglevalue1, div1, null);
    			append_dev(div19, t3);
    			append_dev(div19, div3);
    			append_dev(div3, div2);
    			append_dev(div3, t4);
    			mount_component(inputsinglevalue2, div3, null);
    			append_dev(div3, t5);
    			mount_component(inputsinglevalue3, div3, null);
    			append_dev(div19, t6);
    			append_dev(div19, div5);
    			append_dev(div5, div4);
    			append_dev(div5, t7);
    			mount_component(inputsinglevalue4, div5, null);
    			append_dev(div5, t8);
    			mount_component(inputsinglevalue5, div5, null);
    			append_dev(div19, t9);
    			append_dev(div19, div7);
    			append_dev(div7, div6);
    			append_dev(div7, t10);
    			mount_component(inputsinglevalue6, div7, null);
    			append_dev(div7, t11);
    			mount_component(inputsinglevalue7, div7, null);
    			append_dev(div19, t12);
    			append_dev(div19, div9);
    			append_dev(div9, div8);
    			append_dev(div9, t13);
    			mount_component(inputselectvalue, div9, null);
    			append_dev(div9, t14);
    			mount_component(inputsinglevalue8, div9, null);
    			append_dev(div19, t15);
    			append_dev(div19, div10);
    			append_dev(div19, t16);
    			append_dev(div19, div12);
    			append_dev(div12, div11);
    			append_dev(div11, h31);
    			append_dev(div12, t18);
    			if (if_block) if_block.m(div12, null);
    			append_dev(div19, t19);
    			append_dev(div19, div13);
    			append_dev(div19, t20);
    			append_dev(div19, div16);
    			append_dev(div16, div14);
    			append_dev(div14, h32);
    			append_dev(div16, t22);
    			append_dev(div16, div15);
    			append_dev(div15, h5);
    			append_dev(div19, t24);
    			append_dev(div19, div18);
    			append_dev(div18, div17);
    			append_dev(div17, button0);
    			append_dev(button0, h33);
    			append_dev(div17, t26);
    			append_dev(div17, button1);
    			append_dev(button1, h34);
    			append_dev(div17, t28);
    			append_dev(div17, button2);
    			append_dev(button2, h35);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type === (current_block_type = select_block_type_1(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if (if_block) if_block.d(1);
    				if_block = current_block_type && current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(div12, null);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(inputsinglevalue0.$$.fragment, local);
    			transition_in(inputsinglevalue1.$$.fragment, local);
    			transition_in(inputsinglevalue2.$$.fragment, local);
    			transition_in(inputsinglevalue3.$$.fragment, local);
    			transition_in(inputsinglevalue4.$$.fragment, local);
    			transition_in(inputsinglevalue5.$$.fragment, local);
    			transition_in(inputsinglevalue6.$$.fragment, local);
    			transition_in(inputsinglevalue7.$$.fragment, local);
    			transition_in(inputselectvalue.$$.fragment, local);
    			transition_in(inputsinglevalue8.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(inputsinglevalue0.$$.fragment, local);
    			transition_out(inputsinglevalue1.$$.fragment, local);
    			transition_out(inputsinglevalue2.$$.fragment, local);
    			transition_out(inputsinglevalue3.$$.fragment, local);
    			transition_out(inputsinglevalue4.$$.fragment, local);
    			transition_out(inputsinglevalue5.$$.fragment, local);
    			transition_out(inputsinglevalue6.$$.fragment, local);
    			transition_out(inputsinglevalue7.$$.fragment, local);
    			transition_out(inputselectvalue.$$.fragment, local);
    			transition_out(inputsinglevalue8.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div19);
    			destroy_component(inputsinglevalue0);
    			destroy_component(inputsinglevalue1);
    			destroy_component(inputsinglevalue2);
    			destroy_component(inputsinglevalue3);
    			destroy_component(inputsinglevalue4);
    			destroy_component(inputsinglevalue5);
    			destroy_component(inputsinglevalue6);
    			destroy_component(inputsinglevalue7);
    			destroy_component(inputselectvalue);
    			destroy_component(inputsinglevalue8);

    			if (if_block) {
    				if_block.d();
    			}
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$n.name,
    		type: "if",
    		source: "(588:8) {#if user.authority}",
    		ctx
    	});

    	return block;
    }

    // (677:56) 
    function create_if_block_4$3(ctx) {
    	let div4;
    	let div0;
    	let h50;
    	let t1;
    	let h30;
    	let t3;
    	let div1;
    	let svg;
    	let path;
    	let t4;
    	let div2;
    	let h51;
    	let t6;
    	let h31;
    	let t7_value = ['비인가', '일반 유저', '관리자'][/*request*/ ctx[0].content.change_to] + "";
    	let t7;
    	let t8;
    	let div3;
    	let h32;

    	const block = {
    		c: function create() {
    			div4 = element("div");
    			div0 = element("div");
    			h50 = element("h5");
    			h50.textContent = "권한 종류";
    			t1 = space();
    			h30 = element("h3");
    			h30.textContent = `${['비인가', '일반 유저', '관리자'][/*user*/ ctx[7].authority]}`;
    			t3 = space();
    			div1 = element("div");
    			svg = svg_element("svg");
    			path = svg_element("path");
    			t4 = space();
    			div2 = element("div");
    			h51 = element("h5");
    			h51.textContent = "권한 종류";
    			t6 = space();
    			h31 = element("h3");
    			t7 = text(t7_value);
    			t8 = space();
    			div3 = element("div");
    			h32 = element("h3");
    			h32.textContent = "로 수정";
    			attr_dev(h50, "class", "label svelte-1htkxxx");
    			add_location(h50, file$D, 679, 32, 23119);
    			attr_dev(h30, "class", "svelte-1htkxxx");
    			add_location(h30, file$D, 680, 32, 23181);
    			attr_dev(div0, "class", "authority-wrap svelte-1htkxxx");
    			add_location(div0, file$D, 678, 28, 23057);
    			attr_dev(path, "stroke-linecap", "round");
    			attr_dev(path, "stroke-linejoin", "round");
    			attr_dev(path, "d", "M8.25 4.5l7.5 7.5-7.5 7.5");
    			add_location(path, file$D, 684, 36, 23531);
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "fill", "none");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			attr_dev(svg, "stroke-width", "1.5");
    			attr_dev(svg, "stroke", "rgb(26, 26, 128)");
    			attr_dev(svg, "height", "40");
    			attr_dev(svg, "width", "40");
    			add_location(svg, file$D, 683, 32, 23353);
    			attr_dev(div1, "class", "svg-wrap");
    			add_location(div1, file$D, 682, 28, 23297);
    			attr_dev(h51, "class", "label svelte-1htkxxx");
    			add_location(h51, file$D, 688, 32, 23784);
    			attr_dev(h31, "class", "svelte-1htkxxx");
    			add_location(h31, file$D, 689, 32, 23846);
    			attr_dev(div2, "class", "authority-wrap svelte-1htkxxx");
    			add_location(div2, file$D, 687, 28, 23722);
    			attr_dev(h32, "class", "svelte-1htkxxx");
    			add_location(h32, file$D, 692, 32, 24030);
    			attr_dev(div3, "class", "rest-text svelte-1htkxxx");
    			add_location(div3, file$D, 691, 28, 23973);
    			attr_dev(div4, "class", "authority-request-wrap svelte-1htkxxx");
    			add_location(div4, file$D, 677, 24, 22991);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div4, anchor);
    			append_dev(div4, div0);
    			append_dev(div0, h50);
    			append_dev(div0, t1);
    			append_dev(div0, h30);
    			append_dev(div4, t3);
    			append_dev(div4, div1);
    			append_dev(div1, svg);
    			append_dev(svg, path);
    			append_dev(div4, t4);
    			append_dev(div4, div2);
    			append_dev(div2, h51);
    			append_dev(div2, t6);
    			append_dev(div2, h31);
    			append_dev(h31, t7);
    			append_dev(div4, t8);
    			append_dev(div4, div3);
    			append_dev(div3, h32);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*request*/ 1 && t7_value !== (t7_value = ['비인가', '일반 유저', '관리자'][/*request*/ ctx[0].content.change_to] + "")) set_data_dev(t7, t7_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div4);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$3.name,
    		type: "if",
    		source: "(677:56) ",
    		ctx
    	});

    	return block;
    }

    // (624:20) {#if request.content.type == 0}
    function create_if_block_1$g(ctx) {
    	let div;
    	let each_value = /*request*/ ctx[0].content.access_to;
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$f(get_each_context$f(ctx, each_value, i));
    	}

    	let each_1_else = null;

    	if (!each_value.length) {
    		each_1_else = create_else_block_2$2(ctx);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			if (each_1_else) {
    				each_1_else.c();
    			}

    			attr_dev(div, "class", "browsing-request-wrap  svelte-1htkxxx");
    			add_location(div, file$D, 624, 24, 18634);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}

    			if (each_1_else) {
    				each_1_else.m(div, null);
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*declineList, clickCall, acceptList, request*/ 71) {
    				each_value = /*request*/ ctx[0].content.access_to;
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$f(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$f(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;

    				if (!each_value.length && each_1_else) {
    					each_1_else.p(ctx, dirty);
    				} else if (!each_value.length) {
    					each_1_else = create_else_block_2$2(ctx);
    					each_1_else.c();
    					each_1_else.m(div, null);
    				} else if (each_1_else) {
    					each_1_else.d(1);
    					each_1_else = null;
    				}
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_each(each_blocks, detaching);
    			if (each_1_else) each_1_else.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$g.name,
    		type: "if",
    		source: "(624:20) {#if request.content.type == 0}",
    		ctx
    	});

    	return block;
    }

    // (673:28) {:else}
    function create_else_block_2$2(ctx) {
    	let div;
    	let h3;

    	const block = {
    		c: function create() {
    			div = element("div");
    			h3 = element("h3");
    			h3.textContent = "요청이 비어있습니다";
    			add_location(h3, file$D, 673, 56, 22813);
    			attr_dev(div, "class", "no-case-id");
    			add_location(div, file$D, 673, 32, 22789);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, h3);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_2$2.name,
    		type: "else",
    		source: "(673:28) {:else}",
    		ctx
    	});

    	return block;
    }

    // (648:48) {:else}
    function create_else_block_1$2(ctx) {
    	let svg;
    	let path;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "stroke-linecap", "round");
    			attr_dev(path, "stroke-linejoin", "round");
    			attr_dev(path, "d", "M4.5 12.75l6 6 9-13.5");
    			add_location(path, file$D, 649, 56, 20721);
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "fill", "none");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			attr_dev(svg, "stroke-width", "2");
    			attr_dev(svg, "stroke", "white");
    			attr_dev(svg, "height", "18");
    			attr_dev(svg, "width", "18");
    			add_location(svg, file$D, 648, 52, 20536);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1$2.name,
    		type: "else",
    		source: "(648:48) {:else}",
    		ctx
    	});

    	return block;
    }

    // (644:48) {#if !acceptList.includes(index)}
    function create_if_block_3$6(ctx) {
    	let svg;
    	let path;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "stroke-linecap", "round");
    			attr_dev(path, "stroke-linejoin", "round");
    			attr_dev(path, "d", "M4.5 12.75l6 6 9-13.5");
    			add_location(path, file$D, 645, 56, 20284);
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "fill", "none");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			attr_dev(svg, "stroke-width", "2");
    			attr_dev(svg, "stroke", "currentColor");
    			attr_dev(svg, "height", "18");
    			attr_dev(svg, "width", "18");
    			add_location(svg, file$D, 644, 52, 20092);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$6.name,
    		type: "if",
    		source: "(644:48) {#if !acceptList.includes(index)}",
    		ctx
    	});

    	return block;
    }

    // (663:48) {:else}
    function create_else_block$i(ctx) {
    	let svg;
    	let path;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "stroke-linecap", "round");
    			attr_dev(path, "stroke-linejoin", "round");
    			attr_dev(path, "d", "M6 18L18 6M6 6l12 12");
    			add_location(path, file$D, 664, 56, 22218);
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "fill", "none");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			attr_dev(svg, "stroke-width", "1.5");
    			attr_dev(svg, "stroke", "white");
    			attr_dev(svg, "height", "18");
    			attr_dev(svg, "width", "18");
    			add_location(svg, file$D, 663, 52, 22031);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$i.name,
    		type: "else",
    		source: "(663:48) {:else}",
    		ctx
    	});

    	return block;
    }

    // (659:48) {#if !declineList.includes(index)}
    function create_if_block_2$a(ctx) {
    	let svg;
    	let path;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "stroke-linecap", "round");
    			attr_dev(path, "stroke-linejoin", "round");
    			attr_dev(path, "d", "M6 18L18 6M6 6l12 12");
    			add_location(path, file$D, 660, 56, 21780);
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "fill", "none");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			attr_dev(svg, "stroke-width", "1.5");
    			attr_dev(svg, "stroke", "currentColor");
    			attr_dev(svg, "height", "18");
    			attr_dev(svg, "width", "18");
    			add_location(svg, file$D, 659, 52, 21586);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$a.name,
    		type: "if",
    		source: "(659:48) {#if !declineList.includes(index)}",
    		ctx
    	});

    	return block;
    }

    // (626:28) {#each request.content.access_to as case_id, index}
    function create_each_block$f(ctx) {
    	let div10;
    	let div4;
    	let h30;
    	let t1;
    	let div0;
    	let t2;
    	let h40;
    	let t3_value = /*case_id*/ ctx[25] + "";
    	let t3;
    	let t4;
    	let div1;
    	let t5;
    	let h31;
    	let t7;
    	let div2;
    	let t8;
    	let h41;
    	let t10;
    	let h5;
    	let t12;
    	let div3;
    	let t13;
    	let h32;
    	let t15;
    	let div9;
    	let div6;
    	let div5;
    	let show_if_1;
    	let t16;
    	let h33;
    	let t17;
    	let h33_class_value;
    	let div6_class_value;
    	let t18;
    	let div8;
    	let div7;
    	let show_if;
    	let t19;
    	let h34;
    	let t20;
    	let h34_class_value;
    	let div8_class_value;
    	let t21;
    	let mounted;
    	let dispose;

    	function select_block_type_2(ctx, dirty) {
    		if (dirty & /*acceptList*/ 2) show_if_1 = null;
    		if (show_if_1 == null) show_if_1 = !!!/*acceptList*/ ctx[1].includes(/*index*/ ctx[27]);
    		if (show_if_1) return create_if_block_3$6;
    		return create_else_block_1$2;
    	}

    	let current_block_type = select_block_type_2(ctx, -1);
    	let if_block0 = current_block_type(ctx);

    	function click_handler() {
    		return /*click_handler*/ ctx[18](/*index*/ ctx[27]);
    	}

    	function select_block_type_3(ctx, dirty) {
    		if (dirty & /*declineList*/ 4) show_if = null;
    		if (show_if == null) show_if = !!!/*declineList*/ ctx[2].includes(/*index*/ ctx[27]);
    		if (show_if) return create_if_block_2$a;
    		return create_else_block$i;
    	}

    	let current_block_type_1 = select_block_type_3(ctx, -1);
    	let if_block1 = current_block_type_1(ctx);

    	function click_handler_1() {
    		return /*click_handler_1*/ ctx[19](/*index*/ ctx[27]);
    	}

    	const block = {
    		c: function create() {
    			div10 = element("div");
    			div4 = element("div");
    			h30 = element("h3");
    			h30.textContent = "등록 번호";
    			t1 = space();
    			div0 = element("div");
    			t2 = space();
    			h40 = element("h4");
    			t3 = text(t3_value);
    			t4 = space();
    			div1 = element("div");
    			t5 = space();
    			h31 = element("h3");
    			h31.textContent = "의 기록물";
    			t7 = space();
    			div2 = element("div");
    			t8 = space();
    			h41 = element("h4");
    			h41.textContent = "#이인호_동상_앞";
    			t10 = space();
    			h5 = element("h5");
    			h5.textContent = "(눌러서 이동)";
    			t12 = space();
    			div3 = element("div");
    			t13 = space();
    			h32 = element("h3");
    			h32.textContent = "에 대한 열람 권한";
    			t15 = space();
    			div9 = element("div");
    			div6 = element("div");
    			div5 = element("div");
    			if_block0.c();
    			t16 = space();
    			h33 = element("h3");
    			t17 = text("수락");
    			t18 = space();
    			div8 = element("div");
    			div7 = element("div");
    			if_block1.c();
    			t19 = space();
    			h34 = element("h3");
    			t20 = text("거절");
    			t21 = space();
    			attr_dev(h30, "class", "svelte-1htkxxx");
    			add_location(h30, file$D, 628, 40, 18944);
    			attr_dev(div0, "class", "whitespace svelte-1htkxxx");
    			add_location(div0, file$D, 629, 40, 19000);
    			attr_dev(h40, "class", "svelte-1htkxxx");
    			add_location(h40, file$D, 630, 40, 19072);
    			attr_dev(div1, "class", "whitespace svelte-1htkxxx");
    			add_location(div1, file$D, 631, 40, 19132);
    			attr_dev(h31, "class", "svelte-1htkxxx");
    			add_location(h31, file$D, 632, 40, 19204);
    			attr_dev(div2, "class", "whitespace svelte-1htkxxx");
    			add_location(div2, file$D, 633, 40, 19260);
    			attr_dev(h41, "class", "svelte-1htkxxx");
    			add_location(h41, file$D, 634, 40, 19332);
    			attr_dev(h5, "class", "svelte-1htkxxx");
    			add_location(h5, file$D, 635, 40, 19392);
    			attr_dev(div3, "class", "whitespace svelte-1htkxxx");
    			add_location(div3, file$D, 636, 40, 19451);
    			attr_dev(h32, "class", "svelte-1htkxxx");
    			add_location(h32, file$D, 637, 40, 19523);
    			attr_dev(div4, "class", "request-content-container svelte-1htkxxx");
    			add_location(div4, file$D, 627, 36, 18863);
    			attr_dev(div5, "class", "accept-svg");
    			add_location(div5, file$D, 642, 44, 19931);

    			attr_dev(h33, "class", h33_class_value = "" + (null_to_empty(/*acceptList*/ ctx[1].includes(/*index*/ ctx[27])
    			? 'clicked'
    			: 'unclicked') + " svelte-1htkxxx"));

    			add_location(h33, file$D, 653, 44, 21015);

    			attr_dev(div6, "class", div6_class_value = "" + (null_to_empty(/*acceptList*/ ctx[1].includes(/*index*/ ctx[27])
    			? 'accept-container-clicked container'
    			: 'accept-container container') + " svelte-1htkxxx"));

    			add_location(div6, file$D, 640, 40, 19691);
    			attr_dev(div7, "class", "decline-svg");
    			add_location(div7, file$D, 657, 44, 21423);

    			attr_dev(h34, "class", h34_class_value = "" + (null_to_empty(/*declineList*/ ctx[2].includes(/*index*/ ctx[27])
    			? 'clicked'
    			: 'unclicked') + " svelte-1htkxxx"));

    			add_location(h34, file$D, 668, 44, 22511);

    			attr_dev(div8, "class", div8_class_value = "" + (null_to_empty(/*declineList*/ ctx[2].includes(/*index*/ ctx[27])
    			? 'decline-container-clicked container'
    			: 'decline-container container') + " svelte-1htkxxx"));

    			add_location(div8, file$D, 655, 40, 21179);
    			attr_dev(div9, "class", "select-wrap svelte-1htkxxx");
    			add_location(div9, file$D, 639, 36, 19624);
    			attr_dev(div10, "class", "browsing-request-container svelte-1htkxxx");
    			add_location(div10, file$D, 626, 32, 18785);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div10, anchor);
    			append_dev(div10, div4);
    			append_dev(div4, h30);
    			append_dev(div4, t1);
    			append_dev(div4, div0);
    			append_dev(div4, t2);
    			append_dev(div4, h40);
    			append_dev(h40, t3);
    			append_dev(div4, t4);
    			append_dev(div4, div1);
    			append_dev(div4, t5);
    			append_dev(div4, h31);
    			append_dev(div4, t7);
    			append_dev(div4, div2);
    			append_dev(div4, t8);
    			append_dev(div4, h41);
    			append_dev(div4, t10);
    			append_dev(div4, h5);
    			append_dev(div4, t12);
    			append_dev(div4, div3);
    			append_dev(div4, t13);
    			append_dev(div4, h32);
    			append_dev(div10, t15);
    			append_dev(div10, div9);
    			append_dev(div9, div6);
    			append_dev(div6, div5);
    			if_block0.m(div5, null);
    			append_dev(div6, t16);
    			append_dev(div6, h33);
    			append_dev(h33, t17);
    			append_dev(div9, t18);
    			append_dev(div9, div8);
    			append_dev(div8, div7);
    			if_block1.m(div7, null);
    			append_dev(div8, t19);
    			append_dev(div8, h34);
    			append_dev(h34, t20);
    			append_dev(div10, t21);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div6, "click", click_handler, false, false, false),
    					listen_dev(div8, "click", click_handler_1, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty & /*request*/ 1 && t3_value !== (t3_value = /*case_id*/ ctx[25] + "")) set_data_dev(t3, t3_value);

    			if (current_block_type !== (current_block_type = select_block_type_2(ctx, dirty))) {
    				if_block0.d(1);
    				if_block0 = current_block_type(ctx);

    				if (if_block0) {
    					if_block0.c();
    					if_block0.m(div5, null);
    				}
    			}

    			if (dirty & /*acceptList*/ 2 && h33_class_value !== (h33_class_value = "" + (null_to_empty(/*acceptList*/ ctx[1].includes(/*index*/ ctx[27])
    			? 'clicked'
    			: 'unclicked') + " svelte-1htkxxx"))) {
    				attr_dev(h33, "class", h33_class_value);
    			}

    			if (dirty & /*acceptList*/ 2 && div6_class_value !== (div6_class_value = "" + (null_to_empty(/*acceptList*/ ctx[1].includes(/*index*/ ctx[27])
    			? 'accept-container-clicked container'
    			: 'accept-container container') + " svelte-1htkxxx"))) {
    				attr_dev(div6, "class", div6_class_value);
    			}

    			if (current_block_type_1 !== (current_block_type_1 = select_block_type_3(ctx, dirty))) {
    				if_block1.d(1);
    				if_block1 = current_block_type_1(ctx);

    				if (if_block1) {
    					if_block1.c();
    					if_block1.m(div7, null);
    				}
    			}

    			if (dirty & /*declineList*/ 4 && h34_class_value !== (h34_class_value = "" + (null_to_empty(/*declineList*/ ctx[2].includes(/*index*/ ctx[27])
    			? 'clicked'
    			: 'unclicked') + " svelte-1htkxxx"))) {
    				attr_dev(h34, "class", h34_class_value);
    			}

    			if (dirty & /*declineList*/ 4 && div8_class_value !== (div8_class_value = "" + (null_to_empty(/*declineList*/ ctx[2].includes(/*index*/ ctx[27])
    			? 'decline-container-clicked container'
    			: 'decline-container container') + " svelte-1htkxxx"))) {
    				attr_dev(div8, "class", div8_class_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div10);
    			if_block0.d();
    			if_block1.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$f.name,
    		type: "each",
    		source: "(626:28) {#each request.content.access_to as case_id, index}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$I(ctx) {
    	let div3;
    	let div1;
    	let div0;
    	let button;
    	let svg;
    	let path;
    	let t0;
    	let promise;
    	let t1;
    	let t2;
    	let div2;
    	let current_block_type_index;
    	let if_block1;
    	let current;
    	let mounted;
    	let dispose;

    	let info = {
    		ctx,
    		current: null,
    		token: null,
    		hasCatch: true,
    		pending: create_pending_block$3,
    		then: create_then_block$3,
    		catch: create_catch_block$3,
    		value: 28,
    		error: 29
    	};

    	handle_promise(promise = /*getRequestFromId*/ ctx[5](/*request*/ ctx[0]._id), info);
    	let if_block0 = /*status*/ ctx[3] == 1 && create_if_block_5$2(ctx);
    	const if_block_creators = [create_if_block$n, create_else_block_3$2];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*user*/ ctx[7].authority) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			div1 = element("div");
    			div0 = element("div");
    			button = element("button");
    			svg = svg_element("svg");
    			path = svg_element("path");
    			t0 = space();
    			info.block.c();
    			t1 = space();
    			if (if_block0) if_block0.c();
    			t2 = space();
    			div2 = element("div");
    			if_block1.c();
    			attr_dev(path, "stroke-linecap", "round");
    			attr_dev(path, "stroke-linejoin", "round");
    			attr_dev(path, "d", "M9 15L3 9m0 0l6-6M3 9h12a6 6 0 010 12h-3");
    			add_location(path, file$D, 517, 20, 11791);
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "fill", "none");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			attr_dev(svg, "stroke-width", "2");
    			attr_dev(svg, "stroke", "currentColor");
    			attr_dev(svg, "class", "w-6 h-6");
    			attr_dev(svg, "height", "18");
    			attr_dev(svg, "width", "18");
    			add_location(svg, file$D, 516, 16, 11619);
    			attr_dev(button, "class", "back-btn svelte-1htkxxx");
    			add_location(button, file$D, 515, 12, 11555);
    			attr_dev(div0, "class", "back-btn-wrap svelte-1htkxxx");
    			add_location(div0, file$D, 514, 8, 11514);
    			attr_dev(div1, "class", "header svelte-1htkxxx");
    			add_location(div1, file$D, 513, 4, 11484);
    			attr_dev(div2, "class", "body svelte-1htkxxx");
    			add_location(div2, file$D, 586, 4, 16020);
    			attr_dev(div3, "class", "focus svelte-1htkxxx");
    			add_location(div3, file$D, 512, 0, 11459);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div1);
    			append_dev(div1, div0);
    			append_dev(div0, button);
    			append_dev(button, svg);
    			append_dev(svg, path);
    			append_dev(div1, t0);
    			info.block.m(div1, info.anchor = null);
    			info.mount = () => div1;
    			info.anchor = t1;
    			append_dev(div1, t1);
    			if (if_block0) if_block0.m(div1, null);
    			append_dev(div3, t2);
    			append_dev(div3, div2);
    			if_blocks[current_block_type_index].m(div2, null);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*undoFocus*/ ctx[4], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;
    			info.ctx = ctx;

    			if (dirty & /*request*/ 1 && promise !== (promise = /*getRequestFromId*/ ctx[5](/*request*/ ctx[0]._id)) && handle_promise(promise, info)) ; else {
    				update_await_block_branch(info, ctx, dirty);
    			}

    			if (/*status*/ ctx[3] == 1) if_block0.p(ctx, dirty);
    			if_block1.p(ctx, dirty);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(info.block);
    			transition_in(if_block1);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block1);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    			info.block.d();
    			info.token = null;
    			info = null;
    			if (if_block0) if_block0.d();
    			if_blocks[current_block_type_index].d();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$I.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$I($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('AccessControlDetailView', slots, []);
    	let { request } = $$props;
    	let acceptList = [];
    	let declineList = [];
    	let status = 0;
    	var dispatch = createEventDispatcher();

    	function undoFocus() {
    		dispatch('escape', { focus: null });
    	}

    	async function getRequestFromId(id) {
    		let result = await axios$1.get(`http://localhost:8000/request/${id}`);
    		return result;
    	}

    	function clickCall(type, index) {
    		if (type == 1 && !acceptClicked(index)) {
    			if (declineClicked(index)) {
    				let pop_index = declineList.indexOf(index);
    				declineList.splice(pop_index, 1);
    			}

    			$$invalidate(1, acceptList = [...acceptList, index]);
    			$$invalidate(2, declineList);
    			console.log(acceptList);
    			return acceptList;
    		} else if (type == 0 && !declineClicked(index)) {
    			if (acceptClicked(index)) {
    				let pop_index = acceptList.indexOf(index);
    				acceptList.splice(pop_index, 1);
    			}

    			$$invalidate(2, declineList = [...declineList, index]);
    			$$invalidate(1, acceptList);
    			console.log(declineList);
    			return declineList;
    		}
    	}

    	function acceptClicked(index) {
    		return acceptList.includes(index);
    	}

    	function accepted(index) {
    		if (acceptClicked(index)) {
    			$$invalidate(1, acceptList);
    			return "white";
    		} else {
    			$$invalidate(1, acceptList);
    			return "currentColor";
    		}
    	}

    	function declineClicked(index) {
    		return declineList.includes(index);
    	}

    	function declined(index) {
    		if (declineClicked(index)) {
    			$$invalidate(2, declineList);
    			return "white";
    		} else {
    			$$invalidate(2, declineList);
    			return "currentColor";
    		}
    	}

    	/* Test variables to be fetched from server when online */
    	/* USER object:
            @authority - Show the contents to authorized personal only. 
                         Set false at default.
            @name      - Name of the logged in user.  
    */
    	let user = {
    		_id: 2,
    		registered_id: 'sampleId',
    		name: "김재우",
    		authority: 1,
    		standing: "상병",
    		position: "전산병",
    		affiliation: "학술정보원 멀티미디어교실",
    		created_at: "22년 2월 3일",
    		ip_address: "192.168.0.101",
    		registered_by: "김재우",
    		date: "2022년 12월 12일"
    	};

    	let name = user.name;
    	let registered_by = user.registered_by;
    	let registered_id = user.registered_id;
    	let affiliation = user.affiliation;
    	let id = user._id;
    	let ip_address = user.ip_address;
    	let date = user.date;
    	let authority = user.authority;
    	let standing = user.standing;
    	let position = user.position;
    	const writable_props = ['request'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$b.warn(`<AccessControlDetailView> was created with unknown prop '${key}'`);
    	});

    	const click_handler = index => clickCall(1, index);
    	const click_handler_1 = index => clickCall(0, index);

    	$$self.$$set = $$props => {
    		if ('request' in $$props) $$invalidate(0, request = $$props.request);
    	};

    	$$self.$capture_state = () => ({
    		Route,
    		meta: O,
    		router: f,
    		axios: axios$1,
    		draw,
    		fade,
    		createEventDispatcher,
    		onMount,
    		InputSingleValue,
    		InputSelectValue,
    		condition_set,
    		request,
    		acceptList,
    		declineList,
    		status,
    		dispatch,
    		undoFocus,
    		getRequestFromId,
    		clickCall,
    		acceptClicked,
    		accepted,
    		declineClicked,
    		declined,
    		user,
    		name,
    		registered_by,
    		registered_id,
    		affiliation,
    		id,
    		ip_address,
    		date,
    		authority,
    		standing,
    		position
    	});

    	$$self.$inject_state = $$props => {
    		if ('request' in $$props) $$invalidate(0, request = $$props.request);
    		if ('acceptList' in $$props) $$invalidate(1, acceptList = $$props.acceptList);
    		if ('declineList' in $$props) $$invalidate(2, declineList = $$props.declineList);
    		if ('status' in $$props) $$invalidate(3, status = $$props.status);
    		if ('dispatch' in $$props) dispatch = $$props.dispatch;
    		if ('user' in $$props) $$invalidate(7, user = $$props.user);
    		if ('name' in $$props) $$invalidate(8, name = $$props.name);
    		if ('registered_by' in $$props) $$invalidate(9, registered_by = $$props.registered_by);
    		if ('registered_id' in $$props) $$invalidate(10, registered_id = $$props.registered_id);
    		if ('affiliation' in $$props) $$invalidate(11, affiliation = $$props.affiliation);
    		if ('id' in $$props) $$invalidate(12, id = $$props.id);
    		if ('ip_address' in $$props) $$invalidate(13, ip_address = $$props.ip_address);
    		if ('date' in $$props) $$invalidate(14, date = $$props.date);
    		if ('authority' in $$props) $$invalidate(15, authority = $$props.authority);
    		if ('standing' in $$props) $$invalidate(16, standing = $$props.standing);
    		if ('position' in $$props) $$invalidate(17, position = $$props.position);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		request,
    		acceptList,
    		declineList,
    		status,
    		undoFocus,
    		getRequestFromId,
    		clickCall,
    		user,
    		name,
    		registered_by,
    		registered_id,
    		affiliation,
    		id,
    		ip_address,
    		date,
    		authority,
    		standing,
    		position,
    		click_handler,
    		click_handler_1
    	];
    }

    class AccessControlDetailView extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$I, create_fragment$I, safe_not_equal, { request: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "AccessControlDetailView",
    			options,
    			id: create_fragment$I.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*request*/ ctx[0] === undefined && !('request' in props)) {
    			console_1$b.warn("<AccessControlDetailView> was created without expected prop 'request'");
    		}
    	}

    	get request() {
    		throw new Error("<AccessControlDetailView>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set request(value) {
    		throw new Error("<AccessControlDetailView>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* pages/content_container/AccessControlContainer.svelte generated by Svelte v3.50.1 */

    const { console: console_1$c } = globals;
    const file$E = "pages/content_container/AccessControlContainer.svelte";

    function get_each_context$g(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[16] = list[i];
    	child_ctx[18] = i;
    	return child_ctx;
    }

    // (433:24) {#if all_checked}
    function create_if_block_1$h(ctx) {
    	let svg;
    	let path;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "stroke-linecap", "round");
    			attr_dev(path, "stroke-linejoin", "round");
    			attr_dev(path, "d", "M4.5 12.75l6 6 9-13.5");
    			add_location(path, file$E, 434, 32, 10732);
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "fill", "none");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			attr_dev(svg, "stroke-width", "1.5");
    			attr_dev(svg, "stroke", "white");
    			attr_dev(svg, "height", "17");
    			attr_dev(svg, "width", "17");
    			add_location(svg, file$E, 433, 28, 10569);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$h.name,
    		type: "if",
    		source: "(433:24) {#if all_checked}",
    		ctx
    	});

    	return block;
    }

    // (468:20) {#each item_objs as item, index}
    function create_each_block$g(ctx) {
    	let accesscontrolitem;
    	let current;

    	accesscontrolitem = new AccessControlItem({
    			props: {
    				checked: /*item*/ ctx[16].checked,
    				index: /*index*/ ctx[18],
    				data: /*item*/ ctx[16]
    			},
    			$$inline: true
    		});

    	accesscontrolitem.$on("delete", /*declineHandle*/ ctx[4]);
    	accesscontrolitem.$on("accept", /*acceptHandle*/ ctx[5]);
    	accesscontrolitem.$on("check", /*checkHandle*/ ctx[6]);
    	accesscontrolitem.$on("click", /*focusHandle*/ ctx[7]);

    	const block = {
    		c: function create() {
    			create_component(accesscontrolitem.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(accesscontrolitem, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const accesscontrolitem_changes = {};
    			if (dirty & /*item_objs*/ 4) accesscontrolitem_changes.checked = /*item*/ ctx[16].checked;
    			if (dirty & /*item_objs*/ 4) accesscontrolitem_changes.data = /*item*/ ctx[16];
    			accesscontrolitem.$set(accesscontrolitem_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(accesscontrolitem.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(accesscontrolitem.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(accesscontrolitem, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$g.name,
    		type: "each",
    		source: "(468:20) {#each item_objs as item, index}",
    		ctx
    	});

    	return block;
    }

    // (482:8) {#if focus}
    function create_if_block$o(ctx) {
    	let accesscontroldetailview;
    	let current;

    	accesscontroldetailview = new AccessControlDetailView({
    			props: { request: /*focus*/ ctx[1] },
    			$$inline: true
    		});

    	accesscontroldetailview.$on("escape", /*escapeHandle*/ ctx[8]);

    	const block = {
    		c: function create() {
    			create_component(accesscontroldetailview.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(accesscontroldetailview, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const accesscontroldetailview_changes = {};
    			if (dirty & /*focus*/ 2) accesscontroldetailview_changes.request = /*focus*/ ctx[1];
    			accesscontroldetailview.$set(accesscontroldetailview_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(accesscontroldetailview.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(accesscontroldetailview.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(accesscontroldetailview, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$o.name,
    		type: "if",
    		source: "(482:8) {#if focus}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$J(ctx) {
    	let div17;
    	let div16;
    	let div1;
    	let h30;
    	let t1;
    	let div0;
    	let button0;
    	let h31;
    	let t3;
    	let button1;
    	let h32;
    	let t5;
    	let div13;
    	let div2;
    	let button2;
    	let button2_class_value;
    	let t6;
    	let div4;
    	let div3;
    	let h33;
    	let t8;
    	let div6;
    	let div5;
    	let h34;
    	let t10;
    	let div8;
    	let div7;
    	let h35;
    	let t12;
    	let div10;
    	let div9;
    	let h36;
    	let t14;
    	let div12;
    	let div11;
    	let h37;
    	let t16;
    	let div15;
    	let div14;
    	let t17;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block0 = /*all_checked*/ ctx[0] && create_if_block_1$h(ctx);
    	let each_value = /*item_objs*/ ctx[2];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$g(get_each_context$g(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	let if_block1 = /*focus*/ ctx[1] && create_if_block$o(ctx);

    	const block = {
    		c: function create() {
    			div17 = element("div");
    			div16 = element("div");
    			div1 = element("div");
    			h30 = element("h3");
    			h30.textContent = "받은 요청";
    			t1 = space();
    			div0 = element("div");
    			button0 = element("button");
    			h31 = element("h3");
    			h31.textContent = "수락";
    			t3 = space();
    			button1 = element("button");
    			h32 = element("h3");
    			h32.textContent = "거절";
    			t5 = space();
    			div13 = element("div");
    			div2 = element("div");
    			button2 = element("button");
    			if (if_block0) if_block0.c();
    			t6 = space();
    			div4 = element("div");
    			div3 = element("div");
    			h33 = element("h3");
    			h33.textContent = "ID";
    			t8 = space();
    			div6 = element("div");
    			div5 = element("div");
    			h34 = element("h3");
    			h34.textContent = "이름";
    			t10 = space();
    			div8 = element("div");
    			div7 = element("div");
    			h35 = element("h3");
    			h35.textContent = "요청사항";
    			t12 = space();
    			div10 = element("div");
    			div9 = element("div");
    			h36 = element("h3");
    			h36.textContent = "수락";
    			t14 = space();
    			div12 = element("div");
    			div11 = element("div");
    			h37 = element("h3");
    			h37.textContent = "거절";
    			t16 = space();
    			div15 = element("div");
    			div14 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t17 = space();
    			if (if_block1) if_block1.c();
    			attr_dev(h30, "class", "svelte-1eyvt36");
    			add_location(h30, file$E, 423, 16, 10035);
    			attr_dev(h31, "class", "svelte-1eyvt36");
    			add_location(h31, file$E, 425, 50, 10146);
    			attr_dev(button0, "class", "svelte-1eyvt36");
    			add_location(button0, file$E, 425, 20, 10116);
    			attr_dev(h32, "class", "svelte-1eyvt36");
    			add_location(h32, file$E, 426, 51, 10219);
    			attr_dev(button1, "class", "svelte-1eyvt36");
    			add_location(button1, file$E, 426, 20, 10188);
    			attr_dev(div0, "class", "control-panel svelte-1eyvt36");
    			add_location(div0, file$E, 424, 16, 10067);
    			attr_dev(div1, "class", "header svelte-1eyvt36");
    			add_location(div1, file$E, 422, 12, 9997);

    			attr_dev(button2, "class", button2_class_value = "" + (null_to_empty(/*all_checked*/ ctx[0]
    			? 'check-btn-clicked'
    			: 'check-btn') + " svelte-1eyvt36"));

    			add_location(button2, file$E, 431, 20, 10402);
    			attr_dev(div2, "class", "header-checkbox-container svelte-1eyvt36");
    			add_location(div2, file$E, 430, 16, 10341);
    			attr_dev(h33, "class", "svelte-1eyvt36");
    			add_location(h33, file$E, 441, 24, 11065);
    			attr_dev(div3, "class", "header-container svelte-1eyvt36");
    			add_location(div3, file$E, 440, 20, 11009);
    			attr_dev(div4, "class", "header-id-container svelte-1eyvt36");
    			add_location(div4, file$E, 439, 16, 10954);
    			attr_dev(h34, "class", "svelte-1eyvt36");
    			add_location(h34, file$E, 446, 24, 11259);
    			attr_dev(div5, "class", "header-container svelte-1eyvt36");
    			add_location(div5, file$E, 445, 20, 11203);
    			attr_dev(div6, "class", "header-name-container svelte-1eyvt36");
    			add_location(div6, file$E, 444, 16, 11146);
    			attr_dev(h35, "class", "svelte-1eyvt36");
    			add_location(h35, file$E, 451, 24, 11455);
    			attr_dev(div7, "class", "header-container svelte-1eyvt36");
    			add_location(div7, file$E, 450, 20, 11399);
    			attr_dev(div8, "class", "header-detail-container svelte-1eyvt36");
    			add_location(div8, file$E, 449, 16, 11340);
    			attr_dev(h36, "class", "svelte-1eyvt36");
    			add_location(h36, file$E, 456, 24, 11653);
    			attr_dev(div9, "class", "header-container svelte-1eyvt36");
    			add_location(div9, file$E, 455, 20, 11597);
    			attr_dev(div10, "class", "header-accept-container svelte-1eyvt36");
    			add_location(div10, file$E, 454, 16, 11538);
    			attr_dev(h37, "class", "svelte-1eyvt36");
    			add_location(h37, file$E, 461, 24, 11850);
    			attr_dev(div11, "class", "header-container svelte-1eyvt36");
    			add_location(div11, file$E, 460, 20, 11794);
    			attr_dev(div12, "class", "header-decline-container svelte-1eyvt36");
    			add_location(div12, file$E, 459, 16, 11734);
    			attr_dev(div13, "class", "table-header svelte-1eyvt36");
    			add_location(div13, file$E, 429, 12, 10297);
    			attr_dev(div14, "class", "table svelte-1eyvt36");
    			add_location(div14, file$E, 466, 16, 11983);
    			attr_dev(div15, "class", "body svelte-1eyvt36");
    			add_location(div15, file$E, 465, 12, 11947);
    			attr_dev(div16, "class", "upload-view svelte-1eyvt36");
    			add_location(div16, file$E, 421, 8, 9958);
    			attr_dev(div17, "class", "browse-content-container svelte-1eyvt36");
    			add_location(div17, file$E, 419, 0, 9908);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div17, anchor);
    			append_dev(div17, div16);
    			append_dev(div16, div1);
    			append_dev(div1, h30);
    			append_dev(div1, t1);
    			append_dev(div1, div0);
    			append_dev(div0, button0);
    			append_dev(button0, h31);
    			append_dev(div0, t3);
    			append_dev(div0, button1);
    			append_dev(button1, h32);
    			append_dev(div16, t5);
    			append_dev(div16, div13);
    			append_dev(div13, div2);
    			append_dev(div2, button2);
    			if (if_block0) if_block0.m(button2, null);
    			append_dev(div13, t6);
    			append_dev(div13, div4);
    			append_dev(div4, div3);
    			append_dev(div3, h33);
    			append_dev(div13, t8);
    			append_dev(div13, div6);
    			append_dev(div6, div5);
    			append_dev(div5, h34);
    			append_dev(div13, t10);
    			append_dev(div13, div8);
    			append_dev(div8, div7);
    			append_dev(div7, h35);
    			append_dev(div13, t12);
    			append_dev(div13, div10);
    			append_dev(div10, div9);
    			append_dev(div9, h36);
    			append_dev(div13, t14);
    			append_dev(div13, div12);
    			append_dev(div12, div11);
    			append_dev(div11, h37);
    			append_dev(div16, t16);
    			append_dev(div16, div15);
    			append_dev(div15, div14);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div14, null);
    			}

    			append_dev(div17, t17);
    			if (if_block1) if_block1.m(div17, null);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(button0, "click", /*acceptCall*/ ctx[10], false, false, false),
    					listen_dev(button1, "click", /*declineCall*/ ctx[9], false, false, false),
    					listen_dev(button2, "click", /*allCheckHandle*/ ctx[3], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*all_checked*/ ctx[0]) {
    				if (if_block0) ; else {
    					if_block0 = create_if_block_1$h(ctx);
    					if_block0.c();
    					if_block0.m(button2, null);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (!current || dirty & /*all_checked*/ 1 && button2_class_value !== (button2_class_value = "" + (null_to_empty(/*all_checked*/ ctx[0]
    			? 'check-btn-clicked'
    			: 'check-btn') + " svelte-1eyvt36"))) {
    				attr_dev(button2, "class", button2_class_value);
    			}

    			if (dirty & /*item_objs, declineHandle, acceptHandle, checkHandle, focusHandle*/ 244) {
    				each_value = /*item_objs*/ ctx[2];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$g(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$g(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(div14, null);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}

    			if (/*focus*/ ctx[1]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty & /*focus*/ 2) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block$o(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(div17, null);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			transition_in(if_block1);
    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			transition_out(if_block1);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div17);
    			if (if_block0) if_block0.d();
    			destroy_each(each_blocks, detaching);
    			if (if_block1) if_block1.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$J.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$J($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('AccessControlContainer', slots, []);
    	let { stage = 1 } = $$props;
    	let all_checked = false;
    	let focus = null;
    	let item_objs = [];

    	// Handler is received from components
    	function allCheckHandle(e) {
    		if (all_checked) {
    			$$invalidate(0, all_checked = false);

    			item_objs.forEach(item => {
    				item.checked = false;
    			});
    		} else {
    			$$invalidate(0, all_checked = true);

    			item_objs.forEach(item => {
    				item.checked = true;
    			});
    		}

    		$$invalidate(2, item_objs);
    	}

    	async function declineHandle(e) {
    		let index = e.detail.index;

    		if (item_objs[index]) {
    			try {
    				let result = await declineFromRequestId(item_objs[index]._id);
    				let pop_obj = item_objs.splice(index, 1);
    			} catch(e) {
    				console.log(e);
    			}

    			$$invalidate(2, item_objs);
    		} else {
    			console.log(`item_objs[#${index}] doesn't exist`);
    		}
    	}

    	async function acceptHandle(e) {
    		let index = e.detail.index;

    		if (item_objs[index]) {
    			try {
    				let result = await acceptFromRequestId(item_objs[index]._id);
    				let pop_obj = item_objs.splice(index, 1);
    			} catch(e) {
    				console.log(e);
    			}

    			$$invalidate(2, item_objs);
    		} else {
    			console.log(`item_objs[#${index}] doesn't exist`);
    		}
    	}

    	function checkHandle(e) {
    		let index = e.detail.index;
    		let checked = e.detail.checked;

    		if (item_objs[index]) {
    			$$invalidate(2, item_objs[index].checked = checked, item_objs);
    		} else {
    			console.log(`item_objs[#${index}] doesn't exist`);
    		}

    		$$invalidate(2, item_objs);
    	}

    	function focusHandle(e) {
    		let index = e.detail.index;
    		$$invalidate(1, focus = item_objs[index]);
    	}

    	function escapeHandle(e) {
    		$$invalidate(1, focus = e.detail.focus);
    	}

    	// Call is received directly from buttons
    	async function declineCall() {
    		let result = getItemList();
    		let response = [];
    		console.log(result.length);

    		for (let i = 0; i < result.length; i++) {
    			console.log(i);

    			if (result[i].checked) {
    				let pop_obj = result.splice(i, 1);
    				let network_result = await declineFromRequestId(pop_obj._id);
    				response = [...response, network_result];
    				i = i - 1;
    			}
    		}

    		console.log(response);
    		$$invalidate(2, item_objs = result);
    	}

    	async function acceptCall() {
    		let result = getItemList();
    		let response = [];
    		console.log(result.length);

    		for (let i = 0; i < result.length; i++) {
    			console.log(i);

    			if (result[i].checked) {
    				let pop_obj = result.splice(i, 1);
    				let network_result = await acceptFromRequestId(pop_obj._id);
    				response = [...response, network_result];
    				i = i - 1;
    			}
    		}

    		console.log(response);
    		$$invalidate(2, item_objs = result);
    	}

    	// Networking functions
    	async function acceptFromRequestId(id) {
    		let result = await axios$1.post(`http://localhost:8000/request/accpet`, { request_id: id });
    		return result;
    	}

    	async function declineFromRequestId(id) {
    		let result = await axios$1.post(`http://localhost:8000/request/decline`, { request_id: id });
    		return result;
    	}

    	// Utility functions
    	function getItemListLength() {
    		return getItemList().length;
    	}

    	function getItemList() {
    		// returns copied list of ITEM_OBJS
    		return [...item_objs];
    	}

    	// Dummy datas
    	for (let i = 0; i < 20; i++) {
    		item_objs = [
    			...item_objs,
    			{
    				checked: false,
    				_id: i,
    				user_id: i,
    				name: '김재우',
    				detail: '권한 수정 요청',
    				content: { type: 0, access_to: [0, 1, 3, 4] }, //  if type == 1,
    				//      {
    				//  type: 1,
    				//  change_to: 2
    				//}
    				reasons: "해사 역사 기록 연구 목적"
    			}
    		];
    	}

    	const writable_props = ['stage'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$c.warn(`<AccessControlContainer> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('stage' in $$props) $$invalidate(11, stage = $$props.stage);
    	};

    	$$self.$capture_state = () => ({
    		Route,
    		router: f,
    		axios: axios$1,
    		createEventDispatcher,
    		onDestroy,
    		onMount,
    		writable,
    		crossfade,
    		flip,
    		AccessControlItem,
    		AccessControlDetailView,
    		stage,
    		all_checked,
    		focus,
    		item_objs,
    		allCheckHandle,
    		declineHandle,
    		acceptHandle,
    		checkHandle,
    		focusHandle,
    		escapeHandle,
    		declineCall,
    		acceptCall,
    		acceptFromRequestId,
    		declineFromRequestId,
    		getItemListLength,
    		getItemList
    	});

    	$$self.$inject_state = $$props => {
    		if ('stage' in $$props) $$invalidate(11, stage = $$props.stage);
    		if ('all_checked' in $$props) $$invalidate(0, all_checked = $$props.all_checked);
    		if ('focus' in $$props) $$invalidate(1, focus = $$props.focus);
    		if ('item_objs' in $$props) $$invalidate(2, item_objs = $$props.item_objs);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*stage*/ 2048) ;
    	};

    	return [
    		all_checked,
    		focus,
    		item_objs,
    		allCheckHandle,
    		declineHandle,
    		acceptHandle,
    		checkHandle,
    		focusHandle,
    		escapeHandle,
    		declineCall,
    		acceptCall,
    		stage
    	];
    }

    class AccessControlContainer extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$J, create_fragment$J, safe_not_equal, { stage: 11 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "AccessControlContainer",
    			options,
    			id: create_fragment$J.name
    		});
    	}

    	get stage() {
    		throw new Error("<AccessControlContainer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set stage(value) {
    		throw new Error("<AccessControlContainer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* components/manager/ContentTitle/AccessControlTitle.svelte generated by Svelte v3.50.1 */

    const file$F = "components/manager/ContentTitle/AccessControlTitle.svelte";

    function create_fragment$K(ctx) {
    	let div2;
    	let h30;
    	let t1;
    	let div1;
    	let div0;
    	let h31;
    	let t2;

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			h30 = element("h3");
    			h30.textContent = "기록물 접근 관리";
    			t1 = space();
    			div1 = element("div");
    			div0 = element("div");
    			h31 = element("h3");
    			t2 = text(/*subtitle*/ ctx[0]);
    			attr_dev(h30, "class", "svelte-1wpj7h6");
    			add_location(h30, file$F, 68, 4, 1464);
    			attr_dev(h31, "class", "svelte-1wpj7h6");
    			add_location(h31, file$F, 71, 12, 1579);
    			attr_dev(div0, "class", "keyword-holder-label svelte-1wpj7h6");
    			add_location(div0, file$F, 70, 8, 1531);
    			attr_dev(div1, "class", "keyword-holder-wrap svelte-1wpj7h6");
    			add_location(div1, file$F, 69, 4, 1488);
    			attr_dev(div2, "class", "browse-content-title svelte-1wpj7h6");
    			add_location(div2, file$F, 67, 0, 1424);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, h30);
    			append_dev(div2, t1);
    			append_dev(div2, div1);
    			append_dev(div1, div0);
    			append_dev(div0, h31);
    			append_dev(h31, t2);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*subtitle*/ 1) set_data_dev(t2, /*subtitle*/ ctx[0]);
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$K.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$K($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('AccessControlTitle', slots, []);
    	let { subtitle = '' } = $$props;
    	const writable_props = ['subtitle'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<AccessControlTitle> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('subtitle' in $$props) $$invalidate(0, subtitle = $$props.subtitle);
    	};

    	$$self.$capture_state = () => ({ subtitle });

    	$$self.$inject_state = $$props => {
    		if ('subtitle' in $$props) $$invalidate(0, subtitle = $$props.subtitle);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [subtitle];
    }

    class AccessControlTitle extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$K, create_fragment$K, safe_not_equal, { subtitle: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "AccessControlTitle",
    			options,
    			id: create_fragment$K.name
    		});
    	}

    	get subtitle() {
    		throw new Error("<AccessControlTitle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set subtitle(value) {
    		throw new Error("<AccessControlTitle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* pages/content_container/AccessControlView.svelte generated by Svelte v3.50.1 */
    const file$G = "pages/content_container/AccessControlView.svelte";

    function create_fragment$L(ctx) {
    	let accesscontroltitle;
    	let t0;
    	let accesscontrolcontainer;
    	let t1;
    	let div;
    	let managecreatenavbar;
    	let current;

    	accesscontroltitle = new AccessControlTitle({
    			props: { subtitle: /*subtitle*/ ctx[1] },
    			$$inline: true
    		});

    	accesscontrolcontainer = new AccessControlContainer({
    			props: { stage: /*stage*/ ctx[0] },
    			$$inline: true
    		});

    	managecreatenavbar = new ManageCreateNavbar({
    			props: { stage: /*stage*/ ctx[0] },
    			$$inline: true
    		});

    	managecreatenavbar.$on("stageChange", /*stageHandle*/ ctx[2]);

    	const block = {
    		c: function create() {
    			create_component(accesscontroltitle.$$.fragment);
    			t0 = space();
    			create_component(accesscontrolcontainer.$$.fragment);
    			t1 = space();
    			div = element("div");
    			create_component(managecreatenavbar.$$.fragment);
    			attr_dev(div, "class", "bottom-bar svelte-f8j4m1");
    			add_location(div, file$G, 37, 0, 841);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(accesscontroltitle, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(accesscontrolcontainer, target, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div, anchor);
    			mount_component(managecreatenavbar, div, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const accesscontroltitle_changes = {};
    			if (dirty & /*subtitle*/ 2) accesscontroltitle_changes.subtitle = /*subtitle*/ ctx[1];
    			accesscontroltitle.$set(accesscontroltitle_changes);
    			const accesscontrolcontainer_changes = {};
    			if (dirty & /*stage*/ 1) accesscontrolcontainer_changes.stage = /*stage*/ ctx[0];
    			accesscontrolcontainer.$set(accesscontrolcontainer_changes);
    			const managecreatenavbar_changes = {};
    			if (dirty & /*stage*/ 1) managecreatenavbar_changes.stage = /*stage*/ ctx[0];
    			managecreatenavbar.$set(managecreatenavbar_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(accesscontroltitle.$$.fragment, local);
    			transition_in(accesscontrolcontainer.$$.fragment, local);
    			transition_in(managecreatenavbar.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(accesscontroltitle.$$.fragment, local);
    			transition_out(accesscontrolcontainer.$$.fragment, local);
    			transition_out(managecreatenavbar.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(accesscontroltitle, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(accesscontrolcontainer, detaching);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div);
    			destroy_component(managecreatenavbar);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$L.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function titleChange$1(stage) {
    	if (stage == 1) {
    		return '받은 요청';
    	} else if (stage == 2) {
    		return '권한 수정';
    	}

    	return '허가되지 않은 창';
    }

    function instance$L($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('AccessControlView', slots, []);
    	let subtitle = '';
    	let stage = 1;
    	let view = 'box';

    	function stageHandle(e) {
    		$$invalidate(0, stage = e.detail.stage);
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<AccessControlView> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		AccessControlContainer,
    		ManageCreateNavbar,
    		AccessControlTitle,
    		subtitle,
    		stage,
    		view,
    		stageHandle,
    		titleChange: titleChange$1
    	});

    	$$self.$inject_state = $$props => {
    		if ('subtitle' in $$props) $$invalidate(1, subtitle = $$props.subtitle);
    		if ('stage' in $$props) $$invalidate(0, stage = $$props.stage);
    		if ('view' in $$props) view = $$props.view;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*stage*/ 1) {
    			 {
    				$$invalidate(1, subtitle = titleChange$1(stage));
    			}
    		}
    	};

    	return [stage, subtitle, stageHandle];
    }

    class AccessControlView extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$L, create_fragment$L, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "AccessControlView",
    			options,
    			id: create_fragment$L.name
    		});
    	}
    }

    /* pages/content_container/AccountCreateContainer.svelte generated by Svelte v3.50.1 */
    const file$H = "pages/content_container/AccountCreateContainer.svelte";

    // (263:25) 
    function create_if_block_1$i(ctx) {
    	let await_block_anchor;
    	let promise;

    	let info = {
    		ctx,
    		current: null,
    		token: null,
    		hasCatch: true,
    		pending: create_pending_block$4,
    		then: create_then_block$4,
    		catch: create_catch_block$4,
    		value: 16,
    		error: 17
    	};

    	handle_promise(promise = /*postUser*/ ctx[2](/*user*/ ctx[1]), info);

    	const block = {
    		c: function create() {
    			await_block_anchor = empty();
    			info.block.c();
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, await_block_anchor, anchor);
    			info.block.m(target, info.anchor = anchor);
    			info.mount = () => await_block_anchor.parentNode;
    			info.anchor = await_block_anchor;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			info.ctx = ctx;

    			if (dirty & /*user*/ 2 && promise !== (promise = /*postUser*/ ctx[2](/*user*/ ctx[1])) && handle_promise(promise, info)) ; else {
    				update_await_block_branch(info, ctx, dirty);
    			}
    		},
    		i: function intro(local) {
    			transition_in(info.block);
    		},
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(await_block_anchor);
    			info.block.d(detaching);
    			info.token = null;
    			info = null;
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$i.name,
    		type: "if",
    		source: "(263:25) ",
    		ctx
    	});

    	return block;
    }

    // (230:4) {#if stage == 1}
    function create_if_block$p(ctx) {
    	let div10;
    	let div9;
    	let div1;
    	let div0;
    	let h30;
    	let t1;
    	let inputsinglevalue0;
    	let t2;
    	let inputsinglevalue1;
    	let t3;
    	let div3;
    	let div2;
    	let t4;
    	let inputsinglevalue2;
    	let t5;
    	let inputsinglevalue3;
    	let t6;
    	let div5;
    	let div4;
    	let t7;
    	let inputsinglevalue4;
    	let t8;
    	let inputsinglevalue5;
    	let t9;
    	let div6;
    	let t10;
    	let div8;
    	let div7;
    	let h31;
    	let t12;
    	let inputselectvalue;
    	let t13;
    	let inputsinglevalue6;
    	let current;

    	inputsinglevalue0 = new InputSingleValue({
    			props: {
    				placeholder: "이름",
    				conditions: condition_set.default_conditions
    			},
    			$$inline: true
    		});

    	inputsinglevalue0.$on("change", /*change_handler*/ ctx[3]);
    	inputsinglevalue0.$on("pass", passHandle$1);

    	inputsinglevalue1 = new InputSingleValue({
    			props: {
    				placeholder: "소속",
    				conditions: condition_set.default_conditions
    			},
    			$$inline: true
    		});

    	inputsinglevalue1.$on("change", /*change_handler_1*/ ctx[4]);
    	inputsinglevalue1.$on("pass", passHandle$1);

    	inputsinglevalue2 = new InputSingleValue({
    			props: {
    				placeholder: "계급",
    				conditions: condition_set.default_conditions
    			},
    			$$inline: true
    		});

    	inputsinglevalue2.$on("change", /*change_handler_2*/ ctx[5]);
    	inputsinglevalue2.$on("pass", passHandle$1);

    	inputsinglevalue3 = new InputSingleValue({
    			props: {
    				placeholder: "직별 혹은 직책",
    				conditions: condition_set.default_conditions
    			},
    			$$inline: true
    		});

    	inputsinglevalue3.$on("change", /*change_handler_3*/ ctx[6]);
    	inputsinglevalue3.$on("pass", passHandle$1);

    	inputsinglevalue4 = new InputSingleValue({
    			props: {
    				placeholder: "아이디",
    				conditions: condition_set.registered_id_conditions
    			},
    			$$inline: true
    		});

    	inputsinglevalue4.$on("change", /*change_handler_4*/ ctx[7]);
    	inputsinglevalue4.$on("pass", passHandle$1);

    	inputsinglevalue5 = new InputSingleValue({
    			props: {
    				placeholder: "비밀번호",
    				conditions: condition_set.default_conditions
    			},
    			$$inline: true
    		});

    	inputsinglevalue5.$on("change", /*change_handler_5*/ ctx[8]);
    	inputsinglevalue5.$on("pass", passHandle$1);

    	inputselectvalue = new InputSelectValue({
    			props: {
    				placeholder: "권한 종류",
    				init: 1,
    				conditions: condition_set.select_conditions,
    				option_list: ['비인가', '일반 유저', '관리자']
    			},
    			$$inline: true
    		});

    	inputselectvalue.$on("change", /*change_handler_6*/ ctx[9]);
    	inputselectvalue.$on("pass", passHandle$1);

    	inputsinglevalue6 = new InputSingleValue({
    			props: {
    				placeholder: "등록 IP",
    				conditions: condition_set.default_conditions
    			},
    			$$inline: true
    		});

    	inputsinglevalue6.$on("change", /*change_handler_7*/ ctx[10]);
    	inputsinglevalue6.$on("pass", passHandle$1);

    	const block = {
    		c: function create() {
    			div10 = element("div");
    			div9 = element("div");
    			div1 = element("div");
    			div0 = element("div");
    			h30 = element("h3");
    			h30.textContent = "기본 등록 정보";
    			t1 = space();
    			create_component(inputsinglevalue0.$$.fragment);
    			t2 = space();
    			create_component(inputsinglevalue1.$$.fragment);
    			t3 = space();
    			div3 = element("div");
    			div2 = element("div");
    			t4 = space();
    			create_component(inputsinglevalue2.$$.fragment);
    			t5 = space();
    			create_component(inputsinglevalue3.$$.fragment);
    			t6 = space();
    			div5 = element("div");
    			div4 = element("div");
    			t7 = space();
    			create_component(inputsinglevalue4.$$.fragment);
    			t8 = space();
    			create_component(inputsinglevalue5.$$.fragment);
    			t9 = space();
    			div6 = element("div");
    			t10 = space();
    			div8 = element("div");
    			div7 = element("div");
    			h31 = element("h3");
    			h31.textContent = "권한 정보";
    			t12 = space();
    			create_component(inputselectvalue.$$.fragment);
    			t13 = space();
    			create_component(inputsinglevalue6.$$.fragment);
    			attr_dev(h30, "class", "svelte-16tj9qz");
    			add_location(h30, file$H, 235, 32, 5829);
    			attr_dev(div0, "class", "input-category-title svelte-16tj9qz");
    			add_location(div0, file$H, 234, 28, 5761);
    			attr_dev(div1, "class", "single-input-wrap svelte-16tj9qz");
    			add_location(div1, file$H, 233, 24, 5700);
    			attr_dev(div2, "class", "padding svelte-16tj9qz");
    			add_location(div2, file$H, 241, 28, 6368);
    			attr_dev(div3, "class", "single-input-wrap svelte-16tj9qz");
    			add_location(div3, file$H, 240, 24, 6307);
    			attr_dev(div4, "class", "padding svelte-16tj9qz");
    			add_location(div4, file$H, 246, 28, 6888);
    			attr_dev(div5, "class", "single-input-wrap svelte-16tj9qz");
    			add_location(div5, file$H, 245, 24, 6827);
    			attr_dev(div6, "class", "buffer svelte-16tj9qz");
    			add_location(div6, file$H, 251, 24, 7358);
    			attr_dev(h31, "class", "svelte-16tj9qz");
    			add_location(h31, file$H, 255, 32, 7557);
    			attr_dev(div7, "class", "input-category-title svelte-16tj9qz");
    			add_location(div7, file$H, 254, 28, 7489);
    			attr_dev(div8, "class", "single-input-wrap svelte-16tj9qz");
    			add_location(div8, file$H, 253, 24, 7428);
    			attr_dev(div9, "class", "body-content-wrap svelte-16tj9qz");
    			add_location(div9, file$H, 231, 16, 5568);
    			attr_dev(div10, "class", "body svelte-16tj9qz");
    			add_location(div10, file$H, 230, 8, 5532);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div10, anchor);
    			append_dev(div10, div9);
    			append_dev(div9, div1);
    			append_dev(div1, div0);
    			append_dev(div0, h30);
    			append_dev(div1, t1);
    			mount_component(inputsinglevalue0, div1, null);
    			append_dev(div1, t2);
    			mount_component(inputsinglevalue1, div1, null);
    			append_dev(div9, t3);
    			append_dev(div9, div3);
    			append_dev(div3, div2);
    			append_dev(div3, t4);
    			mount_component(inputsinglevalue2, div3, null);
    			append_dev(div3, t5);
    			mount_component(inputsinglevalue3, div3, null);
    			append_dev(div9, t6);
    			append_dev(div9, div5);
    			append_dev(div5, div4);
    			append_dev(div5, t7);
    			mount_component(inputsinglevalue4, div5, null);
    			append_dev(div5, t8);
    			mount_component(inputsinglevalue5, div5, null);
    			append_dev(div9, t9);
    			append_dev(div9, div6);
    			append_dev(div9, t10);
    			append_dev(div9, div8);
    			append_dev(div8, div7);
    			append_dev(div7, h31);
    			append_dev(div8, t12);
    			mount_component(inputselectvalue, div8, null);
    			append_dev(div8, t13);
    			mount_component(inputsinglevalue6, div8, null);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(inputsinglevalue0.$$.fragment, local);
    			transition_in(inputsinglevalue1.$$.fragment, local);
    			transition_in(inputsinglevalue2.$$.fragment, local);
    			transition_in(inputsinglevalue3.$$.fragment, local);
    			transition_in(inputsinglevalue4.$$.fragment, local);
    			transition_in(inputsinglevalue5.$$.fragment, local);
    			transition_in(inputselectvalue.$$.fragment, local);
    			transition_in(inputsinglevalue6.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(inputsinglevalue0.$$.fragment, local);
    			transition_out(inputsinglevalue1.$$.fragment, local);
    			transition_out(inputsinglevalue2.$$.fragment, local);
    			transition_out(inputsinglevalue3.$$.fragment, local);
    			transition_out(inputsinglevalue4.$$.fragment, local);
    			transition_out(inputsinglevalue5.$$.fragment, local);
    			transition_out(inputselectvalue.$$.fragment, local);
    			transition_out(inputsinglevalue6.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div10);
    			destroy_component(inputsinglevalue0);
    			destroy_component(inputsinglevalue1);
    			destroy_component(inputsinglevalue2);
    			destroy_component(inputsinglevalue3);
    			destroy_component(inputsinglevalue4);
    			destroy_component(inputsinglevalue5);
    			destroy_component(inputselectvalue);
    			destroy_component(inputsinglevalue6);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$p.name,
    		type: "if",
    		source: "(230:4) {#if stage == 1}",
    		ctx
    	});

    	return block;
    }

    // (292:8) {:catch error}
    function create_catch_block$4(ctx) {
    	let div1;
    	let div0;
    	let svg;
    	let path;
    	let path_intro;
    	let t0;
    	let h4;
    	let t2;
    	let h5;
    	let t4;
    	let a0;
    	let h30;
    	let t6;
    	let a1;
    	let h31;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			svg = svg_element("svg");
    			path = svg_element("path");
    			t0 = space();
    			h4 = element("h4");
    			h4.textContent = "등록에 실패했습니다";
    			t2 = space();
    			h5 = element("h5");
    			h5.textContent = "입력 내용을 다시 한번 확인해 주세요";
    			t4 = space();
    			a0 = element("a");
    			h30 = element("h3");
    			h30.textContent = "다시 입력하기";
    			t6 = space();
    			a1 = element("a");
    			h31 = element("h3");
    			h31.textContent = "돌아가기";
    			attr_dev(path, "stroke-linecap", "round");
    			attr_dev(path, "stroke-linejoin", "round");
    			attr_dev(path, "d", "M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126zM12 15.75h.007v.008H12v-.008z");
    			add_location(path, file$H, 295, 24, 10183);
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "fill", "none");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			attr_dev(svg, "stroke-width", "0.8");
    			attr_dev(svg, "stroke", "rgb(226, 41, 41)");
    			attr_dev(svg, "height", "100");
    			attr_dev(svg, "width", "100");
    			add_location(svg, file$H, 294, 20, 10015);
    			attr_dev(div0, "class", "svg-wrap");
    			add_location(div0, file$H, 293, 16, 9971);
    			attr_dev(h4, "class", "svelte-16tj9qz");
    			add_location(h4, file$H, 298, 16, 10524);
    			attr_dev(h5, "class", "svelte-16tj9qz");
    			add_location(h5, file$H, 299, 16, 10561);
    			add_location(h30, file$H, 301, 20, 10663);
    			add_location(a0, file$H, 300, 16, 10608);
    			add_location(h31, file$H, 306, 20, 10825);
    			attr_dev(a1, "href", "/manage/accounts/browse");
    			add_location(a1, file$H, 305, 16, 10769);
    			attr_dev(div1, "class", "upload-fail-page svelte-16tj9qz");
    			add_location(div1, file$H, 292, 12, 9923);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			append_dev(div0, svg);
    			append_dev(svg, path);
    			append_dev(div1, t0);
    			append_dev(div1, h4);
    			append_dev(div1, t2);
    			append_dev(div1, h5);
    			append_dev(div1, t4);
    			append_dev(div1, a0);
    			append_dev(a0, h30);
    			append_dev(div1, t6);
    			append_dev(div1, a1);
    			append_dev(a1, h31);

    			if (!mounted) {
    				dispose = listen_dev(a0, "click", /*click_handler_1*/ ctx[12], false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop,
    		i: function intro(local) {
    			if (!path_intro) {
    				add_render_callback(() => {
    					path_intro = create_in_transition(path, draw, { duration: 700, speed: 1 });
    					path_intro.start();
    				});
    			}
    		},
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_catch_block$4.name,
    		type: "catch",
    		source: "(292:8) {:catch error}",
    		ctx
    	});

    	return block;
    }

    // (273:8) {:then result}
    function create_then_block$4(ctx) {
    	let div1;
    	let div0;
    	let svg;
    	let path;
    	let path_intro;
    	let t0;
    	let h4;
    	let t2;
    	let a0;
    	let h30;
    	let t4;
    	let a1;
    	let h31;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			svg = svg_element("svg");
    			path = svg_element("path");
    			t0 = space();
    			h4 = element("h4");
    			h4.textContent = "등록이 끝났습니다!";
    			t2 = space();
    			a0 = element("a");
    			h30 = element("h3");
    			h30.textContent = "돌아가기";
    			t4 = space();
    			a1 = element("a");
    			h31 = element("h3");
    			h31.textContent = "등록 계속하기";
    			attr_dev(path, "stroke-linecap", "round");
    			attr_dev(path, "stroke-linejoin", "round");
    			attr_dev(path, "d", "M4.5 12.75l6 6 9-13.5");
    			add_location(path, file$H, 276, 24, 9344);
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "fill", "none");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			attr_dev(svg, "stroke-width", "1.5");
    			attr_dev(svg, "stroke", "rgb(99, 228, 99)");
    			attr_dev(svg, "height", "100");
    			attr_dev(svg, "width", "100");
    			add_location(svg, file$H, 275, 20, 9176);
    			attr_dev(div0, "class", "svg-wrap");
    			add_location(div0, file$H, 274, 16, 9132);
    			attr_dev(h4, "class", "svelte-16tj9qz");
    			add_location(h4, file$H, 279, 16, 9530);
    			add_location(h30, file$H, 281, 20, 9623);
    			attr_dev(a0, "href", "/manage/accounts/browse");
    			add_location(a0, file$H, 280, 16, 9567);
    			add_location(h31, file$H, 286, 20, 9779);
    			add_location(a1, file$H, 285, 16, 9724);
    			attr_dev(div1, "class", "upload-success-page svelte-16tj9qz");
    			add_location(div1, file$H, 273, 12, 9081);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			append_dev(div0, svg);
    			append_dev(svg, path);
    			append_dev(div1, t0);
    			append_dev(div1, h4);
    			append_dev(div1, t2);
    			append_dev(div1, a0);
    			append_dev(a0, h30);
    			append_dev(div1, t4);
    			append_dev(div1, a1);
    			append_dev(a1, h31);

    			if (!mounted) {
    				dispose = listen_dev(a1, "click", /*click_handler*/ ctx[11], false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop,
    		i: function intro(local) {
    			if (!path_intro) {
    				add_render_callback(() => {
    					path_intro = create_in_transition(path, draw, { duration: 700, speed: 1 });
    					path_intro.start();
    				});
    			}
    		},
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_then_block$4.name,
    		type: "then",
    		source: "(273:8) {:then result}",
    		ctx
    	});

    	return block;
    }

    // (264:31)           <div class="uploading-landing-page">              <div class="svg-wrap">                  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="0.8" stroke="rgb(31, 32, 88)" height="100" width="100">                      <path in:draw={{duration:700, speed: 1}}
    function create_pending_block$4(ctx) {
    	let div1;
    	let div0;
    	let svg;
    	let path;
    	let path_intro;
    	let t0;
    	let h4;

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			svg = svg_element("svg");
    			path = svg_element("path");
    			t0 = space();
    			h4 = element("h4");
    			h4.textContent = "등록 중 입니다";
    			attr_dev(path, "stroke-linecap", "round");
    			attr_dev(path, "stroke-linejoin", "round");
    			attr_dev(path, "d", "M10.05 4.575a1.575 1.575 0 10-3.15 0v3m3.15-3v-1.5a1.575 1.575 0 013.15 0v1.5m-3.15 0l.075 5.925m3.075.75V4.575m0 0a1.575 1.575 0 013.15 0V15M6.9 7.575a1.575 1.575 0 10-3.15 0v8.175a6.75 6.75 0 006.75 6.75h2.018a5.25 5.25 0 003.712-1.538l1.732-1.732a5.25 5.25 0 001.538-3.712l.003-2.024a.668.668 0 01.198-.471 1.575 1.575 0 10-2.228-2.228 3.818 3.818 0 00-1.12 2.687M6.9 7.575V12m6.27 4.318A4.49 4.49 0 0116.35 15m.002 0h-.002");
    			add_location(path, file$H, 267, 20, 8431);
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "fill", "none");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			attr_dev(svg, "stroke-width", "0.8");
    			attr_dev(svg, "stroke", "rgb(31, 32, 88)");
    			attr_dev(svg, "height", "100");
    			attr_dev(svg, "width", "100");
    			add_location(svg, file$H, 266, 16, 8268);
    			attr_dev(div0, "class", "svg-wrap");
    			add_location(div0, file$H, 265, 12, 8228);
    			attr_dev(h4, "class", "svelte-16tj9qz");
    			add_location(h4, file$H, 270, 12, 9010);
    			attr_dev(div1, "class", "uploading-landing-page svelte-16tj9qz");
    			add_location(div1, file$H, 264, 8, 8178);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			append_dev(div0, svg);
    			append_dev(svg, path);
    			append_dev(div1, t0);
    			append_dev(div1, h4);
    		},
    		p: noop,
    		i: function intro(local) {
    			if (!path_intro) {
    				add_render_callback(() => {
    					path_intro = create_in_transition(path, draw, { duration: 700, speed: 1 });
    					path_intro.start();
    				});
    			}
    		},
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_pending_block$4.name,
    		type: "pending",
    		source: "(264:31)           <div class=\\\"uploading-landing-page\\\">              <div class=\\\"svg-wrap\\\">                  <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"none\\\" viewBox=\\\"0 0 24 24\\\" stroke-width=\\\"0.8\\\" stroke=\\\"rgb(31, 32, 88)\\\" height=\\\"100\\\" width=\\\"100\\\">                      <path in:draw={{duration:700, speed: 1}}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$M(ctx) {
    	let div;
    	let current_block_type_index;
    	let if_block;
    	let current;
    	const if_block_creators = [create_if_block$p, create_if_block_1$i];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*stage*/ ctx[0] == 1) return 0;
    		if (/*stage*/ ctx[0] == 2) return 1;
    		return -1;
    	}

    	if (~(current_block_type_index = select_block_type(ctx))) {
    		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (if_block) if_block.c();
    			attr_dev(div, "class", "browse-content-container svelte-16tj9qz");
    			add_location(div, file$H, 228, 0, 5462);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if (~current_block_type_index) {
    					if_blocks[current_block_type_index].p(ctx, dirty);
    				}
    			} else {
    				if (if_block) {
    					group_outros();

    					transition_out(if_blocks[previous_block_index], 1, 1, () => {
    						if_blocks[previous_block_index] = null;
    					});

    					check_outros();
    				}

    				if (~current_block_type_index) {
    					if_block = if_blocks[current_block_type_index];

    					if (!if_block) {
    						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    						if_block.c();
    					} else {
    						if_block.p(ctx, dirty);
    					}

    					transition_in(if_block, 1);
    					if_block.m(div, null);
    				} else {
    					if_block = null;
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].d();
    			}
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$M.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function passHandle$1(e) {
    	let input_name = e.detail.name;
    	pass_list[input_name] = e.detail.pass;
    }

    function changeHandle$1(e, variable) {
    	variable = e.detail.value;
    }

    function changeOptionHandle$1(e, variable) {
    	variable = e.detail.key;
    }

    function instance$M($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('AccountCreateContainer', slots, []);
    	let { stage = 1 } = $$props;
    	let user = {};
    	let fetching = false;
    	var dispatch = createEventDispatcher();

    	function initialize() {
    		if (fetching) {
    			// initializes when fetching
    			// first, initialize all the inputs
    			$$invalidate(1, user.name = '', user);

    			$$invalidate(1, user.affiliation = '', user);
    			$$invalidate(1, user.standing = '', user);
    			$$invalidate(1, user.position = '', user);
    			$$invalidate(1, user.registered_id = '', user);
    			$$invalidate(1, user.password = '', user);
    			$$invalidate(1, user.authority = 1, user);
    			$$invalidate(1, user.ip_address = '', user);

    			// then blank the user object for housekeeping.
    			$$invalidate(1, user = {});
    		}
    	}

    	async function postUser(user) {
    		//if (isValid(user)) {
    		fetching = true;

    		let result = await axios$1.get('http://localhost:4000');
    		initialize();

    		setTimeout(
    			() => {
    				f.goto('/manage/accounts/browse');
    			},
    			2000
    		);

    		fetching = false;
    		return result;
    	} //}

    	const writable_props = ['stage'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<AccountCreateContainer> was created with unknown prop '${key}'`);
    	});

    	const change_handler = e => changeHandle$1(e, user.name);
    	const change_handler_1 = e => changeHandle$1(e, user.affiliation);
    	const change_handler_2 = e => changeHandle$1(e, user.standing);
    	const change_handler_3 = e => changeHandle$1(e, user.position);
    	const change_handler_4 = e => changeHandle$1(e, user.registered_id);
    	const change_handler_5 = e => changeHandle$1(e, user.password);
    	const change_handler_6 = e => changeOptionHandle$1(e, user.authority);
    	const change_handler_7 = e => changeHandle$1(e, user.ip_address);

    	const click_handler = () => {
    		$$invalidate(0, stage -= 1);
    	};

    	const click_handler_1 = () => {
    		$$invalidate(0, stage -= 1);
    	};

    	$$self.$$set = $$props => {
    		if ('stage' in $$props) $$invalidate(0, stage = $$props.stage);
    	};

    	$$self.$capture_state = () => ({
    		Route,
    		router: f,
    		axios: axios$1,
    		createEventDispatcher,
    		onDestroy,
    		onMount,
    		writable,
    		crossfade,
    		draw,
    		flip,
    		InputSingleValue,
    		InputMultiValue,
    		InputCheckboxValue,
    		InputDateValue,
    		InputSelectValue,
    		condition_set,
    		stage,
    		user,
    		fetching,
    		dispatch,
    		passHandle: passHandle$1,
    		changeHandle: changeHandle$1,
    		changeOptionHandle: changeOptionHandle$1,
    		initialize,
    		postUser
    	});

    	$$self.$inject_state = $$props => {
    		if ('stage' in $$props) $$invalidate(0, stage = $$props.stage);
    		if ('user' in $$props) $$invalidate(1, user = $$props.user);
    		if ('fetching' in $$props) fetching = $$props.fetching;
    		if ('dispatch' in $$props) $$invalidate(14, dispatch = $$props.dispatch);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*stage*/ 1) {
    			// stage manager
    			// stage manager manages the logic behind navigation within account create container
    			 {
    				if (stage == 1) {
    					dispatch('stageChange', { stage });
    				} else if (stage == 2) {
    					dispatch('stageChange', { stage });
    				}
    			}
    		}
    	};

    	return [
    		stage,
    		user,
    		postUser,
    		change_handler,
    		change_handler_1,
    		change_handler_2,
    		change_handler_3,
    		change_handler_4,
    		change_handler_5,
    		change_handler_6,
    		change_handler_7,
    		click_handler,
    		click_handler_1
    	];
    }

    class AccountCreateContainer extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$M, create_fragment$M, safe_not_equal, { stage: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "AccountCreateContainer",
    			options,
    			id: create_fragment$M.name
    		});
    	}

    	get stage() {
    		throw new Error("<AccountCreateContainer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set stage(value) {
    		throw new Error("<AccountCreateContainer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* components/manager/ContentTitle/AccountCreateTitle.svelte generated by Svelte v3.50.1 */

    const file$I = "components/manager/ContentTitle/AccountCreateTitle.svelte";

    function create_fragment$N(ctx) {
    	let div2;
    	let h30;
    	let t1;
    	let div1;
    	let div0;
    	let h31;
    	let t2;

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			h30 = element("h3");
    			h30.textContent = "회원 등록";
    			t1 = space();
    			div1 = element("div");
    			div0 = element("div");
    			h31 = element("h3");
    			t2 = text(/*subtitle*/ ctx[0]);
    			attr_dev(h30, "class", "svelte-1wpj7h6");
    			add_location(h30, file$I, 68, 4, 1464);
    			attr_dev(h31, "class", "svelte-1wpj7h6");
    			add_location(h31, file$I, 71, 12, 1575);
    			attr_dev(div0, "class", "keyword-holder-label svelte-1wpj7h6");
    			add_location(div0, file$I, 70, 8, 1527);
    			attr_dev(div1, "class", "keyword-holder-wrap svelte-1wpj7h6");
    			add_location(div1, file$I, 69, 4, 1484);
    			attr_dev(div2, "class", "browse-content-title svelte-1wpj7h6");
    			add_location(div2, file$I, 67, 0, 1424);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, h30);
    			append_dev(div2, t1);
    			append_dev(div2, div1);
    			append_dev(div1, div0);
    			append_dev(div0, h31);
    			append_dev(h31, t2);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*subtitle*/ 1) set_data_dev(t2, /*subtitle*/ ctx[0]);
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$N.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$N($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('AccountCreateTitle', slots, []);
    	let { subtitle = '' } = $$props;
    	const writable_props = ['subtitle'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<AccountCreateTitle> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('subtitle' in $$props) $$invalidate(0, subtitle = $$props.subtitle);
    	};

    	$$self.$capture_state = () => ({ subtitle });

    	$$self.$inject_state = $$props => {
    		if ('subtitle' in $$props) $$invalidate(0, subtitle = $$props.subtitle);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [subtitle];
    }

    class AccountCreateTitle extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$N, create_fragment$N, safe_not_equal, { subtitle: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "AccountCreateTitle",
    			options,
    			id: create_fragment$N.name
    		});
    	}

    	get subtitle() {
    		throw new Error("<AccountCreateTitle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set subtitle(value) {
    		throw new Error("<AccountCreateTitle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* components/manager/CreateViews/AccountCreateView.svelte generated by Svelte v3.50.1 */
    const file$J = "components/manager/CreateViews/AccountCreateView.svelte";

    function create_fragment$O(ctx) {
    	let accountcreatetitle;
    	let t0;
    	let accountcreatecontainer;
    	let t1;
    	let div;
    	let managecreatenavbar;
    	let current;

    	accountcreatetitle = new AccountCreateTitle({
    			props: { subtitle: /*subtitle*/ ctx[1] },
    			$$inline: true
    		});

    	accountcreatecontainer = new AccountCreateContainer({
    			props: { stage: /*stage*/ ctx[0] },
    			$$inline: true
    		});

    	accountcreatecontainer.$on("stageChange", /*stageHandle*/ ctx[2]);

    	managecreatenavbar = new ManageCreateNavbar({
    			props: { stage: /*stage*/ ctx[0] },
    			$$inline: true
    		});

    	managecreatenavbar.$on("stageChange", /*stageHandle*/ ctx[2]);

    	const block = {
    		c: function create() {
    			create_component(accountcreatetitle.$$.fragment);
    			t0 = space();
    			create_component(accountcreatecontainer.$$.fragment);
    			t1 = space();
    			div = element("div");
    			create_component(managecreatenavbar.$$.fragment);
    			attr_dev(div, "class", "bottom-bar svelte-f8j4m1");
    			add_location(div, file$J, 37, 0, 868);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(accountcreatetitle, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(accountcreatecontainer, target, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div, anchor);
    			mount_component(managecreatenavbar, div, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const accountcreatetitle_changes = {};
    			if (dirty & /*subtitle*/ 2) accountcreatetitle_changes.subtitle = /*subtitle*/ ctx[1];
    			accountcreatetitle.$set(accountcreatetitle_changes);
    			const accountcreatecontainer_changes = {};
    			if (dirty & /*stage*/ 1) accountcreatecontainer_changes.stage = /*stage*/ ctx[0];
    			accountcreatecontainer.$set(accountcreatecontainer_changes);
    			const managecreatenavbar_changes = {};
    			if (dirty & /*stage*/ 1) managecreatenavbar_changes.stage = /*stage*/ ctx[0];
    			managecreatenavbar.$set(managecreatenavbar_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(accountcreatetitle.$$.fragment, local);
    			transition_in(accountcreatecontainer.$$.fragment, local);
    			transition_in(managecreatenavbar.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(accountcreatetitle.$$.fragment, local);
    			transition_out(accountcreatecontainer.$$.fragment, local);
    			transition_out(managecreatenavbar.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(accountcreatetitle, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(accountcreatecontainer, detaching);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div);
    			destroy_component(managecreatenavbar);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$O.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function titleChange$2(stage) {
    	if (stage == 1) {
    		return '회원정보 등록';
    	} else if (stage == 2) {
    		return '저장';
    	}

    	return '허가되지 않은 창';
    }

    function instance$O($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('AccountCreateView', slots, []);
    	let subtitle = '';
    	let stage = 1;

    	function stageHandle(e) {
    		$$invalidate(0, stage = e.detail.stage);
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<AccountCreateView> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		AccountCreateContainer,
    		ManageCreateNavbar,
    		AccountCreateTitle,
    		subtitle,
    		stage,
    		stageHandle,
    		titleChange: titleChange$2
    	});

    	$$self.$inject_state = $$props => {
    		if ('subtitle' in $$props) $$invalidate(1, subtitle = $$props.subtitle);
    		if ('stage' in $$props) $$invalidate(0, stage = $$props.stage);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*stage*/ 1) {
    			 {
    				$$invalidate(1, subtitle = titleChange$2(stage));
    			}
    		}
    	};

    	return [stage, subtitle, stageHandle];
    }

    class AccountCreateView extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$O, create_fragment$O, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "AccountCreateView",
    			options,
    			id: create_fragment$O.name
    		});
    	}
    }

    /* components/manager/UserManage/ManageUserMain.svelte generated by Svelte v3.50.1 */
    const file$K = "components/manager/UserManage/ManageUserMain.svelte";

    // (87:12) <Route path="/browse/*">
    function create_default_slot_3$1(ctx) {
    	let browseaccounttitle;
    	let t0;
    	let accountlistcontainer;
    	let t1;
    	let div;
    	let browsenavbar;
    	let current;
    	browseaccounttitle = new BrowseAccountTitle({ $$inline: true });
    	browseaccounttitle.$on("keyword", /*keywordSet*/ ctx[6]);

    	accountlistcontainer = new AccountListContainer({
    			props: {
    				page: /*page*/ ctx[1],
    				keywords: /*keywords*/ ctx[0]
    			},
    			$$inline: true
    		});

    	accountlistcontainer.$on("pageChange", /*pageHandle*/ ctx[4]);
    	accountlistcontainer.$on("focus", /*focusHandle*/ ctx[5]);

    	browsenavbar = new BrowseNavbar({
    			props: {
    				page: /*page*/ ctx[1],
    				focus: /*focus*/ ctx[2]
    			},
    			$$inline: true
    		});

    	browsenavbar.$on("pageChange", /*pageHandle*/ ctx[4]);

    	const block = {
    		c: function create() {
    			create_component(browseaccounttitle.$$.fragment);
    			t0 = space();
    			create_component(accountlistcontainer.$$.fragment);
    			t1 = space();
    			div = element("div");
    			create_component(browsenavbar.$$.fragment);
    			attr_dev(div, "class", "bottom-bar svelte-tnik5k");
    			add_location(div, file$K, 94, 16, 2751);
    		},
    		m: function mount(target, anchor) {
    			mount_component(browseaccounttitle, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(accountlistcontainer, target, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div, anchor);
    			mount_component(browsenavbar, div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const accountlistcontainer_changes = {};
    			if (dirty & /*page*/ 2) accountlistcontainer_changes.page = /*page*/ ctx[1];
    			if (dirty & /*keywords*/ 1) accountlistcontainer_changes.keywords = /*keywords*/ ctx[0];
    			accountlistcontainer.$set(accountlistcontainer_changes);
    			const browsenavbar_changes = {};
    			if (dirty & /*page*/ 2) browsenavbar_changes.page = /*page*/ ctx[1];
    			if (dirty & /*focus*/ 4) browsenavbar_changes.focus = /*focus*/ ctx[2];
    			browsenavbar.$set(browsenavbar_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(browseaccounttitle.$$.fragment, local);
    			transition_in(accountlistcontainer.$$.fragment, local);
    			transition_in(browsenavbar.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(browseaccounttitle.$$.fragment, local);
    			transition_out(accountlistcontainer.$$.fragment, local);
    			transition_out(browsenavbar.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(browseaccounttitle, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(accountlistcontainer, detaching);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div);
    			destroy_component(browsenavbar);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$1.name,
    		type: "slot",
    		source: "(87:12) <Route path=\\\"/browse/*\\\">",
    		ctx
    	});

    	return block;
    }

    // (100:12) <Route path="/access-control/*">
    function create_default_slot_2$1(ctx) {
    	let accesscontrolview;
    	let current;
    	accesscontrolview = new AccessControlView({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(accesscontrolview.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(accesscontrolview, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(accesscontrolview.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(accesscontrolview.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(accesscontrolview, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$1.name,
    		type: "slot",
    		source: "(100:12) <Route path=\\\"/access-control/*\\\">",
    		ctx
    	});

    	return block;
    }

    // (104:12) <Route path="/create/*">
    function create_default_slot_1$1(ctx) {
    	let accountcreateview;
    	let current;
    	accountcreateview = new AccountCreateView({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(accountcreateview.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(accountcreateview, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(accountcreateview.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(accountcreateview.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(accountcreateview, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$1.name,
    		type: "slot",
    		source: "(104:12) <Route path=\\\"/create/*\\\">",
    		ctx
    	});

    	return block;
    }

    // (77:0) <Route path="/*">
    function create_default_slot$3(ctx) {
    	let div0;
    	let managesidebar;
    	let div0_intro;
    	let div0_outro;
    	let t0;
    	let div2;
    	let div1;
    	let route0;
    	let t1;
    	let route1;
    	let t2;
    	let route2;
    	let t3;
    	let route3;
    	let t4;
    	let div3;
    	let userinfo;
    	let div3_intro;
    	let div3_outro;
    	let current;

    	managesidebar = new ManageSidebar({
    			props: { categories: /*categories*/ ctx[3] },
    			$$inline: true
    		});

    	route0 = new Route({
    			props: {
    				path: "/",
    				redirect: "/manage/accounts/browse"
    			},
    			$$inline: true
    		});

    	route1 = new Route({
    			props: {
    				path: "/browse/*",
    				$$slots: { default: [create_default_slot_3$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	route2 = new Route({
    			props: {
    				path: "/access-control/*",
    				$$slots: { default: [create_default_slot_2$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	route3 = new Route({
    			props: {
    				path: "/create/*",
    				$$slots: { default: [create_default_slot_1$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	userinfo = new UserInfo({ $$inline: true });

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			create_component(managesidebar.$$.fragment);
    			t0 = space();
    			div2 = element("div");
    			div1 = element("div");
    			create_component(route0.$$.fragment);
    			t1 = space();
    			create_component(route1.$$.fragment);
    			t2 = space();
    			create_component(route2.$$.fragment);
    			t3 = space();
    			create_component(route3.$$.fragment);
    			t4 = space();
    			div3 = element("div");
    			create_component(userinfo.$$.fragment);
    			attr_dev(div0, "class", "sidebar-wrap");
    			add_location(div0, file$K, 78, 4, 2129);
    			attr_dev(div1, "class", "browse-content-wrap svelte-tnik5k");
    			add_location(div1, file$K, 83, 8, 2330);
    			attr_dev(div2, "class", "manage-content-main svelte-tnik5k");
    			add_location(div2, file$K, 82, 4, 2288);
    			attr_dev(div3, "class", "user-info-wrap");
    			add_location(div3, file$K, 108, 4, 3131);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			mount_component(managesidebar, div0, null);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div1);
    			mount_component(route0, div1, null);
    			append_dev(div1, t1);
    			mount_component(route1, div1, null);
    			append_dev(div1, t2);
    			mount_component(route2, div1, null);
    			append_dev(div1, t3);
    			mount_component(route3, div1, null);
    			insert_dev(target, t4, anchor);
    			insert_dev(target, div3, anchor);
    			mount_component(userinfo, div3, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const route1_changes = {};

    			if (dirty & /*$$scope, page, focus, keywords*/ 4103) {
    				route1_changes.$$scope = { dirty, ctx };
    			}

    			route1.$set(route1_changes);
    			const route2_changes = {};

    			if (dirty & /*$$scope*/ 4096) {
    				route2_changes.$$scope = { dirty, ctx };
    			}

    			route2.$set(route2_changes);
    			const route3_changes = {};

    			if (dirty & /*$$scope*/ 4096) {
    				route3_changes.$$scope = { dirty, ctx };
    			}

    			route3.$set(route3_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(managesidebar.$$.fragment, local);

    			add_render_callback(() => {
    				if (div0_outro) div0_outro.end(1);
    				div0_intro = create_in_transition(div0, fly, { duration: 200, x: -400, y: 0 });
    				div0_intro.start();
    			});

    			transition_in(route0.$$.fragment, local);
    			transition_in(route1.$$.fragment, local);
    			transition_in(route2.$$.fragment, local);
    			transition_in(route3.$$.fragment, local);
    			transition_in(userinfo.$$.fragment, local);

    			add_render_callback(() => {
    				if (div3_outro) div3_outro.end(1);
    				div3_intro = create_in_transition(div3, fly, { duration: 200, x: +400, y: 0 });
    				div3_intro.start();
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(managesidebar.$$.fragment, local);
    			if (div0_intro) div0_intro.invalidate();
    			div0_outro = create_out_transition(div0, fade, { duration: 10 });
    			transition_out(route0.$$.fragment, local);
    			transition_out(route1.$$.fragment, local);
    			transition_out(route2.$$.fragment, local);
    			transition_out(route3.$$.fragment, local);
    			transition_out(userinfo.$$.fragment, local);
    			if (div3_intro) div3_intro.invalidate();
    			div3_outro = create_out_transition(div3, fade, { duration: 10 });
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			destroy_component(managesidebar);
    			if (detaching && div0_outro) div0_outro.end();
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div2);
    			destroy_component(route0);
    			destroy_component(route1);
    			destroy_component(route2);
    			destroy_component(route3);
    			if (detaching) detach_dev(t4);
    			if (detaching) detach_dev(div3);
    			destroy_component(userinfo);
    			if (detaching && div3_outro) div3_outro.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$3.name,
    		type: "slot",
    		source: "(77:0) <Route path=\\\"/*\\\">",
    		ctx
    	});

    	return block;
    }

    function create_fragment$P(ctx) {
    	let route;
    	let current;

    	route = new Route({
    			props: {
    				path: "/*",
    				$$slots: { default: [create_default_slot$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(route.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(route, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const route_changes = {};

    			if (dirty & /*$$scope, page, focus, keywords*/ 4103) {
    				route_changes.$$scope = { dirty, ctx };
    			}

    			route.$set(route_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(route.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(route.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(route, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$P.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$P($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ManageUserMain', slots, []);
    	let keywords = ['#사용자_전체'];

    	let categories = [
    		{
    			name: "회원관리",
    			sub_category: [
    				{
    					name: "회원 조회",
    					path: "/manage/accounts/browse"
    				},
    				{
    					name: "회원 생성",
    					path: "/manage/accounts/create"
    				},
    				{
    					name: "기록물 접근 관리",
    					path: "/manage/accounts/access-control"
    				}
    			]
    		},
    		{
    			name: "소속관리",
    			sub_category: [
    				{
    					name: "소속 조회",
    					path: "/manage/accounts/affiliations"
    				},
    				{
    					name: "소속 생성",
    					path: "/user/accounts/affiliations/revise"
    				}
    			]
    		}
    	];

    	let selected_index = null;
    	let page = 1;
    	let stage = 1;
    	let focus = false;
    	let view = "box";

    	function categorySelect(e) {
    		selected_index = e.detail.index;
    	}

    	function pageHandle(e) {
    		$$invalidate(1, page = e.detail.page);
    	}

    	function focusHandle(e) {
    		$$invalidate(2, focus = e.detail.focus);
    	}

    	function viewHandle(e) {
    		view = e.detail.view;
    	}

    	function keywordSet(e) {
    		$$invalidate(0, keywords = e.detail.keywords);
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ManageUserMain> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		ManageSidebar,
    		BrowseAccountTitle,
    		AccountListContainer,
    		BrowseNavbar,
    		UserInfo,
    		NotReadyView,
    		AccessControlView,
    		AccountCreateView,
    		meta: O,
    		Route,
    		fly,
    		fade,
    		keywords,
    		categories,
    		selected_index,
    		page,
    		stage,
    		focus,
    		view,
    		categorySelect,
    		pageHandle,
    		focusHandle,
    		viewHandle,
    		keywordSet
    	});

    	$$self.$inject_state = $$props => {
    		if ('keywords' in $$props) $$invalidate(0, keywords = $$props.keywords);
    		if ('categories' in $$props) $$invalidate(3, categories = $$props.categories);
    		if ('selected_index' in $$props) selected_index = $$props.selected_index;
    		if ('page' in $$props) $$invalidate(1, page = $$props.page);
    		if ('stage' in $$props) stage = $$props.stage;
    		if ('focus' in $$props) $$invalidate(2, focus = $$props.focus);
    		if ('view' in $$props) view = $$props.view;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [keywords, page, focus, categories, pageHandle, focusHandle, keywordSet];
    }

    class ManageUserMain extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$P, create_fragment$P, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ManageUserMain",
    			options,
    			id: create_fragment$P.name
    		});
    	}
    }

    /* pages/Help.svelte generated by Svelte v3.50.1 */

    function create_fragment$Q(ctx) {
    	const block = {
    		c: noop,
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: noop,
    		p: noop,
    		i: noop,
    		o: noop,
    		d: noop
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$Q.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$Q($$self, $$props) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Help', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Help> was created with unknown prop '${key}'`);
    	});

    	return [];
    }

    class Help extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$Q, create_fragment$Q, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Help",
    			options,
    			id: create_fragment$Q.name
    		});
    	}
    }

    /* pages/Stats.svelte generated by Svelte v3.50.1 */

    function create_fragment$R(ctx) {
    	const block = {
    		c: noop,
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: noop,
    		p: noop,
    		i: noop,
    		o: noop,
    		d: noop
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$R.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$R($$self, $$props) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Stats', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Stats> was created with unknown prop '${key}'`);
    	});

    	return [];
    }

    class Stats extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$R, create_fragment$R, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Stats",
    			options,
    			id: create_fragment$R.name
    		});
    	}
    }

    /* App.svelte generated by Svelte v3.50.1 */
    const file$L = "App.svelte";

    // (94:4) <Route path="/" redirect="/user">
    function create_default_slot_9(ctx) {
    	let usermain;
    	let current;
    	usermain = new UserMain({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(usermain.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(usermain, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(usermain.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(usermain.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(usermain, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_9.name,
    		type: "slot",
    		source: "(94:4) <Route path=\\\"/\\\" redirect=\\\"/user\\\">",
    		ctx
    	});

    	return block;
    }

    // (102:8) <Route path="/login">
    function create_default_slot_8(ctx) {
    	let login;
    	let current;
    	login = new Login({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(login.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(login, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(login.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(login.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(login, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_8.name,
    		type: "slot",
    		source: "(102:8) <Route path=\\\"/login\\\">",
    		ctx
    	});

    	return block;
    }

    // (100:4) <Route path="/auth/*">
    function create_default_slot_7(ctx) {
    	let route;
    	let current;

    	route = new Route({
    			props: {
    				path: "/login",
    				$$slots: { default: [create_default_slot_8] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(route.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(route, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const route_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				route_changes.$$scope = { dirty, ctx };
    			}

    			route.$set(route_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(route.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(route.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(route, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_7.name,
    		type: "slot",
    		source: "(100:4) <Route path=\\\"/auth/*\\\">",
    		ctx
    	});

    	return block;
    }

    // (113:8) <Route path="/">
    function create_default_slot_6(ctx) {
    	let usermain;
    	let current;
    	usermain = new UserMain({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(usermain.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(usermain, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(usermain.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(usermain.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(usermain, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_6.name,
    		type: "slot",
    		source: "(113:8) <Route path=\\\"/\\\">",
    		ctx
    	});

    	return block;
    }

    // (117:8) <Route path="/browse/*">
    function create_default_slot_5(ctx) {
    	let usernavbar;
    	let t;
    	let browse;
    	let current;
    	usernavbar = new UserNavbar({ $$inline: true });
    	browse = new Browse({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(usernavbar.$$.fragment);
    			t = space();
    			create_component(browse.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(usernavbar, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(browse, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(usernavbar.$$.fragment, local);
    			transition_in(browse.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(usernavbar.$$.fragment, local);
    			transition_out(browse.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(usernavbar, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(browse, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_5.name,
    		type: "slot",
    		source: "(117:8) <Route path=\\\"/browse/*\\\">",
    		ctx
    	});

    	return block;
    }

    // (111:4) <Route path="/user/*">
    function create_default_slot_4(ctx) {
    	let route0;
    	let t;
    	let route1;
    	let current;

    	route0 = new Route({
    			props: {
    				path: "/",
    				$$slots: { default: [create_default_slot_6] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	route1 = new Route({
    			props: {
    				path: "/browse/*",
    				$$slots: { default: [create_default_slot_5] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(route0.$$.fragment);
    			t = space();
    			create_component(route1.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(route0, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(route1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const route0_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				route0_changes.$$scope = { dirty, ctx };
    			}

    			route0.$set(route0_changes);
    			const route1_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				route1_changes.$$scope = { dirty, ctx };
    			}

    			route1.$set(route1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(route0.$$.fragment, local);
    			transition_in(route1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(route0.$$.fragment, local);
    			transition_out(route1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(route0, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(route1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4.name,
    		type: "slot",
    		source: "(111:4) <Route path=\\\"/user/*\\\">",
    		ctx
    	});

    	return block;
    }

    // (128:8) <Route path="/">
    function create_default_slot_3$2(ctx) {
    	let managemain;
    	let current;
    	managemain = new ManageMain({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(managemain.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(managemain, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(managemain.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(managemain.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(managemain, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$2.name,
    		type: "slot",
    		source: "(128:8) <Route path=\\\"/\\\">",
    		ctx
    	});

    	return block;
    }

    // (132:8) <Route path="/cases/*">
    function create_default_slot_2$2(ctx) {
    	let managebrowse;
    	let current;
    	managebrowse = new ManageBrowse({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(managebrowse.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(managebrowse, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(managebrowse.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(managebrowse.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(managebrowse, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$2.name,
    		type: "slot",
    		source: "(132:8) <Route path=\\\"/cases/*\\\">",
    		ctx
    	});

    	return block;
    }

    // (136:8) <Route path="/accounts/*">
    function create_default_slot_1$2(ctx) {
    	let manageusermain;
    	let current;
    	manageusermain = new ManageUserMain({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(manageusermain.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(manageusermain, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(manageusermain.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(manageusermain.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(manageusermain, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$2.name,
    		type: "slot",
    		source: "(136:8) <Route path=\\\"/accounts/*\\\">",
    		ctx
    	});

    	return block;
    }

    // (124:4) <Route path="/manage/*">
    function create_default_slot$4(ctx) {
    	let managenavbar;
    	let t0;
    	let route0;
    	let t1;
    	let route1;
    	let t2;
    	let route2;
    	let current;
    	managenavbar = new ManageNavbar({ $$inline: true });

    	route0 = new Route({
    			props: {
    				path: "/",
    				$$slots: { default: [create_default_slot_3$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	route1 = new Route({
    			props: {
    				path: "/cases/*",
    				$$slots: { default: [create_default_slot_2$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	route2 = new Route({
    			props: {
    				path: "/accounts/*",
    				$$slots: { default: [create_default_slot_1$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(managenavbar.$$.fragment);
    			t0 = space();
    			create_component(route0.$$.fragment);
    			t1 = space();
    			create_component(route1.$$.fragment);
    			t2 = space();
    			create_component(route2.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(managenavbar, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(route0, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(route1, target, anchor);
    			insert_dev(target, t2, anchor);
    			mount_component(route2, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const route0_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				route0_changes.$$scope = { dirty, ctx };
    			}

    			route0.$set(route0_changes);
    			const route1_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				route1_changes.$$scope = { dirty, ctx };
    			}

    			route1.$set(route1_changes);
    			const route2_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				route2_changes.$$scope = { dirty, ctx };
    			}

    			route2.$set(route2_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(managenavbar.$$.fragment, local);
    			transition_in(route0.$$.fragment, local);
    			transition_in(route1.$$.fragment, local);
    			transition_in(route2.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(managenavbar.$$.fragment, local);
    			transition_out(route0.$$.fragment, local);
    			transition_out(route1.$$.fragment, local);
    			transition_out(route2.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(managenavbar, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(route0, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(route1, detaching);
    			if (detaching) detach_dev(t2);
    			destroy_component(route2, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$4.name,
    		type: "slot",
    		source: "(124:4) <Route path=\\\"/manage/*\\\">",
    		ctx
    	});

    	return block;
    }

    function create_fragment$S(ctx) {
    	let main;
    	let route0;
    	let t0;
    	let route1;
    	let t1;
    	let route2;
    	let t2;
    	let route3;
    	let t3;
    	let footer;
    	let current;

    	route0 = new Route({
    			props: {
    				path: "/",
    				redirect: "/user",
    				$$slots: { default: [create_default_slot_9] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	route1 = new Route({
    			props: {
    				path: "/auth/*",
    				$$slots: { default: [create_default_slot_7] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	route2 = new Route({
    			props: {
    				path: "/user/*",
    				$$slots: { default: [create_default_slot_4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	route3 = new Route({
    			props: {
    				path: "/manage/*",
    				$$slots: { default: [create_default_slot$4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	footer = new Footer({ $$inline: true });

    	const block = {
    		c: function create() {
    			main = element("main");
    			create_component(route0.$$.fragment);
    			t0 = space();
    			create_component(route1.$$.fragment);
    			t1 = space();
    			create_component(route2.$$.fragment);
    			t2 = space();
    			create_component(route3.$$.fragment);
    			t3 = space();
    			create_component(footer.$$.fragment);
    			attr_dev(main, "class", "svelte-1rgr3hj");
    			add_location(main, file$L, 92, 0, 2068);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, main, anchor);
    			mount_component(route0, main, null);
    			append_dev(main, t0);
    			mount_component(route1, main, null);
    			append_dev(main, t1);
    			mount_component(route2, main, null);
    			append_dev(main, t2);
    			mount_component(route3, main, null);
    			append_dev(main, t3);
    			mount_component(footer, main, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const route0_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				route0_changes.$$scope = { dirty, ctx };
    			}

    			route0.$set(route0_changes);
    			const route1_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				route1_changes.$$scope = { dirty, ctx };
    			}

    			route1.$set(route1_changes);
    			const route2_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				route2_changes.$$scope = { dirty, ctx };
    			}

    			route2.$set(route2_changes);
    			const route3_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				route3_changes.$$scope = { dirty, ctx };
    			}

    			route3.$set(route3_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(route0.$$.fragment, local);
    			transition_in(route1.$$.fragment, local);
    			transition_in(route2.$$.fragment, local);
    			transition_in(route3.$$.fragment, local);
    			transition_in(footer.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(route0.$$.fragment, local);
    			transition_out(route1.$$.fragment, local);
    			transition_out(route2.$$.fragment, local);
    			transition_out(route3.$$.fragment, local);
    			transition_out(footer.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(main);
    			destroy_component(route0);
    			destroy_component(route1);
    			destroy_component(route2);
    			destroy_component(route3);
    			destroy_component(footer);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$S.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$S($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('App', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<App> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		Route,
    		UserNavbar,
    		ManageNavbar,
    		Footer,
    		UserMain,
    		Login,
    		Browse,
    		ManageMain,
    		ManageBrowse,
    		ManageUserMain,
    		Help,
    		Stats
    	});

    	return [];
    }

    class App extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$S, create_fragment$S, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "App",
    			options,
    			id: create_fragment$S.name
    		});
    	}
    }

    const app = new App({
      target: document.body
    });

    return app;

}());
//# sourceMappingURL=bundle.js.map
